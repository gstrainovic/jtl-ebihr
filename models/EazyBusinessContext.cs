using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace jtl_ebihr;

public partial class EazyBusinessContext : DbContext
{
    public EazyBusinessContext()
    {
    }

    public EazyBusinessContext(DbContextOptions<EazyBusinessContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AccountDatum> AccountData { get; set; }

    public virtual DbSet<AmeiseExporttyp> AmeiseExporttyps { get; set; }

    public virtual DbSet<AmeiseExportvorgang> AmeiseExportvorgangs { get; set; }

    public virtual DbSet<AmeiseExportvorlage> AmeiseExportvorlages { get; set; }

    public virtual DbSet<AmeiseExportvorlagefeld> AmeiseExportvorlagefelds { get; set; }

    public virtual DbSet<AmeiseExportvorlagefilter> AmeiseExportvorlagefilters { get; set; }

    public virtual DbSet<AmeiseExportvorlagefilterext> AmeiseExportvorlagefilterexts { get; set; }

    public virtual DbSet<AmeiseExportvorlagefilterfeld> AmeiseExportvorlagefilterfelds { get; set; }

    public virtual DbSet<AmeiseImportdurchgang> AmeiseImportdurchgangs { get; set; }

    public virtual DbSet<AmeiseImportdurchgangartikel> AmeiseImportdurchgangartikels { get; set; }

    public virtual DbSet<AmeiseImporttyp> AmeiseImporttyps { get; set; }

    public virtual DbSet<AmeiseImporttypeinstellung> AmeiseImporttypeinstellungs { get; set; }

    public virtual DbSet<AmeiseImporttypeinstellungwert> AmeiseImporttypeinstellungwerts { get; set; }

    public virtual DbSet<AmeiseImporttypfeld> AmeiseImporttypfelds { get; set; }

    public virtual DbSet<AmeiseImportvorgang> AmeiseImportvorgangs { get; set; }

    public virtual DbSet<AmeiseImportvorlage> AmeiseImportvorlages { get; set; }

    public virtual DbSet<AmeiseImportvorlageeinstellung> AmeiseImportvorlageeinstellungs { get; set; }

    public virtual DbSet<AmeiseImportvorlagefeld> AmeiseImportvorlagefelds { get; set; }

    public virtual DbSet<AmeiseImportvorlagefeldp> AmeiseImportvorlagefeldps { get; set; }

    public virtual DbSet<AmeiseImportvorlagefilter> AmeiseImportvorlagefilters { get; set; }

    public virtual DbSet<AmeiseUpdateOptimizer> AmeiseUpdateOptimizers { get; set; }

    public virtual DbSet<ArtikelBildShop> ArtikelBildShops { get; set; }

    public virtual DbSet<Artikelzustand> Artikelzustands { get; set; }

    public virtual DbSet<BestellposTypenName> BestellposTypenNames { get; set; }

    public virtual DbSet<BinLocation> BinLocations { get; set; }

    public virtual DbSet<BinLocation1> BinLocations1 { get; set; }

    public virtual DbSet<BinLocationItem> BinLocationItems { get; set; }

    public virtual DbSet<Carrier> Carriers { get; set; }

    public virtual DbSet<CarrierName> CarrierNames { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<CategoryName> CategoryNames { get; set; }

    public virtual DbSet<CategoryProperty> CategoryProperties { get; set; }

    public virtual DbSet<CategoryPropertyName> CategoryPropertyNames { get; set; }

    public virtual DbSet<CategoryPropertyValueName> CategoryPropertyValueNames { get; set; }

    public virtual DbSet<Company> Companies { get; set; }

    public virtual DbSet<Company1> Companies1 { get; set; }

    public virtual DbSet<CostType> CostTypes { get; set; }

    public virtual DbSet<Country> Countries { get; set; }

    public virtual DbSet<CountryName> CountryNames { get; set; }

    public virtual DbSet<Currency> Currencies { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<Customer1> Customers1 { get; set; }

    public virtual DbSet<CustomerAddressDelivery> CustomerAddressDeliveries { get; set; }

    public virtual DbSet<CustomerAddressInvoice> CustomerAddressInvoices { get; set; }

    public virtual DbSet<CustomerAttribute> CustomerAttributes { get; set; }

    public virtual DbSet<CustomerBillToAddress> CustomerBillToAddresses { get; set; }

    public virtual DbSet<CustomerCategory> CustomerCategories { get; set; }

    public virtual DbSet<CustomerCategoryName> CustomerCategoryNames { get; set; }

    public virtual DbSet<CustomerCreditNote> CustomerCreditNotes { get; set; }

    public virtual DbSet<CustomerCreditNotePo> CustomerCreditNotePos { get; set; }

    public virtual DbSet<CustomerGroup> CustomerGroups { get; set; }

    public virtual DbSet<CustomerGroup1> CustomerGroups1 { get; set; }

    public virtual DbSet<CustomerGroupName> CustomerGroupNames { get; set; }

    public virtual DbSet<CustomerGroupProperty> CustomerGroupProperties { get; set; }

    public virtual DbSet<CustomerGroupPropertyName> CustomerGroupPropertyNames { get; set; }

    public virtual DbSet<CustomerGroupPropertyValueName> CustomerGroupPropertyValueNames { get; set; }

    public virtual DbSet<CustomerInvoice> CustomerInvoices { get; set; }

    public virtual DbSet<CustomerInvoicePo> CustomerInvoicePos { get; set; }

    public virtual DbSet<CustomerOrder> CustomerOrders { get; set; }

    public virtual DbSet<CustomerOrderCost> CustomerOrderCosts { get; set; }

    public virtual DbSet<CustomerOrderPo> CustomerOrderPos { get; set; }

    public virtual DbSet<CustomerOrderProperty> CustomerOrderProperties { get; set; }

    public virtual DbSet<CustomerOrderPropertyName> CustomerOrderPropertyNames { get; set; }

    public virtual DbSet<CustomerOrderPropertyValueName> CustomerOrderPropertyValueNames { get; set; }

    public virtual DbSet<CustomerOtherAddress> CustomerOtherAddresses { get; set; }

    public virtual DbSet<CustomerProperty> CustomerProperties { get; set; }

    public virtual DbSet<CustomerPropertyName> CustomerPropertyNames { get; set; }

    public virtual DbSet<CustomerPropertyValueName> CustomerPropertyValueNames { get; set; }

    public virtual DbSet<CustomerReturn> CustomerReturns { get; set; }

    public virtual DbSet<CustomerReturnPo> CustomerReturnPos { get; set; }

    public virtual DbSet<CustomerShipToAddress> CustomerShipToAddresses { get; set; }

    public virtual DbSet<DeliveryNote> DeliveryNotes { get; set; }

    public virtual DbSet<DeliveryNote1> DeliveryNotes1 { get; set; }

    public virtual DbSet<DeliveryNoteBillToAddress> DeliveryNoteBillToAddresses { get; set; }

    public virtual DbSet<DeliveryNoteFbabarcode> DeliveryNoteFbabarcodes { get; set; }

    public virtual DbSet<DeliveryNotePo> DeliveryNotePos { get; set; }

    public virtual DbSet<DeliveryNotePosition> DeliveryNotePositions { get; set; }

    public virtual DbSet<DeliveryNotePositionConfiguration> DeliveryNotePositionConfigurations { get; set; }

    public virtual DbSet<DeliveryNotePositionDeliveryDetail> DeliveryNotePositionDeliveryDetails { get; set; }

    public virtual DbSet<DeliveryNoteShipToAddress> DeliveryNoteShipToAddresses { get; set; }

    public virtual DbSet<Dunning> Dunnings { get; set; }

    public virtual DbSet<DunningInvoice> DunningInvoices { get; set; }

    public virtual DbSet<DunningInvoiceBillToAddress> DunningInvoiceBillToAddresses { get; set; }

    public virtual DbSet<DunningInvoicePayment> DunningInvoicePayments { get; set; }

    public virtual DbSet<EbayAlienitem> EbayAlienitems { get; set; }

    public virtual DbSet<EbayAttributSetArray> EbayAttributSetArrays { get; set; }

    public virtual DbSet<EbayBeschreibungstemplate> EbayBeschreibungstemplates { get; set; }

    public virtual DbSet<EbayBestoffer> EbayBestoffers { get; set; }

    public virtual DbSet<EbayBuyer> EbayBuyers { get; set; }

    public virtual DbSet<EbayCheckout> EbayCheckouts { get; set; }

    public virtual DbSet<EbayCheckoutpo> EbayCheckoutpos { get; set; }

    public virtual DbSet<EbayCoposeigenschaft> EbayCoposeigenschafts { get; set; }

    public virtual DbSet<EbayDataFeedback> EbayDataFeedbacks { get; set; }

    public virtual DbSet<EbayDataFeedbackIn> EbayDataFeedbackIns { get; set; }

    public virtual DbSet<EbayDataFeedbackOut> EbayDataFeedbackOuts { get; set; }

    public virtual DbSet<EbayDataFeedbackmgr> EbayDataFeedbackmgrs { get; set; }

    public virtual DbSet<EbayDataHtmltemplatetagcontent> EbayDataHtmltemplatetagcontents { get; set; }

    public virtual DbSet<EbayDataMembermessageIn> EbayDataMembermessageIns { get; set; }

    public virtual DbSet<EbayDataMembermessageOut> EbayDataMembermessageOuts { get; set; }

    public virtual DbSet<EbayDataStore> EbayDataStores { get; set; }

    public virtual DbSet<EbayDeAttribute> EbayDeAttributes { get; set; }

    public virtual DbSet<EbayDeCategory> EbayDeCategories { get; set; }

    public virtual DbSet<EbayDeCategory2C> EbayDeCategory2Cs { get; set; }

    public virtual DbSet<EbayDeCondition> EbayDeConditions { get; set; }

    public virtual DbSet<EbayDeDependency> EbayDeDependencies { get; set; }

    public virtual DbSet<EbayDeGebAngebotsgebuehr> EbayDeGebAngebotsgebuehrs { get; set; }

    public virtual DbSet<EbayDeGebAngebotsgebuehrausnahman> EbayDeGebAngebotsgebuehrausnahmen { get; set; }

    public virtual DbSet<EbayDeGebErweiterungen> EbayDeGebErweiterungens { get; set; }

    public virtual DbSet<EbayDeI> EbayDeIs { get; set; }

    public virtual DbSet<EbayDeIsglobalname> EbayDeIsglobalnames { get; set; }

    public virtual DbSet<EbayDeIsglobalvalue> EbayDeIsglobalvalues { get; set; }

    public virtual DbSet<EbayDeIsrelation> EbayDeIsrelations { get; set; }

    public virtual DbSet<EbayDeIsvalue> EbayDeIsvalues { get; set; }

    public virtual DbSet<EbayDeLaender> EbayDeLaenders { get; set; }

    public virtual DbSet<EbayDeSidewideC> EbayDeSidewideCs { get; set; }

    public virtual DbSet<EbayDeSidewideExCategory> EbayDeSidewideExCategories { get; set; }

    public virtual DbSet<EbayDeUpdateTable> EbayDeUpdateTables { get; set; }

    public virtual DbSet<EbayDeValidationrule> EbayDeValidationrules { get; set; }

    public virtual DbSet<EbayDeValue> EbayDeValues { get; set; }

    public virtual DbSet<EbayDeVersandarten> EbayDeVersandartens { get; set; }

    public virtual DbSet<EbayDeVersandlaender> EbayDeVersandlaenders { get; set; }

    public virtual DbSet<EbayDeVersion> EbayDeVersions { get; set; }

    public virtual DbSet<EbayDeWaehrung> EbayDeWaehrungs { get; set; }

    public virtual DbSet<EbayDeZahlungsmethoden> EbayDeZahlungsmethodens { get; set; }

    public virtual DbSet<EbayDeleteCoPo> EbayDeleteCoPos { get; set; }

    public virtual DbSet<EbayEinstellungen> EbayEinstellungens { get; set; }

    public virtual DbSet<EbayGeaenderteLaufendeAngebote> EbayGeaenderteLaufendeAngebotes { get; set; }

    public virtual DbSet<EbayGlobaletexte> EbayGlobaletextes { get; set; }

    public virtual DbSet<EbayInternationalShippingServiceOption> EbayInternationalShippingServiceOptions { get; set; }

    public virtual DbSet<EbayItem> EbayItems { get; set; }

    public virtual DbSet<EbayItem2kombi> EbayItem2kombis { get; set; }

    public virtual DbSet<EbayItem2xsell> EbayItem2xsells { get; set; }

    public virtual DbSet<EbayItemAdderror> EbayItemAdderrors { get; set; }

    public virtual DbSet<EbayItemDuplicateLog> EbayItemDuplicateLogs { get; set; }

    public virtual DbSet<EbayItemReviseerror> EbayItemReviseerrors { get; set; }

    public virtual DbSet<EbayItemcompBike> EbayItemcompBikes { get; set; }

    public virtual DbSet<EbayItemcompatibility> EbayItemcompatibilities { get; set; }

    public virtual DbSet<EbayLastSynch> EbayLastSynches { get; set; }

    public virtual DbSet<EbayLeecherVariationMapping> EbayLeecherVariationMappings { get; set; }

    public virtual DbSet<EbayLog> EbayLogs { get; set; }

    public virtual DbSet<EbayLogbuch> EbayLogbuches { get; set; }

    public virtual DbSet<EbayMapitem> EbayMapitems { get; set; }

    public virtual DbSet<EbayMapitemArtikelZuordnungen> EbayMapitemArtikelZuordnungens { get; set; }

    public virtual DbSet<EbayMapitemSuchString> EbayMapitemSuchStrings { get; set; }

    public virtual DbSet<EbayPlanung> EbayPlanungs { get; set; }

    public virtual DbSet<EbayQueueOut> EbayQueueOuts { get; set; }

    public virtual DbSet<EbayShippingCarrierCode> EbayShippingCarrierCodes { get; set; }

    public virtual DbSet<EbayShippingServiceOption> EbayShippingServiceOptions { get; set; }

    public virtual DbSet<EbayShippingprofile> EbayShippingprofiles { get; set; }

    public virtual DbSet<EbayShopCategory> EbayShopCategories { get; set; }

    public virtual DbSet<EbaySpecific> EbaySpecifics { get; set; }

    public virtual DbSet<EbaySynch> EbaySynches { get; set; }

    public virtual DbSet<EbaySynchartikel> EbaySynchartikels { get; set; }

    public virtual DbSet<EbayTransaction> EbayTransactions { get; set; }

    public virtual DbSet<EbayTransactionDeleted> EbayTransactionDeleteds { get; set; }

    public virtual DbSet<EbayUser> EbayUsers { get; set; }

    public virtual DbSet<EbayUsermessagequeue> EbayUsermessagequeues { get; set; }

    public virtual DbSet<EbayUserprofile> EbayUserprofiles { get; set; }

    public virtual DbSet<EbayUsersite> EbayUsersites { get; set; }

    public virtual DbSet<EbayUsertexte> EbayUsertextes { get; set; }

    public virtual DbSet<EbayVersandOut> EbayVersandOuts { get; set; }

    public virtual DbSet<EbayVersandZahlung> EbayVersandZahlungs { get; set; }

    public virtual DbSet<EbayVwEignertext> EbayVwEignertexts { get; set; }

    public virtual DbSet<EbayVwHtmltemplate> EbayVwHtmltemplates { get; set; }

    public virtual DbSet<EbayVwHtmltemplatedatum> EbayVwHtmltemplatedata { get; set; }

    public virtual DbSet<EbayVwHtmltemplatepreview> EbayVwHtmltemplatepreviews { get; set; }

    public virtual DbSet<EbayVwHtmltemplaterendered> EbayVwHtmltemplaterendereds { get; set; }

    public virtual DbSet<EbayVwHtmltemplatetag> EbayVwHtmltemplatetags { get; set; }

    public virtual DbSet<EbayXxBearbeitungszeiten> EbayXxBearbeitungszeitens { get; set; }

    public virtual DbSet<EbayXxCategory> EbayXxCategories { get; set; }

    public virtual DbSet<EbayXxCondition> EbayXxConditions { get; set; }

    public virtual DbSet<EbayXxI> EbayXxIs { get; set; }

    public virtual DbSet<EbayXxIsglobalname> EbayXxIsglobalnames { get; set; }

    public virtual DbSet<EbayXxIsglobalvalue> EbayXxIsglobalvalues { get; set; }

    public virtual DbSet<EbayXxIsrelation> EbayXxIsrelations { get; set; }

    public virtual DbSet<EbayXxIsvalue> EbayXxIsvalues { get; set; }

    public virtual DbSet<EbayXxLaufzeiten> EbayXxLaufzeitens { get; set; }

    public virtual DbSet<EbayXxRueckgabe> EbayXxRueckgabes { get; set; }

    public virtual DbSet<EbayXxSite> EbayXxSites { get; set; }

    public virtual DbSet<EbayXxVersandarten> EbayXxVersandartens { get; set; }

    public virtual DbSet<EbayXxVersandlaender> EbayXxVersandlaenders { get; set; }

    public virtual DbSet<EbayXxZahlungsmethoden> EbayXxZahlungsmethodens { get; set; }

    public virtual DbSet<EbayZahlungOut> EbayZahlungOuts { get; set; }

    public virtual DbSet<ExternalInvoice> ExternalInvoices { get; set; }

    public virtual DbSet<ExternalInvoicePosition> ExternalInvoicePositions { get; set; }

    public virtual DbSet<FulfillerPoductAttributeForFfnMapping> FulfillerPoductAttributeForFfnMappings { get; set; }

    public virtual DbSet<FulfilmentOrder> FulfilmentOrders { get; set; }

    public virtual DbSet<FulfilmentOrderPosition> FulfilmentOrderPositions { get; set; }

    public virtual DbSet<FulfilmentOrderShipToAddress> FulfilmentOrderShipToAddresses { get; set; }

    public virtual DbSet<GoodsIn> GoodsIns { get; set; }

    public virtual DbSet<GoodsOut> GoodsOuts { get; set; }

    public virtual DbSet<GroupOfProduct> GroupOfProducts { get; set; }

    public virtual DbSet<GroupOfProductsName> GroupOfProductsNames { get; set; }

    public virtual DbSet<InventoryDifferenceList> InventoryDifferenceLists { get; set; }

    public virtual DbSet<InventoryDifferenceListPosition> InventoryDifferenceListPositions { get; set; }

    public virtual DbSet<Invoice> Invoices { get; set; }

    public virtual DbSet<InvoiceBillToAddress> InvoiceBillToAddresses { get; set; }

    public virtual DbSet<InvoiceCorrection> InvoiceCorrections { get; set; }

    public virtual DbSet<InvoiceCorrectionBillToAddress> InvoiceCorrectionBillToAddresses { get; set; }

    public virtual DbSet<InvoiceCorrectionPosition> InvoiceCorrectionPositions { get; set; }

    public virtual DbSet<InvoiceCorrectionPositionConfiguration> InvoiceCorrectionPositionConfigurations { get; set; }

    public virtual DbSet<InvoiceCorrectionPositionDeliveryDetail> InvoiceCorrectionPositionDeliveryDetails { get; set; }

    public virtual DbSet<InvoicePayment> InvoicePayments { get; set; }

    public virtual DbSet<InvoicePaymentInformation> InvoicePaymentInformations { get; set; }

    public virtual DbSet<InvoicePosition> InvoicePositions { get; set; }

    public virtual DbSet<InvoicePositionConfiguration> InvoicePositionConfigurations { get; set; }

    public virtual DbSet<InvoicePositionDeliveryDetail> InvoicePositionDeliveryDetails { get; set; }

    public virtual DbSet<InvoiceShipToAddress> InvoiceShipToAddresses { get; set; }

    public virtual DbSet<Language> Languages { get; set; }

    public virtual DbSet<Lieferantenfaktoren> Lieferantenfaktorens { get; set; }

    public virtual DbSet<LvAbonnement> LvAbonnements { get; set; }

    public virtual DbSet<LvAbonnementsposition> LvAbonnementspositions { get; set; }

    public virtual DbSet<LvAbonnementsverwaltung> LvAbonnementsverwaltungs { get; set; }

    public virtual DbSet<LvAbrechnung> LvAbrechnungs { get; set; }

    public virtual DbSet<LvAbrechnungEinzelnachwei> LvAbrechnungEinzelnachweis { get; set; }

    public virtual DbSet<LvAbrechnungPositionen> LvAbrechnungPositionens { get; set; }

    public virtual DbSet<LvAmazonAbgleichAngebote> LvAmazonAbgleichAngebotes { get; set; }

    public virtual DbSet<LvAmazonAbgleichBestellungPo> LvAmazonAbgleichBestellungPos { get; set; }

    public virtual DbSet<LvAmazonAbgleichBestellungen> LvAmazonAbgleichBestellungens { get; set; }

    public virtual DbSet<LvAmazonAbrechnungsdaten> LvAmazonAbrechnungsdatens { get; set; }

    public virtual DbSet<LvAmazonAbrechnungsdatenPo> LvAmazonAbrechnungsdatenPos { get; set; }

    public virtual DbSet<LvAmazonAngebote> LvAmazonAngebotes { get; set; }

    public virtual DbSet<LvAmazonAufzuschaltendeAngebote> LvAmazonAufzuschaltendeAngebotes { get; set; }

    public virtual DbSet<LvAmazonBestellungPo> LvAmazonBestellungPos { get; set; }

    public virtual DbSet<LvAmazonBestellungen> LvAmazonBestellungens { get; set; }

    public virtual DbSet<LvAmazonFulfillmentAuftraege> LvAmazonFulfillmentAuftraeges { get; set; }

    public virtual DbSet<LvAmazonFulfillmentAuftragPo> LvAmazonFulfillmentAuftragPos { get; set; }

    public virtual DbSet<LvAmazonItem> LvAmazonItems { get; set; }

    public virtual DbSet<LvAmazonLogsitzung> LvAmazonLogsitzungs { get; set; }

    public virtual DbSet<LvAngebotFehler> LvAngebotFehlers { get; set; }

    public virtual DbSet<LvAngebote> LvAngebotes { get; set; }

    public virtual DbSet<LvAngebote1> LvAngebotes1 { get; set; }

    public virtual DbSet<LvAngebotsposition> LvAngebotspositions { get; set; }

    public virtual DbSet<LvAngebotsverwaltung> LvAngebotsverwaltungs { get; set; }

    public virtual DbSet<LvArtikelVerkaeufe> LvArtikelVerkaeuves { get; set; }

    public virtual DbSet<LvAuftraege> LvAuftraeges { get; set; }

    public virtual DbSet<LvAuftrag> LvAuftrags { get; set; }

    public virtual DbSet<LvAuftragZahlungszuordnung> LvAuftragZahlungszuordnungs { get; set; }

    public virtual DbSet<LvAuftragsposition> LvAuftragspositions { get; set; }

    public virtual DbSet<LvAuftragsposition1> LvAuftragspositions1 { get; set; }

    public virtual DbSet<LvAuftragspositionsvariation> LvAuftragspositionsvariations { get; set; }

    public virtual DbSet<LvAuftragsverwaltung> LvAuftragsverwaltungs { get; set; }

    public virtual DbSet<LvAuftragsverwaltungCache> LvAuftragsverwaltungCaches { get; set; }

    public virtual DbSet<LvAuftragsverwaltungDetail> LvAuftragsverwaltungDetails { get; set; }

    public virtual DbSet<LvBestellPosGutschriftErstellbar> LvBestellPosGutschriftErstellbars { get; set; }

    public virtual DbSet<LvBestellPositionen> LvBestellPositionens { get; set; }

    public virtual DbSet<LvBestellung> LvBestellungs { get; set; }

    public virtual DbSet<LvBestellungen> LvBestellungens { get; set; }

    public virtual DbSet<LvBinOverview> LvBinOverviews { get; set; }

    public virtual DbSet<LvConnectorLogeintrag> LvConnectorLogeintrags { get; set; }

    public virtual DbSet<LvDbeSlogeintrag> LvDbeSlogeintrags { get; set; }

    public virtual DbSet<LvDisposition> LvDispositions { get; set; }

    public virtual DbSet<LvEbayAngebote> LvEbayAngebotes { get; set; }

    public virtual DbSet<LvEbayKundenanfragen> LvEbayKundenanfragens { get; set; }

    public virtual DbSet<LvEbayKundenfeedback> LvEbayKundenfeedbacks { get; set; }

    public virtual DbSet<LvEbayPreisvorschlaege> LvEbayPreisvorschlaeges { get; set; }

    public virtual DbSet<LvEbayTransaction> LvEbayTransactions { get; set; }

    public virtual DbSet<LvEbayZuAktualisierendeAngebote> LvEbayZuAktualisierendeAngebotes { get; set; }

    public virtual DbSet<LvEingangsrechnung> LvEingangsrechnungs { get; set; }

    public virtual DbSet<LvEingangsrechnungBestellung> LvEingangsrechnungBestellungs { get; set; }

    public virtual DbSet<LvEingangsrechnungPo> LvEingangsrechnungPos { get; set; }

    public virtual DbSet<LvEinkaufskosten> LvEinkaufskostens { get; set; }

    public virtual DbSet<LvEinkaufsliste> LvEinkaufslistes { get; set; }

    public virtual DbSet<LvExterneRechnung> LvExterneRechnungs { get; set; }

    public virtual DbSet<LvExterneRechnungsposition> LvExterneRechnungspositions { get; set; }

    public virtual DbSet<LvExternerBeleg> LvExternerBelegs { get; set; }

    public virtual DbSet<LvExternerBelegPositionen> LvExternerBelegPositionens { get; set; }

    public virtual DbSet<LvFulfillmentauftrag> LvFulfillmentauftrags { get; set; }

    public virtual DbSet<LvFulfillmentauftragsposition> LvFulfillmentauftragspositions { get; set; }

    public virtual DbSet<LvIduUploadQueue> LvIduUploadQueues { get; set; }

    public virtual DbSet<LvInetBestellung> LvInetBestellungs { get; set; }

    public virtual DbSet<LvInetBestellungPositionen> LvInetBestellungPositionens { get; set; }

    public virtual DbSet<LvInetKunde> LvInetKundes { get; set; }

    public virtual DbSet<LvItemStockDemand> LvItemStockDemands { get; set; }

    public virtual DbSet<LvJtlTrackingPakete> LvJtlTrackingPaketes { get; set; }

    public virtual DbSet<LvKunde> LvKundes { get; set; }

    public virtual DbSet<LvKundenDaten> LvKundenDatens { get; set; }

    public virtual DbSet<LvLagerUebersicht> LvLagerUebersichts { get; set; }

    public virtual DbSet<LvLagerkosten> LvLagerkostens { get; set; }

    public virtual DbSet<LvLagerkostenRegeln> LvLagerkostenRegelns { get; set; }

    public virtual DbSet<LvLagerkostenUebersicht> LvLagerkostenUebersichts { get; set; }

    public virtual DbSet<LvLieferant> LvLieferants { get; set; }

    public virtual DbSet<LvLieferschein> LvLieferscheins { get; set; }

    public virtual DbSet<LvLieferscheinWarenlagerausgang> LvLieferscheinWarenlagerausgangs { get; set; }

    public virtual DbSet<LvLieferscheinpaket> LvLieferscheinpakets { get; set; }

    public virtual DbSet<LvLieferscheinposition> LvLieferscheinpositions { get; set; }

    public virtual DbSet<LvLieferschwellen> LvLieferschwellens { get; set; }

    public virtual DbSet<LvLogbuch> LvLogbuches { get; set; }

    public virtual DbSet<LvLogeintrag> LvLogeintrags { get; set; }

    public virtual DbSet<LvLogsitzung> LvLogsitzungs { get; set; }

    public virtual DbSet<LvLogsitzung1> LvLogsitzungs1 { get; set; }

    public virtual DbSet<LvNotification> LvNotifications { get; set; }

    public virtual DbSet<LvNotificationDetail> LvNotificationDetails { get; set; }

    public virtual DbSet<LvOffenePosten> LvOffenePostens { get; set; }

    public virtual DbSet<LvOperation> LvOperations { get; set; }

    public virtual DbSet<LvPakete> LvPaketes { get; set; }

    public virtual DbSet<LvPickliste> LvPicklistes { get; set; }

    public virtual DbSet<LvPicklistenposition> LvPicklistenpositions { get; set; }

    public virtual DbSet<LvPosLogeintrag> LvPosLogeintrags { get; set; }

    public virtual DbSet<LvPreisanfrage> LvPreisanfrages { get; set; }

    public virtual DbSet<LvPreisanfragePo> LvPreisanfragePos { get; set; }

    public virtual DbSet<LvProducibleProductionOrder> LvProducibleProductionOrders { get; set; }

    public virtual DbSet<LvProductionDispositionItem> LvProductionDispositionItems { get; set; }

    public virtual DbSet<LvProductionItem> LvProductionItems { get; set; }

    public virtual DbSet<LvProductionOrder> LvProductionOrders { get; set; }

    public virtual DbSet<LvProductionProcess> LvProductionProcesses { get; set; }

    public virtual DbSet<LvQueue> LvQueues { get; set; }

    public virtual DbSet<LvRechnungZahlungszuordnung> LvRechnungZahlungszuordnungs { get; set; }

    public virtual DbSet<LvRechnungen> LvRechnungens { get; set; }

    public virtual DbSet<LvRechnungskorrekturen> LvRechnungskorrekturens { get; set; }

    public virtual DbSet<LvRechnungskorrekturposition> LvRechnungskorrekturpositions { get; set; }

    public virtual DbSet<LvRechnungskorrekturverwaltung> LvRechnungskorrekturverwaltungs { get; set; }

    public virtual DbSet<LvRechnungsposition> LvRechnungspositions { get; set; }

    public virtual DbSet<LvRechnungsverwaltung> LvRechnungsverwaltungs { get; set; }

    public virtual DbSet<LvReplenishmentOrder> LvReplenishmentOrders { get; set; }

    public virtual DbSet<LvReport> LvReports { get; set; }

    public virtual DbSet<LvResource> LvResources { get; set; }

    public virtual DbSet<LvRetoure> LvRetoures { get; set; }

    public virtual DbSet<LvRetoureBearbeiten> LvRetoureBearbeitens { get; set; }

    public virtual DbSet<LvRetoureLieferscheinPo> LvRetoureLieferscheinPos { get; set; }

    public virtual DbSet<LvRetourePosition> LvRetourePositions { get; set; }

    public virtual DbSet<LvRetouren> LvRetourens { get; set; }

    public virtual DbSet<LvRueckstandserinnerung> LvRueckstandserinnerungs { get; set; }

    public virtual DbSet<LvRueckstandserinnerungLieferanten> LvRueckstandserinnerungLieferantens { get; set; }

    public virtual DbSet<LvRueckstandserinnerungsposition> LvRueckstandserinnerungspositions { get; set; }

    public virtual DbSet<LvScxLogeintrag> LvScxLogeintrags { get; set; }

    public virtual DbSet<LvStockAccount> LvStockAccounts { get; set; }

    public virtual DbSet<LvStornobelegposition> LvStornobelegpositions { get; set; }

    public virtual DbSet<LvStornobelegverwaltung> LvStornobelegverwaltungs { get; set; }

    public virtual DbSet<LvTicket> LvTickets { get; set; }

    public virtual DbSet<LvUmsatzuebersicht> LvUmsatzuebersichts { get; set; }

    public virtual DbSet<LvUserResource> LvUserResources { get; set; }

    public virtual DbSet<LvVcsBuchungsPositionen> LvVcsBuchungsPositionens { get; set; }

    public virtual DbSet<LvVcsBuchungsPositionenHistory> LvVcsBuchungsPositionenHistories { get; set; }

    public virtual DbSet<LvVcsBuchungsdaten> LvVcsBuchungsdatens { get; set; }

    public virtual DbSet<LvVcsInvoiceDuplicate> LvVcsInvoiceDuplicates { get; set; }

    public virtual DbSet<LvVcsLiteBuchungsPositionen> LvVcsLiteBuchungsPositionens { get; set; }

    public virtual DbSet<LvVcsLiteBuchungsPositionenHistory> LvVcsLiteBuchungsPositionenHistories { get; set; }

    public virtual DbSet<LvVcsLiteBuchungsdaten> LvVcsLiteBuchungsdatens { get; set; }

    public virtual DbSet<LvVcsLiteUploadQueue> LvVcsLiteUploadQueues { get; set; }

    public virtual DbSet<LvVcsselfInvoiceLogeintrag> LvVcsselfInvoiceLogeintrags { get; set; }

    public virtual DbSet<LvWorkbenchResource> LvWorkbenchResources { get; set; }

    public virtual DbSet<LvZahlung> LvZahlungs { get; set; }

    public virtual DbSet<LvZahlungsabgleichLogeintrag> LvZahlungsabgleichLogeintrags { get; set; }

    public virtual DbSet<LvZahlungsausgangLogeintrag> LvZahlungsausgangLogeintrags { get; set; }

    public virtual DbSet<LvZahlungsausganguebersicht> LvZahlungsausganguebersichts { get; set; }

    public virtual DbSet<Manufacturer> Manufacturers { get; set; }

    public virtual DbSet<MovementType> MovementTypes { get; set; }

    public virtual DbSet<MovementTypeName> MovementTypeNames { get; set; }

    public virtual DbSet<Parcel> Parcels { get; set; }

    public virtual DbSet<Parcel1> Parcels1 { get; set; }

    public virtual DbSet<PaymentMethod> PaymentMethods { get; set; }

    public virtual DbSet<PaymentType> PaymentTypes { get; set; }

    public virtual DbSet<PaymentTypeName> PaymentTypeNames { get; set; }

    public virtual DbSet<PfAmazonAngebot> PfAmazonAngebots { get; set; }

    public virtual DbSet<PfAmazonAngebotExt> PfAmazonAngebotExts { get; set; }

    public virtual DbSet<PfAmazonAngebotFba> PfAmazonAngebotFbas { get; set; }

    public virtual DbSet<PfAmazonAngebotMapping> PfAmazonAngebotMappings { get; set; }

    public virtual DbSet<PfAmazonAngebotNeu> PfAmazonAngebotNeus { get; set; }

    public virtual DbSet<PfAmazonAngebotNeuSetting> PfAmazonAngebotNeuSettings { get; set; }

    public virtual DbSet<PfAmazonAngebotSelbstErstellt> PfAmazonAngebotSelbstErstellts { get; set; }

    public virtual DbSet<PfAmazonAngebotVater> PfAmazonAngebotVaters { get; set; }

    public virtual DbSet<PfAmazonApaPrei> PfAmazonApaPreis { get; set; }

    public virtual DbSet<PfAmazonApaUsersetting> PfAmazonApaUsersettings { get; set; }

    public virtual DbSet<PfAmazonBestandAnDatum> PfAmazonBestandAnData { get; set; }

    public virtual DbSet<PfAmazonBestellung> PfAmazonBestellungs { get; set; }

    public virtual DbSet<PfAmazonBestellungStorno> PfAmazonBestellungStornos { get; set; }

    public virtual DbSet<PfAmazonBestellungVersand> PfAmazonBestellungVersands { get; set; }

    public virtual DbSet<PfAmazonBestellungpo> PfAmazonBestellungpos { get; set; }

    public virtual DbSet<PfAmazonBestellungstatus> PfAmazonBestellungstatuses { get; set; }

    public virtual DbSet<PfAmazonComboboxImage> PfAmazonComboboxImages { get; set; }

    public virtual DbSet<PfAmazonDotLiquidMapping> PfAmazonDotLiquidMappings { get; set; }

    public virtual DbSet<PfAmazonFbaKommentar> PfAmazonFbaKommentars { get; set; }

    public virtual DbSet<PfAmazonFeederror> PfAmazonFeederrors { get; set; }

    public virtual DbSet<PfAmazonGroup> PfAmazonGroups { get; set; }

    public virtual DbSet<PfAmazonItem> PfAmazonItems { get; set; }

    public virtual DbSet<PfAmazonItemMapping> PfAmazonItemMappings { get; set; }

    public virtual DbSet<PfAmazonLagerbewegung> PfAmazonLagerbewegungs { get; set; }

    public virtual DbSet<PfAmazonLogZuordnen> PfAmazonLogZuordnens { get; set; }

    public virtual DbSet<PfAmazonMappingAmazonVariationen> PfAmazonMappingAmazonVariationens { get; set; }

    public virtual DbSet<PfAmazonMappingItemsToVariationTheme> PfAmazonMappingItemsToVariationThemes { get; set; }

    public virtual DbSet<PfAmazonMappingVariationTheme> PfAmazonMappingVariationThemes { get; set; }

    public virtual DbSet<PfAmazonMappingVariationsnaman> PfAmazonMappingVariationsnamen { get; set; }

    public virtual DbSet<PfAmazonMappingVariationswerte> PfAmazonMappingVariationswertes { get; set; }

    public virtual DbSet<PfAmazonMappingVersandartVersanddienstleister> PfAmazonMappingVersandartVersanddienstleisters { get; set; }

    public virtual DbSet<PfAmazonPlattform> PfAmazonPlattforms { get; set; }

    public virtual DbSet<PfAmazonQueue> PfAmazonQueues { get; set; }

    public virtual DbSet<PfAmazonRepricehistory> PfAmazonRepricehistories { get; set; }

    public virtual DbSet<PfAmazonRetourmeldung> PfAmazonRetourmeldungs { get; set; }

    public virtual DbSet<PfAmazonRetourmeldungadjustment> PfAmazonRetourmeldungadjustments { get; set; }

    public virtual DbSet<PfAmazonRetourpo> PfAmazonRetourpos { get; set; }

    public virtual DbSet<PfAmazonSettlement> PfAmazonSettlements { get; set; }

    public virtual DbSet<PfAmazonSettlementpo> PfAmazonSettlementpos { get; set; }

    public virtual DbSet<PfAmazonSteuercode> PfAmazonSteuercodes { get; set; }

    public virtual DbSet<PfAmazonUmlagerungVersendet> PfAmazonUmlagerungVersendets { get; set; }

    public virtual DbSet<PfAmazonUmlagerungVersendetPo> PfAmazonUmlagerungVersendetPos { get; set; }

    public virtual DbSet<PfAmazonValidation> PfAmazonValidations { get; set; }

    public virtual DbSet<PfAmazonVc> PfAmazonVcs { get; set; }

    public virtual DbSet<PfAmazonVcsHistory> PfAmazonVcsHistories { get; set; }

    public virtual DbSet<PfAmazonVersanddienstleister> PfAmazonVersanddienstleisters { get; set; }

    public virtual DbSet<PfAmazonVersandgruppen> PfAmazonVersandgruppens { get; set; }

    public virtual DbSet<PfAmazonXmlKat> PfAmazonXmlKats { get; set; }

    public virtual DbSet<PfAmazonXmlTran> PfAmazonXmlTrans { get; set; }

    public virtual DbSet<PfAmazonXmlVersion> PfAmazonXmlVersions { get; set; }

    public virtual DbSet<PfBestellposVater> PfBestellposVaters { get; set; }

    public virtual DbSet<PfListviewColor> PfListviewColors { get; set; }

    public virtual DbSet<PfLogbuch> PfLogbuches { get; set; }

    public virtual DbSet<PfLveinstellungen> PfLveinstellungens { get; set; }

    public virtual DbSet<PfLvsummary> PfLvsummaries { get; set; }

    public virtual DbSet<PfSynccheckboxen> PfSynccheckboxens { get; set; }

    public virtual DbSet<PfUser> PfUsers { get; set; }

    public virtual DbSet<PickList> PickLists { get; set; }

    public virtual DbSet<PickListPositionOrder> PickListPositionOrders { get; set; }

    public virtual DbSet<PickListPositionOrderConfiguration> PickListPositionOrderConfigurations { get; set; }

    public virtual DbSet<PickListPositionWarehouse> PickListPositionWarehouses { get; set; }

    public virtual DbSet<PickListPositionWarehouseConfiguration> PickListPositionWarehouseConfigurations { get; set; }

    public virtual DbSet<PickListSalesOrder> PickListSalesOrders { get; set; }

    public virtual DbSet<PickListSalesOrderBillToAddress> PickListSalesOrderBillToAddresses { get; set; }

    public virtual DbSet<PickListSalesOrderShipToAddress> PickListSalesOrderShipToAddresses { get; set; }

    public virtual DbSet<Picture> Pictures { get; set; }

    public virtual DbSet<Platform> Platforms { get; set; }

    public virtual DbSet<Platform1> Platforms1 { get; set; }

    public virtual DbSet<PlatformName> PlatformNames { get; set; }

    public virtual DbSet<PosBonIcwarenLager> PosBonIcwarenLagers { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<Product1> Products1 { get; set; }

    public virtual DbSet<ProductCategory> ProductCategories { get; set; }

    public virtual DbSet<ProductComponent> ProductComponents { get; set; }

    public virtual DbSet<ProductName> ProductNames { get; set; }

    public virtual DbSet<ProductProperty> ProductProperties { get; set; }

    public virtual DbSet<ProductState> ProductStates { get; set; }

    public virtual DbSet<ProductStateName> ProductStateNames { get; set; }

    public virtual DbSet<PurchaseOrder> PurchaseOrders { get; set; }

    public virtual DbSet<PurchaseOrderBillToAddress> PurchaseOrderBillToAddresses { get; set; }

    public virtual DbSet<PurchaseOrderPosition> PurchaseOrderPositions { get; set; }

    public virtual DbSet<PurchaseOrderShipToAddress> PurchaseOrderShipToAddresses { get; set; }

    public virtual DbSet<PurchaseOrderSupplier> PurchaseOrderSuppliers { get; set; }

    public virtual DbSet<ReceiptOfPayment> ReceiptOfPayments { get; set; }

    public virtual DbSet<ReturnReason> ReturnReasons { get; set; }

    public virtual DbSet<ReturnReasonName> ReturnReasonNames { get; set; }

    public virtual DbSet<SalesOrder> SalesOrders { get; set; }

    public virtual DbSet<SalesOrderAttribute> SalesOrderAttributes { get; set; }

    public virtual DbSet<SalesOrderBillToAddress> SalesOrderBillToAddresses { get; set; }

    public virtual DbSet<SalesOrderPayment> SalesOrderPayments { get; set; }

    public virtual DbSet<SalesOrderPaymentInformation> SalesOrderPaymentInformations { get; set; }

    public virtual DbSet<SalesOrderPosition> SalesOrderPositions { get; set; }

    public virtual DbSet<SalesOrderPositionConfiguration> SalesOrderPositionConfigurations { get; set; }

    public virtual DbSet<SalesOrderPositionDeliveryDetail> SalesOrderPositionDeliveryDetails { get; set; }

    public virtual DbSet<SalesOrderShipToAddress> SalesOrderShipToAddresses { get; set; }

    public virtual DbSet<SalesQuotation> SalesQuotations { get; set; }

    public virtual DbSet<SalesQuotationBillToAddress> SalesQuotationBillToAddresses { get; set; }

    public virtual DbSet<SalesQuotationPosition> SalesQuotationPositions { get; set; }

    public virtual DbSet<SalesQuotationPositionConfiguration> SalesQuotationPositionConfigurations { get; set; }

    public virtual DbSet<SalesQuotationPositionDeliveryDetail> SalesQuotationPositionDeliveryDetails { get; set; }

    public virtual DbSet<SalesQuotationShipToAddress> SalesQuotationShipToAddresses { get; set; }

    public virtual DbSet<ShippingClass> ShippingClasses { get; set; }

    public virtual DbSet<ShippingClassName> ShippingClassNames { get; set; }

    public virtual DbSet<ShippingMethod> ShippingMethods { get; set; }

    public virtual DbSet<ShippingMethod1> ShippingMethods1 { get; set; }

    public virtual DbSet<ShippingMethodName> ShippingMethodNames { get; set; }

    public virtual DbSet<ShippingNotification> ShippingNotifications { get; set; }

    public virtual DbSet<SqlServerVersion> SqlServerVersions { get; set; }

    public virtual DbSet<Stocktaking> Stocktakings { get; set; }

    public virtual DbSet<Supplier> Suppliers { get; set; }

    public virtual DbSet<Supplier1> Suppliers1 { get; set; }

    public virtual DbSet<SupplierInvoice> SupplierInvoices { get; set; }

    public virtual DbSet<SupplierInvoicePo> SupplierInvoicePos { get; set; }

    public virtual DbSet<SupplierInvoicePosExtraCharge> SupplierInvoicePosExtraCharges { get; set; }

    public virtual DbSet<SupplierOrder> SupplierOrders { get; set; }

    public virtual DbSet<SupplierOrderPo> SupplierOrderPos { get; set; }

    public virtual DbSet<SupplierOrderReminder> SupplierOrderReminders { get; set; }

    public virtual DbSet<SupplierOrderReminderPo> SupplierOrderReminderPos { get; set; }

    public virtual DbSet<SupplierProduct> SupplierProducts { get; set; }

    public virtual DbSet<SystemUser> SystemUsers { get; set; }

    public virtual DbSet<TAbgerufeneEmailsImap> TAbgerufeneEmailsImaps { get; set; }

    public virtual DbSet<TAbgerufeneEmailsPop3> TAbgerufeneEmailsPop3s { get; set; }

    public virtual DbSet<TAbgleichConfig> TAbgleichConfigs { get; set; }

    public virtual DbSet<TAbgleichEventQueue> TAbgleichEventQueues { get; set; }

    public virtual DbSet<TAbgleichOption> TAbgleichOptions { get; set; }

    public virtual DbSet<TAbgleichSync> TAbgleichSyncs { get; set; }

    public virtual DbSet<TAbgleichToken> TAbgleichTokens { get; set; }

    public virtual DbSet<TAbrechnung> TAbrechnungs { get; set; }

    public virtual DbSet<TAbrechnungEinzelnachwei> TAbrechnungEinzelnachweis { get; set; }

    public virtual DbSet<TAbrechnungLagerplatz> TAbrechnungLagerplatzs { get; set; }

    public virtual DbSet<TAbrechnungLagerplatzPreview> TAbrechnungLagerplatzPreviews { get; set; }

    public virtual DbSet<TAbrechnungPo> TAbrechnungPos { get; set; }

    public virtual DbSet<TAbsenteeismType> TAbsenteeismTypes { get; set; }

    public virtual DbSet<TAbverkauf> TAbverkaufs { get; set; }

    public virtual DbSet<TAdditionalResult> TAdditionalResults { get; set; }

    public virtual DbSet<TAdressExportFelder> TAdressExportFelders { get; set; }

    public virtual DbSet<TAdressExportFelderErweitert> TAdressExportFelderErweiterts { get; set; }

    public virtual DbSet<TAdressExportVorlage> TAdressExportVorlages { get; set; }

    public virtual DbSet<TAdresse> TAdresses { get; set; }

    public virtual DbSet<TAgentAngeseheneTicket> TAgentAngeseheneTickets { get; set; }

    public virtual DbSet<TAgentLiestTicket> TAgentLiestTickets { get; set; }

    public virtual DbSet<TAktiverAbgleich> TAktiverAbgleiches { get; set; }

    public virtual DbSet<TAllowedDatatype> TAllowedDatatypes { get; set; }

    public virtual DbSet<TAmazonAngebotFehler> TAmazonAngebotFehlers { get; set; }

    public virtual DbSet<TAmazonBuyBoxStrategy> TAmazonBuyBoxStrategies { get; set; }

    public virtual DbSet<TAmazonCompetitor> TAmazonCompetitors { get; set; }

    public virtual DbSet<TAmazonCompetitorAsinStrategy> TAmazonCompetitorAsinStrategies { get; set; }

    public virtual DbSet<TAmazonShippingDruckereinstellungen> TAmazonShippingDruckereinstellungens { get; set; }

    public virtual DbSet<TAmazonStrategieAuswahl> TAmazonStrategieAuswahls { get; set; }

    public virtual DbSet<TAmazonTask> TAmazonTasks { get; set; }

    public virtual DbSet<TAmazonVersandschnittstellenkonfiguration> TAmazonVersandschnittstellenkonfigurations { get; set; }

    public virtual DbSet<TAmazonabgleichLogsitzung> TAmazonabgleichLogsitzungs { get; set; }

    public virtual DbSet<TAmazonbestellpositionVcszuordnung> TAmazonbestellpositionVcszuordnungs { get; set; }

    public virtual DbSet<TAnfangsNr> TAnfangsNrs { get; set; }

    public virtual DbSet<TAntwortkanal> TAntwortkanals { get; set; }

    public virtual DbSet<TArtikel> TArtikels { get; set; }

    public virtual DbSet<TArtikelAbnahme> TArtikelAbnahmes { get; set; }

    public virtual DbSet<TArtikelAsin> TArtikelAsins { get; set; }

    public virtual DbSet<TArtikelAttribut> TArtikelAttributs { get; set; }

    public virtual DbSet<TArtikelAttributSprache> TArtikelAttributSpraches { get; set; }

    public virtual DbSet<TArtikelBeschreibung> TArtikelBeschreibungs { get; set; }

    public virtual DbSet<TArtikelDimension> TArtikelDimensions { get; set; }

    public virtual DbSet<TArtikelEinkaufsliste> TArtikelEinkaufslistes { get; set; }

    public virtual DbSet<TArtikelEpid> TArtikelEpids { get; set; }

    public virtual DbSet<TArtikelHistory> TArtikelHistories { get; set; }

    public virtual DbSet<TArtikelLabel> TArtikelLabels { get; set; }

    public virtual DbSet<TArtikelLagerOrt> TArtikelLagerOrts { get; set; }

    public virtual DbSet<TArtikelMehrzweckGutschein> TArtikelMehrzweckGutscheins { get; set; }

    public virtual DbSet<TArtikelMerkmal> TArtikelMerkmals { get; set; }

    public virtual DbSet<TArtikelMindestLagerbestandProLager> TArtikelMindestLagerbestandProLagers { get; set; }

    public virtual DbSet<TArtikelRankingGlobal> TArtikelRankingGlobals { get; set; }

    public virtual DbSet<TArtikelRankingZeitraum> TArtikelRankingZeitraums { get; set; }

    public virtual DbSet<TArtikelShop> TArtikelShops { get; set; }

    public virtual DbSet<TArtikelSichtbarkeit> TArtikelSichtbarkeits { get; set; }

    public virtual DbSet<TArtikelSonderprei> TArtikelSonderpreis { get; set; }

    public virtual DbSet<TArtikelSpeicher> TArtikelSpeichers { get; set; }

    public virtual DbSet<TArtikelSperre> TArtikelSperres { get; set; }

    public virtual DbSet<TArtikelStateNotification> TArtikelStateNotifications { get; set; }

    public virtual DbSet<TArtikelTeilmengen> TArtikelTeilmengens { get; set; }

    public virtual DbSet<TArtikelType> TArtikelTypes { get; set; }

    public virtual DbSet<TArtikelUpload> TArtikelUploads { get; set; }

    public virtual DbSet<TArtikelUploadSprache> TArtikelUploadSpraches { get; set; }

    public virtual DbSet<TArtikelVerkaufskanalFeldWert> TArtikelVerkaufskanalFeldWerts { get; set; }

    public virtual DbSet<TArtikelZustand> TArtikelZustands { get; set; }

    public virtual DbSet<TArtikelbildPlattform> TArtikelbildPlattforms { get; set; }

    public virtual DbSet<TArtikelbildPlattformSeo> TArtikelbildPlattformSeos { get; set; }

    public virtual DbSet<TArtikelkosten> TArtikelkostens { get; set; }

    public virtual DbSet<TAttribut> TAttributs { get; set; }

    public virtual DbSet<TAttributShop> TAttributShops { get; set; }

    public virtual DbSet<TAttributSprache> TAttributSpraches { get; set; }

    public virtual DbSet<TAttributWarengruppe> TAttributWarengruppes { get; set; }

    public virtual DbSet<TAuftrag> TAuftrags { get; set; }

    public virtual DbSet<TAuftragAdresse> TAuftragAdresses { get; set; }

    public virtual DbSet<TAuftragAdresseLog> TAuftragAdresseLogs { get; set; }

    public virtual DbSet<TAuftragAttribut> TAuftragAttributs { get; set; }

    public virtual DbSet<TAuftragAttributSprache> TAuftragAttributSpraches { get; set; }

    public virtual DbSet<TAuftragAusgabeDateien> TAuftragAusgabeDateiens { get; set; }

    public virtual DbSet<TAuftragEckdaten> TAuftragEckdatens { get; set; }

    public virtual DbSet<TAuftragFile> TAuftragFiles { get; set; }

    public virtual DbSet<TAuftragKampagne> TAuftragKampagnes { get; set; }

    public virtual DbSet<TAuftragLabel> TAuftragLabels { get; set; }

    public virtual DbSet<TAuftragLog> TAuftragLogs { get; set; }

    public virtual DbSet<TAuftragLog1> TAuftragLogs1 { get; set; }

    public virtual DbSet<TAuftragMapping> TAuftragMappings { get; set; }

    public virtual DbSet<TAuftragMergeLog> TAuftragMergeLogs { get; set; }

    public virtual DbSet<TAuftragPosition> TAuftragPositions { get; set; }

    public virtual DbSet<TAuftragPositionEckdaten> TAuftragPositionEckdatens { get; set; }

    public virtual DbSet<TAuftragPositionEigenschaft> TAuftragPositionEigenschafts { get; set; }

    public virtual DbSet<TAuftragPositionEigenschaftLog> TAuftragPositionEigenschaftLogs { get; set; }

    public virtual DbSet<TAuftragPositionFile> TAuftragPositionFiles { get; set; }

    public virtual DbSet<TAuftragPositionIntervall> TAuftragPositionIntervalls { get; set; }

    public virtual DbSet<TAuftragPositionIntervallLog> TAuftragPositionIntervallLogs { get; set; }

    public virtual DbSet<TAuftragPositionLog> TAuftragPositionLogs { get; set; }

    public virtual DbSet<TAuftragPositionMapping> TAuftragPositionMappings { get; set; }

    public virtual DbSet<TAuftragPositionTeilmengen> TAuftragPositionTeilmengens { get; set; }

    public virtual DbSet<TAuftragPositionTeilmengenKonfiguration> TAuftragPositionTeilmengenKonfigurations { get; set; }

    public virtual DbSet<TAuftragStorno> TAuftragStornos { get; set; }

    public virtual DbSet<TAuftragStornoSperre> TAuftragStornoSperres { get; set; }

    public virtual DbSet<TAuftragStornogrund> TAuftragStornogrunds { get; set; }

    public virtual DbSet<TAuftragText> TAuftragTexts { get; set; }

    public virtual DbSet<TAuftragZahlungsinfo> TAuftragZahlungsinfos { get; set; }

    public virtual DbSet<TAuftragZahlungsinfoLog> TAuftragZahlungsinfoLogs { get; set; }

    public virtual DbSet<TAuftragkosten> TAuftragkostens { get; set; }

    public virtual DbSet<TAusgangskanalEmail> TAusgangskanalEmails { get; set; }

    public virtual DbSet<TAusgangskanalEmailBenutzerSignatur> TAusgangskanalEmailBenutzerSignaturs { get; set; }

    public virtual DbSet<TAusgangskanalEmailOauth> TAusgangskanalEmailOauths { get; set; }

    public virtual DbSet<TAuth> TAuths { get; set; }

    public virtual DbSet<TAuthCode> TAuthCodes { get; set; }

    public virtual DbSet<TAutomatikLagerConfig> TAutomatikLagerConfigs { get; set; }

    public virtual DbSet<TB2bartikel> TB2bartikels { get; set; }

    public virtual DbSet<TBackup> TBackups { get; set; }

    public virtual DbSet<TBedarfsgrundlage> TBedarfsgrundlages { get; set; }

    public virtual DbSet<TBedarfsgrundlagePosition> TBedarfsgrundlagePositions { get; set; }

    public virtual DbSet<TBemerkungen> TBemerkungens { get; set; }

    public virtual DbSet<TBenutzerAktiv> TBenutzerAktivs { get; set; }

    public virtual DbSet<TBenutzerFeature> TBenutzerFeatures { get; set; }

    public virtual DbSet<TBenutzerFirma> TBenutzerFirmas { get; set; }

    public virtual DbSet<TBenutzerLog> TBenutzerLogs { get; set; }

    public virtual DbSet<TBenutzerLogin> TBenutzerLogins { get; set; }

    public virtual DbSet<TBenutzerSearchFilter> TBenutzerSearchFilters { get; set; }

    public virtual DbSet<TBenutzerSuchfilter> TBenutzerSuchfilters { get; set; }

    public virtual DbSet<TBestelldatumLand> TBestelldatumLands { get; set; }

    public virtual DbSet<TBestellpo> TBestellpos { get; set; }

    public virtual DbSet<TBestellung> TBestellungs { get; set; }

    public virtual DbSet<TBestellungAttribute> TBestellungAttributes { get; set; }

    public virtual DbSet<TBestellungAttributeKey> TBestellungAttributeKeys { get; set; }

    public virtual DbSet<TBestellungPicklisteLock> TBestellungPicklisteLocks { get; set; }

    public virtual DbSet<TBestellungSperre> TBestellungSperres { get; set; }

    public virtual DbSet<TBestellungWmsfreigabe> TBestellungWmsfreigabes { get; set; }

    public virtual DbSet<TBestellvorschlagEinstellungsSpeicher> TBestellvorschlagEinstellungsSpeichers { get; set; }

    public virtual DbSet<TBestellvorschlagVorlage> TBestellvorschlagVorlages { get; set; }

    public virtual DbSet<TBild> TBilds { get; set; }

    public virtual DbSet<TBillOfMaterial> TBillOfMaterials { get; set; }

    public virtual DbSet<TBillOfMaterialComponent> TBillOfMaterialComponents { get; set; }

    public virtual DbSet<TBillOfMaterialComponentsSubset> TBillOfMaterialComponentsSubsets { get; set; }

    public virtual DbSet<TBroken> TBrokens { get; set; }

    public virtual DbSet<TBuchungsArt> TBuchungsArts { get; set; }

    public virtual DbSet<TBundesland> TBundeslands { get; set; }

    public virtual DbSet<TCategory> TCategories { get; set; }

    public virtual DbSet<TCategoryAttribute> TCategoryAttributes { get; set; }

    public virtual DbSet<TCategoryAttributeConditionalMandatory> TCategoryAttributeConditionalMandatories { get; set; }

    public virtual DbSet<TCategoryAttributeConditionalOptional> TCategoryAttributeConditionalOptionals { get; set; }

    public virtual DbSet<TCategoryAttributeListVersion> TCategoryAttributeListVersions { get; set; }

    public virtual DbSet<TCategoryAttributeValue> TCategoryAttributeValues { get; set; }

    public virtual DbSet<TCategoryRef> TCategoryRefs { get; set; }

    public virtual DbSet<TCategoryVersion> TCategoryVersions { get; set; }

    public virtual DbSet<TChannel> TChannels { get; set; }

    public virtual DbSet<TChannelAttribute> TChannelAttributes { get; set; }

    public virtual DbSet<TChannelAttributeConditionalMandatory> TChannelAttributeConditionalMandatories { get; set; }

    public virtual DbSet<TChannelAttributeConditionalOptional> TChannelAttributeConditionalOptionals { get; set; }

    public virtual DbSet<TChannelAttributeListVersion> TChannelAttributeListVersions { get; set; }

    public virtual DbSet<TChannelAttributeValue> TChannelAttributeValues { get; set; }

    public virtual DbSet<TChannelPriceType> TChannelPriceTypes { get; set; }

    public virtual DbSet<TCondition> TConditions { get; set; }

    public virtual DbSet<TConfig> TConfigs { get; set; }

    public virtual DbSet<TConfiguration> TConfigurations { get; set; }

    public virtual DbSet<TConnectorKategorieTemp> TConnectorKategorieTemps { get; set; }

    public virtual DbSet<TConnectorLogeintrag> TConnectorLogeintrags { get; set; }

    public virtual DbSet<TConnectorStuecklisteTemp> TConnectorStuecklisteTemps { get; set; }

    public virtual DbSet<TCryptoSlot> TCryptoSlots { get; set; }

    public virtual DbSet<TCryptoVault> TCryptoVaults { get; set; }

    public virtual DbSet<TCsvSetting> TCsvSettings { get; set; }

    public virtual DbSet<TCustomerQuery> TCustomerQueries { get; set; }

    public virtual DbSet<TCustomerQueryColumn> TCustomerQueryColumns { get; set; }

    public virtual DbSet<TCustomerQueryOverview> TCustomerQueryOverviews { get; set; }

    public virtual DbSet<TCustomerQueryOverviewColumn> TCustomerQueryOverviewColumns { get; set; }

    public virtual DbSet<TCustomerQueryOverviewRecht> TCustomerQueryOverviewRechts { get; set; }

    public virtual DbSet<TCustomerQueryRecht> TCustomerQueryRechts { get; set; }

    public virtual DbSet<TCustomerQueryUser> TCustomerQueryUsers { get; set; }

    public virtual DbSet<TDashboard> TDashboards { get; set; }

    public virtual DbSet<TDashboardPage> TDashboardPages { get; set; }

    public virtual DbSet<TDateityp> TDateityps { get; set; }

    public virtual DbSet<TDatevConfig> TDatevConfigs { get; set; }

    public virtual DbSet<TDatevLog> TDatevLogs { get; set; }

    public virtual DbSet<TDbErrorlog> TDbErrorlogs { get; set; }

    public virtual DbSet<TDbeSlogeintrag> TDbeSlogeintrags { get; set; }

    public virtual DbSet<TDefinition> TDefinitions { get; set; }

    public virtual DbSet<TDefinitionSprache> TDefinitionSpraches { get; set; }

    public virtual DbSet<TDeliveryQueue> TDeliveryQueues { get; set; }

    public virtual DbSet<TDhlekp> TDhlekps { get; set; }

    public virtual DbSet<TDimension> TDimensions { get; set; }

    public virtual DbSet<TDimensionSprache> TDimensionSpraches { get; set; }

    public virtual DbSet<TDirectory> TDirectories { get; set; }

    public virtual DbSet<TDisposition> TDispositions { get; set; }

    public virtual DbSet<TDownload> TDownloads { get; set; }

    public virtual DbSet<TDownloadShop> TDownloadShops { get; set; }

    public virtual DbSet<TDropShippingPo> TDropShippingPos { get; set; }

    public virtual DbSet<TDruckEinstellung> TDruckEinstellungs { get; set; }

    public virtual DbSet<TDruckQueue> TDruckQueues { get; set; }

    public virtual DbSet<TDruckvorlage> TDruckvorlages { get; set; }

    public virtual DbSet<TDtau> TDtaus { get; set; }

    public virtual DbSet<TEan> TEans { get; set; }

    public virtual DbSet<TEazyShippingVerpackQueue> TEazyShippingVerpackQueues { get; set; }

    public virtual DbSet<TEbayAbgleichLogeintrag> TEbayAbgleichLogeintrags { get; set; }

    public virtual DbSet<TEbayAbgleichLogsitzung> TEbayAbgleichLogsitzungs { get; set; }

    public virtual DbSet<TEbayItemProductCompliance> TEbayItemProductCompliances { get; set; }

    public virtual DbSet<TEigenschaftKombiWert> TEigenschaftKombiWerts { get; set; }

    public virtual DbSet<TEigenschaftSichtbarkeit> TEigenschaftSichtbarkeits { get; set; }

    public virtual DbSet<TEigenschaftSprache> TEigenschaftSpraches { get; set; }

    public virtual DbSet<TEigenschaftWertAbhaengigkeit> TEigenschaftWertAbhaengigkeits { get; set; }

    public virtual DbSet<TEigenschaftWertAufprei> TEigenschaftWertAufpreis { get; set; }

    public virtual DbSet<TEigenschaftWertPict> TEigenschaftWertPicts { get; set; }

    public virtual DbSet<TEigenschaftWertSichtbarkeit> TEigenschaftWertSichtbarkeits { get; set; }

    public virtual DbSet<TEigenschaftWertSprache> TEigenschaftWertSpraches { get; set; }

    public virtual DbSet<TEingangskanalEmail> TEingangskanalEmails { get; set; }

    public virtual DbSet<TEingangskanalEmailLabel> TEingangskanalEmailLabels { get; set; }

    public virtual DbSet<TEingangskanalEmailOauth> TEingangskanalEmailOauths { get; set; }

    public virtual DbSet<TEingangsrechnung> TEingangsrechnungs { get; set; }

    public virtual DbSet<TEingangsrechnungPo> TEingangsrechnungPos { get; set; }

    public virtual DbSet<TEingangsrechnungPosZusatzkosten> TEingangsrechnungPosZusatzkostens { get; set; }

    public virtual DbSet<TEingangsrechnungzusatzkosten> TEingangsrechnungzusatzkostens { get; set; }

    public virtual DbSet<TEinheit> TEinheits { get; set; }

    public virtual DbSet<TEinheitSprache> TEinheitSpraches { get; set; }

    public virtual DbSet<TEmailEinstellung> TEmailEinstellungs { get; set; }

    public virtual DbSet<TEntityDialogLock> TEntityDialogLocks { get; set; }

    public virtual DbSet<TEntityPlatform> TEntityPlatforms { get; set; }

    public virtual DbSet<TEntityTracking> TEntityTrackings { get; set; }

    public virtual DbSet<TErlaubterDateityp> TErlaubterDateityps { get; set; }

    public virtual DbSet<TErloeskonten> TErloeskontens { get; set; }

    public virtual DbSet<TErreichbarkeit> TErreichbarkeits { get; set; }

    public virtual DbSet<TErrorlog> TErrorlogs { get; set; }

    public virtual DbSet<TErrorlog1> TErrorlogs1 { get; set; }

    public virtual DbSet<TEtikett> TEtiketts { get; set; }

    public virtual DbSet<TExternOffer> TExternOffers { get; set; }

    public virtual DbSet<TExterneRechnung> TExterneRechnungs { get; set; }

    public virtual DbSet<TExterneRechnungDokument> TExterneRechnungDokuments { get; set; }

    public virtual DbSet<TExterneRechnungEckdaten> TExterneRechnungEckdatens { get; set; }

    public virtual DbSet<TExterneRechnungPosition> TExterneRechnungPositions { get; set; }

    public virtual DbSet<TExterneRechnungPositionZusatzdaten> TExterneRechnungPositionZusatzdatens { get; set; }

    public virtual DbSet<TExterneRechnungZusatzdaten> TExterneRechnungZusatzdatens { get; set; }

    public virtual DbSet<TExterneReservierung> TExterneReservierungs { get; set; }

    public virtual DbSet<TExternerBeleg> TExternerBelegs { get; set; }

    public virtual DbSet<TExternerBelegEckdaten> TExternerBelegEckdatens { get; set; }

    public virtual DbSet<TExternerBelegPosition> TExternerBelegPositions { get; set; }

    public virtual DbSet<TExternerBelegTransaktion> TExternerBelegTransaktions { get; set; }

    public virtual DbSet<TFailedEvent> TFailedEvents { get; set; }

    public virtual DbSet<TFarbe> TFarbes { get; set; }

    public virtual DbSet<TFeatureFlag> TFeatureFlags { get; set; }

    public virtual DbSet<TFehler> TFehlers { get; set; }

    public virtual DbSet<TFeldTyp> TFeldTyps { get; set; }

    public virtual DbSet<TFile> TFiles { get; set; }

    public virtual DbSet<TFile1> TFiles1 { get; set; }

    public virtual DbSet<TFirmaAufbewahrungsfrist> TFirmaAufbewahrungsfrists { get; set; }

    public virtual DbSet<TFirmaEigenesFeld> TFirmaEigenesFelds { get; set; }

    public virtual DbSet<TFirmaHistory> TFirmaHistories { get; set; }

    public virtual DbSet<TFirmaUstIdNr> TFirmaUstIdNrs { get; set; }

    public virtual DbSet<TFormular> TFormulars { get; set; }

    public virtual DbSet<TFormularAnhangDaten> TFormularAnhangDatens { get; set; }

    public virtual DbSet<TFormularDruckEinstellung> TFormularDruckEinstellungs { get; set; }

    public virtual DbSet<TFormularEmailEinstellung> TFormularEmailEinstellungs { get; set; }

    public virtual DbSet<TFormularEmailVorlageAnhang> TFormularEmailVorlageAnhangs { get; set; }

    public virtual DbSet<TFormularFaxEinstellung> TFormularFaxEinstellungs { get; set; }

    public virtual DbSet<TFormularLlvorlageDaten> TFormularLlvorlageDatens { get; set; }

    public virtual DbSet<TFormularVorlage> TFormularVorlages { get; set; }

    public virtual DbSet<TFulfillerAttributeMapping> TFulfillerAttributeMappings { get; set; }

    public virtual DbSet<TFulfillerEinstellungen> TFulfillerEinstellungens { get; set; }

    public virtual DbSet<TFulfillerLieferscheinRef> TFulfillerLieferscheinRefs { get; set; }

    public virtual DbSet<TFulfillerMerchantsSupplier> TFulfillerMerchantsSuppliers { get; set; }

    public virtual DbSet<TFulfillerProductAttributeAtFfn> TFulfillerProductAttributeAtFfns { get; set; }

    public virtual DbSet<TFulfillerStammdatenKonfiguration> TFulfillerStammdatenKonfigurations { get; set; }

    public virtual DbSet<TFulfillmentAuftrag> TFulfillmentAuftrags { get; set; }

    public virtual DbSet<TFulfillmentAuftragPo> TFulfillmentAuftragPos { get; set; }

    public virtual DbSet<TFulfillmentLog> TFulfillmentLogs { get; set; }

    public virtual DbSet<TFulfillmentWorker> TFulfillmentWorkers { get; set; }

    public virtual DbSet<TGebinde> TGebindes { get; set; }

    public virtual DbSet<TGebuehrtyp> TGebuehrtyps { get; set; }

    public virtual DbSet<TGlobalsQueue> TGlobalsQueues { get; set; }

    public virtual DbSet<TGutschein> TGutscheins { get; set; }

    public virtual DbSet<TGutschriftLog> TGutschriftLogs { get; set; }

    public virtual DbSet<TGutschriftPo> TGutschriftPos { get; set; }

    public virtual DbSet<TGutschriftStorno> TGutschriftStornos { get; set; }

    public virtual DbSet<TGutschriftStornogrund> TGutschriftStornogrunds { get; set; }

    public virtual DbSet<THealthCheck> THealthChecks { get; set; }

    public virtual DbSet<THersteller> THerstellers { get; set; }

    public virtual DbSet<THerstellerBildPlattform> THerstellerBildPlattforms { get; set; }

    public virtual DbSet<THerstellerSprache> THerstellerSpraches { get; set; }

    public virtual DbSet<THintergrundDienst> THintergrundDiensts { get; set; }

    public virtual DbSet<THistorie> THistories { get; set; }

    public virtual DbSet<TIduUploadQueue> TIduUploadQueues { get; set; }

    public virtual DbSet<TInboundRef> TInboundRefs { get; set; }

    public virtual DbSet<TInboundShippingNotificationRef> TInboundShippingNotificationRefs { get; set; }

    public virtual DbSet<TInetAdresseShop> TInetAdresseShops { get; set; }

    public virtual DbSet<TInetBestellungAttribute> TInetBestellungAttributes { get; set; }

    public virtual DbSet<TInetKundeShop> TInetKundeShops { get; set; }

    public virtual DbSet<TInetKundenAttribute> TInetKundenAttributes { get; set; }

    public virtual DbSet<TInetShopZahlung> TInetShopZahlungs { get; set; }

    public virtual DbSet<TInkassoUser> TInkassoUsers { get; set; }

    public virtual DbSet<TInteropQueue> TInteropQueues { get; set; }

    public virtual DbSet<TInventur> TInventurs { get; set; }

    public virtual DbSet<TInventurArtikel> TInventurArtikels { get; set; }

    public virtual DbSet<TItemStockDemand> TItemStockDemands { get; set; }

    public virtual DbSet<TItemStockDemandStatusTransition> TItemStockDemandStatusTransitions { get; set; }

    public virtual DbSet<TKartonVersandArtMapping> TKartonVersandArtMappings { get; set; }

    public virtual DbSet<TKategorieAttribut> TKategorieAttributs { get; set; }

    public virtual DbSet<TKategorieAttributSprache> TKategorieAttributSpraches { get; set; }

    public virtual DbSet<TKategorieMapping> TKategorieMappings { get; set; }

    public virtual DbSet<TKategorieRabatt> TKategorieRabatts { get; set; }

    public virtual DbSet<TKategorieShop> TKategorieShops { get; set; }

    public virtual DbSet<TKategorieSichtbarkeit> TKategorieSichtbarkeits { get; set; }

    public virtual DbSet<TKategorieSperre> TKategorieSperres { get; set; }

    public virtual DbSet<TKategorieSprache> TKategorieSpraches { get; set; }

    public virtual DbSet<TKategoriebildPlattform> TKategoriebildPlattforms { get; set; }

    public virtual DbSet<TKostenTyp> TKostenTyps { get; set; }

    public virtual DbSet<TKundeEigenesFeld> TKundeEigenesFelds { get; set; }

    public virtual DbSet<TKundeKategorieRabatt> TKundeKategorieRabatts { get; set; }

    public virtual DbSet<TKundeLabel> TKundeLabels { get; set; }

    public virtual DbSet<TKundeSuche> TKundeSuches { get; set; }

    public virtual DbSet<TKundenDrucktext> TKundenDrucktexts { get; set; }

    public virtual DbSet<TKundenDrucktextSprache> TKundenDrucktextSpraches { get; set; }

    public virtual DbSet<TKundenGruppe> TKundenGruppes { get; set; }

    public virtual DbSet<TKundenGruppeAttribute> TKundenGruppeAttributes { get; set; }

    public virtual DbSet<TKundenGruppeSprache> TKundenGruppeSpraches { get; set; }

    public virtual DbSet<TKundenKategorie> TKundenKategories { get; set; }

    public virtual DbSet<TKundenRankingGlobal> TKundenRankingGlobals { get; set; }

    public virtual DbSet<TKundenRankingZeitraum> TKundenRankingZeitraums { get; set; }

    public virtual DbSet<TKundenSperre> TKundenSperres { get; set; }

    public virtual DbSet<TLabel> TLabels { get; set; }

    public virtual DbSet<TLabelBenutzergruppeRechte> TLabelBenutzergruppeRechtes { get; set; }

    public virtual DbSet<TLagerArtikel> TLagerArtikels { get; set; }

    public virtual DbSet<TLagerbestandBackup> TLagerbestandBackups { get; set; }

    public virtual DbSet<TLagerbestandShop> TLagerbestandShops { get; set; }

    public virtual DbSet<TLagerbestandVirtuell> TLagerbestandVirtuells { get; set; }

    public virtual DbSet<TLandSteuersatz> TLandSteuersatzs { get; set; }

    public virtual DbSet<TLaufendeNummern> TLaufendeNummerns { get; set; }

    public virtual DbSet<TLfdnrKunde> TLfdnrKundes { get; set; }

    public virtual DbSet<TLhm> TLhms { get; set; }

    public virtual DbSet<TLhmattribut> TLhmattributs { get; set; }

    public virtual DbSet<TLhmstatus> TLhmstatuses { get; set; }

    public virtual DbSet<TLhmtyp> TLhmtyps { get; set; }

    public virtual DbSet<TLiefArtikelPrei> TLiefArtikelPreis { get; set; }

    public virtual DbSet<TLieferInfoVersand> TLieferInfoVersands { get; set; }

    public virtual DbSet<TLieferStatus> TLieferStatuses { get; set; }

    public virtual DbSet<TLieferadresse> TLieferadresses { get; set; }

    public virtual DbSet<TLieferantErlaubteLieferlaender> TLieferantErlaubteLieferlaenders { get; set; }

    public virtual DbSet<TLieferantRabattStaffel> TLieferantRabattStaffels { get; set; }

    public virtual DbSet<TLieferantSperre> TLieferantSperres { get; set; }

    public virtual DbSet<TLieferantWarenlager> TLieferantWarenlagers { get; set; }

    public virtual DbSet<TLieferantenBestellung> TLieferantenBestellungs { get; set; }

    public virtual DbSet<TLieferantenBestellungErinnerung> TLieferantenBestellungErinnerungs { get; set; }

    public virtual DbSet<TLieferantenBestellungErinnerungPo> TLieferantenBestellungErinnerungPos { get; set; }

    public virtual DbSet<TLieferantenBestellungLa> TLieferantenBestellungLas { get; set; }

    public virtual DbSet<TLieferantenBestellungLieferant> TLieferantenBestellungLieferants { get; set; }

    public virtual DbSet<TLieferantenBestellungLock> TLieferantenBestellungLocks { get; set; }

    public virtual DbSet<TLieferantenBestellungPo> TLieferantenBestellungPos { get; set; }

    public virtual DbSet<TLieferantenBestellungRa> TLieferantenBestellungRas { get; set; }

    public virtual DbSet<TLieferantenRankingGlobal> TLieferantenRankingGlobals { get; set; }

    public virtual DbSet<TLieferantenRankingZeitraum> TLieferantenRankingZeitraums { get; set; }

    public virtual DbSet<TLieferavi> TLieferavis { get; set; }

    public virtual DbSet<TLieferavisIdentifier> TLieferavisIdentifiers { get; set; }

    public virtual DbSet<TLieferavisPaket> TLieferavisPakets { get; set; }

    public virtual DbSet<TLieferavisPosition> TLieferavisPositions { get; set; }

    public virtual DbSet<TLieferavisSeriennummer> TLieferavisSeriennummers { get; set; }

    public virtual DbSet<TLieferschein> TLieferscheins { get; set; }

    public virtual DbSet<TLieferscheinEckdaten> TLieferscheinEckdatens { get; set; }

    public virtual DbSet<TLieferscheinPo> TLieferscheinPos { get; set; }

    public virtual DbSet<TListViewExColor> TListViewExColors { get; set; }

    public virtual DbSet<TListViewExDateTimeFilter> TListViewExDateTimeFilters { get; set; }

    public virtual DbSet<TListViewExHeader> TListViewExHeaders { get; set; }

    public virtual DbSet<TListViewExSummary> TListViewExSummaries { get; set; }

    public virtual DbSet<TListViewSpalten> TListViewSpaltens { get; set; }

    public virtual DbSet<TLizenz> TLizenzs { get; set; }

    public virtual DbSet<TLizenzInfo> TLizenzInfos { get; set; }

    public virtual DbSet<TLizenzlog> TLizenzlogs { get; set; }

    public virtual DbSet<TLlvorlage> TLlvorlages { get; set; }

    public virtual DbSet<TLog> TLogs { get; set; }

    public virtual DbSet<TLogeintrag> TLogeintrags { get; set; }

    public virtual DbSet<TLoggingConfiguration> TLoggingConfigurations { get; set; }

    public virtual DbSet<TLogin> TLogins { get; set; }

    public virtual DbSet<TLogistik> TLogistiks { get; set; }

    public virtual DbSet<TLogsitzung> TLogsitzungs { get; set; }

    public virtual DbSet<TLotPreparationComponent> TLotPreparationComponents { get; set; }

    public virtual DbSet<TLotPreparationItem> TLotPreparationItems { get; set; }

    public virtual DbSet<TLotPreparationLot> TLotPreparationLots { get; set; }

    public virtual DbSet<TLotPreparationProductionOrder> TLotPreparationProductionOrders { get; set; }

    public virtual DbSet<TLotPreparationStock> TLotPreparationStocks { get; set; }

    public virtual DbSet<TLotSize> TLotSizes { get; set; }

    public virtual DbSet<TMahnstufe> TMahnstuves { get; set; }

    public virtual DbSet<TMailVorlage> TMailVorlages { get; set; }

    public virtual DbSet<TMandant> TMandants { get; set; }

    public virtual DbSet<TMargensteigerung> TMargensteigerungs { get; set; }

    public virtual DbSet<TMarktplatz> TMarktplatzs { get; set; }

    public virtual DbSet<TMassEinheit> TMassEinheits { get; set; }

    public virtual DbSet<TMassEinheitSprache> TMassEinheitSpraches { get; set; }

    public virtual DbSet<TMdelog> TMdelogs { get; set; }

    public virtual DbSet<TMedienDatei> TMedienDateis { get; set; }

    public virtual DbSet<TMedienDateiAttribut> TMedienDateiAttributs { get; set; }

    public virtual DbSet<TMedienDateiShop> TMedienDateiShops { get; set; }

    public virtual DbSet<TMedienDateiSprache> TMedienDateiSpraches { get; set; }

    public virtual DbSet<TMedienDir> TMedienDirs { get; set; }

    public virtual DbSet<TMedienFile> TMedienFiles { get; set; }

    public virtual DbSet<TMerchantInboundShippingNotificationRef> TMerchantInboundShippingNotificationRefs { get; set; }

    public virtual DbSet<TMerchantProductAttributeMapping> TMerchantProductAttributeMappings { get; set; }

    public virtual DbSet<TMerchantProductUpdateQueue> TMerchantProductUpdateQueues { get; set; }

    public virtual DbSet<TMerchantStockChange> TMerchantStockChanges { get; set; }

    public virtual DbSet<TMerchantStockChangeRef> TMerchantStockChangeRefs { get; set; }

    public virtual DbSet<TMerchantVersandRef> TMerchantVersandRefs { get; set; }

    public virtual DbSet<TMerchantWarehouseRef> TMerchantWarehouseRefs { get; set; }

    public virtual DbSet<TMerkmal> TMerkmals { get; set; }

    public virtual DbSet<TMerkmalBildPlattform> TMerkmalBildPlattforms { get; set; }

    public virtual DbSet<TMerkmalGruppe> TMerkmalGruppes { get; set; }

    public virtual DbSet<TMerkmalGruppeMerkmal> TMerkmalGruppeMerkmals { get; set; }

    public virtual DbSet<TMerkmalSprache> TMerkmalSpraches { get; set; }

    public virtual DbSet<TMerkmalWert> TMerkmalWerts { get; set; }

    public virtual DbSet<TMerkmalWertSprache> TMerkmalWertSpraches { get; set; }

    public virtual DbSet<TMerkmalwertBildPlattform> TMerkmalwertBildPlattforms { get; set; }

    public virtual DbSet<TMessage> TMessages { get; set; }

    public virtual DbSet<TMessage1> TMessages1 { get; set; }

    public virtual DbSet<TMetaDataChanged> TMetaDataChangeds { get; set; }

    public virtual DbSet<TMissedAcknowledge> TMissedAcknowledges { get; set; }

    public virtual DbSet<TMobileAuth> TMobileAuths { get; set; }

    public virtual DbSet<TMobileBenutzer> TMobileBenutzers { get; set; }

    public virtual DbSet<TNachricht> TNachrichts { get; set; }

    public virtual DbSet<TNachrichtAngebot> TNachrichtAngebots { get; set; }

    public virtual DbSet<TNachrichtArtikel> TNachrichtArtikels { get; set; }

    public virtual DbSet<TNachrichtAuftrag> TNachrichtAuftrags { get; set; }

    public virtual DbSet<TNachrichtBenutzerOptionen> TNachrichtBenutzerOptionens { get; set; }

    public virtual DbSet<TNachrichtEingangsrechnung> TNachrichtEingangsrechnungs { get; set; }

    public virtual DbSet<TNachrichtEntwurf> TNachrichtEntwurves { get; set; }

    public virtual DbSet<TNachrichtEntwurfAnhang> TNachrichtEntwurfAnhangs { get; set; }

    public virtual DbSet<TNachrichtEntwurfTyp> TNachrichtEntwurfTyps { get; set; }

    public virtual DbSet<TNachrichtLieferantenbestellung> TNachrichtLieferantenbestellungs { get; set; }

    public virtual DbSet<TNachrichtPreisanfrage> TNachrichtPreisanfrages { get; set; }

    public virtual DbSet<TNachrichtRechnung> TNachrichtRechnungs { get; set; }

    public virtual DbSet<TNachrichtRechnungskorrektur> TNachrichtRechnungskorrekturs { get; set; }

    public virtual DbSet<TNachrichtRetoure> TNachrichtRetoures { get; set; }

    public virtual DbSet<TNachrichtTyp> TNachrichtTyps { get; set; }

    public virtual DbSet<TNachrichtenanhang> TNachrichtenanhangs { get; set; }

    public virtual DbSet<TNegotiationAngebot> TNegotiationAngebots { get; set; }

    public virtual DbSet<TNegotiationAngebotStatus> TNegotiationAngebotStatuses { get; set; }

    public virtual DbSet<TNegotiationAutomatisierung> TNegotiationAutomatisierungs { get; set; }

    public virtual DbSet<TNegotiationGlobaleEinstellungen> TNegotiationGlobaleEinstellungens { get; set; }

    public virtual DbSet<TNegotiationItem> TNegotiationItems { get; set; }

    public virtual DbSet<TNegotiationVerlauf> TNegotiationVerlaufs { get; set; }

    public virtual DbSet<TNotification> TNotifications { get; set; }

    public virtual DbSet<TNotificationDetail> TNotificationDetails { get; set; }

    public virtual DbSet<TNotiz> TNotizs { get; set; }

    public virtual DbSet<TNotiz1> TNotizs1 { get; set; }

    public virtual DbSet<TNotizAnhang> TNotizAnhangs { get; set; }

    public virtual DbSet<TNotizEntwurf> TNotizEntwurves { get; set; }

    public virtual DbSet<TNotizEntwurfAnhang> TNotizEntwurfAnhangs { get; set; }

    public virtual DbSet<TOauthConfig> TOauthConfigs { get; set; }

    public virtual DbSet<TOauthToken> TOauthTokens { get; set; }

    public virtual DbSet<TOffer> TOffers { get; set; }

    public virtual DbSet<TOfferFailure> TOfferFailures { get; set; }

    public virtual DbSet<TOperation> TOperations { get; set; }

    public virtual DbSet<TOperationCustomField> TOperationCustomFields { get; set; }

    public virtual DbSet<TOperationFile> TOperationFiles { get; set; }

    public virtual DbSet<TOperationLabel> TOperationLabels { get; set; }

    public virtual DbSet<TOperationStep> TOperationSteps { get; set; }

    public virtual DbSet<TOperationStepFile> TOperationStepFiles { get; set; }

    public virtual DbSet<TOperationStepSprache> TOperationStepSpraches { get; set; }

    public virtual DbSet<TOption> TOptions { get; set; }

    public virtual DbSet<TOrder> TOrders { get; set; }

    public virtual DbSet<TOrderCancellationEvent> TOrderCancellationEvents { get; set; }

    public virtual DbSet<TOrderInvoiceEvent> TOrderInvoiceEvents { get; set; }

    public virtual DbSet<TOrderItem> TOrderItems { get; set; }

    public virtual DbSet<TOrderShipping> TOrderShippings { get; set; }

    public virtual DbSet<TOutboundItemRef> TOutboundItemRefs { get; set; }

    public virtual DbSet<TOutboundRef> TOutboundRefs { get; set; }

    public virtual DbSet<TPackage> TPackages { get; set; }

    public virtual DbSet<TPackageDpdProperty> TPackageDpdProperties { get; set; }

    public virtual DbSet<TPaymentRule> TPaymentRules { get; set; }

    public virtual DbSet<TPermanentInventurOptionen> TPermanentInventurOptionens { get; set; }

    public virtual DbSet<TPermanentInventurWarenLagerPlatzType> TPermanentInventurWarenLagerPlatzTypes { get; set; }

    public virtual DbSet<TPicVersand> TPicVersands { get; set; }

    public virtual DbSet<TPickliste> TPicklistes { get; set; }

    public virtual DbSet<TPicklisteBenutzerSichtbarkeit> TPicklisteBenutzerSichtbarkeits { get; set; }

    public virtual DbSet<TPicklisteInBoxLock> TPicklisteInBoxLocks { get; set; }

    public virtual DbSet<TPicklistePo> TPicklistePos { get; set; }

    public virtual DbSet<TPicklistePosStatus> TPicklistePosStatuses { get; set; }

    public virtual DbSet<TPicklisteStatus> TPicklisteStatuses { get; set; }

    public virtual DbSet<TPicklisteVorlage> TPicklisteVorlages { get; set; }

    public virtual DbSet<TPicklisteVorlageArtikelLabel> TPicklisteVorlageArtikelLabels { get; set; }

    public virtual DbSet<TPicklisteVorlageArtikelZustand> TPicklisteVorlageArtikelZustands { get; set; }

    public virtual DbSet<TPicklisteVorlageAuftraege> TPicklisteVorlageAuftraeges { get; set; }

    public virtual DbSet<TPicklisteVorlageBoxen> TPicklisteVorlageBoxens { get; set; }

    public virtual DbSet<TPicklisteVorlageEigeneFelder> TPicklisteVorlageEigeneFelders { get; set; }

    public virtual DbSet<TPicklisteVorlageHersteller> TPicklisteVorlageHerstellers { get; set; }

    public virtual DbSet<TPicklisteVorlageSichtbarkeitBenutzer> TPicklisteVorlageSichtbarkeitBenutzers { get; set; }

    public virtual DbSet<TPicklisteVorlageSichtbarkeitPickwagen> TPicklisteVorlageSichtbarkeitPickwagens { get; set; }

    public virtual DbSet<TPicklisteVorlageSichtbarkeitVersandBox> TPicklisteVorlageSichtbarkeitVersandBoxes { get; set; }

    public virtual DbSet<TPicklisteVorlageSortierungsKriterium> TPicklisteVorlageSortierungsKriteria { get; set; }

    public virtual DbSet<TPicklisteVorlageStartZielLager> TPicklisteVorlageStartZielLagers { get; set; }

    public virtual DbSet<TPicklisteVorlageVorgangsTypen> TPicklisteVorlageVorgangsTypens { get; set; }

    public virtual DbSet<TPicklisteVorlageVorgangsstatus> TPicklisteVorlageVorgangsstatuses { get; set; }

    public virtual DbSet<TPicklistenVorschauSync> TPicklistenVorschauSyncs { get; set; }

    public virtual DbSet<TPictureShopMapping> TPictureShopMappings { get; set; }

    public virtual DbSet<TPlattform> TPlattforms { get; set; }

    public virtual DbSet<TPlattformUeberverkaeufeMoeglich> TPlattformUeberverkaeufeMoegliches { get; set; }

    public virtual DbSet<TPlz> TPlzs { get; set; }

    public virtual DbSet<TPosLogeintrag> TPosLogeintrags { get; set; }

    public virtual DbSet<TPrei> TPreis { get; set; }

    public virtual DbSet<TPreisDetail> TPreisDetails { get; set; }

    public virtual DbSet<TPreisExportVorlage> TPreisExportVorlages { get; set; }

    public virtual DbSet<TPreisImportVorlage> TPreisImportVorlages { get; set; }

    public virtual DbSet<TPreiskalkulation> TPreiskalkulations { get; set; }

    public virtual DbSet<TPreiskalkulationLogbuch> TPreiskalkulationLogbuches { get; set; }

    public virtual DbSet<TPreiskalkulationLogbuchDetail> TPreiskalkulationLogbuchDetails { get; set; }

    public virtual DbSet<TPreiskalkulationSetting> TPreiskalkulationSettings { get; set; }

    public virtual DbSet<TProcessParameter> TProcessParameters { get; set; }

    public virtual DbSet<TProcessParameter1> TProcessParameters1 { get; set; }

    public virtual DbSet<TProcessParameterActualValue> TProcessParameterActualValues { get; set; }

    public virtual DbSet<TProcessParameterActualValueObjectType> TProcessParameterActualValueObjectTypes { get; set; }

    public virtual DbSet<TProcessParameterAssignment> TProcessParameterAssignments { get; set; }

    public virtual DbSet<TProcessParameterAssignment1> TProcessParameterAssignments1 { get; set; }

    public virtual DbSet<TProcessParameterAssignmentTargetValueObjectType> TProcessParameterAssignmentTargetValueObjectTypes { get; set; }

    public virtual DbSet<TProcessParameterGroup> TProcessParameterGroups { get; set; }

    public virtual DbSet<TProcessParameterGroupLanguage> TProcessParameterGroupLanguages { get; set; }

    public virtual DbSet<TProcessParameterLanguage> TProcessParameterLanguages { get; set; }

    public virtual DbSet<TProcessParameterLanguage1> TProcessParameterLanguages1 { get; set; }

    public virtual DbSet<TProcessParameterTargetValue> TProcessParameterTargetValues { get; set; }

    public virtual DbSet<TProcessParameterTargetValueObjectType> TProcessParameterTargetValueObjectTypes { get; set; }

    public virtual DbSet<TProcessParameterValue> TProcessParameterValues { get; set; }

    public virtual DbSet<TProdCondition> TProdConditions { get; set; }

    public virtual DbSet<TProdItem> TProdItems { get; set; }

    public virtual DbSet<TProdItemCustomField> TProdItemCustomFields { get; set; }

    public virtual DbSet<TProductPictureRef> TProductPictureRefs { get; set; }

    public virtual DbSet<TProductRef> TProductRefs { get; set; }

    public virtual DbSet<TProductionOrder> TProductionOrders { get; set; }

    public virtual DbSet<TProductionOrderCustomField> TProductionOrderCustomFields { get; set; }

    public virtual DbSet<TProductionOrderFile> TProductionOrderFiles { get; set; }

    public virtual DbSet<TProductionOrderLabel> TProductionOrderLabels { get; set; }

    public virtual DbSet<TProductionOrderProducible> TProductionOrderProducibles { get; set; }

    public virtual DbSet<TProductionOrderSearch> TProductionOrderSearches { get; set; }

    public virtual DbSet<TQueue> TQueues { get; set; }

    public virtual DbSet<TQueue1> TQueues1 { get; set; }

    public virtual DbSet<TQueue2> TQueues2 { get; set; }

    public virtual DbSet<TQueueTran> TQueueTrans { get; set; }

    public virtual DbSet<TRechnung> TRechnungs { get; set; }

    public virtual DbSet<TRechnung1> TRechnungs1 { get; set; }

    public virtual DbSet<TRechnungAdresse1> TRechnungAdresses1 { get; set; }

    public virtual DbSet<TRechnungAusgabeDateien> TRechnungAusgabeDateiens { get; set; }

    public virtual DbSet<TRechnungBackup> TRechnungBackups { get; set; }

    public virtual DbSet<TRechnungEckdaten> TRechnungEckdatens { get; set; }

    public virtual DbSet<TRechnungFile> TRechnungFiles { get; set; }

    public virtual DbSet<TRechnungKorrektur> TRechnungKorrekturs { get; set; }

    public virtual DbSet<TRechnungLabel> TRechnungLabels { get; set; }

    public virtual DbSet<TRechnungLieferscheinPosition> TRechnungLieferscheinPositions { get; set; }

    public virtual DbSet<TRechnungLog> TRechnungLogs { get; set; }

    public virtual DbSet<TRechnungPosition> TRechnungPositions { get; set; }

    public virtual DbSet<TRechnungPositionEckdaten> TRechnungPositionEckdatens { get; set; }

    public virtual DbSet<TRechnungPositionEigenschaft> TRechnungPositionEigenschafts { get; set; }

    public virtual DbSet<TRechnungPositionFile> TRechnungPositionFiles { get; set; }

    public virtual DbSet<TRechnungPositionTeilmengen> TRechnungPositionTeilmengens { get; set; }

    public virtual DbSet<TRechnungPositionTeilmengenKonfiguration> TRechnungPositionTeilmengenKonfigurations { get; set; }

    public virtual DbSet<TRechnungPositionText> TRechnungPositionTexts { get; set; }

    public virtual DbSet<TRechnungStorno> TRechnungStornos { get; set; }

    public virtual DbSet<TRechnungStornogrund> TRechnungStornogrunds { get; set; }

    public virtual DbSet<TRechnungText> TRechnungTexts { get; set; }

    public virtual DbSet<TRechnungZahlungsinfo> TRechnungZahlungsinfos { get; set; }

    public virtual DbSet<TRechnungadresse> TRechnungadresses { get; set; }

    public virtual DbSet<TRecht> TRechts { get; set; }

    public virtual DbSet<TRechtBenutzerGruppe> TRechtBenutzerGruppes { get; set; }

    public virtual DbSet<TRechtBenutzerGruppenZuordnung> TRechtBenutzerGruppenZuordnungs { get; set; }

    public virtual DbSet<TRechte> TRechtes { get; set; }

    public virtual DbSet<TRefreshToken> TRefreshTokens { get; set; }

    public virtual DbSet<TReplenishmentDestination> TReplenishmentDestinations { get; set; }

    public virtual DbSet<TReport> TReports { get; set; }

    public virtual DbSet<TReport1> TReports1 { get; set; }

    public virtual DbSet<TReportsDataSet> TReportsDataSets { get; set; }

    public virtual DbSet<TRepricerProcess> TRepricerProcesses { get; set; }

    public virtual DbSet<TResource> TResources { get; set; }

    public virtual DbSet<TResourceAbsenteeism> TResourceAbsenteeisms { get; set; }

    public virtual DbSet<TResourceCustomField> TResourceCustomFields { get; set; }

    public virtual DbSet<TResourceGroup> TResourceGroups { get; set; }

    public virtual DbSet<TResourceLabel> TResourceLabels { get; set; }

    public virtual DbSet<TResourceSub> TResourceSubs { get; set; }

    public virtual DbSet<TResourceType> TResourceTypes { get; set; }

    public virtual DbSet<TResourceUser> TResourceUsers { get; set; }

    public virtual DbSet<TResourcesGroup> TResourcesGroups { get; set; }

    public virtual DbSet<TRetourPosGutschriftMapping> TRetourPosGutschriftMappings { get; set; }

    public virtual DbSet<TReturnCommandQueue> TReturnCommandQueues { get; set; }

    public virtual DbSet<TReturnItemRef> TReturnItemRefs { get; set; }

    public virtual DbSet<TReturnReason> TReturnReasons { get; set; }

    public virtual DbSet<TReturnRef> TReturnRefs { get; set; }

    public virtual DbSet<TReturnStatusMapping> TReturnStatusMappings { get; set; }

    public virtual DbSet<TRmgrund> TRmgrunds { get; set; }

    public virtual DbSet<TRmgrundKategorie> TRmgrundKategories { get; set; }

    public virtual DbSet<TRmgrundSprache> TRmgrundSpraches { get; set; }

    public virtual DbSet<TRmgrundWarengruppe> TRmgrundWarengruppes { get; set; }

    public virtual DbSet<TRmretoure> TRmretoures { get; set; }

    public virtual DbSet<TRmretoureAbholAdresse> TRmretoureAbholAdresses { get; set; }

    public virtual DbSet<TRmretoureAustauschArtikel> TRmretoureAustauschArtikels { get; set; }

    public virtual DbSet<TRmretourePo> TRmretourePos { get; set; }

    public virtual DbSet<TRmretourenEtikett> TRmretourenEtiketts { get; set; }

    public virtual DbSet<TRmstatus> TRmstatuses { get; set; }

    public virtual DbSet<TRmstatusBerechtigung> TRmstatusBerechtigungs { get; set; }

    public virtual DbSet<TRmstatusSprache> TRmstatusSpraches { get; set; }

    public virtual DbSet<TRmstatusVerlauf> TRmstatusVerlaufs { get; set; }

    public virtual DbSet<TRmstatusWorkflow> TRmstatusWorkflows { get; set; }

    public virtual DbSet<TRueckhalteGrund> TRueckhalteGrunds { get; set; }

    public virtual DbSet<TSalesChannelAttribute> TSalesChannelAttributes { get; set; }

    public virtual DbSet<TSchedule> TSchedules { get; set; }

    public virtual DbSet<TScopeType> TScopeTypes { get; set; }

    public virtual DbSet<TScript> TScripts { get; set; }

    public virtual DbSet<TScxLogeintrag> TScxLogeintrags { get; set; }

    public virtual DbSet<TSellerAttribute> TSellerAttributes { get; set; }

    public virtual DbSet<TSellerAttributeConditionalMandatory> TSellerAttributeConditionalMandatories { get; set; }

    public virtual DbSet<TSellerAttributeConditionalOptional> TSellerAttributeConditionalOptionals { get; set; }

    public virtual DbSet<TSellerAttributeListVersion> TSellerAttributeListVersions { get; set; }

    public virtual DbSet<TSellerAttributeValue> TSellerAttributeValues { get; set; }

    public virtual DbSet<TSendungsdatenaustausch> TSendungsdatenaustausches { get; set; }

    public virtual DbSet<TServerConfig> TServerConfigs { get; set; }

    public virtual DbSet<TSessionId> TSessionIds { get; set; }

    public virtual DbSet<TSetting> TSettings { get; set; }

    public virtual DbSet<TSetting1> TSettings1 { get; set; }

    public virtual DbSet<TSetting2> TSettings2 { get; set; }

    public virtual DbSet<TSetting3> TSettings3 { get; set; }

    public virtual DbSet<TSettlementPosKostentypen> TSettlementPosKostentypens { get; set; }

    public virtual DbSet<TSetup> TSetups { get; set; }

    public virtual DbSet<TSfpversand> TSfpversands { get; set; }

    public virtual DbSet<TShipperAccount> TShipperAccounts { get; set; }

    public virtual DbSet<TShippingDocument> TShippingDocuments { get; set; }

    public virtual DbSet<TShippingMessage> TShippingMessages { get; set; }

    public virtual DbSet<TShippingMethodMapping> TShippingMethodMappings { get; set; }

    public virtual DbSet<TShippingPrinterConfiguration> TShippingPrinterConfigurations { get; set; }

    public virtual DbSet<TShippingRule> TShippingRules { get; set; }

    public virtual DbSet<TShippingRuleMapping> TShippingRuleMappings { get; set; }

    public virtual DbSet<TShippingServiceProvider> TShippingServiceProviders { get; set; }

    public virtual DbSet<TShop> TShops { get; set; }

    public virtual DbSet<TShopConnectorFunktion> TShopConnectorFunktions { get; set; }

    public virtual DbSet<TShopConnectorSynchronisierung> TShopConnectorSynchronisierungs { get; set; }

    public virtual DbSet<TShopKonfiguration> TShopKonfigurations { get; set; }

    public virtual DbSet<TShopKundenGruppe> TShopKundenGruppes { get; set; }

    public virtual DbSet<TShopMappingKundengruppe> TShopMappingKundengruppes { get; set; }

    public virtual DbSet<TShopScx> TShopScxes { get; set; }

    public virtual DbSet<TShopSprache> TShopSpraches { get; set; }

    public virtual DbSet<TShopSubshop> TShopSubshops { get; set; }

    public virtual DbSet<TShopUeberverkaeufeMoeglich> TShopUeberverkaeufeMoegliches { get; set; }

    public virtual DbSet<TShopWaehrung> TShopWaehrungs { get; set; }

    public virtual DbSet<TSonderpreise> TSonderpreises { get; set; }

    public virtual DbSet<TSpracheUsed> TSpracheUseds { get; set; }

    public virtual DbSet<TSprachen> TSprachens { get; set; }

    public virtual DbSet<TSqlError> TSqlErrors { get; set; }

    public virtual DbSet<TSqlErrorMessage> TSqlErrorMessages { get; set; }

    public virtual DbSet<TStampit> TStampits { get; set; }

    public virtual DbSet<TState> TStates { get; set; }

    public virtual DbSet<TStatistic> TStatistics { get; set; }

    public virtual DbSet<TStatistikAuswertungstyp> TStatistikAuswertungstyps { get; set; }

    public virtual DbSet<TStatistikBenutzerordner> TStatistikBenutzerordners { get; set; }

    public virtual DbSet<TStatistikEazyShipping> TStatistikEazyShippings { get; set; }

    public virtual DbSet<TStatistikPicklisten> TStatistikPicklistens { get; set; }

    public virtual DbSet<TStatistikSteuerelement> TStatistikSteuerelements { get; set; }

    public virtual DbSet<TStatistikVorlage> TStatistikVorlages { get; set; }

    public virtual DbSet<TStatistikVorlageChartEinstellung> TStatistikVorlageChartEinstellungs { get; set; }

    public virtual DbSet<TStatistikVorlageOrdner> TStatistikVorlageOrdners { get; set; }

    public virtual DbSet<TStatistikvorlagenOrdnerzuordnung> TStatistikvorlagenOrdnerzuordnungs { get; set; }

    public virtual DbSet<TStatistikvorlagenserialisierung> TStatistikvorlagenserialisierungs { get; set; }

    public virtual DbSet<TStatus> TStatuses { get; set; }

    public virtual DbSet<TStatus1> TStatuses1 { get; set; }

    public virtual DbSet<TStepLimit> TStepLimits { get; set; }

    public virtual DbSet<TSteuerSammelkonten> TSteuerSammelkontens { get; set; }

    public virtual DbSet<TSteuercache> TSteuercaches { get; set; }

    public virtual DbSet<TSteuerklasse> TSteuerklasses { get; set; }

    public virtual DbSet<TSteuersatz> TSteuersatzs { get; set; }

    public virtual DbSet<TSteuersatzschluessel> TSteuersatzschluessels { get; set; }

    public virtual DbSet<TSteuerschluessel> TSteuerschluessels { get; set; }

    public virtual DbSet<TSteuerzone> TSteuerzones { get; set; }

    public virtual DbSet<TSteuerzoneLand> TSteuerzoneLands { get; set; }

    public virtual DbSet<TStockRef> TStockRefs { get; set; }

    public virtual DbSet<TStueckliste> TStuecklistes { get; set; }

    public virtual DbSet<TSubStatistikZustand> TSubStatistikZustands { get; set; }

    public virtual DbSet<TSubscriptionInformation> TSubscriptionInformations { get; set; }

    public virtual DbSet<TSyncDelete> TSyncDeletes { get; set; }

    public virtual DbSet<TSyncLogsitzung> TSyncLogsitzungs { get; set; }

    public virtual DbSet<TSyncStatus> TSyncStatuses { get; set; }

    public virtual DbSet<TSyncType> TSyncTypes { get; set; }

    public virtual DbSet<TTelefonat> TTelefonats { get; set; }

    public virtual DbSet<TTelefonatAnhang> TTelefonatAnhangs { get; set; }

    public virtual DbSet<TTelefonatEntwurf> TTelefonatEntwurves { get; set; }

    public virtual DbSet<TTelefonatEntwurfAnhang> TTelefonatEntwurfAnhangs { get; set; }

    public virtual DbSet<TText> TTexts { get; set; }

    public virtual DbSet<TTextFiltersSplitStreetException> TTextFiltersSplitStreetExceptions { get; set; }

    public virtual DbSet<TTextFiltersSplitStreetExpression> TTextFiltersSplitStreetExpressions { get; set; }

    public virtual DbSet<TTextbaustein> TTextbausteins { get; set; }

    public virtual DbSet<TTextbausteinGruppe> TTextbausteinGruppes { get; set; }

    public virtual DbSet<TTextbausteinInhaltSprache> TTextbausteinInhaltSpraches { get; set; }

    public virtual DbSet<TTexteMitValue> TTexteMitValues { get; set; }

    public virtual DbSet<TTicket> TTickets { get; set; }

    public virtual DbSet<TTicketBeobachter> TTicketBeobachters { get; set; }

    public virtual DbSet<TTicketEckdaten> TTicketEckdatens { get; set; }

    public virtual DbSet<TTicketLabel> TTicketLabels { get; set; }

    public virtual DbSet<TTicketRelation> TTicketRelations { get; set; }

    public virtual DbSet<TTimeModel> TTimeModels { get; set; }

    public virtual DbSet<TTimeModelEntry> TTimeModelEntries { get; set; }

    public virtual DbSet<TTimeModelHoliday> TTimeModelHolidays { get; set; }

    public virtual DbSet<TTimeModelReplacement> TTimeModelReplacements { get; set; }

    public virtual DbSet<TTimeModelType> TTimeModelTypes { get; set; }

    public virtual DbSet<TTrackAndTraceConfiguration> TTrackAndTraceConfigurations { get; set; }

    public virtual DbSet<TTrackAndTraceDpdConfiguration> TTrackAndTraceDpdConfigurations { get; set; }

    public virtual DbSet<TTrackingLog> TTrackingLogs { get; set; }

    public virtual DbSet<TUmlagerung> TUmlagerungs { get; set; }

    public virtual DbSet<TUmlagerungPo> TUmlagerungPos { get; set; }

    public virtual DbSet<TUmlagerungVersandartenMapping> TUmlagerungVersandartenMappings { get; set; }

    public virtual DbSet<TUmsatzSteuerPruefung> TUmsatzSteuerPruefungs { get; set; }

    public virtual DbSet<TUmsatzzuordnungLog> TUmsatzzuordnungLogs { get; set; }

    public virtual DbSet<TUniqueSession> TUniqueSessions { get; set; }

    public virtual DbSet<TUpdateInfo> TUpdateInfos { get; set; }

    public virtual DbSet<TUpdateLog> TUpdateLogs { get; set; }

    public virtual DbSet<TUpdateMigration> TUpdateMigrations { get; set; }

    public virtual DbSet<TUploadDatum> TUploadData { get; set; }

    public virtual DbSet<TUserControlSetting> TUserControlSettings { get; set; }

    public virtual DbSet<TUserLayout> TUserLayouts { get; set; }

    public virtual DbSet<TUserResource> TUserResources { get; set; }

    public virtual DbSet<TUserSession> TUserSessions { get; set; }

    public virtual DbSet<TUserSetting> TUserSettings { get; set; }

    public virtual DbSet<TUserType> TUserTypes { get; set; }

    public virtual DbSet<TVariationMapping> TVariationMappings { get; set; }

    public virtual DbSet<TVariationWertMapping> TVariationWertMappings { get; set; }

    public virtual DbSet<TVaterLabelLabel> TVaterLabelLabels { get; set; }

    public virtual DbSet<TVc> TVcs { get; set; }

    public virtual DbSet<TVcsHistory> TVcsHistories { get; set; }

    public virtual DbSet<TVcsLite> TVcsLites { get; set; }

    public virtual DbSet<TVcsLiteHistory> TVcsLiteHistories { get; set; }

    public virtual DbSet<TVcsLiteUploadQueue> TVcsLiteUploadQueues { get; set; }

    public virtual DbSet<TVcsRechnungsherkunft> TVcsRechnungsherkunfts { get; set; }

    public virtual DbSet<TVcsRechnungskorrekturherkunft> TVcsRechnungskorrekturherkunfts { get; set; }

    public virtual DbSet<TVcsSelfInvoice> TVcsSelfInvoices { get; set; }

    public virtual DbSet<TVcsSelfInvoiceHistory> TVcsSelfInvoiceHistories { get; set; }

    public virtual DbSet<TVcsSelfInvoicePosMapping> TVcsSelfInvoicePosMappings { get; set; }

    public virtual DbSet<TVcsUploadDataQueue> TVcsUploadDataQueues { get; set; }

    public virtual DbSet<TVcsUploadDatum> TVcsUploadData { get; set; }

    public virtual DbSet<TVcsselfInvoiceLogeintrag> TVcsselfInvoiceLogeintrags { get; set; }

    public virtual DbSet<TVerfuegbarkeitsAnfrage> TVerfuegbarkeitsAnfrages { get; set; }

    public virtual DbSet<TVerkaufskanalArtikelDatum> TVerkaufskanalArtikelData { get; set; }

    public virtual DbSet<TVerkaufskanalCategoryFeldWert> TVerkaufskanalCategoryFeldWerts { get; set; }

    public virtual DbSet<TVerkaufskanalChannelFeldWert> TVerkaufskanalChannelFeldWerts { get; set; }

    public virtual DbSet<TVerkaufskanalKategoriemapping> TVerkaufskanalKategoriemappings { get; set; }

    public virtual DbSet<TVerpackenSubset> TVerpackenSubsets { get; set; }

    public virtual DbSet<TVerpackenSubsetDetail> TVerpackenSubsetDetails { get; set; }

    public virtual DbSet<TVersand> TVersands { get; set; }

    public virtual DbSet<TVersandInfo> TVersandInfos { get; set; }

    public virtual DbSet<TVersandKartonage> TVersandKartonages { get; set; }

    public virtual DbSet<TVersandKonfiguration> TVersandKonfigurations { get; set; }

    public virtual DbSet<TVersandKonfigurationArtikelZustand> TVersandKonfigurationArtikelZustands { get; set; }

    public virtual DbSet<TVersandKonfigurationEigeneFelder> TVersandKonfigurationEigeneFelders { get; set; }

    public virtual DbSet<TVersandPo> TVersandPos { get; set; }

    public virtual DbSet<TVersandVorlage> TVersandVorlages { get; set; }

    public virtual DbSet<TVersandartSprache> TVersandartSpraches { get; set; }

    public virtual DbSet<TVersanddatenExportVorlage> TVersanddatenExportVorlages { get; set; }

    public virtual DbSet<TVersanddatenImportVorlage> TVersanddatenImportVorlages { get; set; }

    public virtual DbSet<TVersandklasse> TVersandklasses { get; set; }

    public virtual DbSet<TVersandlager> TVersandlagers { get; set; }

    public virtual DbSet<TVersandschnittstellenKonfiguration> TVersandschnittstellenKonfigurations { get; set; }

    public virtual DbSet<TVersandtoolDruckEinstellung> TVersandtoolDruckEinstellungs { get; set; }

    public virtual DbSet<TVertrauenswuerdigerAbsender> TVertrauenswuerdigerAbsenders { get; set; }

    public virtual DbSet<TVordefinierteAntwort> TVordefinierteAntworts { get; set; }

    public virtual DbSet<TVorgang> TVorgangs { get; set; }

    public virtual DbSet<TVorgangFulfillmentLog> TVorgangFulfillmentLogs { get; set; }

    public virtual DbSet<TVorgangQueue> TVorgangQueues { get; set; }

    public virtual DbSet<TVorgangType> TVorgangTypes { get; set; }

    public virtual DbSet<TVorgangsfarbe> TVorgangsfarbes { get; set; }

    public virtual DbSet<TVorgangsstatus> TVorgangsstatuses { get; set; }

    public virtual DbSet<TVorlage> TVorlages { get; set; }

    public virtual DbSet<TVorlage1> TVorlages1 { get; set; }

    public virtual DbSet<TVorlagenset> TVorlagensets { get; set; }

    public virtual DbSet<TVorlagensetEinstellung> TVorlagensetEinstellungs { get; set; }

    public virtual DbSet<TVoucher> TVouchers { get; set; }

    public virtual DbSet<TVoucherCloudLogeintrag> TVoucherCloudLogeintrags { get; set; }

    public virtual DbSet<TVoucherEinloesungen> TVoucherEinloesungens { get; set; }

    public virtual DbSet<TVouchersToken> TVouchersTokens { get; set; }

    public virtual DbSet<TWaehrung> TWaehrungs { get; set; }

    public virtual DbSet<TWaehrungAlt> TWaehrungAlts { get; set; }

    public virtual DbSet<TWaehrungIso> TWaehrungIsos { get; set; }

    public virtual DbSet<TWarehouseBinDevice> TWarehouseBinDevices { get; set; }

    public virtual DbSet<TWarenLager> TWarenLagers { get; set; }

    public virtual DbSet<TWarenLagerAusgang> TWarenLagerAusgangs { get; set; }

    public virtual DbSet<TWarenLagerDimensionTyp> TWarenLagerDimensionTyps { get; set; }

    public virtual DbSet<TWarenLagerEingang> TWarenLagerEingangs { get; set; }

    public virtual DbSet<TWarenLagerEingangHistorie> TWarenLagerEingangHistories { get; set; }

    public virtual DbSet<TWarenLagerEingangSubset> TWarenLagerEingangSubsets { get; set; }

    public virtual DbSet<TWarenLagerEingangSubsetDetail> TWarenLagerEingangSubsetDetails { get; set; }

    public virtual DbSet<TWarenLagerFulFillmentDienstleister> TWarenLagerFulFillmentDienstleisters { get; set; }

    public virtual DbSet<TWarenLagerOptionen> TWarenLagerOptionens { get; set; }

    public virtual DbSet<TWarenLagerPlatz> TWarenLagerPlatzs { get; set; }

    public virtual DbSet<TWarenLagerPlatzArtikel> TWarenLagerPlatzArtikels { get; set; }

    public virtual DbSet<TWarenLagerPlatzDefault> TWarenLagerPlatzDefaults { get; set; }

    public virtual DbSet<TWarenLagerPrioGlobal> TWarenLagerPrioGlobals { get; set; }

    public virtual DbSet<TWarengruppe> TWarengruppes { get; set; }

    public virtual DbSet<TWarenlagerArtikelOptionen> TWarenlagerArtikelOptionens { get; set; }

    public virtual DbSet<TWarenlagerOptionenArtikelbild> TWarenlagerOptionenArtikelbilds { get; set; }

    public virtual DbSet<TWarenlagerOptionenAuftragDetail> TWarenlagerOptionenAuftragDetails { get; set; }

    public virtual DbSet<TWartungsDaten> TWartungsDatens { get; set; }

    public virtual DbSet<TWawiAttribut> TWawiAttributs { get; set; }

    public virtual DbSet<TWawiAttributSprache> TWawiAttributSpraches { get; set; }

    public virtual DbSet<TWebshopModule> TWebshopModules { get; set; }

    public virtual DbSet<TWidget> TWidgets { get; set; }

    public virtual DbSet<TWidgetBenutzer> TWidgetBenutzers { get; set; }

    public virtual DbSet<TWidgetDashboardPageMap> TWidgetDashboardPageMaps { get; set; }

    public virtual DbSet<TWidgetLayout> TWidgetLayouts { get; set; }

    public virtual DbSet<TWidgetSetting> TWidgetSettings { get; set; }

    public virtual DbSet<TWidgetTemplate> TWidgetTemplates { get; set; }

    public virtual DbSet<TWidgetTemplateSetting> TWidgetTemplateSettings { get; set; }

    public virtual DbSet<TWmsInventur> TWmsInventurs { get; set; }

    public virtual DbSet<TWmsInventurlog> TWmsInventurlogs { get; set; }

    public virtual DbSet<TWmsInventurlogSubset> TWmsInventurlogSubsets { get; set; }

    public virtual DbSet<TWmsInventurlogSubsetDetail> TWmsInventurlogSubsetDetails { get; set; }

    public virtual DbSet<TWmsboxenPackVerpackteSerNo> TWmsboxenPackVerpackteSerNos { get; set; }

    public virtual DbSet<TWmsbyLight> TWmsbyLights { get; set; }

    public virtual DbSet<TWmserrorLog> TWmserrorLogs { get; set; }

    public virtual DbSet<TWmserrorLogController> TWmserrorLogControllers { get; set; }

    public virtual DbSet<TWmslagerBereich> TWmslagerBereiches { get; set; }

    public virtual DbSet<TWmslagerBereichPlatz> TWmslagerBereichPlatzs { get; set; }

    public virtual DbSet<TWmsoptionen> TWmsoptionens { get; set; }

    public virtual DbSet<TWmspackItem> TWmspackItems { get; set; }

    public virtual DbSet<TWmspackItemDatum> TWmspackItemData { get; set; }

    public virtual DbSet<TWmsversandLock> TWmsversandLocks { get; set; }

    public virtual DbSet<TWorkJob> TWorkJobs { get; set; }

    public virtual DbSet<TWorkJobBillOfMaterialsComponent> TWorkJobBillOfMaterialsComponents { get; set; }

    public virtual DbSet<TWorkJobBillOfMaterialsComponentStock> TWorkJobBillOfMaterialsComponentStocks { get; set; }

    public virtual DbSet<TWorkJobOperation> TWorkJobOperations { get; set; }

    public virtual DbSet<TWorkJobOperationStep> TWorkJobOperationSteps { get; set; }

    public virtual DbSet<TWorkJobResult> TWorkJobResults { get; set; }

    public virtual DbSet<TWorkProcess> TWorkProcesses { get; set; }

    public virtual DbSet<TWorkProcessIteration> TWorkProcessIterations { get; set; }

    public virtual DbSet<TWorkProcessReplenishment> TWorkProcessReplenishments { get; set; }

    public virtual DbSet<TWorkProcessSearch> TWorkProcessSearches { get; set; }

    public virtual DbSet<TWorkbenchBin> TWorkbenchBins { get; set; }

    public virtual DbSet<TWorkbenchResource> TWorkbenchResources { get; set; }

    public virtual DbSet<TWorkerInfo> TWorkerInfos { get; set; }

    public virtual DbSet<TWorkflow> TWorkflows { get; set; }

    public virtual DbSet<TWorkflowAktion> TWorkflowAktions { get; set; }

    public virtual DbSet<TWorkflowBedingung> TWorkflowBedingungs { get; set; }

    public virtual DbSet<TWorkflowEigenschaft> TWorkflowEigenschafts { get; set; }

    public virtual DbSet<TWorkflowEvent> TWorkflowEvents { get; set; }

    public virtual DbSet<TWorkflowEventGroup> TWorkflowEventGroups { get; set; }

    public virtual DbSet<TWorkflowEventGroupMapping> TWorkflowEventGroupMappings { get; set; }

    public virtual DbSet<TWorkflowLog> TWorkflowLogs { get; set; }

    public virtual DbSet<TWorkflowObject> TWorkflowObjects { get; set; }

    public virtual DbSet<TWorkflowQueue> TWorkflowQueues { get; set; }

    public virtual DbSet<TWorklog> TWorklogs { get; set; }

    public virtual DbSet<TXmlbestellImport> TXmlbestellImports { get; set; }

    public virtual DbSet<TXmlgutschriftImport> TXmlgutschriftImports { get; set; }

    public virtual DbSet<TXmlimportvorlage> TXmlimportvorlages { get; set; }

    public virtual DbSet<TXsell> TXsells { get; set; }

    public virtual DbSet<TXsellGruppe> TXsellGruppes { get; set; }

    public virtual DbSet<TXsellGruppeArtikel> TXsellGruppeArtikels { get; set; }

    public virtual DbSet<TZahlen> TZahlens { get; set; }

    public virtual DbSet<TZahlung> TZahlungs { get; set; }

    public virtual DbSet<TZahlungsArtSprache> TZahlungsArtSpraches { get; set; }

    public virtual DbSet<TZahlungsErinnerung> TZahlungsErinnerungs { get; set; }

    public virtual DbSet<TZahlungsabgleichAmaPayReportRequest> TZahlungsabgleichAmaPayReportRequests { get; set; }

    public virtual DbSet<TZahlungsabgleichAusgang> TZahlungsabgleichAusgangs { get; set; }

    public virtual DbSet<TZahlungsabgleichFilter> TZahlungsabgleichFilters { get; set; }

    public virtual DbSet<TZahlungsabgleichLogeintrag> TZahlungsabgleichLogeintrags { get; set; }

    public virtual DbSet<TZahlungsabgleichLogsitzung> TZahlungsabgleichLogsitzungs { get; set; }

    public virtual DbSet<TZahlungsabgleichModul> TZahlungsabgleichModuls { get; set; }

    public virtual DbSet<TZahlungsabgleichUmsatz> TZahlungsabgleichUmsatzs { get; set; }

    public virtual DbSet<TZahlungsart> TZahlungsarts { get; set; }

    public virtual DbSet<TZahlungsausgangLogeintrag> TZahlungsausgangLogeintrags { get; set; }

    public virtual DbSet<TZalog> TZalogs { get; set; }

    public virtual DbSet<TZavorlage> TZavorlages { get; set; }

    public virtual DbSet<TZustand> TZustands { get; set; }

    public virtual DbSet<TZustandKategorie> TZustandKategories { get; set; }

    public virtual DbSet<TZustandSprache> TZustandSpraches { get; set; }

    public virtual DbSet<TZustandWarengruppe> TZustandWarengruppes { get; set; }

    public virtual DbSet<Tangebotnr> Tangebotnrs { get; set; }

    public virtual DbSet<Tansprechpartner> Tansprechpartners { get; set; }

    public virtual DbSet<Tartikeldownload> Tartikeldownloads { get; set; }

    public virtual DbSet<Tartikelkonfiggruppe> Tartikelkonfiggruppes { get; set; }

    public virtual DbSet<Tbenutzer> Tbenutzers { get; set; }

    public virtual DbSet<Tbenutzerrechte> Tbenutzerrechtes { get; set; }

    public virtual DbSet<Tdownloadsprache> Tdownloadspraches { get; set; }

    public virtual DbSet<Teigenschaft> Teigenschafts { get; set; }

    public virtual DbSet<Teigenschaftwert> Teigenschaftwerts { get; set; }

    public virtual DbSet<Teinstellungen> Teinstellungens { get; set; }

    public virtual DbSet<Teklieferantpreise> Teklieferantpreises { get; set; }

    public virtual DbSet<Tfirma> Tfirmas { get; set; }

    public virtual DbSet<Tgutschrift> Tgutschrifts { get; set; }

    public virtual DbSet<Tgutschrifteigenschaft> Tgutschrifteigenschafts { get; set; }

    public virtual DbSet<Tinetadress> Tinetadresses { get; set; }

    public virtual DbSet<Tinetbestellpo> Tinetbestellpos { get; set; }

    public virtual DbSet<Tinetbestellposeigenschaft> Tinetbestellposeigenschafts { get; set; }

    public virtual DbSet<Tinetbestellung> Tinetbestellungs { get; set; }

    public virtual DbSet<Tinetkunde> Tinetkundes { get; set; }

    public virtual DbSet<Tinetzahlungsinfo> Tinetzahlungsinfos { get; set; }

    public virtual DbSet<Tkategorie> Tkategories { get; set; }

    public virtual DbSet<Tkategorieartikel> Tkategorieartikels { get; set; }

    public virtual DbSet<Tkonfiggruppe> Tkonfiggruppes { get; set; }

    public virtual DbSet<Tkonfiggruppesprache> Tkonfiggruppespraches { get; set; }

    public virtual DbSet<Tkonfigitem> Tkonfigitems { get; set; }

    public virtual DbSet<Tkonfigitemprei> Tkonfigitempreis { get; set; }

    public virtual DbSet<Tkonfigitemsprache> Tkonfigitemspraches { get; set; }

    public virtual DbSet<Tkonfigshop> Tkonfigshops { get; set; }

    public virtual DbSet<Tkontodaten> Tkontodatens { get; set; }

    public virtual DbSet<Tkunde> Tkundes { get; set; }

    public virtual DbSet<Tlager> Tlagers { get; set; }

    public virtual DbSet<Tlagerbestand> Tlagerbestands { get; set; }

    public virtual DbSet<TlagerbestandProLagerLagerartikel> TlagerbestandProLagerLagerartikels { get; set; }

    public virtual DbSet<Tlagerort> Tlagerorts { get; set; }

    public virtual DbSet<Tland> Tlands { get; set; }

    public virtual DbSet<Tliefartikel> Tliefartikels { get; set; }

    public virtual DbSet<Tlieferant> Tlieferants { get; set; }

    public virtual DbSet<Tmahnung> Tmahnungs { get; set; }

    public virtual DbSet<Tmahnungstext> Tmahnungstexts { get; set; }

    public virtual DbSet<Tnews> Tnews { get; set; }

    public virtual DbSet<Tnummern> Tnummerns { get; set; }

    public virtual DbSet<TotalsInvoice> TotalsInvoices { get; set; }

    public virtual DbSet<TotalsInvoiceCorrection> TotalsInvoiceCorrections { get; set; }

    public virtual DbSet<TotalsPurchaseOrder> TotalsPurchaseOrders { get; set; }

    public virtual DbSet<TotalsSalesOrder> TotalsSalesOrders { get; set; }

    public virtual DbSet<TotalsSalesQuotation> TotalsSalesQuotations { get; set; }

    public virtual DbSet<Tpk> Tpks { get; set; }

    public virtual DbSet<Tprintform> Tprintforms { get; set; }

    public virtual DbSet<Trechnungnr> Trechnungnrs { get; set; }

    public virtual DbSet<Trechnungsadresse> Trechnungsadresses { get; set; }

    public virtual DbSet<Tsynch> Tsynches { get; set; }

    public virtual DbSet<Tversandart> Tversandarts { get; set; }

    public virtual DbSet<Tversion> Tversions { get; set; }

    public virtual DbSet<Twebversand> Twebversands { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<V360GradSicht> V360GradSichts { get; set; }

    public virtual DbSet<VAbrechnung> VAbrechnungs { get; set; }

    public virtual DbSet<VAdresse> VAdresses { get; set; }

    public virtual DbSet<VAmazonSfpOrderdatum> VAmazonSfpOrderdata { get; set; }

    public virtual DbSet<VAmazonSfpShippingdatum> VAmazonSfpShippingdata { get; set; }

    public virtual DbSet<VAmazonUnbekannteSettlementPosAmounttypen> VAmazonUnbekannteSettlementPosAmounttypens { get; set; }

    public virtual DbSet<VAmeiseStandardArtikel> VAmeiseStandardArtikels { get; set; }

    public virtual DbSet<VArtikel> VArtikels { get; set; }

    public virtual DbSet<VArtikelAbnahme> VArtikelAbnahmes { get; set; }

    public virtual DbSet<VArtikelAttributEigeneFelder> VArtikelAttributEigeneFelders { get; set; }

    public virtual DbSet<VArtikelAttributEinsprachig> VArtikelAttributEinsprachigs { get; set; }

    public virtual DbSet<VArtikelAttributMehrsprachig> VArtikelAttributMehrsprachigs { get; set; }

    public virtual DbSet<VArtikelAttributSprachePlattform> VArtikelAttributSprachePlattforms { get; set; }

    public virtual DbSet<VArtikelBeschreibung> VArtikelBeschreibungs { get; set; }

    public virtual DbSet<VArtikelBild> VArtikelBilds { get; set; }

    public virtual DbSet<VArtikelBildPlattform> VArtikelBildPlattforms { get; set; }

    public virtual DbSet<VArtikelDelete> VArtikelDeletes { get; set; }

    public virtual DbSet<VArtikelDownload> VArtikelDownloads { get; set; }

    public virtual DbSet<VArtikelEigenschaft> VArtikelEigenschafts { get; set; }

    public virtual DbSet<VArtikelEigenschaftKombiWert> VArtikelEigenschaftKombiWerts { get; set; }

    public virtual DbSet<VArtikelEigenschaftSichtbarkeit> VArtikelEigenschaftSichtbarkeits { get; set; }

    public virtual DbSet<VArtikelEigenschaftWert> VArtikelEigenschaftWerts { get; set; }

    public virtual DbSet<VArtikelEigenschaftWertAbhaengigkeit> VArtikelEigenschaftWertAbhaengigkeits { get; set; }

    public virtual DbSet<VArtikelEigenschaftWertAufprei> VArtikelEigenschaftWertAufpreis { get; set; }

    public virtual DbSet<VArtikelEigenschaftWertSichtbarkeit> VArtikelEigenschaftWertSichtbarkeits { get; set; }

    public virtual DbSet<VArtikelHistory> VArtikelHistories { get; set; }

    public virtual DbSet<VArtikelKonfigGruppe> VArtikelKonfigGruppes { get; set; }

    public virtual DbSet<VArtikelMedienDatei> VArtikelMedienDateis { get; set; }

    public virtual DbSet<VArtikelMedienDateiAttribut> VArtikelMedienDateiAttributs { get; set; }

    public virtual DbSet<VArtikelMedienDateiSprache> VArtikelMedienDateiSpraches { get; set; }

    public virtual DbSet<VArtikelMerkmal> VArtikelMerkmals { get; set; }

    public virtual DbSet<VArtikelMerkmalWertKombination> VArtikelMerkmalWertKombinations { get; set; }

    public virtual DbSet<VArtikelPreisDetail> VArtikelPreisDetails { get; set; }

    public virtual DbSet<VArtikelPreise> VArtikelPreises { get; set; }

    public virtual DbSet<VArtikelQuickSync> VArtikelQuickSyncs { get; set; }

    public virtual DbSet<VArtikelQuickSyncBestand> VArtikelQuickSyncBestands { get; set; }

    public virtual DbSet<VArtikelQuickSyncPrei> VArtikelQuickSyncPreis { get; set; }

    public virtual DbSet<VArtikelSonderprei> VArtikelSonderpreis { get; set; }

    public virtual DbSet<VArtikelStueckliste> VArtikelStuecklistes { get; set; }

    public virtual DbSet<VArtikelStuecklistenKomponenten> VArtikelStuecklistenKomponentens { get; set; }

    public virtual DbSet<VArtikelStuecklistenLieferbestand> VArtikelStuecklistenLieferbestands { get; set; }

    public virtual DbSet<VArtikelUpload> VArtikelUploads { get; set; }

    public virtual DbSet<VArtikelWarenlager> VArtikelWarenlagers { get; set; }

    public virtual DbSet<VArtikelXsell> VArtikelXsells { get; set; }

    public virtual DbSet<VArtikelZustandMitStandardZustand> VArtikelZustandMitStandardZustands { get; set; }

    public virtual DbSet<VArtikelliste> VArtikellistes { get; set; }

    public virtual DbSet<VArtikellisteMitLagerbestaenden> VArtikellisteMitLagerbestaendens { get; set; }

    public virtual DbSet<VAufEinkaufsliste> VAufEinkaufslistes { get; set; }

    public virtual DbSet<VAuftrag> VAuftrags { get; set; }

    public virtual DbSet<VAuftrag1> VAuftrags1 { get; set; }

    public virtual DbSet<VAuftragAdresse> VAuftragAdresses { get; set; }

    public virtual DbSet<VAuftragAusgabeDateien> VAuftragAusgabeDateiens { get; set; }

    public virtual DbSet<VAuftragEckdaten> VAuftragEckdatens { get; set; }

    public virtual DbSet<VAuftragFile> VAuftragFiles { get; set; }

    public virtual DbSet<VAuftragKampagne> VAuftragKampagnes { get; set; }

    public virtual DbSet<VAuftragLieferadresse> VAuftragLieferadresses { get; set; }

    public virtual DbSet<VAuftragLoeschen> VAuftragLoeschens { get; set; }

    public virtual DbSet<VAuftragLog> VAuftragLogs { get; set; }

    public virtual DbSet<VAuftragPo> VAuftragPos { get; set; }

    public virtual DbSet<VAuftragPosition> VAuftragPositions { get; set; }

    public virtual DbSet<VAuftragPositionEckdaten> VAuftragPositionEckdatens { get; set; }

    public virtual DbSet<VAuftragPositionEigenschaft> VAuftragPositionEigenschafts { get; set; }

    public virtual DbSet<VAuftragPositionFile> VAuftragPositionFiles { get; set; }

    public virtual DbSet<VAuftragReaktivieren> VAuftragReaktivierens { get; set; }

    public virtual DbSet<VAuftragRechnungsadresse> VAuftragRechnungsadresses { get; set; }

    public virtual DbSet<VAuftragStorno> VAuftragStornos { get; set; }

    public virtual DbSet<VAuftragText> VAuftragTexts { get; set; }

    public virtual DbSet<VAuftragUpdate> VAuftragUpdates { get; set; }

    public virtual DbSet<VAuftragUpdateAttribute> VAuftragUpdateAttributes { get; set; }

    public virtual DbSet<VAuftragUpdateLieferadresse> VAuftragUpdateLieferadresses { get; set; }

    public virtual DbSet<VAuftragUpdatePosition> VAuftragUpdatePositions { get; set; }

    public virtual DbSet<VAuftragUpdatePositionVariation> VAuftragUpdatePositionVariations { get; set; }

    public virtual DbSet<VAuftragUpdateRechnungsadresse> VAuftragUpdateRechnungsadresses { get; set; }

    public virtual DbSet<VAuftragZahlungsinfo> VAuftragZahlungsinfos { get; set; }

    public virtual DbSet<VAuftraginformation> VAuftraginformations { get; set; }

    public virtual DbSet<VAuftragkostentypen> VAuftragkostentypens { get; set; }

    public virtual DbSet<VAuftragsfarben> VAuftragsfarbens { get; set; }

    public virtual DbSet<VAuftragzahlung> VAuftragzahlungs { get; set; }

    public virtual DbSet<VBestand> VBestands { get; set; }

    public virtual DbSet<VBestand1> VBestands1 { get; set; }

    public virtual DbSet<VBestandBestandsartikel> VBestandBestandsartikels { get; set; }

    public virtual DbSet<VBestandBestandsartikelProLager> VBestandBestandsartikelProLagers { get; set; }

    public virtual DbSet<VBestandEinfacheVariation> VBestandEinfacheVariations { get; set; }

    public virtual DbSet<VBestandLieferanten> VBestandLieferantens { get; set; }

    public virtual DbSet<VBestandStueckliste> VBestandStuecklistes { get; set; }

    public virtual DbSet<VBestandVarkombivater> VBestandVarkombivaters { get; set; }

    public virtual DbSet<VBestandVirtuell> VBestandVirtuells { get; set; }

    public virtual DbSet<VBestandsartikel> VBestandsartikels { get; set; }

    public virtual DbSet<VBestellPo> VBestellPos { get; set; }

    public virtual DbSet<VBestellPosLieferInfo> VBestellPosLieferInfos { get; set; }

    public virtual DbSet<VBestellPosLieferInfoProLager> VBestellPosLieferInfoProLagers { get; set; }

    public virtual DbSet<VBestellPosLieferInfoProLager1> VBestellPosLieferInfoProLagers1 { get; set; }

    public virtual DbSet<VBestellPosOffen> VBestellPosOffens { get; set; }

    public virtual DbSet<VBestellPosOffen1> VBestellPosOffens1 { get; set; }

    public virtual DbSet<VBestellPosOffenFifo2012> VBestellPosOffenFifo2012s { get; set; }

    public virtual DbSet<VBestellPosOffenNonFifo> VBestellPosOffenNonFifos { get; set; }

    public virtual DbSet<VBestellpo1> VBestellpos1 { get; set; }

    public virtual DbSet<VBestellung> VBestellungs { get; set; }

    public virtual DbSet<VBestellung1> VBestellungs1 { get; set; }

    public virtual DbSet<VBestellungAttribute> VBestellungAttributes { get; set; }

    public virtual DbSet<VBestellungBezahlt> VBestellungBezahlts { get; set; }

    public virtual DbSet<VBestellungDropshippingLieferbar> VBestellungDropshippingLieferbars { get; set; }

    public virtual DbSet<VBestellungEckdaten> VBestellungEckdatens { get; set; }

    public virtual DbSet<VBestellungEckdaten1> VBestellungEckdatens1 { get; set; }

    public virtual DbSet<VBestellungLieferInfo> VBestellungLieferInfos { get; set; }

    public virtual DbSet<VBestellungLieferInfoProLager> VBestellungLieferInfoProLagers { get; set; }

    public virtual DbSet<VBestellungLieferInfoProLager1> VBestellungLieferInfoProLagers1 { get; set; }

    public virtual DbSet<VBestellungLieferInfoProLagerFifo2012> VBestellungLieferInfoProLagerFifo2012s { get; set; }

    public virtual DbSet<VBestellungLieferInfoProLagerNonFifo> VBestellungLieferInfoProLagerNonFifos { get; set; }

    public virtual DbSet<VBillOfMaterialComponent> VBillOfMaterialComponents { get; set; }

    public virtual DbSet<VCategory> VCategories { get; set; }

    public virtual DbSet<VCategoryFamilyTree> VCategoryFamilyTrees { get; set; }

    public virtual DbSet<VChannel> VChannels { get; set; }

    public virtual DbSet<VChannelAttribute> VChannelAttributes { get; set; }

    public virtual DbSet<VChannelAttributeValue> VChannelAttributeValues { get; set; }

    public virtual DbSet<VConfigurationGroup> VConfigurationGroups { get; set; }

    public virtual DbSet<VConfigurationItem> VConfigurationItems { get; set; }

    public virtual DbSet<VCustomAction> VCustomActions { get; set; }

    public virtual DbSet<VCustomActionCheck> VCustomActionChecks { get; set; }

    public virtual DbSet<VCustomActionParameter> VCustomActionParameters { get; set; }

    public virtual DbSet<VCustomer> VCustomers { get; set; }

    public virtual DbSet<VCustomerGroup> VCustomerGroups { get; set; }

    public virtual DbSet<VCustomerGroup1> VCustomerGroups1 { get; set; }

    public virtual DbSet<VDefinitionState> VDefinitionStates { get; set; }

    public virtual DbSet<VDeletableFile> VDeletableFiles { get; set; }

    public virtual DbSet<VDeletedEntity> VDeletedEntities { get; set; }

    public virtual DbSet<VDeletedQueue> VDeletedQueues { get; set; }

    public virtual DbSet<VDeliveryMethod> VDeliveryMethods { get; set; }

    public virtual DbSet<VDisposition> VDispositions { get; set; }

    public virtual DbSet<VDownloaddatei> VDownloaddateis { get; set; }

    public virtual DbSet<VDownloaddateiDelete> VDownloaddateiDeletes { get; set; }

    public virtual DbSet<VDownloaddateiSprache> VDownloaddateiSpraches { get; set; }

    public virtual DbSet<VEbayItemCustomPolicy> VEbayItemCustomPolicies { get; set; }

    public virtual DbSet<VEbayUserBestellungen> VEbayUserBestellungens { get; set; }

    public virtual DbSet<VEbayVorlagen> VEbayVorlagens { get; set; }

    public virtual DbSet<VEinheit> VEinheits { get; set; }

    public virtual DbSet<VExportDocumentsLieferscheinPositionen> VExportDocumentsLieferscheinPositionens { get; set; }

    public virtual DbSet<VExportDocumentsShippingPosition> VExportDocumentsShippingPositions { get; set; }

    public virtual DbSet<VExterneRechnung> VExterneRechnungs { get; set; }

    public virtual DbSet<VExterneRechnungEckdaten> VExterneRechnungEckdatens { get; set; }

    public virtual DbSet<VExterneRechnungPosition> VExterneRechnungPositions { get; set; }

    public virtual DbSet<VExterneRechnungPositionstyp> VExterneRechnungPositionstyps { get; set; }

    public virtual DbSet<VExterneRechnungTransaktionstyp> VExterneRechnungTransaktionstyps { get; set; }

    public virtual DbSet<VFbabestand> VFbabestands { get; set; }

    public virtual DbSet<VFinishedSalesChannelOffer> VFinishedSalesChannelOffers { get; set; }

    public virtual DbSet<VFirma> VFirmas { get; set; }

    public virtual DbSet<VFulfillerLieferscheinPo> VFulfillerLieferscheinPos { get; set; }

    public virtual DbSet<VFulfillerLieferscheinWarehouseInfo> VFulfillerLieferscheinWarehouseInfos { get; set; }

    public virtual DbSet<VFulfillerOutboundInfo> VFulfillerOutboundInfos { get; set; }

    public virtual DbSet<VFulfillerPackage> VFulfillerPackages { get; set; }

    public virtual DbSet<VFulfillerPendingLieferscheine> VFulfillerPendingLieferscheines { get; set; }

    public virtual DbSet<VFulfillerProductPicture> VFulfillerProductPictures { get; set; }

    public virtual DbSet<VFulfillerReturn> VFulfillerReturns { get; set; }

    public virtual DbSet<VFulfillerReturnItem> VFulfillerReturnItems { get; set; }

    public virtual DbSet<VFulfillmentKunde> VFulfillmentKundes { get; set; }

    public virtual DbSet<VGlobaleTexte> VGlobaleTextes { get; set; }

    public virtual DbSet<VGlobalsQueue> VGlobalsQueues { get; set; }

    public virtual DbSet<VGutschein> VGutscheins { get; set; }

    public virtual DbSet<VGutschein1> VGutscheins1 { get; set; }

    public virtual DbSet<VGutschriftLog> VGutschriftLogs { get; set; }

    public virtual DbSet<VGutschriftStornierbar> VGutschriftStornierbars { get; set; }

    public virtual DbSet<VHealthCheck> VHealthChecks { get; set; }

    public virtual DbSet<VHealthCheckSchema> VHealthCheckSchemas { get; set; }

    public virtual DbSet<VHersteller> VHerstellers { get; set; }

    public virtual DbSet<VHerstellerBild> VHerstellerBilds { get; set; }

    public virtual DbSet<VHerstellerSprache> VHerstellerSpraches { get; set; }

    public virtual DbSet<VIduUpload> VIduUploads { get; set; }

    public virtual DbSet<VInAuftraegen> VInAuftraegens { get; set; }

    public virtual DbSet<VIndividuellePreise> VIndividuellePreises { get; set; }

    public virtual DbSet<VInetKundeShop> VInetKundeShops { get; set; }

    public virtual DbSet<VInitialize> VInitializes { get; set; }

    public virtual DbSet<VInventur> VInventurs { get; set; }

    public virtual DbSet<VInvoiceCorrectionUploadMetaDatum> VInvoiceCorrectionUploadMetaData { get; set; }

    public virtual DbSet<VKategorie> VKategories { get; set; }

    public virtual DbSet<VKategorieArtikel> VKategorieArtikels { get; set; }

    public virtual DbSet<VKategorieAttributEinsprachig> VKategorieAttributEinsprachigs { get; set; }

    public virtual DbSet<VKategorieAttributMehrsprachig> VKategorieAttributMehrsprachigs { get; set; }

    public virtual DbSet<VKategorieBild> VKategorieBilds { get; set; }

    public virtual DbSet<VKategorieDelete> VKategorieDeletes { get; set; }

    public virtual DbSet<VKategorieRabatt> VKategorieRabatts { get; set; }

    public virtual DbSet<VKategorieSichtbarkeit> VKategorieSichtbarkeits { get; set; }

    public virtual DbSet<VKategorieSprache> VKategorieSpraches { get; set; }

    public virtual DbSet<VKategorien> VKategoriens { get; set; }

    public virtual DbSet<VKategorienMitSubKategorien> VKategorienMitSubKategoriens { get; set; }

    public virtual DbSet<VKonfigGruppe> VKonfigGruppes { get; set; }

    public virtual DbSet<VKonfigGruppeSprache> VKonfigGruppeSpraches { get; set; }

    public virtual DbSet<VKonfigItem> VKonfigItems { get; set; }

    public virtual DbSet<VKonfigItemPrei> VKonfigItemPreis { get; set; }

    public virtual DbSet<VKonfigItemSprache> VKonfigItemSpraches { get; set; }

    public virtual DbSet<VKunde> VKundes { get; set; }

    public virtual DbSet<VKunde1> VKundes1 { get; set; }

    public virtual DbSet<VKundenAttribut> VKundenAttributs { get; set; }

    public virtual DbSet<VKundenAttribute> VKundenAttributes { get; set; }

    public virtual DbSet<VKundenGruppeShop> VKundenGruppeShops { get; set; }

    public virtual DbSet<VKundenGruppeShopVerfuegbar> VKundenGruppeShopVerfuegbars { get; set; }

    public virtual DbSet<VKundenRechnungsadresse> VKundenRechnungsadresses { get; set; }

    public virtual DbSet<VKundengruppe> VKundengruppes { get; set; }

    public virtual DbSet<VKundengruppeAttribut> VKundengruppeAttributs { get; set; }

    public virtual DbSet<VKundengruppeSprache> VKundengruppeSpraches { get; set; }

    public virtual DbSet<VLagerBestandProLagerAlle> VLagerBestandProLagerAlles { get; set; }

    public virtual DbSet<VLagerartikel> VLagerartikels { get; set; }

    public virtual DbSet<VLagerbestand> VLagerbestands { get; set; }

    public virtual DbSet<VLagerbestand1> VLagerbestands1 { get; set; }

    public virtual DbSet<VLagerbestandEx> VLagerbestandices { get; set; }

    public virtual DbSet<VLagerbestandNormaleArtikel> VLagerbestandNormaleArtikels { get; set; }

    public virtual DbSet<VLagerbestandProLager> VLagerbestandProLagers { get; set; }

    public virtual DbSet<VLagerbestandProLager1> VLagerbestandProLagers1 { get; set; }

    public virtual DbSet<VLagerbestandProLagerNurMitBestand> VLagerbestandProLagerNurMitBestands { get; set; }

    public virtual DbSet<VLagerbestandStueckliste> VLagerbestandStuecklistes { get; set; }

    public virtual DbSet<VLagerbestandStuecklisteProLager> VLagerbestandStuecklisteProLagers { get; set; }

    public virtual DbSet<VLagerbestandStuecklisten> VLagerbestandStuecklistens { get; set; }

    public virtual DbSet<VLagerbestandVariationen> VLagerbestandVariationens { get; set; }

    public virtual DbSet<VLagerbestandVarkombination> VLagerbestandVarkombinations { get; set; }

    public virtual DbSet<VLand> VLands { get; set; }

    public virtual DbSet<VLastDeadlockGraph> VLastDeadlockGraphs { get; set; }

    public virtual DbSet<VLieferadresse> VLieferadresses { get; set; }

    public virtual DbSet<VLieferantenbestand> VLieferantenbestands { get; set; }

    public virtual DbSet<VLieferavisPositionen> VLieferavisPositionens { get; set; }

    public virtual DbSet<VLieferschein> VLieferscheins { get; set; }

    public virtual DbSet<VLieferschein1> VLieferscheins1 { get; set; }

    public virtual DbSet<VLieferscheinPaket> VLieferscheinPakets { get; set; }

    public virtual DbSet<VLieferscheinPo> VLieferscheinPos { get; set; }

    public virtual DbSet<VLieferscheinPosDetail> VLieferscheinPosDetails { get; set; }

    public virtual DbSet<VLieferscheinPosition> VLieferscheinPositions { get; set; }

    public virtual DbSet<VLieferscheinPositionInfo> VLieferscheinPositionInfos { get; set; }

    public virtual DbSet<VLieferstatus> VLieferstatuses { get; set; }

    public virtual DbSet<VLock> VLocks { get; set; }

    public virtual DbSet<VLogsitzung> VLogsitzungs { get; set; }

    public virtual DbSet<VMappedProductKey> VMappedProductKeys { get; set; }

    public virtual DbSet<VMassEinheit> VMassEinheits { get; set; }

    public virtual DbSet<VMassEinheitSprache> VMassEinheitSpraches { get; set; }

    public virtual DbSet<VMerchantFailureInbound> VMerchantFailureInbounds { get; set; }

    public virtual DbSet<VMerchantInbound> VMerchantInbounds { get; set; }

    public virtual DbSet<VMerchantInboundItem> VMerchantInboundItems { get; set; }

    public virtual DbSet<VMerchantPendingInbound> VMerchantPendingInbounds { get; set; }

    public virtual DbSet<VMerchantPendingInboundShippingNotification> VMerchantPendingInboundShippingNotifications { get; set; }

    public virtual DbSet<VMerchantPendingLieferavi> VMerchantPendingLieferavis { get; set; }

    public virtual DbSet<VMerchantPendingStockChange> VMerchantPendingStockChanges { get; set; }

    public virtual DbSet<VMerchantProductAttribute> VMerchantProductAttributes { get; set; }

    public virtual DbSet<VMerchantProductAttributeMappingView> VMerchantProductAttributeMappingViews { get; set; }

    public virtual DbSet<VMerchantProductPicture> VMerchantProductPictures { get; set; }

    public virtual DbSet<VMerchantReturn> VMerchantReturns { get; set; }

    public virtual DbSet<VMerchantReturnItem> VMerchantReturnItems { get; set; }

    public virtual DbSet<VMerkmal> VMerkmals { get; set; }

    public virtual DbSet<VMerkmalBild> VMerkmalBilds { get; set; }

    public virtual DbSet<VMerkmalSprache> VMerkmalSpraches { get; set; }

    public virtual DbSet<VMerkmalwert> VMerkmalwerts { get; set; }

    public virtual DbSet<VMerkmalwertBild> VMerkmalwertBilds { get; set; }

    public virtual DbSet<VMerkmalwertSprache> VMerkmalwertSpraches { get; set; }

    public virtual DbSet<VNachrichtZuEingangskanal> VNachrichtZuEingangskanals { get; set; }

    public virtual DbSet<VNaechsterZulauf> VNaechsterZulaufs { get; set; }

    public virtual DbSet<VNaechsterZulaufLagerartikel> VNaechsterZulaufLagerartikels { get; set; }

    public virtual DbSet<VObjectBrowserArtikel> VObjectBrowserArtikels { get; set; }

    public virtual DbSet<VOffeneBestellpositionen> VOffeneBestellpositionens { get; set; }

    public virtual DbSet<VOffenerPostenAuftrag> VOffenerPostenAuftrags { get; set; }

    public virtual DbSet<VOffenerPostenAuftragZahlung> VOffenerPostenAuftragZahlungs { get; set; }

    public virtual DbSet<VOffenerPostenEbay> VOffenerPostenEbays { get; set; }

    public virtual DbSet<VOffenerPostenEingangsrechnung> VOffenerPostenEingangsrechnungs { get; set; }

    public virtual DbSet<VOffenerPostenEingangsrechnungZahlung> VOffenerPostenEingangsrechnungZahlungs { get; set; }

    public virtual DbSet<VOffenerPostenRechnung> VOffenerPostenRechnungs { get; set; }

    public virtual DbSet<VOffenerPostenRechnungZahlung> VOffenerPostenRechnungZahlungs { get; set; }

    public virtual DbSet<VOffenerUmsatz> VOffenerUmsatzs { get; set; }

    public virtual DbSet<VOfferCategoryAttribute> VOfferCategoryAttributes { get; set; }

    public virtual DbSet<VOfferChannelAttribute> VOfferChannelAttributes { get; set; }

    public virtual DbSet<VOfferPicture> VOfferPictures { get; set; }

    public virtual DbSet<VOfferPriceUpdate> VOfferPriceUpdates { get; set; }

    public virtual DbSet<VOfferProductAttribute> VOfferProductAttributes { get; set; }

    public virtual DbSet<VOfferStockUpdate> VOfferStockUpdates { get; set; }

    public virtual DbSet<VOrder> VOrders { get; set; }

    public virtual DbSet<VOrder1> VOrders1 { get; set; }

    public virtual DbSet<VOrderBillingAddress> VOrderBillingAddresses { get; set; }

    public virtual DbSet<VOrderCancellation> VOrderCancellations { get; set; }

    public virtual DbSet<VOrderCancellationItem> VOrderCancellationItems { get; set; }

    public virtual DbSet<VOrderItem> VOrderItems { get; set; }

    public virtual DbSet<VOrderLotNumberBestBeforeDate> VOrderLotNumberBestBeforeDates { get; set; }

    public virtual DbSet<VOrderPayment> VOrderPayments { get; set; }

    public virtual DbSet<VOrderPayment1> VOrderPayments1 { get; set; }

    public virtual DbSet<VOrderReturn> VOrderReturns { get; set; }

    public virtual DbSet<VOrderReturnItem> VOrderReturnItems { get; set; }

    public virtual DbSet<VOrderSerialNumber> VOrderSerialNumbers { get; set; }

    public virtual DbSet<VOrderShipping> VOrderShippings { get; set; }

    public virtual DbSet<VOrderShippingAddress> VOrderShippingAddresses { get; set; }

    public virtual DbSet<VOrderShippingItem> VOrderShippingItems { get; set; }

    public virtual DbSet<VOrderShippingItemIdList> VOrderShippingItemIdLists { get; set; }

    public virtual DbSet<VOrderShippingShippedFrom> VOrderShippingShippedFroms { get; set; }

    public virtual DbSet<VPendingStock> VPendingStocks { get; set; }

    public virtual DbSet<VPictureShopMapping> VPictureShopMappings { get; set; }

    public virtual DbSet<VPositionstyp> VPositionstyps { get; set; }

    public virtual DbSet<VPositionstypSteuerschluessel> VPositionstypSteuerschluessels { get; set; }

    public virtual DbSet<VPreislisteNetto> VPreislisteNettos { get; set; }

    public virtual DbSet<VProduct> VProducts { get; set; }

    public virtual DbSet<VProduct1> VProducts1 { get; set; }

    public virtual DbSet<VProduct2> VProducts2 { get; set; }

    public virtual DbSet<VProduct3> VProducts3 { get; set; }

    public virtual DbSet<VProductAttrAndValue> VProductAttrAndValues { get; set; }

    public virtual DbSet<VProductAttribute> VProductAttributes { get; set; }

    public virtual DbSet<VProductBundle> VProductBundles { get; set; }

    public virtual DbSet<VProductCompliance> VProductCompliances { get; set; }

    public virtual DbSet<VProductComposite> VProductComposites { get; set; }

    public virtual DbSet<VProductOption> VProductOptions { get; set; }

    public virtual DbSet<VProductPosAttribute> VProductPosAttributes { get; set; }

    public virtual DbSet<VProductTakeBack> VProductTakeBacks { get; set; }

    public virtual DbSet<VProductVariant> VProductVariants { get; set; }

    public virtual DbSet<VProzentGeliefert> VProzentGelieferts { get; set; }

    public virtual DbSet<VQuickSyncBestandQueue> VQuickSyncBestandQueues { get; set; }

    public virtual DbSet<VQuickSyncPreisQueue> VQuickSyncPreisQueues { get; set; }

    public virtual DbSet<VQuickSyncQueue> VQuickSyncQueues { get; set; }

    public virtual DbSet<VRechnung> VRechnungs { get; set; }

    public virtual DbSet<VRechnung1> VRechnungs1 { get; set; }

    public virtual DbSet<VRechnung2> VRechnungs2 { get; set; }

    public virtual DbSet<VRechnungAdresse> VRechnungAdresses { get; set; }

    public virtual DbSet<VRechnungAttribut> VRechnungAttributs { get; set; }

    public virtual DbSet<VRechnungAusgabeDateien> VRechnungAusgabeDateiens { get; set; }

    public virtual DbSet<VRechnungEckdaten> VRechnungEckdatens { get; set; }

    public virtual DbSet<VRechnungFile> VRechnungFiles { get; set; }

    public virtual DbSet<VRechnungLieferadresse> VRechnungLieferadresses { get; set; }

    public virtual DbSet<VRechnungLog> VRechnungLogs { get; set; }

    public virtual DbSet<VRechnungPosition> VRechnungPositions { get; set; }

    public virtual DbSet<VRechnungPosition1> VRechnungPositions1 { get; set; }

    public virtual DbSet<VRechnungPositionText> VRechnungPositionTexts { get; set; }

    public virtual DbSet<VRechnungRechnungsadresse> VRechnungRechnungsadresses { get; set; }

    public virtual DbSet<VRechnungStornierbar> VRechnungStornierbars { get; set; }

    public virtual DbSet<VRechnungText> VRechnungTexts { get; set; }

    public virtual DbSet<VRechnungZahlungsinfo> VRechnungZahlungsinfos { get; set; }

    public virtual DbSet<VRechnungsadresse> VRechnungsadresses { get; set; }

    public virtual DbSet<VRefund> VRefunds { get; set; }

    public virtual DbSet<VRetoureBestellung> VRetoureBestellungs { get; set; }

    public virtual DbSet<VRetoureEtikett> VRetoureEtiketts { get; set; }

    public virtual DbSet<VRetourePositionenExportDatum> VRetourePositionenExportData { get; set; }

    public virtual DbSet<VRetouren> VRetourens { get; set; }

    public virtual DbSet<VRetourenposition> VRetourenpositions { get; set; }

    public virtual DbSet<VReturnInfo> VReturnInfos { get; set; }

    public virtual DbSet<VReturnItem> VReturnItems { get; set; }

    public virtual DbSet<VReturnItemInfo> VReturnItemInfos { get; set; }

    public virtual DbSet<VReturnOrder> VReturnOrders { get; set; }

    public virtual DbSet<VReturnOrderItem> VReturnOrderItems { get; set; }

    public virtual DbSet<VReturnPickupAddress> VReturnPickupAddresses { get; set; }

    public virtual DbSet<VReturnReason> VReturnReasons { get; set; }

    public virtual DbSet<VSalesChannelOffer> VSalesChannelOffers { get; set; }

    public virtual DbSet<VShop> VShops { get; set; }

    public virtual DbSet<VShopKundengruppe> VShopKundengruppes { get; set; }

    public virtual DbSet<VSprache> VSpraches { get; set; }

    public virtual DbSet<VStandardArtikel> VStandardArtikels { get; set; }

    public virtual DbSet<VStandardAuftrag> VStandardAuftrags { get; set; }

    public virtual DbSet<VStandardAuftragCache> VStandardAuftragCaches { get; set; }

    public virtual DbSet<VStandardKategorie> VStandardKategories { get; set; }

    public virtual DbSet<VStandardKunde> VStandardKundes { get; set; }

    public virtual DbSet<VStandardLieferadresse> VStandardLieferadresses { get; set; }

    public virtual DbSet<VStandardLieferadresseCache> VStandardLieferadresseCaches { get; set; }

    public virtual DbSet<VStandardMerkmal> VStandardMerkmals { get; set; }

    public virtual DbSet<VStandardRechnungsadresse> VStandardRechnungsadresses { get; set; }

    public virtual DbSet<VStandardRechnungsadresseCache> VStandardRechnungsadresseCaches { get; set; }

    public virtual DbSet<VSteuercache> VSteuercaches { get; set; }

    public virtual DbSet<VSteuerdaten> VSteuerdatens { get; set; }

    public virtual DbSet<VSteuerdatenIntern> VSteuerdatenInterns { get; set; }

    public virtual DbSet<VSteuerklasse> VSteuerklasses { get; set; }

    public virtual DbSet<VSteuersatz> VSteuersatzs { get; set; }

    public virtual DbSet<VSteuerschluessel> VSteuerschluessels { get; set; }

    public virtual DbSet<VSteuerschluesselDaten> VSteuerschluesselDatens { get; set; }

    public virtual DbSet<VSteuerschluesselIntern> VSteuerschluesselInterns { get; set; }

    public virtual DbSet<VSteuertyp> VSteuertyps { get; set; }

    public virtual DbSet<VSteuerzone> VSteuerzones { get; set; }

    public virtual DbSet<VSteuerzoneLand> VSteuerzoneLands { get; set; }

    public virtual DbSet<VSteuerzonenBlacklistIntern> VSteuerzonenBlacklistInterns { get; set; }

    public virtual DbSet<VStuecklisteBestand> VStuecklisteBestands { get; set; }

    public virtual DbSet<VStuecklisteGutschriftPo> VStuecklisteGutschriftPos { get; set; }

    public virtual DbSet<VStuecklisteInBestellung> VStuecklisteInBestellungs { get; set; }

    public virtual DbSet<VStuecklisten> VStuecklistens { get; set; }

    public virtual DbSet<VTicketDsgvoDaten> VTicketDsgvoDatens { get; set; }

    public virtual DbSet<VTicketLabel> VTicketLabels { get; set; }

    public virtual DbSet<VTicketliste> VTicketlistes { get; set; }

    public virtual DbSet<VTrackAndTraceConfiguration> VTrackAndTraceConfigurations { get; set; }

    public virtual DbSet<VUnkownConditionProduct> VUnkownConditionProducts { get; set; }

    public virtual DbSet<VUploadMetaDatum> VUploadMetaData { get; set; }

    public virtual DbSet<VUstIdKorrektur> VUstIdKorrekturs { get; set; }

    public virtual DbSet<VVariationMapping> VVariationMappings { get; set; }

    public virtual DbSet<VVariationsBild> VVariationsBilds { get; set; }

    public virtual DbSet<VVarkombiBestand> VVarkombiBestands { get; set; }

    public virtual DbSet<VVcsBestelldatumLand> VVcsBestelldatumLands { get; set; }

    public virtual DbSet<VVcsLiteGutschrift> VVcsLiteGutschrifts { get; set; }

    public virtual DbSet<VVcsLiteGutschriftErneuterUpload> VVcsLiteGutschriftErneuterUploads { get; set; }

    public virtual DbSet<VVcsLiteGutschriftInvoiceByAmazonOffenerBeleg> VVcsLiteGutschriftInvoiceByAmazonOffenerBelegs { get; set; }

    public virtual DbSet<VVcsLiteGutschriftOffenerBeleg> VVcsLiteGutschriftOffenerBelegs { get; set; }

    public virtual DbSet<VVcsLiteRechnung> VVcsLiteRechnungs { get; set; }

    public virtual DbSet<VVcsLiteRechnungErneuterUpload> VVcsLiteRechnungErneuterUploads { get; set; }

    public virtual DbSet<VVcsLiteRechnungInvoiceByAmazonOffenerBeleg> VVcsLiteRechnungInvoiceByAmazonOffenerBelegs { get; set; }

    public virtual DbSet<VVcsLiteRechnungOffenerBeleg> VVcsLiteRechnungOffenerBelegs { get; set; }

    public virtual DbSet<VVcsLiteUpload> VVcsLiteUploads { get; set; }

    public virtual DbSet<VVersandartSteuerschluessel> VVersandartSteuerschluessels { get; set; }

    public virtual DbSet<VVersandklasse> VVersandklasses { get; set; }

    public virtual DbSet<VVersandlager> VVersandlagers { get; set; }

    public virtual DbSet<VVorgang> VVorgangs { get; set; }

    public virtual DbSet<VVorgangsstatus> VVorgangsstatuses { get; set; }

    public virtual DbSet<VWaehrung> VWaehrungs { get; set; }

    public virtual DbSet<VWarehouse> VWarehouses { get; set; }

    public virtual DbSet<VWarehouseMerchant> VWarehouseMerchants { get; set; }

    public virtual DbSet<VWareneingangsarchiv> VWareneingangsarchivs { get; set; }

    public virtual DbSet<VWarengruppe> VWarengruppes { get; set; }

    public virtual DbSet<VWarengruppenSteuerschluessel> VWarengruppenSteuerschluessels { get; set; }

    public virtual DbSet<VWarenlager> VWarenlagers { get; set; }

    public virtual DbSet<VWarenlager1> VWarenlagers1 { get; set; }

    public virtual DbSet<VWarenlagerEingang> VWarenlagerEingangs { get; set; }

    public virtual DbSet<VWarenlagerPlatzArtikel> VWarenlagerPlatzArtikels { get; set; }

    public virtual DbSet<VWmsartikel> VWmsartikels { get; set; }

    public virtual DbSet<VWmsartikelSimple> VWmsartikelSimples { get; set; }

    public virtual DbSet<VWmsartikelWe> VWmsartikelWes { get; set; }

    public virtual DbSet<VWmsboxArtikel> VWmsboxArtikels { get; set; }

    public virtual DbSet<VXsellGruppe> VXsellGruppes { get; set; }

    public virtual DbSet<VZulauf> VZulaufs { get; set; }

    public virtual DbSet<VZulaufLagerartikel> VZulaufLagerartikels { get; set; }

    public virtual DbSet<VZustandsartikel> VZustandsartikels { get; set; }

    public virtual DbSet<Vatclass> Vatclasses { get; set; }

    public virtual DbSet<VatclassName> VatclassNames { get; set; }

    public virtual DbSet<Voucher> Vouchers { get; set; }

    public virtual DbSet<Warehouse> Warehouses { get; set; }

    public virtual DbSet<Warehouse1> Warehouses1 { get; set; }

    public virtual DbSet<WarehouseArea> WarehouseAreas { get; set; }

    public virtual DbSet<WarehouseAreaLocation> WarehouseAreaLocations { get; set; }

    public virtual DbSet<WarenlagerMarktplatzMapping> WarenlagerMarktplatzMappings { get; set; }

    public virtual DbSet<Webshop> Webshops { get; set; }

    public virtual DbSet<ZM1Rabattgruppen> ZM1Rabattgruppens { get; set; }

    public virtual DbSet<ZZmListe> ZZmListes { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=LAPTOP-Q593BSP3\\JTLWAWI;Initial Catalog=EazyBusiness;User ID=sa;Password=sa04jT14;TrustServerCertificate=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AccountDatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AccountData", "Report");

            entity.Property(e => e.AccountHolder)
                .HasMaxLength(255)
                .HasComment("Name des Kontoinhabers");
            entity.Property(e => e.Bank)
                .HasMaxLength(255)
                .HasComment("Enthält den Namen des Bankinstituts");
            entity.Property(e => e.Bic)
                .HasMaxLength(64)
                .HasComment("Enthält die BIC")
                .HasColumnName("BIC");
            entity.Property(e => e.CustomerInternalId).HasComment("Enthält die interne Kunden-ID zur Verknüpfung auf die Kundentabelle");
            entity.Property(e => e.Iban)
                .HasMaxLength(64)
                .HasComment("Enthält die IBAN")
                .HasColumnName("IBAN");
            entity.Property(e => e.InternalId).HasComment("Interne ID der Kontodeten");
        });

        modelBuilder.Entity<AmeiseExporttyp>(entity =>
        {
            entity.HasKey(e => e.KExportTyp).HasName("PK_dbo_ameise_exporttyp");

            entity.ToTable("ameise_exporttyp");

            entity.Property(e => e.KExportTyp)
                .ValueGeneratedNever()
                .HasColumnName("kExportTyp");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KExportTypParent)
                .HasDefaultValueSql("('0')")
                .HasColumnName("kExportTypParent");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<AmeiseExportvorgang>(entity =>
        {
            entity.HasKey(e => e.KExportVorgang).HasName("PK_dbo_ameise_exportvorgang");

            entity.ToTable("ameise_exportvorgang");

            entity.Property(e => e.KExportVorgang).HasColumnName("kExportVorgang");
            entity.Property(e => e.CDatei)
                .HasMaxLength(255)
                .HasColumnName("cDatei");
            entity.Property(e => e.CMandant)
                .HasMaxLength(255)
                .HasColumnName("cMandant");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.KExportTyp).HasColumnName("kExportTyp");
            entity.Property(e => e.KExportVorlage).HasColumnName("kExportVorlage");
            entity.Property(e => e.NAnzahlExportiert).HasColumnName("nAnzahlExportiert");
            entity.Property(e => e.NAnzahlExportiertVon).HasColumnName("nAnzahlExportiertVon");
            entity.Property(e => e.NDauer).HasColumnName("nDauer");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<AmeiseExportvorlage>(entity =>
        {
            entity.HasKey(e => e.KExportVorlage).HasName("PK_dbo_ameise_exportvorlage");

            entity.ToTable("ameise_exportvorlage");

            entity.Property(e => e.KExportVorlage).HasColumnName("kExportVorlage");
            entity.Property(e => e.CEncoding)
                .HasMaxLength(15)
                .HasDefaultValueSql("('Windows1252')")
                .HasColumnName("cEncoding");
            entity.Property(e => e.CExt).HasColumnName("cExt");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CUebersicht).HasColumnName("cUebersicht");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.KExportTyp).HasColumnName("kExportTyp");
            entity.Property(e => e.KExportVorlageFilter).HasColumnName("kExportVorlageFilter");
            entity.Property(e => e.KStandardVorlage).HasColumnName("kStandardVorlage");
            entity.Property(e => e.NDateiformat).HasColumnName("nDateiformat");
            entity.Property(e => e.NDeleted).HasColumnName("nDeleted");
            entity.Property(e => e.NDezimalTrennzeichen).HasColumnName("nDezimalTrennzeichen");
            entity.Property(e => e.NEscape).HasColumnName("nEscape");
            entity.Property(e => e.NKopfzeile).HasColumnName("nKopfzeile");
            entity.Property(e => e.NNachkommastellen).HasColumnName("nNachkommastellen");
            entity.Property(e => e.NQuote).HasColumnName("nQuote");
            entity.Property(e => e.NSpaltenbegrenzer).HasColumnName("nSpaltenbegrenzer");
            entity.Property(e => e.NTausenderTrennzeichen).HasColumnName("nTausenderTrennzeichen");
        });

        modelBuilder.Entity<AmeiseExportvorlagefeld>(entity =>
        {
            entity.HasKey(e => e.KExportVorlageFeld).HasName("PK_dbo_ameise_exportvorlagefeld");

            entity.ToTable("ameise_exportvorlagefeld");

            entity.Property(e => e.KExportVorlageFeld).HasColumnName("kExportVorlageFeld");
            entity.Property(e => e.CDbname)
                .HasMaxLength(255)
                .HasColumnName("cDBName");
            entity.Property(e => e.CKopfzeilenbeschriftung)
                .HasMaxLength(255)
                .HasColumnName("cKopfzeilenbeschriftung");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KExportVorlage).HasColumnName("kExportVorlage");
            entity.Property(e => e.NSpalte).HasColumnName("nSpalte");
        });

        modelBuilder.Entity<AmeiseExportvorlagefilter>(entity =>
        {
            entity.HasKey(e => e.KExportVorlageFilter).HasName("PK_dbo_ameise_exportvorlagefilter");

            entity.ToTable("ameise_exportvorlagefilter");

            entity.Property(e => e.KExportVorlageFilter).HasColumnName("kExportVorlageFilter");
            entity.Property(e => e.CExt)
                .HasMaxLength(255)
                .HasColumnName("cExt");
            entity.Property(e => e.CExtAttribute)
                .HasMaxLength(50)
                .HasColumnName("cExtAttribute");
            entity.Property(e => e.CExtEigeneFelder)
                .HasMaxLength(50)
                .HasColumnName("cExtEigeneFelder");
            entity.Property(e => e.CExtMerkmale)
                .HasMaxLength(50)
                .HasColumnName("cExtMerkmale");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CSortierReihenfolge)
                .HasMaxLength(255)
                .HasColumnName("cSortierReihenfolge");
            entity.Property(e => e.CSortierSpalte)
                .HasMaxLength(255)
                .HasColumnName("cSortierSpalte");
            entity.Property(e => e.CUebersicht).HasColumnName("cUebersicht");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.KStandardfilter).HasColumnName("kStandardfilter");
            entity.Property(e => e.NFilterArt).HasColumnName("nFilterArt");
        });

        modelBuilder.Entity<AmeiseExportvorlagefilterext>(entity =>
        {
            entity.HasKey(e => e.KExportVorlageFilterExt).HasName("PK_dbo_ameise_exportvorlagefilterext");

            entity.ToTable("ameise_exportvorlagefilterext");

            entity.Property(e => e.KExportVorlageFilterExt).HasColumnName("kExportVorlageFilterExt");
            entity.Property(e => e.CAdd)
                .HasMaxLength(255)
                .HasColumnName("cAdd");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CWert).HasColumnName("cWert");
            entity.Property(e => e.KExportVorlageFilter).HasColumnName("kExportVorlageFilter");
        });

        modelBuilder.Entity<AmeiseExportvorlagefilterfeld>(entity =>
        {
            entity.HasKey(e => e.KExportVorlageFilterFeld).HasName("PK_dbo_ameise_exportvorlagefilterfeld");

            entity.ToTable("ameise_exportvorlagefilterfeld");

            entity.Property(e => e.KExportVorlageFilterFeld).HasColumnName("kExportVorlageFilterFeld");
            entity.Property(e => e.CDbname)
                .HasMaxLength(255)
                .HasColumnName("cDBName");
            entity.Property(e => e.CTable)
                .HasMaxLength(255)
                .HasColumnName("cTable");
            entity.Property(e => e.CWert)
                .HasMaxLength(255)
                .HasColumnName("cWert");
            entity.Property(e => e.KExportVorlageFilter).HasColumnName("kExportVorlageFilter");
            entity.Property(e => e.NOperator).HasColumnName("nOperator");
        });

        modelBuilder.Entity<AmeiseImportdurchgang>(entity =>
        {
            entity.HasKey(e => e.KImportDurchgang).HasName("PK_dbo_ameise_importdurchgang");

            entity.ToTable("ameise_importdurchgang");

            entity.Property(e => e.KImportDurchgang).HasColumnName("kImportDurchgang");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
        });

        modelBuilder.Entity<AmeiseImportdurchgangartikel>(entity =>
        {
            entity.HasKey(e => new { e.KImportDurchgang, e.KArtikel }).HasName("PK_dbo_ameise_importdurchgangartikel");

            entity.ToTable("ameise_importdurchgangartikel");

            entity.Property(e => e.KImportDurchgang).HasColumnName("kImportDurchgang");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
        });

        modelBuilder.Entity<AmeiseImporttyp>(entity =>
        {
            entity.HasKey(e => e.KImportTyp).HasName("PK_dbo_ameise_importtyp");

            entity.ToTable("ameise_importtyp");

            entity.Property(e => e.KImportTyp)
                .ValueGeneratedNever()
                .HasColumnName("kImportTyp");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KImportTypParent)
                .HasDefaultValueSql("('0')")
                .HasColumnName("kImportTypParent");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<AmeiseImporttypeinstellung>(entity =>
        {
            entity.HasKey(e => e.KImportTypEinstellung).HasName("PK_dbo_ameise_importtypeinstellung");

            entity.ToTable("ameise_importtypeinstellung");

            entity.Property(e => e.KImportTypEinstellung)
                .ValueGeneratedNever()
                .HasColumnName("kImportTypEinstellung");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KImportTyp).HasColumnName("kImportTyp");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<AmeiseImporttypeinstellungwert>(entity =>
        {
            entity.HasKey(e => e.KImportTypEinstellungWert).HasName("PK_dbo_ameise_importtypeinstellungwert");

            entity.ToTable("ameise_importtypeinstellungwert");

            entity.Property(e => e.KImportTypEinstellungWert)
                .ValueGeneratedNever()
                .HasColumnName("kImportTypEinstellungWert");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KImportTypEinstellung).HasColumnName("kImportTypEinstellung");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<AmeiseImporttypfeld>(entity =>
        {
            entity.HasKey(e => e.KImportTypFeld).HasName("PK_dbo_ameise_importtypfeld");

            entity.ToTable("ameise_importtypfeld");

            entity.Property(e => e.KImportTypFeld)
                .ValueGeneratedNever()
                .HasColumnName("kImportTypFeld");
            entity.Property(e => e.CDbname)
                .HasMaxLength(255)
                .HasColumnName("cDBName");
            entity.Property(e => e.CDbtyp)
                .HasMaxLength(100)
                .HasColumnName("cDBTyp");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CStandardWert)
                .HasMaxLength(255)
                .HasColumnName("cStandardWert");
            entity.Property(e => e.CTable)
                .HasMaxLength(255)
                .HasColumnName("cTable");
            entity.Property(e => e.CValidation)
                .HasMaxLength(255)
                .HasColumnName("cValidation");
            entity.Property(e => e.KImportTyp).HasColumnName("kImportTyp");
            entity.Property(e => e.NLaenge).HasColumnName("nLaenge");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NStandard).HasColumnName("nStandard");
        });

        modelBuilder.Entity<AmeiseImportvorgang>(entity =>
        {
            entity.HasKey(e => e.KImportVorgang).HasName("PK_dbo_ameise_importvorgang");

            entity.ToTable("ameise_importvorgang");

            entity.Property(e => e.KImportVorgang).HasColumnName("kImportVorgang");
            entity.Property(e => e.CImportdatei)
                .HasMaxLength(255)
                .HasColumnName("cImportdatei");
            entity.Property(e => e.CMandant)
                .HasMaxLength(255)
                .HasColumnName("cMandant");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.KImportTyp).HasColumnName("kImportTyp");
            entity.Property(e => e.KImportVorlage).HasColumnName("kImportVorlage");
            entity.Property(e => e.NAbZeile).HasColumnName("nAbZeile");
            entity.Property(e => e.NAnzahlAktualisiert).HasColumnName("nAnzahlAktualisiert");
            entity.Property(e => e.NAnzahlFehler).HasColumnName("nAnzahlFehler");
            entity.Property(e => e.NAnzahlImportiert).HasColumnName("nAnzahlImportiert");
            entity.Property(e => e.NAnzahlWarnungen).HasColumnName("nAnzahlWarnungen");
            entity.Property(e => e.NDauer).HasColumnName("nDauer");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<AmeiseImportvorlage>(entity =>
        {
            entity.HasKey(e => e.KImportVorlage).HasName("PK_dbo_ameise_importvorlage");

            entity.ToTable("ameise_importvorlage");

            entity.Property(e => e.KImportVorlage).HasColumnName("kImportVorlage");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CUebersicht).HasColumnName("cUebersicht");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.KImportTyp).HasColumnName("kImportTyp");
            entity.Property(e => e.KStandardVorlage).HasColumnName("kStandardVorlage");
            entity.Property(e => e.NAbZeile).HasColumnName("nAbZeile");
            entity.Property(e => e.NDateiformat).HasColumnName("nDateiformat");
            entity.Property(e => e.NDeleted).HasColumnName("nDeleted");
            entity.Property(e => e.NEscape).HasColumnName("nEscape");
            entity.Property(e => e.NKopfzeile).HasColumnName("nKopfzeile");
            entity.Property(e => e.NQuote).HasColumnName("nQuote");
            entity.Property(e => e.NSpaltenbegrenzer).HasColumnName("nSpaltenbegrenzer");
        });

        modelBuilder.Entity<AmeiseImportvorlageeinstellung>(entity =>
        {
            entity.HasKey(e => e.KImportVorlageEinstellung).HasName("PK_dbo_ameise_importvorlageeinstellung");

            entity.ToTable("ameise_importvorlageeinstellung");

            entity.Property(e => e.KImportVorlageEinstellung).HasColumnName("kImportVorlageEinstellung");
            entity.Property(e => e.KImportTypEinstellung).HasColumnName("kImportTypEinstellung");
            entity.Property(e => e.KImportTypEinstellungWert).HasColumnName("kImportTypEinstellungWert");
            entity.Property(e => e.KImportVorlage).HasColumnName("kImportVorlage");
        });

        modelBuilder.Entity<AmeiseImportvorlagefeld>(entity =>
        {
            entity.HasKey(e => e.KImportVorlageFeld).HasName("PK_dbo_ameise_importvorlagefeld");

            entity.ToTable("ameise_importvorlagefeld");

            entity.Property(e => e.KImportVorlageFeld).HasColumnName("kImportVorlageFeld");
            entity.Property(e => e.CDbname)
                .HasMaxLength(255)
                .HasColumnName("cDBName");
            entity.Property(e => e.CDbtyp)
                .HasMaxLength(100)
                .HasColumnName("cDBTyp");
            entity.Property(e => e.CExt)
                .HasMaxLength(4000)
                .HasColumnName("cExt");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CStandardWert)
                .HasMaxLength(255)
                .HasDefaultValueSql("((0))")
                .HasColumnName("cStandardWert");
            entity.Property(e => e.CTable)
                .HasMaxLength(255)
                .HasColumnName("cTable");
            entity.Property(e => e.CValidation)
                .HasMaxLength(255)
                .HasColumnName("cValidation");
            entity.Property(e => e.KImportVorlage).HasColumnName("kImportVorlage");
            entity.Property(e => e.NKey).HasColumnName("nKey");
            entity.Property(e => e.NKey2).HasColumnName("nKey2");
            entity.Property(e => e.NLaenge).HasColumnName("nLaenge");
            entity.Property(e => e.NSpalte).HasColumnName("nSpalte");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<AmeiseImportvorlagefeldp>(entity =>
        {
            entity.HasKey(e => e.KImportVorlageFeldPs).HasName("PK_dbo_ameise_importvorlagefeldps");

            entity.ToTable("ameise_importvorlagefeldps");

            entity.Property(e => e.KImportVorlageFeldPs).HasColumnName("kImportVorlageFeldPS");
            entity.Property(e => e.CDbname)
                .HasMaxLength(255)
                .HasColumnName("cDBName");
            entity.Property(e => e.CPraefix)
                .HasMaxLength(255)
                .HasColumnName("cPraefix");
            entity.Property(e => e.CSuffix)
                .HasMaxLength(255)
                .HasColumnName("cSuffix");
            entity.Property(e => e.CTable)
                .HasMaxLength(255)
                .HasColumnName("cTable");
            entity.Property(e => e.KImportVorlage).HasColumnName("kImportVorlage");
        });

        modelBuilder.Entity<AmeiseImportvorlagefilter>(entity =>
        {
            entity.HasKey(e => e.KImportVorlageFilter).HasName("PK_dbo_ameise_importvorlagefilter");

            entity.ToTable("ameise_importvorlagefilter");

            entity.Property(e => e.KImportVorlageFilter).HasColumnName("kImportVorlageFilter");
            entity.Property(e => e.CDbname)
                .HasMaxLength(255)
                .HasColumnName("cDBName");
            entity.Property(e => e.CDbtyp)
                .HasMaxLength(100)
                .HasColumnName("cDBTyp");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CTable)
                .HasMaxLength(255)
                .HasColumnName("cTable");
            entity.Property(e => e.CValidation)
                .HasMaxLength(255)
                .HasColumnName("cValidation");
            entity.Property(e => e.CWert)
                .HasMaxLength(255)
                .HasColumnName("cWert");
            entity.Property(e => e.KImportVorlage).HasColumnName("kImportVorlage");
            entity.Property(e => e.NLaenge).HasColumnName("nLaenge");
            entity.Property(e => e.NOperator).HasColumnName("nOperator");
            entity.Property(e => e.NSpalte).HasColumnName("nSpalte");
        });

        modelBuilder.Entity<AmeiseUpdateOptimizer>(entity =>
        {
            entity.HasKey(e => new { e.KArtikel, e.KImportTyp }).HasName("PK_dbo_ameise_UpdateOptimizer");

            entity.ToTable("ameise_UpdateOptimizer");

            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KImportTyp).HasColumnName("kImportTyp");
            entity.Property(e => e.CUpdateRawString).HasColumnName("cUpdateRawString");
        });

        modelBuilder.Entity<ArtikelBildShop>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ArtikelBildShop", "DEPRECATED");

            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KArtikelBildPlattform).HasColumnName("kArtikelBildPlattform");
            entity.Property(e => e.KArtikelbildPlattformMain).HasColumnName("kArtikelbildPlattformMain");
            entity.Property(e => e.KBild).HasColumnName("kBild");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NInet).HasColumnName("nInet");
            entity.Property(e => e.NNr).HasColumnName("nNr");
        });

        modelBuilder.Entity<Artikelzustand>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Artikelzustand", "Statistik");

            entity.Property(e => e.CName)
                .HasMaxLength(50)
                .HasColumnName("cName");
            entity.Property(e => e.KZustand).HasColumnName("kZustand");
        });

        modelBuilder.Entity<BestellposTypenName>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("BestellposTypenName", "Statistik");

            entity.Property(e => e.Name)
                .HasMaxLength(27)
                .IsUnicode(false);
            entity.Property(e => e.TbestellposNType).HasColumnName("tbestellpos_nType");
        });

        modelBuilder.Entity<BinLocation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("BinLocation", "BI");

            entity.Property(e => e.BinHeight).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BinLength).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BinLocationId)
                .ValueGeneratedOnAdd()
                .HasColumnName("BinLocationID");
            entity.Property(e => e.BinLocationName).HasMaxLength(50);
            entity.Property(e => e.BinLocationTypeId).HasColumnName("BinLocationTypeID");
            entity.Property(e => e.BinMaxWeight).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BinWidth).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.LastStocktakingDate).HasColumnType("datetime");
            entity.Property(e => e.StocktakingId).HasColumnName("StocktakingID");
            entity.Property(e => e.WarehouseId).HasColumnName("WarehouseID");
        });

        modelBuilder.Entity<BinLocation1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("BinLocation", "Report");

            entity.Property(e => e.BinLocatinName).HasMaxLength(50);
            entity.Property(e => e.Height).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.InternalId).ValueGeneratedOnAdd();
            entity.Property(e => e.InventoryDate).HasColumnType("datetime");
            entity.Property(e => e.Length).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.MaximumWeight).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Width).HasColumnType("decimal(25, 13)");
        });

        modelBuilder.Entity<BinLocationItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("BinLocationItem", "Report");

            entity.Property(e => e.Comment1).HasMaxLength(255);
            entity.Property(e => e.Comment2).HasMaxLength(255);
        });

        modelBuilder.Entity<Carrier>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Carrier", "BI");

            entity.Property(e => e.CarrierId).HasColumnName("CarrierID");
            entity.Property(e => e.ChangeDate).HasColumnType("datetime");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
        });

        modelBuilder.Entity<CarrierName>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CarrierName", "BI");

            entity.Property(e => e.CarrierId).HasColumnName("CarrierID");
            entity.Property(e => e.LanguageIso)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Name).HasMaxLength(128);
        });

        modelBuilder.Entity<Category>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Category", "BI");

            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.ParentCategoryId).HasColumnName("ParentCategoryID");
        });

        modelBuilder.Entity<CategoryName>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CategoryName", "BI");

            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.LanguageIso)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Name).HasMaxLength(128);
        });

        modelBuilder.Entity<CategoryProperty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CategoryProperties", "BI");

            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.CategoryPropertyId)
                .HasMaxLength(39)
                .HasColumnName("CategoryPropertyID");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.PropertyId)
                .HasMaxLength(20)
                .HasColumnName("PropertyID");
            entity.Property(e => e.PropertyType).HasMaxLength(1);
        });

        modelBuilder.Entity<CategoryPropertyName>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CategoryPropertyName", "BI");

            entity.Property(e => e.CategoryPropertyId)
                .HasMaxLength(39)
                .HasColumnName("CategoryPropertyID");
            entity.Property(e => e.LanguageIso).HasMaxLength(2);
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Name).HasMaxLength(128);
        });

        modelBuilder.Entity<CategoryPropertyValueName>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CategoryPropertyValueName", "BI");

            entity.Property(e => e.CategoryPropertyId)
                .HasMaxLength(39)
                .HasColumnName("CategoryPropertyID");
            entity.Property(e => e.LanguageIso).HasMaxLength(2);
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Name).HasMaxLength(128);
        });

        modelBuilder.Entity<Company>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Company", "BI");

            entity.Property(e => e.City).HasMaxLength(50);
            entity.Property(e => e.CompanyId).HasColumnName("CompanyID");
            entity.Property(e => e.CompanyName).HasMaxLength(50);
            entity.Property(e => e.Country).HasMaxLength(50);
            entity.Property(e => e.CountryIso)
                .HasMaxLength(2)
                .HasColumnName("CountryISO");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.PostalCode).HasMaxLength(10);
        });

        modelBuilder.Entity<Company1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Company", "Report");

            entity.Property(e => e.AccountHolder)
                .HasMaxLength(255)
                .HasComment("Inhaber des Firmenkontos");
            entity.Property(e => e.Address)
                .HasMaxLength(255)
                .HasComment("Strasse der Firma");
            entity.Property(e => e.BankName)
                .HasMaxLength(50)
                .HasComment("Name der Bank des Firmenkontos");
            entity.Property(e => e.Bic)
                .HasMaxLength(64)
                .HasComment("BIC des Firmenkontos")
                .HasColumnName("BIC");
            entity.Property(e => e.City)
                .HasMaxLength(255)
                .HasComment("Ort der Firma");
            entity.Property(e => e.CompanyName)
                .HasMaxLength(255)
                .HasComment("Enthält den Firmennamen");
            entity.Property(e => e.Country)
                .HasMaxLength(255)
                .HasComment("Land der Firma");
            entity.Property(e => e.CountryIso)
                .HasMaxLength(5)
                .HasComment("ISO-Code des Firmenlandes")
                .HasColumnName("CountryISO");
            entity.Property(e => e.CreditorId)
                .HasMaxLength(35)
                .HasComment("Gläubiger-ID");
            entity.Property(e => e.Email)
                .HasMaxLength(255)
                .HasComment("E-Mail-Adresse der Firma");
            entity.Property(e => e.Fax)
                .HasMaxLength(30)
                .HasComment("Faxnummer der Firma");
            entity.Property(e => e.FederalTaxId)
                .HasMaxLength(25)
                .HasComment("Steuernummer der Firma");
            entity.Property(e => e.Iban)
                .HasMaxLength(64)
                .HasComment("IBAN des Firmenkontos")
                .HasColumnName("IBAN");
            entity.Property(e => e.InternalId).HasComment("Interne Firmen-ID der Tabelle tFirma");
            entity.Property(e => e.ManagingDirector)
                .HasMaxLength(255)
                .HasComment("Enthält den Unternehmer der Firma");
            entity.Property(e => e.PayPalEmail)
                .HasMaxLength(250)
                .HasComment("E-Mail-Adresse des PayPal-Kontos")
                .HasColumnName("PayPalEMail");
            entity.Property(e => e.Phone)
                .HasMaxLength(50)
                .HasComment("Telefonnummer der Firma");
            entity.Property(e => e.PostalCode)
                .HasMaxLength(50)
                .HasComment("PLZ der Firma");
            entity.Property(e => e.ValueAddedTaxId)
                .HasMaxLength(25)
                .HasComment("USt-IdNr. der Firma");
            entity.Property(e => e.WebsiteUrl)
                .HasMaxLength(255)
                .HasComment("URL der Website der Firma")
                .HasColumnName("WebsiteURL");
        });

        modelBuilder.Entity<CostType>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CostType", "BI");

            entity.Property(e => e.ChangeDate).HasColumnType("datetime");
            entity.Property(e => e.Comment).HasMaxLength(512);
            entity.Property(e => e.CostTypeId)
                .ValueGeneratedOnAdd()
                .HasColumnName("CostTypeID");
            entity.Property(e => e.CreationDate).HasColumnType("datetime");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Name).HasMaxLength(128);
        });

        modelBuilder.Entity<Country>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Country", "BI");

            entity.Property(e => e.CountryId)
                .HasMaxLength(5)
                .HasColumnName("CountryID");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
        });

        modelBuilder.Entity<CountryName>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CountryName", "BI");

            entity.Property(e => e.CountryId)
                .HasMaxLength(5)
                .HasColumnName("CountryID");
            entity.Property(e => e.LanguageIso)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Name).HasMaxLength(128);
        });

        modelBuilder.Entity<Currency>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Currency", "Report");

            entity.Property(e => e.CurrencyIso)
                .HasMaxLength(20)
                .HasComment("ISO-Code der Währungsangabe")
                .HasColumnName("CurrencyISO");
            entity.Property(e => e.CurrencyName)
                .HasMaxLength(20)
                .HasComment("Name der Währung");
            entity.Property(e => e.CurrencyNameHtml)
                .HasMaxLength(255)
                .HasComment("Name der Währung für HTML-Ausgabe");
            entity.Property(e => e.Default).HasComment("Gibt an, ob es die Standardwährung ist");
            entity.Property(e => e.Factor)
                .HasComment("Umrechnungsfaktor zur Fremdwährung")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.InternalId).HasComment("Interne ID der Währungs");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Customer", "BI");

            entity.Property(e => e.CreationDate).HasColumnType("datetime");
            entity.Property(e => e.CustomerCategoryId).HasColumnName("CustomerCategoryID");
            entity.Property(e => e.CustomerGroupId).HasColumnName("CustomerGroupID");
            entity.Property(e => e.CustomerId)
                .ValueGeneratedOnAdd()
                .HasColumnName("CustomerID");
            entity.Property(e => e.CustomerNumber).HasMaxLength(30);
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
        });

        modelBuilder.Entity<Customer1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Customer", "Report");

            entity.Property(e => e.AccountsReceivableNumber).HasComment("Enthält die Debitorennummer");
            entity.Property(e => e.CompanyRegistrationNumber)
                .HasMaxLength(255)
                .HasComment("Enthält die Handelsregisternr. des Kunden");
            entity.Property(e => e.CreationDate)
                .HasComment("Erstelldatum des Kunden in der Datenbank")
                .HasColumnType("datetime");
            entity.Property(e => e.Credit)
                .HasComment("Gibt das Shopguthaben des Kunden an")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.CreditLimit).HasComment("Gibt das Kreditlimit des Kunden an");
            entity.Property(e => e.CustomerGroupInternalId).HasComment("Interne Kundengruppen-ID");
            entity.Property(e => e.CustomerNumber)
                .HasMaxLength(30)
                .HasComment("Kundennummer");
            entity.Property(e => e.DateOfBirth)
                .HasMaxLength(10)
                .HasComment("Geburtsdatum des Kunden");
            entity.Property(e => e.Discount)
                .HasComment("Gibt den Rabatt in Prozent an")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.FederalTaxId)
                .HasMaxLength(255)
                .HasComment("Enthält die Steuernummer des Kunden");
            entity.Property(e => e.InternalId).HasComment("Interne Kunden-ID");
            entity.Property(e => e.IsActive).HasComment("Gibt an, ob der Kunde aktiv oder inaktiv gesetzt ist");
            entity.Property(e => e.IsCashPayer).HasComment("Gibt an, ob es sich um einen Kassenkunden handelt");
            entity.Property(e => e.IsLocked).HasComment("Gibt an, ob der Kunde gesperrt ist");
            entity.Property(e => e.IsRepresentative).HasComment("Kunde von Firma?");
            entity.Property(e => e.LanguageIso)
                .HasMaxLength(10)
                .HasComment("ISO-Code der Sprache des Kunden")
                .HasColumnName("LanguageISO");
            entity.Property(e => e.OperationId)
                .HasMaxLength(39)
                .HasComment("Auftrags-ID des Kunden");
            entity.Property(e => e.PaymentMethodInternalId).HasComment("Interne ID der Zahlungsart");
            entity.Property(e => e.Source)
                .HasMaxLength(255)
                .HasComment("Gibt die Herkunftsplattform (Amazon, eBay usw.) des Kunden an");
            entity.Property(e => e.TermOfPayment).HasComment("Gibt das Zahlungsziel des Kunden in Tagen an");
            entity.Property(e => e.WebsiteUrl)
                .HasMaxLength(255)
                .HasComment("URL der Website des Kunden")
                .HasColumnName("WebsiteURL");
        });

        modelBuilder.Entity<CustomerAddressDelivery>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CustomerAddressDelivery", "BI");

            entity.Property(e => e.City).HasMaxLength(64);
            entity.Property(e => e.CountryIso)
                .HasMaxLength(2)
                .HasColumnName("CountryISO");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.CustomerOrderId).HasColumnName("CustomerOrderID");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.PostalCode).HasMaxLength(24);
        });

        modelBuilder.Entity<CustomerAddressInvoice>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CustomerAddressInvoice", "BI");

            entity.Property(e => e.City).HasMaxLength(64);
            entity.Property(e => e.CountryIso)
                .HasMaxLength(2)
                .HasColumnName("CountryISO");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.CustomerOrderId).HasColumnName("CustomerOrderID");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.PostalCode).HasMaxLength(24);
        });

        modelBuilder.Entity<CustomerAttribute>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CustomerAttribute", "Report");

            entity.Property(e => e.AttributeDescription).HasMaxLength(1000);
            entity.Property(e => e.AttributeName).HasMaxLength(255);
        });

        modelBuilder.Entity<CustomerBillToAddress>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CustomerBillToAddress", "Report");

            entity.Property(e => e.Address)
                .HasMaxLength(255)
                .HasComment("Strasse des Kunden");
            entity.Property(e => e.AddressSupplement)
                .HasMaxLength(255)
                .HasComment("Adresszusatz");
            entity.Property(e => e.City)
                .HasMaxLength(255)
                .HasComment("Wohnort des Kunden");
            entity.Property(e => e.Company)
                .HasMaxLength(128)
                .HasComment("Firmenname des Kunden");
            entity.Property(e => e.CompanySupplement)
                .HasMaxLength(60)
                .HasComment("Firmenzusatz");
            entity.Property(e => e.Country)
                .HasMaxLength(255)
                .HasComment("Land des Kunden");
            entity.Property(e => e.CountryIso)
                .HasMaxLength(5)
                .HasComment("ISO-Code des Landes des Kunden")
                .HasColumnName("CountryISO");
            entity.Property(e => e.CustomerInternalId).HasComment("Interne ID des Kunden");
            entity.Property(e => e.CustomerNumber)
                .HasMaxLength(30)
                .HasComment("Kundennummer");
            entity.Property(e => e.EmailAddress)
                .HasMaxLength(255)
                .HasComment("E-Mail-Adresse des Kunden");
            entity.Property(e => e.Fax)
                .HasMaxLength(30)
                .HasComment("Faxnummer des Kunden");
            entity.Property(e => e.FirstName)
                .HasMaxLength(255)
                .HasComment("Vorname des Kunden");
            entity.Property(e => e.InternalId).HasComment("Interne ID der Adresse");
            entity.Property(e => e.IsStandard).HasComment("die hinterlegte Standardadresse des Kunden");
            entity.Property(e => e.LastName)
                .HasMaxLength(255)
                .HasComment("Nachname des Kunden");
            entity.Property(e => e.MobilePhone)
                .HasMaxLength(30)
                .HasComment("Mobilnummer des Kunden");
            entity.Property(e => e.Phone)
                .HasMaxLength(30)
                .HasComment("Telefonnummer des Kunden");
            entity.Property(e => e.PostalCode)
                .HasMaxLength(24)
                .HasComment("PLZ des Kunden");
            entity.Property(e => e.Salutation)
                .HasMaxLength(30)
                .HasComment("Anrede des Kunden");
            entity.Property(e => e.State)
                .HasMaxLength(255)
                .HasComment("Bundesland des Kunden");
            entity.Property(e => e.Title)
                .HasMaxLength(64)
                .HasComment("Titel des Kunden");
            entity.Property(e => e.ValueAddedTaxId)
                .HasMaxLength(20)
                .HasComment("USt-IdNr. des Kunden");
        });

        modelBuilder.Entity<CustomerCategory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CustomerCategory", "BI");

            entity.Property(e => e.CustomerCategoryId).HasColumnName("CustomerCategoryID");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
        });

        modelBuilder.Entity<CustomerCategoryName>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CustomerCategoryName", "BI");

            entity.Property(e => e.CustomerCategoryId).HasColumnName("CustomerCategoryID");
            entity.Property(e => e.LanguageIso)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Name).HasMaxLength(128);
        });

        modelBuilder.Entity<CustomerCreditNote>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CustomerCreditNote", "BI");

            entity.Property(e => e.CompanyId).HasColumnName("CompanyID");
            entity.Property(e => e.CurrencyFactor).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.CurrencyIso)
                .HasMaxLength(20)
                .HasColumnName("CurrencyISO");
            entity.Property(e => e.CustomerCreditNoteId).HasColumnName("CustomerCreditNoteID");
            entity.Property(e => e.CustomerCreditNoteNo).HasMaxLength(50);
            entity.Property(e => e.CustomerInvoiceId).HasColumnName("CustomerInvoiceID");
            entity.Property(e => e.LanguageId).HasColumnName("LanguageID");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
        });

        modelBuilder.Entity<CustomerCreditNotePo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CustomerCreditNotePos", "BI");

            entity.Property(e => e.Amount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.CustomerCreditNoteId).HasColumnName("CustomerCreditNoteID");
            entity.Property(e => e.CustomerCreditNotePosId)
                .ValueGeneratedOnAdd()
                .HasColumnName("CustomerCreditNotePosID");
            entity.Property(e => e.CustomerInvoicePosId).HasColumnName("CustomerInvoicePosID");
            entity.Property(e => e.CustomerOrderPosId).HasColumnName("CustomerOrderPosID");
            entity.Property(e => e.Discount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.NetSalesPrice).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.PartsListPosId).HasColumnName("PartsListPosID");
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
        });

        modelBuilder.Entity<CustomerGroup>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CustomerGroup", "BI");

            entity.Property(e => e.CustomerGroupId).HasColumnName("CustomerGroupID");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
        });

        modelBuilder.Entity<CustomerGroup1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CustomerGroup", "Report");

            entity.Property(e => e.DiscountInPercent).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Name).HasMaxLength(255);
        });

        modelBuilder.Entity<CustomerGroupName>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CustomerGroupName", "BI");

            entity.Property(e => e.CustomerGroupId).HasColumnName("CustomerGroupID");
            entity.Property(e => e.LanguageIso)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Name).HasMaxLength(128);
        });

        modelBuilder.Entity<CustomerGroupProperty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CustomerGroupProperties", "BI");

            entity.Property(e => e.CustomerGroupId).HasColumnName("CustomerGroupID");
            entity.Property(e => e.CustomerGroupPropertyId)
                .HasMaxLength(39)
                .HasColumnName("CustomerGroupPropertyID");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.PropertyId)
                .HasMaxLength(20)
                .HasColumnName("PropertyID");
            entity.Property(e => e.PropertyType)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CustomerGroupPropertyName>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CustomerGroupPropertyName", "BI");

            entity.Property(e => e.CustomerGroupPropertyId)
                .HasMaxLength(39)
                .HasColumnName("CustomerGroupPropertyID");
            entity.Property(e => e.LanguageIso)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Name).HasMaxLength(128);
        });

        modelBuilder.Entity<CustomerGroupPropertyValueName>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CustomerGroupPropertyValueName", "BI");

            entity.Property(e => e.CustomerGroupPropertyId)
                .HasMaxLength(39)
                .HasColumnName("CustomerGroupPropertyID");
            entity.Property(e => e.LanguageIso)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Name).HasMaxLength(128);
        });

        modelBuilder.Entity<CustomerInvoice>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CustomerInvoice", "BI");

            entity.Property(e => e.CompanyHistoryId).HasColumnName("CompanyHistoryID");
            entity.Property(e => e.CreationDate).HasColumnType("datetime");
            entity.Property(e => e.CustomerInvoiceId).HasColumnName("CustomerInvoiceID");
            entity.Property(e => e.CustomerInvoiceNo).HasMaxLength(50);
            entity.Property(e => e.InvoiceCurrencyFactor).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.InvoiceCurrencyIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("InvoiceCurrencyISO");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
        });

        modelBuilder.Entity<CustomerInvoicePo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CustomerInvoicePos", "BI");

            entity.Property(e => e.Amount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ConfigurationPosId).HasColumnName("ConfigurationPosID");
            entity.Property(e => e.CustomerInvoiceId).HasColumnName("CustomerInvoiceID");
            entity.Property(e => e.CustomerInvoicePosId).HasColumnName("CustomerInvoicePosID");
            entity.Property(e => e.CustomerOrderPosId).HasColumnName("CustomerOrderPosID");
            entity.Property(e => e.Discount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.NetPurchasePrice).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.NetSalesPrice).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.PartsListPosId).HasColumnName("PartsListPosID");
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
            entity.Property(e => e.ProductName).HasMaxLength(128);
            entity.Property(e => e.ProductNo).HasMaxLength(50);
            entity.Property(e => e.Unit).HasMaxLength(20);
            entity.Property(e => e.Vatpercent)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("VATPercent");
        });

        modelBuilder.Entity<CustomerOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CustomerOrder", "BI");

            entity.Property(e => e.CompanyHistoryId).HasColumnName("CompanyHistoryID");
            entity.Property(e => e.CurrencyFactorShipFromCountry).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.CurrencyShipFromCountryIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CurrencyShipFromCountryISO");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.CustomerOrderId)
                .ValueGeneratedOnAdd()
                .HasColumnName("CustomerOrderID");
            entity.Property(e => e.CustomerOrderType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.Discount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.OrderCurrencyFactor).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.OrderCurrencyIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OrderCurrencyISO");
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.OrderNumber).HasMaxLength(50);
            entity.Property(e => e.PaymentTypeCost).HasColumnType("numeric(1, 1)");
            entity.Property(e => e.PaymentTypeId).HasColumnName("PaymentTypeID");
            entity.Property(e => e.PlatformId).HasColumnName("PlatformID");
            entity.Property(e => e.SendDate).HasColumnType("datetime");
            entity.Property(e => e.ShipFromCountryIso)
                .HasMaxLength(2)
                .HasColumnName("ShipFromCountryISO");
            entity.Property(e => e.ShippingMethodId).HasColumnName("ShippingMethodID");
            entity.Property(e => e.WebshopId).HasColumnName("WebshopID");
        });

        modelBuilder.Entity<CustomerOrderCost>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CustomerOrderCost", "BI");

            entity.Property(e => e.CostDescription).HasMaxLength(100);
            entity.Property(e => e.CostValue).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.CustomerOrderCostId)
                .ValueGeneratedOnAdd()
                .HasColumnName("CustomerOrderCostID");
            entity.Property(e => e.CustomerOrderCostTypeId).HasColumnName("CustomerOrderCostTypeID");
            entity.Property(e => e.CustomerOrderId).HasColumnName("CustomerOrderID");
            entity.Property(e => e.CustomerOrderPosId).HasColumnName("CustomerOrderPosID");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.ProductNumber).HasMaxLength(50);
        });

        modelBuilder.Entity<CustomerOrderPo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CustomerOrderPos", "BI");

            entity.Property(e => e.Amount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ConfigurationPosId).HasColumnName("ConfigurationPosID");
            entity.Property(e => e.CustomerOrderId).HasColumnName("CustomerOrderID");
            entity.Property(e => e.CustomerOrderPosId)
                .ValueGeneratedOnAdd()
                .HasColumnName("CustomerOrderPosID");
            entity.Property(e => e.CustomerOrderPosTypeId).HasColumnName("CustomerOrderPosTypeID");
            entity.Property(e => e.Discount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.NetPurchasePrice).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.NetSalesPrice).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.PartsListPosId).HasColumnName("PartsListPosID");
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
            entity.Property(e => e.ProductName).HasMaxLength(255);
            entity.Property(e => e.ProductNumber).HasMaxLength(100);
            entity.Property(e => e.Unit).HasMaxLength(255);
            entity.Property(e => e.Vatpercent)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("VATPercent");
        });

        modelBuilder.Entity<CustomerOrderProperty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CustomerOrderProperties", "BI");

            entity.Property(e => e.CustomerOrderId).HasColumnName("CustomerOrderID");
            entity.Property(e => e.CustomerOrderPropertyId)
                .HasMaxLength(39)
                .HasColumnName("CustomerOrderPropertyID");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.PropertyId)
                .HasMaxLength(20)
                .HasColumnName("PropertyID");
            entity.Property(e => e.PropertyType)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CustomerOrderPropertyName>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CustomerOrderPropertyName", "BI");

            entity.Property(e => e.CustomerOrderPropertyId)
                .HasMaxLength(39)
                .HasColumnName("CustomerOrderPropertyID");
            entity.Property(e => e.LanguageIso)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Name).HasMaxLength(128);
        });

        modelBuilder.Entity<CustomerOrderPropertyValueName>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CustomerOrderPropertyValueName", "BI");

            entity.Property(e => e.CustomerOrderPropertyId)
                .HasMaxLength(39)
                .HasColumnName("CustomerOrderPropertyID");
            entity.Property(e => e.LanguageIso)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Name).HasMaxLength(128);
        });

        modelBuilder.Entity<CustomerOtherAddress>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CustomerOtherAddress", "Report");

            entity.Property(e => e.Address).HasMaxLength(255);
            entity.Property(e => e.AddressSupplement).HasMaxLength(255);
            entity.Property(e => e.City).HasMaxLength(255);
            entity.Property(e => e.Company).HasMaxLength(128);
            entity.Property(e => e.CompanySupplement).HasMaxLength(60);
            entity.Property(e => e.Country).HasMaxLength(255);
            entity.Property(e => e.CountryIso)
                .HasMaxLength(5)
                .HasColumnName("CountryISO");
            entity.Property(e => e.CustomerNumber).HasMaxLength(30);
            entity.Property(e => e.EmailAddress).HasMaxLength(255);
            entity.Property(e => e.Fax).HasMaxLength(30);
            entity.Property(e => e.FirstName).HasMaxLength(255);
            entity.Property(e => e.LastName).HasMaxLength(255);
            entity.Property(e => e.MobilePhone).HasMaxLength(30);
            entity.Property(e => e.Phone).HasMaxLength(30);
            entity.Property(e => e.PostalCode).HasMaxLength(24);
            entity.Property(e => e.Salutation).HasMaxLength(30);
            entity.Property(e => e.State).HasMaxLength(255);
            entity.Property(e => e.Title).HasMaxLength(64);
            entity.Property(e => e.ValueAddedTaxId).HasMaxLength(20);
        });

        modelBuilder.Entity<CustomerProperty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CustomerProperties", "BI");

            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.CustomerPropertyId)
                .HasMaxLength(39)
                .HasColumnName("CustomerPropertyID");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.PropertyId)
                .HasMaxLength(20)
                .HasColumnName("PropertyID");
            entity.Property(e => e.PropertyType)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CustomerPropertyName>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CustomerPropertyName", "BI");

            entity.Property(e => e.CustomerPropertyId)
                .HasMaxLength(39)
                .HasColumnName("CustomerPropertyID");
            entity.Property(e => e.LanguageIso)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Name).HasMaxLength(128);
        });

        modelBuilder.Entity<CustomerPropertyValueName>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CustomerPropertyValueName", "BI");

            entity.Property(e => e.CustomerPropertyId)
                .HasMaxLength(39)
                .HasColumnName("CustomerPropertyID");
            entity.Property(e => e.LanguageIso)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Name).HasMaxLength(128);
        });

        modelBuilder.Entity<CustomerReturn>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CustomerReturn", "BI");

            entity.Property(e => e.CompanyId).HasColumnName("CompanyID");
            entity.Property(e => e.CreationDate).HasColumnType("datetime");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.CustomerInvoiceCorrId).HasColumnName("CustomerInvoiceCorrID");
            entity.Property(e => e.CustomerOrderId).HasColumnName("CustomerOrderID");
            entity.Property(e => e.CustomerReturnId)
                .ValueGeneratedOnAdd()
                .HasColumnName("CustomerReturnID");
            entity.Property(e => e.CustomerReturnNo).HasMaxLength(255);
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.StatusId).HasColumnName("StatusID");
            entity.Property(e => e.WarehouseId).HasColumnName("WarehouseID");
        });

        modelBuilder.Entity<CustomerReturnPo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CustomerReturnPos", "BI");

            entity.Property(e => e.Amount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.CustomerReturnId).HasColumnName("CustomerReturnID");
            entity.Property(e => e.CustomerReturnPosId)
                .ValueGeneratedOnAdd()
                .HasColumnName("CustomerReturnPosID");
            entity.Property(e => e.DeliveryNotePosId).HasColumnName("DeliveryNotePosID");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
            entity.Property(e => e.ProductStateId).HasColumnName("ProductStateID");
            entity.Property(e => e.ReturnReasonId).HasColumnName("ReturnReasonID");
        });

        modelBuilder.Entity<CustomerShipToAddress>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CustomerShipToAddress", "Report");

            entity.Property(e => e.Address).HasMaxLength(255);
            entity.Property(e => e.AddressSupplement).HasMaxLength(255);
            entity.Property(e => e.City).HasMaxLength(255);
            entity.Property(e => e.Company).HasMaxLength(128);
            entity.Property(e => e.CompanySupplement).HasMaxLength(60);
            entity.Property(e => e.Country).HasMaxLength(255);
            entity.Property(e => e.CountryIso)
                .HasMaxLength(5)
                .HasColumnName("CountryISO");
            entity.Property(e => e.CustomerNumber).HasMaxLength(30);
            entity.Property(e => e.EmailAddress).HasMaxLength(255);
            entity.Property(e => e.Fax).HasMaxLength(30);
            entity.Property(e => e.FirstName).HasMaxLength(255);
            entity.Property(e => e.LastName).HasMaxLength(255);
            entity.Property(e => e.MobilePhone).HasMaxLength(30);
            entity.Property(e => e.Phone).HasMaxLength(30);
            entity.Property(e => e.PostalCode).HasMaxLength(24);
            entity.Property(e => e.Salutation).HasMaxLength(30);
            entity.Property(e => e.State).HasMaxLength(255);
            entity.Property(e => e.Title).HasMaxLength(64);
            entity.Property(e => e.ValueAddedTaxId).HasMaxLength(20);
        });

        modelBuilder.Entity<DeliveryNote>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("DeliveryNote", "BI");

            entity.Property(e => e.CreationDate).HasColumnType("datetime");
            entity.Property(e => e.CustomerOrderId).HasColumnName("CustomerOrderID");
            entity.Property(e => e.DeliveryNoteId)
                .ValueGeneratedOnAdd()
                .HasColumnName("DeliveryNoteID");
            entity.Property(e => e.DeliveryNoteNo).HasMaxLength(50);
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.SupplierOrderId).HasColumnName("SupplierOrderID");
        });

        modelBuilder.Entity<DeliveryNote1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("DeliveryNote", "Report");

            entity.Property(e => e.Comment).HasComment("Bemerkung zum Lieferschein");
            entity.Property(e => e.CompanyInternalId).HasComment("Interne ID der Firma");
            entity.Property(e => e.CountryIso)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasComment("ISO-Code des Landes im Lieferschein")
                .HasColumnName("CountryISO");
            entity.Property(e => e.CreationDate)
                .HasComment("Erstellungsdatum des Lieferscheins")
                .HasColumnType("datetime");
            entity.Property(e => e.CurrencyIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("ISO-Code der Währung im Lieferschein")
                .HasColumnName("CurrencyISO");
            entity.Property(e => e.CustomerInternalId).HasComment("Interne ID des Kunden");
            entity.Property(e => e.DeliveryNoteData).HasComment("Lieferscheindaten");
            entity.Property(e => e.DeliveryNoteNumber)
                .HasMaxLength(50)
                .HasComment("Nummer des Lieferscheins");
            entity.Property(e => e.DeliveryNoteText).HasComment("Drucktext für den Lieferschein");
            entity.Property(e => e.HasDeliveryNoteAsPdf)
                .HasComment("Lieferschein als PDF vorhanden")
                .HasColumnName("HasDeliveryNoteAsPDF");
            entity.Property(e => e.InternalId).HasComment("Interne ID des Lieferscheins");
            entity.Property(e => e.LanguageIso)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("ISO-Code der Sprache im Lieferschein")
                .HasColumnName("LanguageISO");
            entity.Property(e => e.MailingDate)
                .HasComment("Versanddatum")
                .HasColumnType("datetime");
            entity.Property(e => e.Note)
                .HasMaxLength(255)
                .HasComment("Hinweisfeld zum Lieferschein");
            entity.Property(e => e.OperationId)
                .HasMaxLength(63)
                .HasComment("Vorgangsnummer im Lieferschein");
            entity.Property(e => e.PaymentMethodType)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasComment("Art der Zahlungsmethode im Lieferschein");
            entity.Property(e => e.PrintingDate)
                .HasComment("Druckdatum des Lieferscheins")
                .HasColumnType("datetime");
            entity.Property(e => e.SalesOrderNumber)
                .HasMaxLength(50)
                .HasComment("Nummer der Bestellung");
            entity.Property(e => e.ServiceDate)
                .HasComment("Lieferdatum des Lieferscheins")
                .HasColumnType("datetime");
            entity.Property(e => e.ShippingCosts)
                .HasComment("Versandkosten der Lieferung")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingMethodInternalId).HasComment("Interne ID der Versandart");
            entity.Property(e => e.TotalNetPrice)
                .HasComment("Gesamter Nettopreis")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.TotalShippingWeight)
                .HasComment("Gesamtgewicht der Lieferung")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.UserInternalId).HasComment("Interne IDpass des Benutzers");
            entity.Property(e => e.ValueAddedTaxId)
                .HasMaxLength(25)
                .HasComment("Umsatzsteuer-ID im Lieferschein");
        });

        modelBuilder.Entity<DeliveryNoteBillToAddress>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("DeliveryNoteBillToAddress", "Report");

            entity.Property(e => e.Address).HasMaxLength(255);
            entity.Property(e => e.AddressSupplement).HasMaxLength(255);
            entity.Property(e => e.City).HasMaxLength(255);
            entity.Property(e => e.Company).HasMaxLength(128);
            entity.Property(e => e.CompanySupplement).HasMaxLength(60);
            entity.Property(e => e.Country).HasMaxLength(255);
            entity.Property(e => e.CountryIso)
                .HasMaxLength(5)
                .HasColumnName("CountryISO");
            entity.Property(e => e.CustomerNumber).HasMaxLength(30);
            entity.Property(e => e.EmailAddress).HasMaxLength(255);
            entity.Property(e => e.Fax).HasMaxLength(30);
            entity.Property(e => e.FirstName).HasMaxLength(255);
            entity.Property(e => e.LastName).HasMaxLength(255);
            entity.Property(e => e.MobilePhone).HasMaxLength(30);
            entity.Property(e => e.Phone).HasMaxLength(30);
            entity.Property(e => e.PostalCode).HasMaxLength(24);
            entity.Property(e => e.Salutation).HasMaxLength(30);
            entity.Property(e => e.State).HasMaxLength(255);
            entity.Property(e => e.Title).HasMaxLength(64);
            entity.Property(e => e.ValueAddedTaxId).HasMaxLength(20);
        });

        modelBuilder.Entity<DeliveryNoteFbabarcode>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("DeliveryNoteFBABarcode", "Report");

            entity.Property(e => e.Fbabarcode).HasColumnName("FBABarcode");
        });

        modelBuilder.Entity<DeliveryNotePo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("DeliveryNotePos", "BI");

            entity.Property(e => e.Amount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.CustomerOrderPosId).HasColumnName("CustomerOrderPosID");
            entity.Property(e => e.DeliveryNoteId).HasColumnName("DeliveryNoteID");
            entity.Property(e => e.DeliveryNotePosId).HasColumnName("DeliveryNotePosID");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
        });

        modelBuilder.Entity<DeliveryNotePosition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("DeliveryNotePosition", "Report");

            entity.Property(e => e.AmazonCustomJson).HasColumnName("AmazonCustomJSON");
            entity.Property(e => e.BillOfMaterialsPosition)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasComment("Position der Stücklisten");
            entity.Property(e => e.BillOfMaterialsPositionParentId).HasComment("Vater-ID der Position der Stücklisten");
            entity.Property(e => e.ConfigurationItemInternalId).HasComment("Interne ID Konfigurationsartikel");
            entity.Property(e => e.ConfiguratorPosition)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasComment("Gibt an, ob Stücklistenkomponente oder Stücklistenvaterartikel");
            entity.Property(e => e.ConfiguratorPositionParentId).HasComment("Vater-ID der Position der Konfigurationsartikel");
            entity.Property(e => e.DeliveryNoteInternalId).HasComment("Interne ID des Lieferscheins der Positionen");
            entity.Property(e => e.Ean)
                .HasMaxLength(255)
                .HasComment("Internationale Artikelnummer")
                .HasColumnName("EAN");
            entity.Property(e => e.IndividualWeight)
                .HasComment("Gewichte der einzelnen Lieferscheinpositionen")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.InternalId).HasComment("Interne ID der Lieferscheinposition");
            entity.Property(e => e.ItemDescriptionBrief).HasComment("Artikelbeschreibung kurz");
            entity.Property(e => e.ItemDescriptionDetailed).HasComment("Artikebeschreibung ausführlich");
            entity.Property(e => e.Jfsku).HasMaxLength(255);
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasComment("Drucktext der Bestellposition");
            entity.Property(e => e.NetPricePerUnit)
                .HasComment("Nettopreis pro Einheit der Lieferscheinposition")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Note)
                .HasMaxLength(4000)
                .HasComment("Hinweisfeld zur Lieferscheinposition");
            entity.Property(e => e.PositionType)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Typ der Position im Lieferschein");
            entity.Property(e => e.ProductInternalId).HasComment("Interne Id des Artikels der Lieferscheinposition");
            entity.Property(e => e.Quantity)
                .HasComment("Anzahl pro Position auf dem Lieferschein")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Sku)
                .HasMaxLength(100)
                .HasComment("Artikelnummer")
                .HasColumnName("SKU");
            entity.Property(e => e.Sorting).HasComment("Sortierung der Lieferscheinpositonen");
            entity.Property(e => e.TotalNetPrice)
                .HasComment("Gesamtnettopreis der Lieferscheinpositionen")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.TotalShippingWeight)
                .HasComment("Gesamtversandgewicht der Lieferung")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Unit)
                .HasMaxLength(255)
                .HasComment("Einheit pro Position");
        });

        modelBuilder.Entity<DeliveryNotePositionConfiguration>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("DeliveryNotePositionConfiguration", "Report");

            entity.Property(e => e.AdditionalNetPrice).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.ValueText).HasMaxLength(255);
        });

        modelBuilder.Entity<DeliveryNotePositionDeliveryDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("DeliveryNotePositionDeliveryDetails", "Report");

            entity.Property(e => e.BatchNumber).HasMaxLength(255);
            entity.Property(e => e.BestBeforeDate).HasColumnType("datetime");
            entity.Property(e => e.Quantity).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.SerialNumber).HasMaxLength(128);
        });

        modelBuilder.Entity<DeliveryNoteShipToAddress>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("DeliveryNoteShipToAddress", "Report");

            entity.Property(e => e.Address).HasMaxLength(255);
            entity.Property(e => e.AddressSupplement).HasMaxLength(255);
            entity.Property(e => e.City).HasMaxLength(255);
            entity.Property(e => e.Company).HasMaxLength(128);
            entity.Property(e => e.CompanySupplement).HasMaxLength(60);
            entity.Property(e => e.Country).HasMaxLength(255);
            entity.Property(e => e.CountryIso)
                .HasMaxLength(5)
                .HasColumnName("CountryISO");
            entity.Property(e => e.CustomerNumber).HasMaxLength(30);
            entity.Property(e => e.EmailAddress).HasMaxLength(255);
            entity.Property(e => e.Fax).HasMaxLength(30);
            entity.Property(e => e.FirstName).HasMaxLength(255);
            entity.Property(e => e.LastName).HasMaxLength(255);
            entity.Property(e => e.MobilePhone).HasMaxLength(30);
            entity.Property(e => e.Phone).HasMaxLength(30);
            entity.Property(e => e.PostalCode).HasMaxLength(24);
            entity.Property(e => e.Salutation).HasMaxLength(30);
            entity.Property(e => e.State).HasMaxLength(255);
            entity.Property(e => e.Title).HasMaxLength(64);
            entity.Property(e => e.ValueAddedTaxId).HasMaxLength(20);
        });

        modelBuilder.Entity<Dunning>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Dunning", "Report");

            entity.Property(e => e.CompanyInternalId).HasComment("Interne ID der Firma");
            entity.Property(e => e.CompletionDate)
                .HasComment("Datum an dem die Mahnung erledigt wurde")
                .HasColumnType("datetime");
            entity.Property(e => e.CountryIso)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasComment("ISO-Code des Landes")
                .HasColumnName("CountryISO");
            entity.Property(e => e.CreationDate)
                .HasComment("Erstellungsdatum der Mahnung")
                .HasColumnType("datetime");
            entity.Property(e => e.CurrencyIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("ISO-Code der Währung")
                .HasColumnName("CurrencyISO");
            entity.Property(e => e.CustomerGroupInternalId).HasComment("Interne ID der Kundengruppe");
            entity.Property(e => e.DunningDate)
                .HasComment("Datum der Mahung")
                .HasColumnType("datetime");
            entity.Property(e => e.DunningFee)
                .HasComment("Mahngebühr")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.DunningLevelName)
                .HasMaxLength(255)
                .HasComment("Name der Mahnstufe");
            entity.Property(e => e.FeeInterestRate)
                .HasComment("Zinssatz der Mahngebühr")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.FlatRateDunningFee)
                .HasComment("Pauschale Mahngebühr")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GracePeriod).HasComment("Karenzzeit");
            entity.Property(e => e.GrossValue)
                .HasComment("Bruttobetrag der Mahnung")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.InternalId).HasComment("Interne ID der Mahnung");
            entity.Property(e => e.InvoiceInternalId).HasComment("Interne ID der Rechnung");
            entity.Property(e => e.LanguageIso)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("ISO-Code der Sprache")
                .HasColumnName("LanguageISO");
            entity.Property(e => e.NumberDunningRepitions).HasComment("Level der Mahnstufe");
            entity.Property(e => e.OperationId)
                .HasMaxLength(325)
                .HasComment("Vorgangs-ID der Mahnung");
            entity.Property(e => e.PaymentTerm).HasComment("Zahlungsfrist in Tagen");
            entity.Property(e => e.PaymentTermDate)
                .HasComment("Datum der Zahlungsfrist der Mahnung")
                .HasColumnType("datetime");
            entity.Property(e => e.UserInternalId).HasComment("Interne ID des Benutzers");
            entity.Property(e => e.ValueAddedTaxId)
                .HasMaxLength(25)
                .HasComment("USt-IdNr. der Mahnung");
        });

        modelBuilder.Entity<DunningInvoice>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("DunningInvoice", "Report");

            entity.Property(e => e.CreationDate).HasColumnType("datetime");
            entity.Property(e => e.CurrencyIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CurrencyISO");
            entity.Property(e => e.InvoiceNumber).HasMaxLength(50);
            entity.Property(e => e.MailingDate).HasColumnType("datetime");
            entity.Property(e => e.OpenGrossPrice).HasColumnType("decimal(27, 13)");
            entity.Property(e => e.PrintingDate).HasColumnType("datetime");
            entity.Property(e => e.TotalGrossPrice).HasColumnType("decimal(25, 13)");
        });

        modelBuilder.Entity<DunningInvoiceBillToAddress>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("DunningInvoiceBillToAddress", "Report");

            entity.Property(e => e.Address).HasMaxLength(255);
            entity.Property(e => e.AddressSupplement).HasMaxLength(255);
            entity.Property(e => e.City).HasMaxLength(255);
            entity.Property(e => e.Company).HasMaxLength(128);
            entity.Property(e => e.CompanySupplement).HasMaxLength(60);
            entity.Property(e => e.Country).HasMaxLength(255);
            entity.Property(e => e.CountryIso)
                .HasMaxLength(5)
                .HasColumnName("CountryISO");
            entity.Property(e => e.CustomerNumber).HasMaxLength(30);
            entity.Property(e => e.EmailAddress).HasMaxLength(255);
            entity.Property(e => e.Fax).HasMaxLength(30);
            entity.Property(e => e.FirstName).HasMaxLength(255);
            entity.Property(e => e.LastName).HasMaxLength(255);
            entity.Property(e => e.MobilePhone).HasMaxLength(30);
            entity.Property(e => e.Phone).HasMaxLength(30);
            entity.Property(e => e.PostalCode).HasMaxLength(24);
            entity.Property(e => e.Salutation).HasMaxLength(30);
            entity.Property(e => e.State).HasMaxLength(255);
            entity.Property(e => e.Title).HasMaxLength(64);
            entity.Property(e => e.ValueAddedTaxId).HasMaxLength(20);
        });

        modelBuilder.Entity<DunningInvoicePayment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("DunningInvoicePayments", "Report");

            entity.Property(e => e.ExternalTransactionId).HasMaxLength(255);
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.Note).HasMaxLength(2000);
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentMethod).HasMaxLength(255);
            entity.Property(e => e.PaymentType)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.StandardChartOfAccountsManual).HasMaxLength(255);
            entity.Property(e => e.Value).HasColumnType("decimal(25, 13)");
        });

        modelBuilder.Entity<EbayAlienitem>(entity =>
        {
            entity.HasKey(e => e.KAlienItem).HasName("PK_dbo_ebay_alienitem");

            entity.ToTable("ebay_alienitem");

            entity.HasIndex(e => e.ItemId, "IX_ebay_alienitem_ItemID");

            entity.HasIndex(e => e.Status, "IX_ebay_alienitem_Status");

            entity.Property(e => e.KAlienItem)
                .ValueGeneratedNever()
                .HasColumnName("kAlienItem");
            entity.Property(e => e.BuyItNowPrice).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(10)
                .HasColumnName("CurrencyID");
            entity.Property(e => e.EndTime).HasColumnType("datetime");
            entity.Property(e => e.ItemId)
                .HasMaxLength(255)
                .HasColumnName("ItemID");
            entity.Property(e => e.KEbayuser).HasColumnName("kEbayuser");
            entity.Property(e => e.ListingType).HasMaxLength(255);
            entity.Property(e => e.SiteId).HasColumnName("SiteID");
            entity.Property(e => e.Sku)
                .HasMaxLength(255)
                .HasColumnName("SKU");
            entity.Property(e => e.SsBidCount)
                .HasDefaultValueSql("((0))")
                .HasColumnName("SS_BidCount");
            entity.Property(e => e.SsBidderCount).HasColumnName("SS_BidderCount");
            entity.Property(e => e.SsCurrentPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SS_CurrentPrice");
            entity.Property(e => e.SsHighBidderUserId)
                .HasMaxLength(255)
                .HasColumnName("SS_HighBidderUserId");
            entity.Property(e => e.StartPrice).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.StartTime).HasColumnType("datetime");
            entity.Property(e => e.Title).HasMaxLength(255);
            entity.Property(e => e.UserId)
                .HasMaxLength(255)
                .HasColumnName("UserID");
            entity.Property(e => e.Vatpercent)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("VATPercent");
        });

        modelBuilder.Entity<EbayAttributSetArray>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ebay_attributSetArray");

            entity.HasIndex(e => e.AttributeId, "IX_ebay_attributSetArray_AttributeId");

            entity.HasIndex(e => e.AttributeSetId, "IX_ebay_attributSetArray_AttributeSetId");

            entity.HasIndex(e => e.KCategoryId, "IX_ebay_attributSetArray_kCategoryID");

            entity.HasIndex(e => e.KItem, "IX_ebay_attributSetArray_kItem");

            entity.Property(e => e.KCategoryId).HasColumnName("kCategoryID");
            entity.Property(e => e.KItem).HasColumnName("kItem");
            entity.Property(e => e.ValueLiteral)
                .HasMaxLength(255)
                .HasDefaultValueSql("('')");
        });

        modelBuilder.Entity<EbayBeschreibungstemplate>(entity =>
        {
            entity.HasKey(e => e.KEbayBeschreibungsTemplate).HasName("PK_dbo_ebay_beschreibungstemplate");

            entity.ToTable("ebay_beschreibungstemplate");

            entity.Property(e => e.KEbayBeschreibungsTemplate)
                .ValueGeneratedNever()
                .HasColumnName("kEbayBeschreibungsTemplate");
            entity.Property(e => e.CBody).HasColumnName("cBody");
            entity.Property(e => e.CH1)
                .HasMaxLength(255)
                .HasColumnName("cH1");
            entity.Property(e => e.CH2)
                .HasMaxLength(255)
                .HasColumnName("cH2");
            entity.Property(e => e.CTitel)
                .HasMaxLength(255)
                .HasColumnName("cTitel");
            entity.Property(e => e.CVersandhinweis).HasColumnName("cVersandhinweis");
            entity.Property(e => e.KEbayuser).HasColumnName("kEbayuser");
            entity.Property(e => e.KItem).HasColumnName("kItem");
        });

        modelBuilder.Entity<EbayBestoffer>(entity =>
        {
            entity.HasKey(e => e.BestOfferId).HasName("PK_dbo_ebay_bestoffer");

            entity.ToTable("ebay_bestoffer");

            entity.HasIndex(e => e.ItemId, "IX_ebay_bestoffer_ItemID");

            entity.Property(e => e.BestOfferId)
                .HasMaxLength(256)
                .HasColumnName("BestOfferID");
            entity.Property(e => e.CounterMessage).HasMaxLength(255);
            entity.Property(e => e.CounterPrice).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Currency).HasMaxLength(256);
            entity.Property(e => e.Email).HasMaxLength(256);
            entity.Property(e => e.ExpirationTime).HasColumnType("datetime");
            entity.Property(e => e.ItemId)
                .HasMaxLength(256)
                .HasColumnName("ItemID");
            entity.Property(e => e.Message).HasMaxLength(501);
            entity.Property(e => e.Price).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.UserId)
                .HasMaxLength(256)
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<EbayBuyer>(entity =>
        {
            entity.HasKey(e => e.KBuyer).HasName("PK_dbo_ebay_buyer");

            entity.ToTable("ebay_buyer");

            entity.HasIndex(e => e.UserId, "IX_ebay_buyer_UserID");

            entity.Property(e => e.KBuyer)
                .ValueGeneratedNever()
                .HasColumnName("kBuyer");
            entity.Property(e => e.AboutMePage).HasDefaultValueSql("('0')");
            entity.Property(e => e.CharityId)
                .HasMaxLength(255)
                .HasColumnName("CharityID");
            entity.Property(e => e.CityName).HasMaxLength(64);
            entity.Property(e => e.Country).HasMaxLength(255);
            entity.Property(e => e.CountryName).HasMaxLength(255);
            entity.Property(e => e.EBayGoodStanding)
                .HasDefaultValueSql("('0')")
                .HasColumnName("eBayGoodStanding");
            entity.Property(e => e.Eiastoken)
                .HasMaxLength(255)
                .HasColumnName("EIASToken");
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.FeedbackPrivate).HasDefaultValueSql("('0')");
            entity.Property(e => e.FeedbackRatingStar).HasMaxLength(255);
            entity.Property(e => e.Idverified)
                .HasDefaultValueSql("('0')")
                .HasColumnName("IDVerified");
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.NewUser).HasDefaultValueSql("('0')");
            entity.Property(e => e.Phone).HasMaxLength(64);
            entity.Property(e => e.PositiveFeedbackPercent).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.PostalCode).HasMaxLength(12);
            entity.Property(e => e.RegistrationDate).HasMaxLength(20);
            entity.Property(e => e.SaCityName)
                .HasMaxLength(64)
                .HasColumnName("SA_CityName");
            entity.Property(e => e.SaCountry)
                .HasMaxLength(255)
                .HasColumnName("SA_Country");
            entity.Property(e => e.SaCountryName)
                .HasMaxLength(255)
                .HasColumnName("SA_CountryName");
            entity.Property(e => e.SaExternalAddressId)
                .HasMaxLength(255)
                .HasColumnName("SA_ExternalAddressID");
            entity.Property(e => e.SaName)
                .HasMaxLength(255)
                .HasColumnName("SA_Name");
            entity.Property(e => e.SaPhone)
                .HasMaxLength(64)
                .HasColumnName("SA_Phone");
            entity.Property(e => e.SaPostalCode)
                .HasMaxLength(12)
                .HasColumnName("SA_PostalCode");
            entity.Property(e => e.SaStateOrProvince)
                .HasMaxLength(64)
                .HasColumnName("SA_StateOrProvince");
            entity.Property(e => e.SaStreet)
                .HasMaxLength(255)
                .HasColumnName("SA_Street");
            entity.Property(e => e.SaStreet1)
                .HasMaxLength(255)
                .HasColumnName("SA_Street1");
            entity.Property(e => e.SaStreet2)
                .HasMaxLength(255)
                .HasColumnName("SA_Street2");
            entity.Property(e => e.Site).HasMaxLength(255);
            entity.Property(e => e.SiteVerified).HasDefaultValueSql("('0')");
            entity.Property(e => e.Status).HasMaxLength(255);
            entity.Property(e => e.Street).HasMaxLength(255);
            entity.Property(e => e.Street1).HasMaxLength(255);
            entity.Property(e => e.Street2).HasMaxLength(255);
            entity.Property(e => e.UserId)
                .HasMaxLength(255)
                .HasColumnName("UserID");
            entity.Property(e => e.UserIdchanged)
                .HasDefaultValueSql("('0')")
                .HasColumnName("UserIDChanged");
            entity.Property(e => e.UserIdlastChanged)
                .HasMaxLength(20)
                .HasColumnName("UserIDLastChanged");
            entity.Property(e => e.Vatstatus)
                .HasMaxLength(255)
                .HasColumnName("VATStatus");
        });

        modelBuilder.Entity<EbayCheckout>(entity =>
        {
            entity.HasKey(e => e.KEbayCheckout).HasName("PK_dbo_ebay_checkout");

            entity.ToTable("ebay_checkout");

            entity.HasIndex(e => e.DErstelltAm, "IX_ebay_checkout_dErstelltAm");

            entity.HasIndex(e => e.KEbayBuyer, "IX_ebay_checkout_kEbayBuyer");

            entity.HasIndex(e => e.NStatus, "IX_ebay_checkout_nStatus");

            entity.Property(e => e.KEbayCheckout)
                .ValueGeneratedNever()
                .HasColumnName("kEbayCheckout");
            entity.Property(e => e.CAdresszusatz)
                .HasMaxLength(255)
                .HasColumnName("cAdresszusatz");
            entity.Property(e => e.CAnrede)
                .HasMaxLength(30)
                .HasColumnName("cAnrede");
            entity.Property(e => e.CComment)
                .HasMaxLength(500)
                .HasColumnName("cComment");
            entity.Property(e => e.CEmail)
                .HasMaxLength(255)
                .HasColumnName("cEMail");
            entity.Property(e => e.CFax)
                .HasMaxLength(255)
                .HasColumnName("cFax");
            entity.Property(e => e.CFirma)
                .HasMaxLength(255)
                .HasColumnName("cFirma");
            entity.Property(e => e.CLand)
                .HasMaxLength(255)
                .HasColumnName("cLand");
            entity.Property(e => e.CLieferAdresszusatz)
                .HasMaxLength(255)
                .HasColumnName("cLieferAdresszusatz");
            entity.Property(e => e.CLieferAnrede)
                .HasMaxLength(30)
                .HasColumnName("cLieferAnrede");
            entity.Property(e => e.CLieferFax)
                .HasMaxLength(255)
                .HasColumnName("cLieferFax");
            entity.Property(e => e.CLieferFirma)
                .HasMaxLength(255)
                .HasColumnName("cLieferFirma");
            entity.Property(e => e.CLieferHandy)
                .HasMaxLength(255)
                .HasColumnName("cLieferHandy");
            entity.Property(e => e.CLieferLand)
                .HasMaxLength(255)
                .HasColumnName("cLieferLand");
            entity.Property(e => e.CLieferNachname)
                .HasMaxLength(255)
                .HasColumnName("cLieferNachname");
            entity.Property(e => e.CLieferNamenszusatz)
                .HasMaxLength(255)
                .HasColumnName("cLieferNamenszusatz");
            entity.Property(e => e.CLieferOrt)
                .HasMaxLength(255)
                .HasColumnName("cLieferOrt");
            entity.Property(e => e.CLieferOrtszusatz)
                .HasMaxLength(255)
                .HasColumnName("cLieferOrtszusatz");
            entity.Property(e => e.CLieferPlz)
                .HasMaxLength(255)
                .HasColumnName("cLieferPLZ");
            entity.Property(e => e.CLieferStrasse)
                .HasMaxLength(255)
                .HasColumnName("cLieferStrasse");
            entity.Property(e => e.CLieferTel)
                .HasMaxLength(255)
                .HasColumnName("cLieferTel");
            entity.Property(e => e.CLieferVorname)
                .HasMaxLength(255)
                .HasColumnName("cLieferVorname");
            entity.Property(e => e.CMobil)
                .HasMaxLength(255)
                .HasColumnName("cMobil");
            entity.Property(e => e.CNachname)
                .HasMaxLength(126)
                .HasColumnName("cNachname");
            entity.Property(e => e.COrderId)
                .HasMaxLength(255)
                .HasColumnName("cOrderId");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPaymentStatus)
                .HasMaxLength(255)
                .HasColumnName("cPaymentStatus");
            entity.Property(e => e.CPaypalTransactionId)
                .HasMaxLength(255)
                .HasColumnName("cPaypalTransactionID");
            entity.Property(e => e.CPlz)
                .HasMaxLength(255)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CPuizahlungsdaten).HasColumnName("cPUIZahlungsdaten");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTel)
                .HasMaxLength(255)
                .HasColumnName("cTel");
            entity.Property(e => e.CUstId)
                .HasMaxLength(30)
                .HasColumnName("cUStID");
            entity.Property(e => e.CVersandArt)
                .HasMaxLength(255)
                .HasColumnName("cVersandArt");
            entity.Property(e => e.CVerwendungszweck)
                .HasMaxLength(32)
                .HasColumnName("cVerwendungszweck");
            entity.Property(e => e.CVorname)
                .HasMaxLength(126)
                .HasColumnName("cVorname");
            entity.Property(e => e.CZahlungBankName)
                .HasMaxLength(255)
                .HasColumnName("cZahlungBankName");
            entity.Property(e => e.CZahlungBlz)
                .HasMaxLength(32)
                .HasColumnName("cZahlungBLZ");
            entity.Property(e => e.CZahlungCvv)
                .HasMaxLength(4)
                .HasColumnName("cZahlungCVV");
            entity.Property(e => e.CZahlungGueltigkeit)
                .HasMaxLength(12)
                .HasColumnName("cZahlungGueltigkeit");
            entity.Property(e => e.CZahlungInhaber)
                .HasMaxLength(255)
                .HasColumnName("cZahlungInhaber");
            entity.Property(e => e.CZahlungKartenNr)
                .HasMaxLength(32)
                .HasColumnName("cZahlungKartenNr");
            entity.Property(e => e.CZahlungKartenTyp)
                .HasMaxLength(32)
                .HasColumnName("cZahlungKartenTyp");
            entity.Property(e => e.CZahlungKontoNr)
                .HasMaxLength(32)
                .HasColumnName("cZahlungKontoNr");
            entity.Property(e => e.CZahlungsart)
                .HasMaxLength(255)
                .HasColumnName("cZahlungsart");
            entity.Property(e => e.DAbgeschlossenAm)
                .HasColumnType("datetime")
                .HasColumnName("dAbgeschlossenAm");
            entity.Property(e => e.DErstelltAm)
                .HasColumnType("datetime")
                .HasColumnName("dErstelltAm");
            entity.Property(e => e.FSumme)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fSumme");
            entity.Property(e => e.FVersandkosten)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVersandkosten");
            entity.Property(e => e.KEbayBuyer).HasColumnName("kEbayBuyer");
            entity.Property(e => e.KEbayUser).HasColumnName("kEbayUser");
            entity.Property(e => e.NAnzahlPos).HasColumnName("nAnzahlPos");
            entity.Property(e => e.NCheckoutType)
                .HasDefaultValueSql("((2))")
                .HasColumnName("nCheckoutType");
            entity.Property(e => e.NInBearbeitung).HasColumnName("nInBearbeitung");
            entity.Property(e => e.NNeu).HasColumnName("nNeu");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<EbayCheckoutpo>(entity =>
        {
            entity.HasKey(e => e.KEbayCheckoutPos).HasName("PK_dbo_ebay_checkoutpos");

            entity.ToTable("ebay_checkoutpos");

            entity.HasIndex(e => e.ItemId, "IX_ebay_checkoutpos_ItemID");

            entity.HasIndex(e => e.TransactionId, "IX_ebay_checkoutpos_TransactionID");

            entity.HasIndex(e => e.KArtikel, "IX_ebay_checkoutpos_kArtikel");

            entity.HasIndex(e => e.KEbayCheckout, "IX_ebay_checkoutpos_kEbayCheckout");

            entity.HasIndex(e => new { e.ItemId, e.TransactionId }, "UQ_dbo_ebay_checkoutpos_ItemID_TransactionID").IsUnique();

            entity.Property(e => e.KEbayCheckoutPos)
                .ValueGeneratedNever()
                .HasColumnName("kEbayCheckoutPos");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.FPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPreis");
            entity.Property(e => e.ItemId)
                .HasMaxLength(255)
                .HasColumnName("ItemID");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KEbayCheckout).HasColumnName("kEbayCheckout");
            entity.Property(e => e.KXcheckoutPos).HasColumnName("kXCheckoutPos");
            entity.Property(e => e.TransactionId)
                .HasMaxLength(255)
                .HasColumnName("TransactionID");
        });

        modelBuilder.Entity<EbayCoposeigenschaft>(entity =>
        {
            entity.HasKey(e => e.KebayCoposeigenschaft).HasName("PK_dbo_ebay_coposeigenschaft");

            entity.ToTable("ebay_coposeigenschaft");

            entity.Property(e => e.KebayCoposeigenschaft)
                .ValueGeneratedNever()
                .HasColumnName("kebay_coposeigenschaft");
            entity.Property(e => e.FAufpreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAufpreis");
            entity.Property(e => e.KEbayCheckoutPos).HasColumnName("kEbayCheckoutPos");
            entity.Property(e => e.KEigenschaft).HasColumnName("kEigenschaft");
            entity.Property(e => e.KEigenschaftWert).HasColumnName("kEigenschaftWert");
        });

        modelBuilder.Entity<EbayDataFeedback>(entity =>
        {
            entity.HasKey(e => e.KFeedback).HasName("PK_dbo_ebay_data_feedback");

            entity.ToTable("ebay_data_feedback");

            entity.Property(e => e.KFeedback)
                .ValueGeneratedNever()
                .HasColumnName("kFeedback");
            entity.Property(e => e.CString)
                .HasMaxLength(255)
                .HasColumnName("cString");
            entity.Property(e => e.KEbayUser).HasColumnName("kEbayUser");
        });

        modelBuilder.Entity<EbayDataFeedbackIn>(entity =>
        {
            entity.HasKey(e => e.KFeedbackIn).HasName("PK_dbo_ebay_data_feedback_in");

            entity.ToTable("ebay_data_feedback_in");

            entity.HasIndex(e => e.ItemId, "IX_ebay_data_feedback_in_ItemID");

            entity.HasIndex(e => e.TransactionId, "IX_ebay_data_feedback_in_TransactionID");

            entity.Property(e => e.KFeedbackIn)
                .ValueGeneratedNever()
                .HasColumnName("kFeedbackIn");
            entity.Property(e => e.CommentText).HasMaxLength(80);
            entity.Property(e => e.CommentTime).HasMaxLength(30);
            entity.Property(e => e.CommentType).HasMaxLength(255);
            entity.Property(e => e.CommentingUser)
                .HasMaxLength(255)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.FeedbackId)
                .HasMaxLength(255)
                .HasColumnName("FeedbackID");
            entity.Property(e => e.FeedbackRole).HasMaxLength(255);
            entity.Property(e => e.ItemId)
                .HasMaxLength(255)
                .HasColumnName("ItemID");
            entity.Property(e => e.TransactionId)
                .HasMaxLength(255)
                .HasColumnName("TransactionID");
        });

        modelBuilder.Entity<EbayDataFeedbackOut>(entity =>
        {
            entity.HasKey(e => e.KFeedbackOut).HasName("PK_dbo_ebay_data_feedback_out");

            entity.ToTable("ebay_data_feedback_out");

            entity.HasIndex(e => e.FeedbackId, "IX_ebay_data_feedback_out_FeedbackID");

            entity.HasIndex(e => e.ItemId, "IX_ebay_data_feedback_out_ItemID");

            entity.Property(e => e.KFeedbackOut)
                .ValueGeneratedNever()
                .HasColumnName("kFeedbackOut");
            entity.Property(e => e.CommentText).HasMaxLength(80);
            entity.Property(e => e.CommentType).HasMaxLength(255);
            entity.Property(e => e.FeedbackId)
                .HasMaxLength(255)
                .HasDefaultValueSql("('')")
                .HasColumnName("FeedbackID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(255)
                .HasColumnName("ItemID");
            entity.Property(e => e.Sent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TargetUser).HasMaxLength(255);
            entity.Property(e => e.TransactionId)
                .HasMaxLength(255)
                .HasColumnName("TransactionID");
        });

        modelBuilder.Entity<EbayDataFeedbackmgr>(entity =>
        {
            entity.HasKey(e => e.KFeedbackmgr).HasName("PK_dbo_ebay_data_feedbackmgr");

            entity.ToTable("ebay_data_feedbackmgr");

            entity.Property(e => e.KFeedbackmgr)
                .ValueGeneratedNever()
                .HasColumnName("kFeedbackmgr");
            entity.Property(e => e.CMailText).HasColumnName("cMailText");
            entity.Property(e => e.KEbayUser).HasColumnName("kEbayUser");
            entity.Property(e => e.NErinnerung).HasColumnName("nErinnerung");
            entity.Property(e => e.NHtml).HasColumnName("nHTML");
            entity.Property(e => e.NOption).HasColumnName("nOption");
        });

        modelBuilder.Entity<EbayDataHtmltemplatetagcontent>(entity =>
        {
            entity.HasKey(e => e.KEbayHtmlTemplateTagContent).HasName("PK_dbo_ebay_data_htmltemplatetagcontent");

            entity.ToTable("ebay_data_htmltemplatetagcontent");

            entity.Property(e => e.KEbayHtmlTemplateTagContent)
                .ValueGeneratedNever()
                .HasColumnName("kEbayHtmlTemplateTagContent");
            entity.Property(e => e.CTagName)
                .HasMaxLength(255)
                .HasColumnName("cTagName");
            entity.Property(e => e.CTagOptions)
                .HasMaxLength(255)
                .HasColumnName("cTagOptions");
            entity.Property(e => e.CTagValue).HasColumnName("cTagValue");
            entity.Property(e => e.KEbayHtmlTemplate).HasColumnName("kEbayHtmlTemplate");
            entity.Property(e => e.KEbayItem).HasColumnName("kEbayItem");
        });

        modelBuilder.Entity<EbayDataMembermessageIn>(entity =>
        {
            entity.HasKey(e => e.KMemberMessageIn).HasName("PK_dbo_ebay_data_membermessage_in");

            entity.ToTable("ebay_data_membermessage_in");

            entity.Property(e => e.KMemberMessageIn)
                .ValueGeneratedNever()
                .HasColumnName("kMemberMessageIn");
            entity.Property(e => e.CreationDate).HasMaxLength(30);
            entity.Property(e => e.ItemId)
                .HasMaxLength(255)
                .HasColumnName("ItemID");
            entity.Property(e => e.KEbayuser).HasColumnName("kEbayuser");
            entity.Property(e => e.QuestionMessageId)
                .HasMaxLength(255)
                .HasColumnName("QuestionMessageID");
            entity.Property(e => e.QuestionMessageType).HasMaxLength(255);
            entity.Property(e => e.QuestionQuestionType).HasMaxLength(255);
            entity.Property(e => e.QuestionRecipientId)
                .HasMaxLength(255)
                .HasColumnName("QuestionRecipientID");
            entity.Property(e => e.QuestionSenderId)
                .HasMaxLength(255)
                .HasColumnName("QuestionSenderID");
            entity.Property(e => e.QuestionSubject).HasMaxLength(255);
            entity.Property(e => e.Status).HasDefaultValueSql("('0')");

            entity.HasOne(d => d.KEbayuserNavigation).WithMany(p => p.EbayDataMembermessageIns)
                .HasForeignKey(d => d.KEbayuser)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ebay_data_membermessage_in_kEbayuser");
        });

        modelBuilder.Entity<EbayDataMembermessageOut>(entity =>
        {
            entity.HasKey(e => e.KMemberMessageOut).HasName("PK_dbo_ebay_data_membermessage_out");

            entity.ToTable("ebay_data_membermessage_out");

            entity.Property(e => e.KMemberMessageOut)
                .ValueGeneratedNever()
                .HasColumnName("kMemberMessageOut");
            entity.Property(e => e.CStatus)
                .HasMaxLength(255)
                .HasDefaultValueSql("('zu versenden')")
                .HasColumnName("cStatus");
            entity.Property(e => e.ItemId)
                .HasMaxLength(255)
                .HasColumnName("ItemID");
            entity.Property(e => e.KEbayuser).HasColumnName("kEbayuser");
            entity.Property(e => e.MessageId)
                .HasMaxLength(255)
                .HasColumnName("MessageID");
            entity.Property(e => e.MessageType).HasMaxLength(255);
            entity.Property(e => e.ParentMessageId)
                .HasMaxLength(255)
                .HasColumnName("ParentMessageID");
            entity.Property(e => e.QuestionType).HasMaxLength(255);
            entity.Property(e => e.RecipientId)
                .HasMaxLength(255)
                .HasColumnName("RecipientID");
            entity.Property(e => e.Sent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Subject).HasMaxLength(255);

            entity.HasOne(d => d.KEbayuserNavigation).WithMany(p => p.EbayDataMembermessageOuts)
                .HasForeignKey(d => d.KEbayuser)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ebay_data_membermessage_out_kEbayuser");
        });

        modelBuilder.Entity<EbayDataStore>(entity =>
        {
            entity.HasKey(e => e.KStore).HasName("PK_dbo_ebay_data_store");

            entity.ToTable("ebay_data_store");

            entity.Property(e => e.KStore)
                .ValueGeneratedNever()
                .HasColumnName("kStore");
            entity.Property(e => e.KEbayUser).HasColumnName("kEbayUser");
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.SubscriptionLevel).HasMaxLength(255);
            entity.Property(e => e.Url)
                .HasMaxLength(255)
                .HasColumnName("URL");
        });

        modelBuilder.Entity<EbayDeAttribute>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ebay_de_attribute");

            entity.HasIndex(e => e.AttributeId, "IX_ebay_de_attribute_AttributeId");

            entity.HasIndex(e => e.AttributeSetId, "IX_ebay_de_attribute_AttributeSetId");

            entity.Property(e => e.DateFormat)
                .HasMaxLength(30)
                .HasColumnName("dateFormat");
            entity.Property(e => e.DefaultValueId).HasColumnName("defaultValueId");
            entity.Property(e => e.IsRequired)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("isRequired");
            entity.Property(e => e.Label).HasMaxLength(255);
            entity.Property(e => e.LabelVisible)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("labelVisible");
            entity.Property(e => e.Maxlength)
                .HasDefaultValueSql("('0')")
                .HasColumnName("maxlength");
            entity.Property(e => e.Ordernumber)
                .HasDefaultValueSql("('0')")
                .HasColumnName("ordernumber");
            entity.Property(e => e.ParentAttrId).HasColumnName("parentAttrId");
            entity.Property(e => e.PresentationType).HasColumnName("presentationType");
            entity.Property(e => e.WhenToShow)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength();
        });

        modelBuilder.Entity<EbayDeCategory>(entity =>
        {
            entity.HasKey(e => e.CategoryId).HasName("PK_dbo_ebay_de_categories");

            entity.ToTable("ebay_de_categories");

            entity.HasIndex(e => e.CategoryParentId, "IX_ebay_de_categories_CategoryParentId");

            entity.Property(e => e.CategoryId).ValueGeneratedNever();
            entity.Property(e => e.B2bvatenabled)
                .HasDefaultValueSql("('0')")
                .HasColumnName("B2BVATEnabled");
            entity.Property(e => e.CategoryName)
                .HasMaxLength(255)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.ConditionValues).HasMaxLength(255);
            entity.Property(e => e.IntlAutosFixedCat).HasDefaultValueSql("('0')");
            entity.Property(e => e.LeafCategory).HasDefaultValueSql("('0')");
            entity.Property(e => e.Lsd)
                .HasDefaultValueSql("('0')")
                .HasColumnName("LSD");
            entity.Property(e => e.Orpa)
                .HasDefaultValueSql("('0')")
                .HasColumnName("ORPA");
            entity.Property(e => e.Orra)
                .HasDefaultValueSql("('0')")
                .HasColumnName("ORRA");
        });

        modelBuilder.Entity<EbayDeCategory2C>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ebay_de_category2CS");

            entity.HasIndex(e => e.AttributeSetId, "IX_ebay_de_category2CS_AttributeSetId");

            entity.HasIndex(e => e.CategoryId, "IX_ebay_de_category2CS_CategoryId");

            entity.Property(e => e.AttributeSetId).HasDefaultValueSql("('0')");
            entity.Property(e => e.CategoryId).HasDefaultValueSql("('0')");
            entity.Property(e => e.Name).HasMaxLength(255);
        });

        modelBuilder.Entity<EbayDeCondition>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ebay_de_condition");

            entity.Property(e => e.DisplayName).HasMaxLength(255);
            entity.Property(e => e.Id).HasColumnName("ID");
        });

        modelBuilder.Entity<EbayDeDependency>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ebay_de_dependency");

            entity.HasIndex(e => e.AttributeId, "IX_ebay_de_dependency_AttributeId");

            entity.HasIndex(e => e.AttributeSetId, "IX_ebay_de_dependency_AttributeSetId");

            entity.HasIndex(e => e.ParentValueId, "IX_ebay_de_dependency_parentValueId");

            entity.Property(e => e.ChildAttrId).HasColumnName("childAttrId");
            entity.Property(e => e.ParentValueId).HasColumnName("parentValueId");
        });

        modelBuilder.Entity<EbayDeGebAngebotsgebuehr>(entity =>
        {
            entity.HasKey(e => e.KEbayDeGebAngebotsgebuehr).HasName("PK_dbo_ebay_de_geb_angebotsgebuehr");

            entity.ToTable("ebay_de_geb_angebotsgebuehr");

            entity.Property(e => e.KEbayDeGebAngebotsgebuehr)
                .ValueGeneratedNever()
                .HasColumnName("kEbay_DE_Geb_Angebotsgebuehr");
            entity.Property(e => e.Gebuehr).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.PreisMax).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.PreisMin).HasColumnType("decimal(25, 13)");
        });

        modelBuilder.Entity<EbayDeGebAngebotsgebuehrausnahman>(entity =>
        {
            entity.HasKey(e => e.KEbayDeGebAngebotsgebuehrAusnahmen).HasName("PK_dbo_ebay_de_geb_angebotsgebuehrausnahmen");

            entity.ToTable("ebay_de_geb_angebotsgebuehrausnahmen");

            entity.Property(e => e.KEbayDeGebAngebotsgebuehrAusnahmen)
                .ValueGeneratedNever()
                .HasColumnName("kEbay_DE_Geb_AngebotsgebuehrAusnahmen");
            entity.Property(e => e.Gebuehr).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.NurFestpreis).HasColumnName("nurFestpreis");
        });

        modelBuilder.Entity<EbayDeGebErweiterungen>(entity =>
        {
            entity.HasKey(e => e.KEbayDeGebErweiterungen).HasName("PK_dbo_ebay_de_geb_erweiterungen");

            entity.ToTable("ebay_de_geb_erweiterungen");

            entity.Property(e => e.KEbayDeGebErweiterungen)
                .ValueGeneratedNever()
                .HasColumnName("kEbay_DE_Geb_Erweiterungen");
            entity.Property(e => e.Enhancement).HasMaxLength(255);
            entity.Property(e => e.Gebuehr).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.MehrereArtikel).HasColumnName("mehrereArtikel");
        });

        modelBuilder.Entity<EbayDeI>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ebay_de_is");

            entity.HasIndex(e => e.CategoryId, "IX_ebay_de_is_CategoryId");

            entity.Property(e => e.CHelpText)
                .HasMaxLength(255)
                .HasColumnName("cHelpText");
            entity.Property(e => e.CHelpUrl)
                .HasMaxLength(255)
                .HasColumnName("cHelpURL");
            entity.Property(e => e.KName).HasColumnName("kName");
            entity.Property(e => e.NMaxValues).HasColumnName("nMaxValues");
            entity.Property(e => e.NMinValues).HasColumnName("nMinValues");
            entity.Property(e => e.NSelectionMode).HasColumnName("nSelectionMode");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<EbayDeIsglobalname>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ebay_de_isglobalname");

            entity.HasIndex(e => e.KName, "IX_ebay_de_isglobalname_kName");

            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KName).HasColumnName("kName");
        });

        modelBuilder.Entity<EbayDeIsglobalvalue>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ebay_de_isglobalvalue");

            entity.HasIndex(e => e.KValue, "IX_ebay_de_isglobalvalue_kValue");

            entity.Property(e => e.CValue)
                .HasMaxLength(255)
                .HasColumnName("cValue");
            entity.Property(e => e.KValue).HasColumnName("kValue");
        });

        modelBuilder.Entity<EbayDeIsrelation>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ebay_de_isrelation");

            entity.HasIndex(e => e.CategoryId, "IX_ebay_de_isrelation_CategoryId");

            entity.HasIndex(e => e.KName, "IX_ebay_de_isrelation_kName");

            entity.HasIndex(e => e.KNameParent, "IX_ebay_de_isrelation_kNameParent");

            entity.HasIndex(e => e.KValue, "IX_ebay_de_isrelation_kValue");

            entity.HasIndex(e => e.KValueParent, "IX_ebay_de_isrelation_kValueParent");

            entity.Property(e => e.KName).HasColumnName("kName");
            entity.Property(e => e.KNameParent).HasColumnName("kNameParent");
            entity.Property(e => e.KValue).HasColumnName("kValue");
            entity.Property(e => e.KValueParent).HasColumnName("kValueParent");
        });

        modelBuilder.Entity<EbayDeIsvalue>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ebay_de_isvalue");

            entity.HasIndex(e => e.CategoryId, "IX_ebay_de_isvalue_CategoryId");

            entity.HasIndex(e => e.KName, "IX_ebay_de_isvalue_kName");

            entity.HasIndex(e => e.KValue, "IX_ebay_de_isvalue_kValue");

            entity.Property(e => e.KName).HasColumnName("kName");
            entity.Property(e => e.KValue).HasColumnName("kValue");
        });

        modelBuilder.Entity<EbayDeLaender>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ebay_de_laender");

            entity.HasIndex(e => e.Country, "UQ_dbo_ebay_de_laender_Country").IsUnique();

            entity.Property(e => e.Country).HasMaxLength(20);
            entity.Property(e => e.Description).HasMaxLength(255);
        });

        modelBuilder.Entity<EbayDeSidewideC>(entity =>
        {
            entity.HasKey(e => e.AttributeSetId).HasName("PK_dbo_ebay_de_sidewideCS");

            entity.ToTable("ebay_de_sidewideCS");

            entity.Property(e => e.AttributeSetId).ValueGeneratedNever();
            entity.Property(e => e.Name).HasMaxLength(255);
        });

        modelBuilder.Entity<EbayDeSidewideExCategory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ebay_de_sidewideExCategories");

            entity.HasIndex(e => e.AttributeSetId, "IX_ebay_de_sidewideExCategories_AttributeSetId");

            entity.HasIndex(e => e.CategoryId, "IX_ebay_de_sidewideExCategories_CategoryId");

            entity.Property(e => e.AttributeSetId).HasDefaultValueSql("('0')");
            entity.Property(e => e.CategoryId).HasDefaultValueSql("('0')");
        });

        modelBuilder.Entity<EbayDeUpdateTable>(entity =>
        {
            entity.HasKey(e => e.KTable).HasName("PK_dbo_ebay_de_update_tables");

            entity.ToTable("ebay_de_update_tables");

            entity.Property(e => e.KTable).HasColumnName("kTable");
            entity.Property(e => e.CTable)
                .HasMaxLength(255)
                .HasColumnName("cTable");
        });

        modelBuilder.Entity<EbayDeValidationrule>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ebay_de_validationrules");

            entity.HasIndex(e => e.AttributeId, "IX_ebay_de_validationrules_AttributeId");

            entity.HasIndex(e => e.AttributeSetId, "IX_ebay_de_validationrules_AttributeSetId");

            entity.Property(e => e.CSeparator)
                .HasMaxLength(5)
                .HasColumnName("cSeparator");
            entity.Property(e => e.FMax)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMax");
            entity.Property(e => e.FMin)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMin");
            entity.Property(e => e.Mask).HasMaxLength(255);
            entity.Property(e => e.NLength).HasColumnName("nLength");
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.Regex).HasMaxLength(100);
        });

        modelBuilder.Entity<EbayDeValue>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ebay_de_value");

            entity.HasIndex(e => e.AttributeId, "IX_ebay_de_value_AttributeId");

            entity.HasIndex(e => e.AttributeSetId, "IX_ebay_de_value_AttributeSetId");

            entity.HasIndex(e => e.ValueId, "IX_ebay_de_value_ValueId");

            entity.HasIndex(e => e.ParentValueId, "IX_ebay_de_value_parentValueId");

            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.ParentValueId).HasColumnName("parentValueId");
        });

        modelBuilder.Entity<EbayDeVersandarten>(entity =>
        {
            entity.HasKey(e => e.KEbayDeVersandarten).HasName("PK_dbo_ebay_de_versandarten");

            entity.ToTable("ebay_de_versandarten");

            entity.Property(e => e.KEbayDeVersandarten)
                .ValueGeneratedNever()
                .HasColumnName("kEbay_DE_Versandarten");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.ExpeditedService).HasDefaultValueSql("('0')");
            entity.Property(e => e.InternationalService).HasDefaultValueSql("('0')");
            entity.Property(e => e.ShippingService).HasMaxLength(255);
            entity.Property(e => e.ShippingServiceId).HasColumnName("ShippingServiceID");
        });

        modelBuilder.Entity<EbayDeVersandlaender>(entity =>
        {
            entity.HasKey(e => e.KEbayDeVersandlaender).HasName("PK_dbo_ebay_de_versandlaender");

            entity.ToTable("ebay_de_versandlaender");

            entity.Property(e => e.KEbayDeVersandlaender)
                .ValueGeneratedNever()
                .HasColumnName("kEbay_DE_Versandlaender");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.ShippingLocation).HasMaxLength(255);
        });

        modelBuilder.Entity<EbayDeVersion>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ebay_de_versions");

            entity.Property(e => e.GetAttributeCs)
                .HasDefaultValueSql("('0')")
                .HasColumnName("getAttributeCS");
            entity.Property(e => e.GetCategories).HasColumnName("getCategories");
            entity.Property(e => e.GetCategory2Cs).HasColumnName("getCategory2CS");
        });

        modelBuilder.Entity<EbayDeWaehrung>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ebay_de_waehrung");

            entity.Property(e => e.Currency).HasMaxLength(20);
            entity.Property(e => e.Description).HasMaxLength(255);
        });

        modelBuilder.Entity<EbayDeZahlungsmethoden>(entity =>
        {
            entity.HasKey(e => e.KEbayDeZahlungsmethoden).HasName("PK_dbo_ebay_de_zahlungsmethoden");

            entity.ToTable("ebay_de_zahlungsmethoden");

            entity.Property(e => e.KEbayDeZahlungsmethoden)
                .ValueGeneratedNever()
                .HasColumnName("kEbay_DE_Zahlungsmethoden");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.DisplayText).HasMaxLength(255);
            entity.Property(e => e.PaymentOption).HasMaxLength(255);
        });

        modelBuilder.Entity<EbayDeleteCoPo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ebay_delete_co_pos");

            entity.Property(e => e.ItemId)
                .HasMaxLength(255)
                .HasColumnName("ItemID");
            entity.Property(e => e.TransactionId)
                .HasMaxLength(255)
                .HasColumnName("TransactionID");
        });

        modelBuilder.Entity<EbayEinstellungen>(entity =>
        {
            entity.HasKey(e => e.KEbayEinstellungen).HasName("PK_dbo_ebay_einstellungen");

            entity.ToTable("ebay_einstellungen");

            entity.Property(e => e.KEbayEinstellungen)
                .ValueGeneratedNever()
                .HasColumnName("kEbayEinstellungen");
            entity.Property(e => e.CAuftraegeAusgabeweg)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('E')")
                .IsFixedLength()
                .HasColumnName("cAuftraegeAusgabeweg");
            entity.Property(e => e.NArtnamenutzen).HasColumnName("nArtnamenutzen");
            entity.Property(e => e.NCheckout).HasColumnName("nCheckout");
            entity.Property(e => e.NNichtLaufendeLoeschen).HasColumnName("nNichtLaufendeLoeschen");
            entity.Property(e => e.NUseGalleryPlus).HasColumnName("nUseGalleryPlus");
            entity.Property(e => e.NUsePremium).HasColumnName("nUsePremium");
            entity.Property(e => e.NVean).HasColumnName("nVEAN");
            entity.Property(e => e.NVepid).HasColumnName("nVEPID");
            entity.Property(e => e.NVersandartPraefixVerwenden).HasColumnName("nVersandartPraefixVerwenden");
            entity.Property(e => e.NVhan).HasColumnName("nVHAN");
            entity.Property(e => e.NVisbn).HasColumnName("nVISBN");
            entity.Property(e => e.NVupc).HasColumnName("nVUPC");
        });

        modelBuilder.Entity<EbayGeaenderteLaufendeAngebote>(entity =>
        {
            entity.HasKey(e => e.KItem).HasName("PK_dbo_ebay_geaenderte_laufende_angebote");

            entity.ToTable("ebay_geaenderte_laufende_angebote");

            entity.Property(e => e.KItem)
                .ValueGeneratedNever()
                .HasColumnName("kItem");
            entity.Property(e => e.NChanges).HasColumnName("nChanges");
            entity.Property(e => e.NTryUpload)
                .HasDefaultValueSql("((1))")
                .HasColumnName("nTryUpload");
        });

        modelBuilder.Entity<EbayGlobaletexte>(entity =>
        {
            entity.HasKey(e => e.KEbayGlobaleTexte).HasName("PK_dbo_ebay_globaletexte");

            entity.ToTable("ebay_globaletexte");

            entity.HasIndex(e => e.KEbayuser, "IX_ebay_globaletexte_kEbayuser");

            entity.Property(e => e.KEbayGlobaleTexte)
                .ValueGeneratedNever()
                .HasColumnName("kEbayGlobaleTexte");
            entity.Property(e => e.CAgb).HasColumnName("cAGB");
            entity.Property(e => e.CAnzeigen)
                .HasMaxLength(255)
                .HasColumnName("cAnzeigen");
            entity.Property(e => e.CBewertung).HasColumnName("cBewertung");
            entity.Property(e => e.CImpressum).HasColumnName("cImpressum");
            entity.Property(e => e.CLieferzeit).HasColumnName("cLieferzeit");
            entity.Property(e => e.CNachDerAuktion).HasColumnName("cNachDerAuktion");
            entity.Property(e => e.CUeberUns).HasColumnName("cUeberUns");
            entity.Property(e => e.CVersandVerpackung).HasColumnName("cVersandVerpackung");
            entity.Property(e => e.CWiderrufsrecht).HasColumnName("cWiderrufsrecht");
            entity.Property(e => e.CZahlungshinweis).HasColumnName("cZahlungshinweis");
            entity.Property(e => e.KEbayuser).HasColumnName("kEbayuser");
        });

        modelBuilder.Entity<EbayInternationalShippingServiceOption>(entity =>
        {
            entity.HasKey(e => e.KInternationalShippingServiceOption).HasName("PK_dbo_ebay_InternationalShippingServiceOption");

            entity.ToTable("ebay_InternationalShippingServiceOption");

            entity.Property(e => e.KInternationalShippingServiceOption).HasColumnName("kInternationalShippingServiceOption");
            entity.Property(e => e.KItem).HasColumnName("kItem");
            entity.Property(e => e.ShipToLocation).HasMaxLength(255);
            entity.Property(e => e.ShippingService).HasMaxLength(255);
            entity.Property(e => e.ShippingServiceAdditionalCost).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingServiceCost).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingServiceId).HasColumnName("ShippingServiceID");
        });

        modelBuilder.Entity<EbayItem>(entity =>
        {
            entity.HasKey(e => e.KItem).HasName("PK_dbo_ebay_item");

            entity.ToTable("ebay_item", tb =>
                {
                    tb.HasTrigger("jtlActionValidator_ebay_item");
                    tb.HasTrigger("tgr_ebay_item_INSUPDEL");
                });

            entity.HasIndex(e => e.EndTime, "IX_ebay_item_EndTime");

            entity.HasIndex(e => e.ItemId, "IX_ebay_item_ItemID");

            entity.HasIndex(e => e.Status, "IX_ebay_item_Status");

            entity.HasIndex(e => e.Type, "IX_ebay_item_Type");

            entity.HasIndex(e => e.CRelistedItemId, "IX_ebay_item_cRelistedItemID");

            entity.HasIndex(e => e.KArtikel, "IX_ebay_item_kArtikel_INCL");

            entity.HasIndex(e => new { e.KArtikel, e.Status, e.KItem }, "IX_ebay_item_kArtikel_Status_kItem_INCL");

            entity.HasIndex(e => e.KTemplate, "IX_ebay_item_kTemplate");

            entity.HasIndex(e => new { e.KEbayuser, e.KMessage }, "IX_kEbayuser_kMessage");

            entity.Property(e => e.KItem)
                .ValueGeneratedNever()
                .HasColumnName("kItem");
            entity.Property(e => e.ApplicationData).HasMaxLength(32);
            entity.Property(e => e.ApplyShippingDiscount).HasDefaultValueSql("('0')");
            entity.Property(e => e.AutoPay).HasDefaultValueSql("('0')");
            entity.Property(e => e.BBestandReserviert).HasColumnName("bBestandReserviert");
            entity.Property(e => e.BIstVerkaufsaktion).HasColumnName("bIstVerkaufsaktion");
            entity.Property(e => e.BestOfferAutoAcceptPrice).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestOfferEnabled).HasDefaultValueSql("('0')");
            entity.Property(e => e.BestOfferMinPrice).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BuyItNowPrice).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BuyerProtection).HasMaxLength(255);
            entity.Property(e => e.CEan)
                .HasMaxLength(255)
                .HasColumnName("cEAN");
            entity.Property(e => e.CEbayUserProfileIdPayment)
                .HasMaxLength(255)
                .HasColumnName("cEbayUserProfileIdPayment");
            entity.Property(e => e.CEbayUserProfileIdReturn)
                .HasMaxLength(255)
                .HasColumnName("cEbayUserProfileIdReturn");
            entity.Property(e => e.CEbayUserProfileIdShipping)
                .HasMaxLength(255)
                .HasColumnName("cEbayUserProfileIdShipping");
            entity.Property(e => e.CInternationaleRueckgabeMoeglich)
                .HasMaxLength(50)
                .HasColumnName("cInternationaleRueckgabeMoeglich");
            entity.Property(e => e.CInternationaleRueckgabefrist)
                .HasMaxLength(20)
                .HasColumnName("cInternationaleRueckgabefrist");
            entity.Property(e => e.CInternationalerVersandkostenTraeger)
                .HasMaxLength(50)
                .HasColumnName("cInternationalerVersandkostenTraeger");
            entity.Property(e => e.CPaymentInstructions).HasColumnName("cPaymentInstructions");
            entity.Property(e => e.CRelistId)
                .HasMaxLength(255)
                .HasColumnName("cRelistID");
            entity.Property(e => e.CRelistedItemId)
                .HasMaxLength(256)
                .HasColumnName("cRelistedItemID");
            entity.Property(e => e.CRueckgabeMoeglich)
                .HasMaxLength(50)
                .HasDefaultValueSql("('ReturnsNotAccepted')")
                .HasColumnName("cRueckgabeMoeglich");
            entity.Property(e => e.CRueckgabefrist)
                .HasMaxLength(20)
                .HasColumnName("cRueckgabefrist");
            entity.Property(e => e.CStreichPreisTyp)
                .HasMaxLength(255)
                .HasColumnName("cStreichPreisTyp");
            entity.Property(e => e.CTakeBackId)
                .HasMaxLength(255)
                .HasColumnName("cTakeBackId");
            entity.Property(e => e.CVersandkostenTraeger)
                .HasMaxLength(50)
                .HasColumnName("cVersandkostenTraeger");
            entity.Property(e => e.ConditionDescription).HasMaxLength(1000);
            entity.Property(e => e.ConditionId).HasColumnName("ConditionID");
            entity.Property(e => e.Country).HasMaxLength(255);
            entity.Property(e => e.Currency).HasMaxLength(255);
            entity.Property(e => e.DZuEbayGesendet)
                .HasColumnType("datetime")
                .HasColumnName("dZuEbayGesendet");
            entity.Property(e => e.DiscountProfileId)
                .HasMaxLength(255)
                .HasColumnName("DiscountProfileID");
            entity.Property(e => e.DiscountProfileIdint)
                .HasMaxLength(255)
                .HasColumnName("DiscountProfileIDInt");
            entity.Property(e => e.EndTime).HasColumnType("datetime");
            entity.Property(e => e.FGewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGewicht");
            entity.Property(e => e.FStreichPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fStreichPreis");
            entity.Property(e => e.GalleryType).HasMaxLength(255);
            entity.Property(e => e.GalleryUrl)
                .HasMaxLength(255)
                .HasColumnName("GalleryURL");
            entity.Property(e => e.GiftServices).HasMaxLength(255);
            entity.Property(e => e.HitCounter).HasMaxLength(255);
            entity.Property(e => e.HtmlTemplate).HasColumnName("htmlTemplate");
            entity.Property(e => e.ItemId)
                .HasMaxLength(255)
                .HasColumnName("ItemID");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KEbayuser).HasColumnName("kEbayuser");
            entity.Property(e => e.KEigenschaft).HasColumnName("kEigenschaft");
            entity.Property(e => e.KKategorie).HasColumnName("kKategorie");
            entity.Property(e => e.KMessage).HasColumnName("kMessage");
            entity.Property(e => e.KPlanung).HasColumnName("kPlanung");
            entity.Property(e => e.KPlanungsItem).HasColumnName("kPlanungsItem");
            entity.Property(e => e.KTemplate).HasColumnName("kTemplate");
            entity.Property(e => e.ListingDuration).HasMaxLength(255);
            entity.Property(e => e.ListingEnhancement).HasMaxLength(255);
            entity.Property(e => e.ListingType).HasMaxLength(255);
            entity.Property(e => e.ListingUrl)
                .HasMaxLength(255)
                .HasColumnName("ListingURL");
            entity.Property(e => e.Location).HasMaxLength(255);
            entity.Property(e => e.NAutomatischEinstellen).HasColumnName("nAutomatischEinstellen");
            entity.Property(e => e.NEbayPlus).HasColumnName("nEbayPlus");
            entity.Property(e => e.NFehler).HasColumnName("nFehler");
            entity.Property(e => e.NLaufend).HasColumnName("nLaufend");
            entity.Property(e => e.NLeecher).HasColumnName("nLeecher");
            entity.Property(e => e.NMinQuantity)
                .HasDefaultValueSql("((1))")
                .HasColumnName("nMinQuantity");
            entity.Property(e => e.NNurAnGewerbliche).HasColumnName("nNurAnGewerbliche");
            entity.Property(e => e.NPickup)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nPickup");
            entity.Property(e => e.NPremium)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nPremium");
            entity.Property(e => e.NProduktKennzeichnung)
                .HasDefaultValueSql("((15))")
                .HasColumnName("nProduktKennzeichnung");
            entity.Property(e => e.NReturnPolicy).HasColumnName("nReturnPolicy");
            entity.Property(e => e.NSchwelleAutomatischEinstellen).HasColumnName("nSchwelleAutomatischEinstellen");
            entity.Property(e => e.NSendVat)
                .HasDefaultValueSql("((1))")
                .HasColumnName("nSendVAT");
            entity.Property(e => e.NUseHomeShippingCostTable).HasColumnName("nUseHomeShippingCostTable");
            entity.Property(e => e.NUseInternationalShippingCostTable).HasColumnName("nUseInternationalShippingCostTable");
            entity.Property(e => e.NVariationenAktiv).HasColumnName("nVariationenAktiv");
            entity.Property(e => e.NVksonderregel).HasColumnName("nVKSonderregel");
            entity.Property(e => e.NVksonderregelInt).HasColumnName("nVKSonderregelInt");
            entity.Property(e => e.PayPalEmailAddress).HasMaxLength(255);
            entity.Property(e => e.PaymentMethods).HasMaxLength(255);
            entity.Property(e => e.PhotoDisplay).HasMaxLength(255);
            entity.Property(e => e.PictureUrl)
                .HasMaxLength(255)
                .HasColumnName("PictureURL");
            entity.Property(e => e.PostalCode).HasMaxLength(50);
            entity.Property(e => e.ReservePrice).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ScheduleDate).HasMaxLength(10);
            entity.Property(e => e.ScheduleServerSide)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength();
            entity.Property(e => e.ScheduleTime).HasMaxLength(5);
            entity.Property(e => e.Sent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ShipToLocations).HasMaxLength(255);
            entity.Property(e => e.ShippingTerms).HasMaxLength(255);
            entity.Property(e => e.ShippingType).HasMaxLength(255);
            entity.Property(e => e.Site).HasMaxLength(255);
            entity.Property(e => e.SiteId)
                .HasDefaultValueSql("((77))")
                .HasColumnName("SiteID");
            entity.Property(e => e.Sku)
                .HasMaxLength(100)
                .HasColumnName("SKU");
            entity.Property(e => e.SsBidCount)
                .HasDefaultValueSql("((0))")
                .HasColumnName("SS_BidCount");
            entity.Property(e => e.SsBidderCount).HasColumnName("SS_BidderCount");
            entity.Property(e => e.SsCurrentPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SS_CurrentPrice");
            entity.Property(e => e.SsHighBidderUserId)
                .HasMaxLength(255)
                .HasColumnName("SS_HighBidderUserId");
            entity.Property(e => e.StartPrice).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.StartTime).HasColumnType("datetime");
            entity.Property(e => e.SubTitle).HasMaxLength(55);
            entity.Property(e => e.Templatename).HasMaxLength(1000);
            entity.Property(e => e.Title).HasMaxLength(80);
            entity.Property(e => e.Totalfees).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Uuid)
                .HasMaxLength(32)
                .HasColumnName("UUID");
            entity.Property(e => e.Vatpercent)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("VATPercent");
        });

        modelBuilder.Entity<EbayItem2kombi>(entity =>
        {
            entity.HasKey(e => new { e.KItem, e.KEigenschaftKombi }).HasName("PK_dbo_ebay_item2kombi");

            entity.ToTable("ebay_item2kombi");

            entity.HasIndex(e => e.KEigenschaftKombi, "IX_ebay_item2kombi_kEigenschaftKombi_INCL");

            entity.Property(e => e.KItem).HasColumnName("kItem");
            entity.Property(e => e.KEigenschaftKombi).HasColumnName("kEigenschaftKombi");
            entity.Property(e => e.CEan)
                .HasMaxLength(255)
                .HasColumnName("cEAN");
            entity.Property(e => e.CStreichPreisTyp)
                .HasMaxLength(255)
                .HasColumnName("cStreichPreisTyp");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.FMaxAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMaxAnzahl");
            entity.Property(e => e.FMinAnzahl)
                .HasDefaultValueSql("((1))")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMinAnzahl");
            entity.Property(e => e.FPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPreis");
            entity.Property(e => e.FStreichPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fStreichPreis");
        });

        modelBuilder.Entity<EbayItem2xsell>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ebay_item2xsell");

            entity.Property(e => e.KEbayItem).HasColumnName("kEbayItem");
            entity.Property(e => e.KXsell).HasColumnName("kXSell");
        });

        modelBuilder.Entity<EbayItemAdderror>(entity =>
        {
            entity.HasKey(e => e.KItemAddError).HasName("PK_dbo_ebay_item_adderror");

            entity.ToTable("ebay_item_adderror");

            entity.HasIndex(e => new { e.KEbayuser, e.KItemAddError }, "IX_kEbayuser_kItemAddError");

            entity.HasIndex(e => e.KItem, "IX_kItem");

            entity.Property(e => e.KItemAddError).HasColumnName("kItemAddError");
            entity.Property(e => e.CAbhilfe)
                .HasMaxLength(2000)
                .HasColumnName("cAbhilfe");
            entity.Property(e => e.DZeitpunkt)
                .HasColumnType("datetime")
                .HasColumnName("dZeitpunkt");
            entity.Property(e => e.EpidSuggestion).HasColumnName("epidSuggestion");
            entity.Property(e => e.KEbayuser).HasColumnName("kEbayuser");
            entity.Property(e => e.KItem).HasColumnName("kItem");
        });

        modelBuilder.Entity<EbayItemDuplicateLog>(entity =>
        {
            entity.HasKey(e => e.KLog).HasName("PK_dbo_ebay_item_duplicate_log");

            entity.ToTable("ebay_item_duplicate_log");

            entity.Property(e => e.KLog).HasColumnName("kLog");
            entity.Property(e => e.CAnderesAngebotItemId)
                .HasMaxLength(255)
                .HasColumnName("cAnderesAngebotItemID");
            entity.Property(e => e.CAngebotItemId)
                .HasMaxLength(255)
                .HasColumnName("cAngebotItemID");
            entity.Property(e => e.CVorlageListingDuration)
                .HasMaxLength(20)
                .HasColumnName("cVorlageListingDuration");
            entity.Property(e => e.DAnderesAngebotEndTime)
                .HasColumnType("datetime")
                .HasColumnName("dAnderesAngebotEndTime");
            entity.Property(e => e.DAnderesAngebotStartTime)
                .HasColumnType("datetime")
                .HasColumnName("dAnderesAngebotStartTime");
            entity.Property(e => e.DAngebotEndTime)
                .HasColumnType("datetime")
                .HasColumnName("dAngebotEndTime");
            entity.Property(e => e.DAngebotStartTime)
                .HasColumnType("datetime")
                .HasColumnName("dAngebotStartTime");
            entity.Property(e => e.DErstelltUtc)
                .HasColumnType("datetime")
                .HasColumnName("dErstelltUtc");
            entity.Property(e => e.KAnderesAngebotItem).HasColumnName("kAnderesAngebotItem");
            entity.Property(e => e.KAngebotItem).HasColumnName("kAngebotItem");
            entity.Property(e => e.KVorlageItem).HasColumnName("kVorlageItem");
            entity.Property(e => e.NAnderesAngebotStatus).HasColumnName("nAnderesAngebotStatus");
            entity.Property(e => e.NAngebotStatus).HasColumnName("nAngebotStatus");
            entity.Property(e => e.NVorlageAutomatischEinstellen).HasColumnName("nVorlageAutomatischEinstellen");
        });

        modelBuilder.Entity<EbayItemReviseerror>(entity =>
        {
            entity.HasKey(e => e.KItemReviseError).HasName("PK_dbo_ebay_item_reviseerror");

            entity.ToTable("ebay_item_reviseerror");

            entity.HasIndex(e => new { e.KEbayuser, e.KItemReviseError }, "IX_kEbayuser_kItemReviseError");

            entity.HasIndex(e => e.KItem, "IX_kItem");

            entity.Property(e => e.KItemReviseError).HasColumnName("kItemReviseError");
            entity.Property(e => e.CAbhilfe)
                .HasMaxLength(2000)
                .HasColumnName("cAbhilfe");
            entity.Property(e => e.DZeitpunkt)
                .HasColumnType("datetime")
                .HasColumnName("dZeitpunkt");
            entity.Property(e => e.EpidSuggestion).HasColumnName("epidSuggestion");
            entity.Property(e => e.KEbayuser).HasColumnName("kEbayuser");
            entity.Property(e => e.KItem).HasColumnName("kItem");
        });

        modelBuilder.Entity<EbayItemcompBike>(entity =>
        {
            entity.HasKey(e => e.KEbayItemcompBike).HasName("PK_dbo_ebay_itemcomp_bike");

            entity.ToTable("ebay_itemcomp_bike");

            entity.Property(e => e.KEbayItemcompBike).HasColumnName("kEbay_itemcomp_bike");
            entity.Property(e => e.CBaujahr)
                .HasMaxLength(255)
                .HasColumnName("cBaujahr");
            entity.Property(e => e.CCcm)
                .HasMaxLength(255)
                .HasColumnName("cCcm");
            entity.Property(e => e.CCompatibilityNote)
                .HasMaxLength(500)
                .HasColumnName("cCompatibilityNote");
            entity.Property(e => e.CMarke)
                .HasMaxLength(255)
                .HasColumnName("cMarke");
            entity.Property(e => e.CModell)
                .HasMaxLength(255)
                .HasColumnName("cModell");
            entity.Property(e => e.CStrassenname)
                .HasMaxLength(255)
                .HasColumnName("cStrassenname");
            entity.Property(e => e.CTyp)
                .HasMaxLength(255)
                .HasColumnName("cTyp");
            entity.Property(e => e.CUntermodell)
                .HasMaxLength(255)
                .HasColumnName("cUntermodell");
            entity.Property(e => e.KItem).HasColumnName("kItem");
            entity.Property(e => e.NEpid).HasColumnName("nEpid");
        });

        modelBuilder.Entity<EbayItemcompatibility>(entity =>
        {
            entity.HasKey(e => e.KItemCompatibility).HasName("PK_dbo_ebay_itemcompatibility");

            entity.ToTable("ebay_itemcompatibility");

            entity.HasIndex(e => e.KItem, "IX_ebay_itemcompatibility_kItem");

            entity.Property(e => e.KItemCompatibility).HasColumnName("kItemCompatibility");
            entity.Property(e => e.CBaujahr)
                .HasMaxLength(255)
                .HasColumnName("cBaujahr");
            entity.Property(e => e.CCompatibilityNote)
                .HasMaxLength(505)
                .HasColumnName("cCompatibilityNote");
            entity.Property(e => e.CHsntsn)
                .HasMaxLength(255)
                .HasColumnName("cHSNTSN");
            entity.Property(e => e.CMarke)
                .HasMaxLength(255)
                .HasColumnName("cMarke");
            entity.Property(e => e.CModell)
                .HasMaxLength(255)
                .HasColumnName("cModell");
            entity.Property(e => e.CMotor)
                .HasMaxLength(255)
                .HasColumnName("cMotor");
            entity.Property(e => e.CPlattform)
                .HasMaxLength(255)
                .HasColumnName("cPlattform");
            entity.Property(e => e.CTyp)
                .HasMaxLength(255)
                .HasColumnName("cTyp");
            entity.Property(e => e.KItem).HasColumnName("kItem");
            entity.Property(e => e.KType).HasColumnName("kType");
        });

        modelBuilder.Entity<EbayLastSynch>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ebay_last_synch");

            entity.Property(e => e.Info)
                .HasMaxLength(32)
                .HasColumnName("info");
        });

        modelBuilder.Entity<EbayLeecherVariationMapping>(entity =>
        {
            entity.HasKey(e => e.KEbayLeecherVariationMapping).HasName("PK_dbo_ebay_Leecher_VariationMapping");

            entity.ToTable("ebay_Leecher_VariationMapping");

            entity.Property(e => e.KEbayLeecherVariationMapping).HasColumnName("kEbayLeecherVariationMapping");
            entity.Property(e => e.CIso1)
                .HasMaxLength(10)
                .HasColumnName("cIso1");
            entity.Property(e => e.CIso2)
                .HasMaxLength(10)
                .HasColumnName("cIso2");
            entity.Property(e => e.CValue1).HasColumnName("cValue1");
            entity.Property(e => e.CValue2).HasColumnName("cValue2");
        });

        modelBuilder.Entity<EbayLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ebay_log");

            entity.HasIndex(e => e.DDatum, "IX_ebay_log_dDatum");

            entity.Property(e => e.CString)
                .HasMaxLength(255)
                .HasColumnName("cString");
            entity.Property(e => e.CText).HasColumnName("cText");
            entity.Property(e => e.DDatum)
                .HasMaxLength(20)
                .HasColumnName("dDatum");
            entity.Property(e => e.KItem).HasColumnName("kItem");
        });

        modelBuilder.Entity<EbayLogbuch>(entity =>
        {
            entity.HasKey(e => e.KEbayLogbuch).HasName("PK_dbo_ebay_logbuch");

            entity.ToTable("ebay_logbuch");

            entity.HasIndex(e => e.DZeit, "IX_dZeit");

            entity.Property(e => e.KEbayLogbuch).HasColumnName("kEbayLogbuch");
            entity.Property(e => e.CBetreff)
                .HasMaxLength(255)
                .HasColumnName("cBetreff");
            entity.Property(e => e.CLog).HasColumnName("cLog");
            entity.Property(e => e.DZeit)
                .HasColumnType("datetime")
                .HasColumnName("dZeit");
            entity.Property(e => e.KEbayuser).HasColumnName("kEbayuser");
            entity.Property(e => e.NKategorie).HasColumnName("nKategorie");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<EbayMapitem>(entity =>
        {
            entity.HasKey(e => e.ItemId).HasName("PK_dbo_ebay_mapitem");

            entity.ToTable("ebay_mapitem");

            entity.Property(e => e.ItemId)
                .HasMaxLength(255)
                .HasColumnName("ItemID");
            entity.Property(e => e.BinJsondata).HasColumnName("binJSONData");
            entity.Property(e => e.CJsondata).HasColumnName("cJSONData");
            entity.Property(e => e.Currency).HasMaxLength(10);
            entity.Property(e => e.CurrentPrice).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.EndTime).HasColumnType("datetime");
            entity.Property(e => e.KEbayMapitemSuchString).HasColumnName("kEbay_mapitemSuchString");
            entity.Property(e => e.KEbayuser).HasColumnName("kEbayuser");
            entity.Property(e => e.ListingType).HasMaxLength(30);
            entity.Property(e => e.SiteId).HasColumnName("SiteID");
            entity.Property(e => e.Sku)
                .HasMaxLength(100)
                .HasColumnName("SKU");
            entity.Property(e => e.Title).HasMaxLength(255);
        });

        modelBuilder.Entity<EbayMapitemArtikelZuordnungen>(entity =>
        {
            entity.HasKey(e => e.ItemId).HasName("PK_dbo_ebay_mapitemArtikelZuordnungen");

            entity.ToTable("ebay_mapitemArtikelZuordnungen");

            entity.Property(e => e.ItemId)
                .HasMaxLength(255)
                .HasColumnName("ItemID");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
        });

        modelBuilder.Entity<EbayMapitemSuchString>(entity =>
        {
            entity.HasKey(e => e.KEbayMapitemSuchString).HasName("PK_dbo_ebay_mapitemSuchStrings");

            entity.ToTable("ebay_mapitemSuchStrings");

            entity.Property(e => e.KEbayMapitemSuchString).HasColumnName("kEbay_mapitemSuchString");
            entity.Property(e => e.CSuchStringAnfang).HasColumnName("cSuchStringAnfang");
            entity.Property(e => e.CSuchStringEnde).HasColumnName("cSuchStringEnde");
            entity.Property(e => e.NSource).HasColumnName("nSource");
        });

        modelBuilder.Entity<EbayPlanung>(entity =>
        {
            entity.HasKey(e => e.KPlanung).HasName("PK_dbo_ebay_planung");

            entity.ToTable("ebay_planung");

            entity.HasIndex(e => e.KItem, "IX_ebay_planung_kItem");

            entity.Property(e => e.KPlanung)
                .ValueGeneratedNever()
                .HasColumnName("kPlanung");
            entity.Property(e => e.CAlleXuhrzeit)
                .HasMaxLength(10)
                .HasColumnName("cAlleXuhrzeit");
            entity.Property(e => e.CDi)
                .HasDefaultValueSql("((0))")
                .HasColumnName("cDi");
            entity.Property(e => e.CDo)
                .HasDefaultValueSql("((0))")
                .HasColumnName("cDo");
            entity.Property(e => e.CFr)
                .HasDefaultValueSql("((0))")
                .HasColumnName("cFr");
            entity.Property(e => e.CMi)
                .HasDefaultValueSql("((0))")
                .HasColumnName("cMi");
            entity.Property(e => e.CMo)
                .HasDefaultValueSql("((0))")
                .HasColumnName("cMo");
            entity.Property(e => e.CPlanungsname)
                .HasMaxLength(255)
                .HasColumnName("cPlanungsname");
            entity.Property(e => e.CSa)
                .HasDefaultValueSql("((0))")
                .HasColumnName("cSa");
            entity.Property(e => e.CSo)
                .HasDefaultValueSql("((0))")
                .HasColumnName("cSo");
            entity.Property(e => e.CStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cStatus");
            entity.Property(e => e.CZeit1)
                .HasMaxLength(10)
                .HasColumnName("cZeit1");
            entity.Property(e => e.CZeit2)
                .HasMaxLength(10)
                .HasColumnName("cZeit2");
            entity.Property(e => e.CZeit3)
                .HasMaxLength(10)
                .HasColumnName("cZeit3");
            entity.Property(e => e.CZeit4)
                .HasMaxLength(10)
                .HasColumnName("cZeit4");
            entity.Property(e => e.CZeit5)
                .HasMaxLength(10)
                .HasColumnName("cZeit5");
            entity.Property(e => e.CZeit6)
                .HasMaxLength(10)
                .HasColumnName("cZeit6");
            entity.Property(e => e.DPlanungsbeginn)
                .HasColumnType("datetime")
                .HasColumnName("dPlanungsbeginn");
            entity.Property(e => e.DPlanungsende)
                .HasColumnType("datetime")
                .HasColumnName("dPlanungsende");
            entity.Property(e => e.KEbayUser).HasColumnName("kEbayUser");
            entity.Property(e => e.KItem).HasColumnName("kItem");
            entity.Property(e => e.NAlleXtage).HasColumnName("nAlleXtage");
        });

        modelBuilder.Entity<EbayQueueOut>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ebay_queue_out");

            entity.Property(e => e.CCarrierCode)
                .HasMaxLength(255)
                .HasColumnName("cCarrierCode");
            entity.Property(e => e.CIdentcode)
                .HasMaxLength(255)
                .HasColumnName("cIdentcode");
            entity.Property(e => e.ItemId)
                .HasMaxLength(255)
                .HasColumnName("ItemID");
            entity.Property(e => e.KEbayUser).HasColumnName("kEbayUser");
            entity.Property(e => e.NType).HasColumnName("nType");
            entity.Property(e => e.TransactionId)
                .HasMaxLength(255)
                .HasColumnName("TransactionID");
        });

        modelBuilder.Entity<EbayShippingCarrierCode>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ebay_ShippingCarrierCode");

            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.Value).HasMaxLength(255);
        });

        modelBuilder.Entity<EbayShippingServiceOption>(entity =>
        {
            entity.HasKey(e => e.KShippingServiceOptions).HasName("PK_dbo_ebay_ShippingServiceOptions");

            entity.ToTable("ebay_ShippingServiceOptions");

            entity.Property(e => e.KShippingServiceOptions).HasColumnName("kShippingServiceOptions");
            entity.Property(e => e.KItem).HasColumnName("kItem");
            entity.Property(e => e.ShippingService).HasMaxLength(255);
            entity.Property(e => e.ShippingServiceAdditionalCost).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingServiceCost).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingServiceId).HasColumnName("ShippingServiceID");
        });

        modelBuilder.Entity<EbayShippingprofile>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ebay_shippingprofiles");

            entity.Property(e => e.CProfilType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cProfilType");
            entity.Property(e => e.DiscountProfileId)
                .HasMaxLength(255)
                .HasColumnName("DiscountProfileID");
            entity.Property(e => e.DiscountProfileName).HasMaxLength(255);
            entity.Property(e => e.KEbayBenutzer).HasColumnName("kEbayBenutzer");
            entity.Property(e => e.SiteId)
                .HasDefaultValueSql("((77))")
                .HasColumnName("SiteID");
        });

        modelBuilder.Entity<EbayShopCategory>(entity =>
        {
            entity.HasKey(e => e.KStoreCategory).HasName("PK_dbo_ebay_shop_category");

            entity.ToTable("ebay_shop_category");

            entity.Property(e => e.KStoreCategory)
                .ValueGeneratedNever()
                .HasColumnName("kStoreCategory");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.KEbayUser).HasColumnName("kEbayUser");
            entity.Property(e => e.KStore).HasColumnName("kStore");
            entity.Property(e => e.NOrder).HasColumnName("nOrder");
            entity.Property(e => e.Name).HasMaxLength(255);
        });

        modelBuilder.Entity<EbaySpecific>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ebay_specific", tb => tb.HasTrigger("tgr_ebay_specific_INSUPDDEL"));

            entity.HasIndex(e => e.KItem, "IX_ebay_specific_kItem");

            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CValue)
                .HasMaxLength(4000)
                .HasColumnName("cValue");
            entity.Property(e => e.KItem).HasColumnName("kItem");
            entity.Property(e => e.KMerkmal).HasColumnName("kMerkmal");
            entity.Property(e => e.KMerkmalWert).HasColumnName("kMerkmalWert");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.NCustom).HasColumnName("nCustom");
        });

        modelBuilder.Entity<EbaySynch>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ebay_synch");

            entity.Property(e => e.Ip)
                .HasMaxLength(32)
                .HasColumnName("ip");
        });

        modelBuilder.Entity<EbaySynchartikel>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ebay_synchartikel");

            entity.Property(e => e.DSent)
                .HasMaxLength(20)
                .HasColumnName("dSent");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.NDay).HasColumnName("nDay");
        });

        modelBuilder.Entity<EbayTransaction>(entity =>
        {
            entity.HasKey(e => e.KTransaction).HasName("PK_dbo_ebay_transaction");

            entity.ToTable("ebay_transaction", tb => tb.HasTrigger("tgr_ebay_transaction_INSUPDEL"));

            entity.HasIndex(e => new { e.ItemId, e.TransactionId }, "IX_ebay_transaction_ItemID_TransactionID");

            entity.HasIndex(e => e.KBestellung, "IX_ebay_transaction_kBestellung");

            entity.HasIndex(e => new { e.ItemId, e.TransactionId }, "UQ_dbo_ebay_transaction_ItemID_TransactionID").IsUnique();

            entity.Property(e => e.KTransaction).HasColumnName("kTransaction");
            entity.Property(e => e.AdjustmentAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.AmountPaid).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestOfferSale).HasDefaultValueSql("('0')");
            entity.Property(e => e.BuyerPaidStatus).HasMaxLength(255);
            entity.Property(e => e.CDispute)
                .HasMaxLength(255)
                .HasColumnName("cDispute");
            entity.Property(e => e.CDisputeInfo)
                .HasMaxLength(512)
                .HasColumnName("cDisputeInfo");
            entity.Property(e => e.ConvertedAdjustmentAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ConvertedAmountPaid).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ConvertedTransactionPrice).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Currency).HasMaxLength(255);
            entity.Property(e => e.DZahlungsdatum)
                .HasColumnType("datetime")
                .HasColumnName("dZahlungsdatum");
            entity.Property(e => e.FinalValueFee).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.FlCommentText)
                .HasMaxLength(255)
                .HasColumnName("FL_CommentText");
            entity.Property(e => e.FlCommentType)
                .HasMaxLength(255)
                .HasColumnName("FL_CommentType");
            entity.Property(e => e.FlTargetUser)
                .HasMaxLength(255)
                .HasColumnName("FL_TargetUser");
            entity.Property(e => e.FrCommentText)
                .HasMaxLength(255)
                .HasColumnName("FR_CommentText");
            entity.Property(e => e.FrCommentType)
                .HasMaxLength(255)
                .HasColumnName("FR_CommentType");
            entity.Property(e => e.FrTargetUser)
                .HasMaxLength(255)
                .HasColumnName("FR_TargetUser");
            entity.Property(e => e.ItemId)
                .HasMaxLength(255)
                .HasColumnName("ItemID");
            entity.Property(e => e.KAlien)
                .HasDefaultValueSql("((0))")
                .HasColumnName("kAlien");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KBuyer).HasColumnName("kBuyer");
            entity.Property(e => e.KEbayUser).HasColumnName("kEbayUser");
            entity.Property(e => e.KEigenschaftKombi).HasColumnName("kEigenschaftKombi");
            entity.Property(e => e.NCheckout)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nCheckout");
            entity.Property(e => e.NKonflikt).HasColumnName("nKonflikt");
            entity.Property(e => e.NZuletztAktualisiert).HasColumnName("nZuletztAktualisiert");
            entity.Property(e => e.PaidTime).HasColumnType("datetime");
            entity.Property(e => e.ShippedTime).HasColumnType("datetime");
            entity.Property(e => e.SiteId)
                .HasDefaultValueSql("((77))")
                .HasColumnName("SiteID");
            entity.Property(e => e.Sku)
                .HasMaxLength(64)
                .HasColumnName("SKU");
            entity.Property(e => e.SssExpeditedService)
                .HasDefaultValueSql("('0')")
                .HasColumnName("SSS_ExpeditedService");
            entity.Property(e => e.SssShippingInsuranceCost)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SSS_ShippingInsuranceCost");
            entity.Property(e => e.SssShippingService)
                .HasMaxLength(255)
                .HasColumnName("SSS_ShippingService");
            entity.Property(e => e.SssShippingServiceAdditionalCost)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SSS_ShippingServiceAdditionalCost");
            entity.Property(e => e.SssShippingServiceCost)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SSS_ShippingServiceCost");
            entity.Property(e => e.Status).HasDefaultValueSql("((0))");
            entity.Property(e => e.StatusBuyerSelectedShipping)
                .HasDefaultValueSql("('0')")
                .HasColumnName("Status_BuyerSelectedShipping");
            entity.Property(e => e.StatusCheckoutStatus)
                .HasMaxLength(255)
                .HasColumnName("Status_CheckoutStatus");
            entity.Property(e => e.StatusCompleteStatus)
                .HasMaxLength(255)
                .HasColumnName("Status_CompleteStatus");
            entity.Property(e => e.StatusLastTimeModified)
                .HasColumnType("datetime")
                .HasColumnName("Status_LastTimeModified");
            entity.Property(e => e.StatusPaymentMethodUsed)
                .HasMaxLength(255)
                .HasColumnName("Status_PaymentMethodUsed");
            entity.Property(e => e.StautsEBayPaymentStatus)
                .HasMaxLength(255)
                .HasColumnName("Stauts_eBayPaymentStatus");
            entity.Property(e => e.TransactionId)
                .HasMaxLength(255)
                .HasColumnName("TransactionID");
            entity.Property(e => e.TransactionPrice).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.VariationTitle).HasMaxLength(255);
            entity.Property(e => e.Vat)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("VAT");
        });

        modelBuilder.Entity<EbayTransactionDeleted>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ebay_transaction_deleted");

            entity.HasIndex(e => new { e.ItemId, e.TransactionId }, "UQ_dbo_ebay_transaction_deleted_ItemID_TransactionID").IsUnique();

            entity.Property(e => e.DeletedAt).HasColumnType("datetime");
            entity.Property(e => e.ItemId)
                .HasMaxLength(255)
                .HasColumnName("ItemID");
            entity.Property(e => e.NCheckout).HasColumnName("nCheckout");
            entity.Property(e => e.TransactionId)
                .HasMaxLength(255)
                .HasColumnName("TransactionID");
        });

        modelBuilder.Entity<EbayUser>(entity =>
        {
            entity.HasKey(e => e.KEbayuser).HasName("PK_dbo_ebay_user");

            entity.ToTable("ebay_user", tb => tb.HasTrigger("jtlActionValidator_ebay_user"));

            entity.HasIndex(e => e.SiteId, "IX_ebay_user_SiteId");

            entity.Property(e => e.KEbayuser)
                .ValueGeneratedNever()
                .HasColumnName("kEbayuser");
            entity.Property(e => e.CEbayUsername)
                .HasMaxLength(100)
                .HasColumnName("cEbayUsername");
            entity.Property(e => e.DLetzerEbayAbgleich)
                .HasColumnType("datetime")
                .HasColumnName("dLetzerEbayAbgleich");
            entity.Property(e => e.DLetzterBestellabgleich)
                .HasColumnType("datetime")
                .HasColumnName("dLetzterBestellabgleich");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.Login).HasMaxLength(40);
            entity.Property(e => e.NEbayPayment).HasColumnName("nEbayPayment");
            entity.Property(e => e.NLagerbestaendeAendern)
                .HasDefaultValueSql("((1))")
                .HasColumnName("nLagerbestaendeAendern");
            entity.Property(e => e.NOutOfStockControl).HasColumnName("nOutOfStockControl");
            entity.Property(e => e.NSonderRegel).HasColumnName("nSonderRegel");
            entity.Property(e => e.Name).HasMaxLength(40);
            entity.Property(e => e.Passwort).HasMaxLength(255);
            entity.Property(e => e.Umgebung).HasMaxLength(30);
        });

        modelBuilder.Entity<EbayUsermessagequeue>(entity =>
        {
            entity.HasKey(e => e.KEbayDataUserOutputQueue).HasName("PK_dbo_ebay_usermessagequeue");

            entity.ToTable("ebay_usermessagequeue");

            entity.Property(e => e.KEbayDataUserOutputQueue)
                .ValueGeneratedNever()
                .HasColumnName("kEbayDataUserOutputQueue");
            entity.Property(e => e.CMessage).HasColumnName("cMessage");
            entity.Property(e => e.CMessageType)
                .HasMaxLength(255)
                .HasColumnName("cMessageType");
            entity.Property(e => e.DErstellt)
                .HasMaxLength(255)
                .HasColumnName("dErstellt");
            entity.Property(e => e.KEbayUser).HasColumnName("kEbayUser");
            entity.Property(e => e.NDel)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nDel");
        });

        modelBuilder.Entity<EbayUserprofile>(entity =>
        {
            entity.HasKey(e => e.KUserProfile).HasName("PK_dbo_ebay_userprofile");

            entity.ToTable("ebay_userprofile");

            entity.HasIndex(e => e.KEbayuser, "IX_kEbayuser");

            entity.Property(e => e.KUserProfile).HasColumnName("kUserProfile");
            entity.Property(e => e.CategoryName).HasMaxLength(255);
            entity.Property(e => e.KEbayuser).HasColumnName("kEbayuser");
            entity.Property(e => e.NStandard).HasColumnName("nStandard");
            entity.Property(e => e.ProfileDesc).HasMaxLength(255);
            entity.Property(e => e.ProfileId)
                .HasMaxLength(255)
                .HasColumnName("ProfileID");
            entity.Property(e => e.ProfileName).HasMaxLength(255);
            entity.Property(e => e.ProfileType).HasMaxLength(50);
            entity.Property(e => e.SiteId).HasColumnName("SiteID");
        });

        modelBuilder.Entity<EbayUsersite>(entity =>
        {
            entity.HasKey(e => new { e.KEbayuser, e.SiteId }).HasName("PK_dbo_ebay_usersites");

            entity.ToTable("ebay_usersites");

            entity.Property(e => e.KEbayuser).HasColumnName("kEbayuser");
        });

        modelBuilder.Entity<EbayUsertexte>(entity =>
        {
            entity.HasKey(e => e.KEbayUserTexte).HasName("PK_dbo_ebay_usertexte");

            entity.ToTable("ebay_usertexte");

            entity.Property(e => e.KEbayUserTexte)
                .ValueGeneratedNever()
                .HasColumnName("kEbayUserTexte");
            entity.Property(e => e.CTagName)
                .HasMaxLength(255)
                .HasColumnName("cTagName");
            entity.Property(e => e.CText).HasColumnName("cText");
            entity.Property(e => e.KEbayUser).HasColumnName("kEbayUser");
        });

        modelBuilder.Entity<EbayVersandOut>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ebay_versand_out");

            entity.Property(e => e.CInfo)
                .HasMaxLength(255)
                .HasColumnName("cInfo");
            entity.Property(e => e.CLogistiker)
                .HasMaxLength(255)
                .HasColumnName("cLogistiker");
            entity.Property(e => e.CTrackingId)
                .HasMaxLength(30)
                .HasColumnName("cTrackingID");
            entity.Property(e => e.CUrl)
                .HasMaxLength(512)
                .HasColumnName("cURL");
            entity.Property(e => e.DDatum)
                .HasMaxLength(12)
                .HasColumnName("dDatum");
            entity.Property(e => e.KEbayCheckout).HasColumnName("kEbayCheckout");
        });

        modelBuilder.Entity<EbayVersandZahlung>(entity =>
        {
            entity.HasKey(e => e.KEbayVersandZahlung).HasName("PK_dbo_ebay_versand_zahlung");

            entity.ToTable("ebay_versand_zahlung");

            entity.HasIndex(e => new { e.KEbayUser, e.COrderId, e.CItemId, e.CTransactionId }, "UQ_ebay_versand_zahlung_kEbayUser_cOrderId_cItemId_cTransactionId").IsUnique();

            entity.Property(e => e.KEbayVersandZahlung).HasColumnName("kEbayVersandZahlung");
            entity.Property(e => e.CItemId)
                .HasMaxLength(30)
                .HasColumnName("cItemId");
            entity.Property(e => e.COrderId)
                .HasMaxLength(30)
                .HasColumnName("cOrderId");
            entity.Property(e => e.CPaymentErrorMessage).HasColumnName("cPaymentErrorMessage");
            entity.Property(e => e.CShippingErrorMessage).HasColumnName("cShippingErrorMessage");
            entity.Property(e => e.CTransactionId)
                .HasMaxLength(30)
                .HasColumnName("cTransactionId");
            entity.Property(e => e.DCreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("dCreatedAt");
            entity.Property(e => e.DUpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("dUpdatedAt");
            entity.Property(e => e.KEbayUser).HasColumnName("kEbayUser");
            entity.Property(e => e.NPaymentSuccessful).HasColumnName("nPaymentSuccessful");
            entity.Property(e => e.NShippingSuccessful).HasColumnName("nShippingSuccessful");
        });

        modelBuilder.Entity<EbayVwEignertext>(entity =>
        {
            entity.HasKey(e => e.KEbayVwEignertext).HasName("PK_dbo_ebay_vw_eignertext");

            entity.ToTable("ebay_vw_eignertext");

            entity.HasIndex(e => e.CName, "UQ_dbo_ebay_vw_eignertext_cName").IsUnique();

            entity.Property(e => e.KEbayVwEignertext).HasColumnName("kEbay_vw_eignertext");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
        });

        modelBuilder.Entity<EbayVwHtmltemplate>(entity =>
        {
            entity.HasKey(e => e.KEbayHtmlTemplate).HasName("PK_dbo_ebay_vw_htmltemplate");

            entity.ToTable("ebay_vw_htmltemplate");

            entity.Property(e => e.KEbayHtmlTemplate).HasColumnName("kEbayHtmlTemplate");
            entity.Property(e => e.CHtmlTemplateDescription)
                .HasMaxLength(255)
                .HasColumnName("cHtmlTemplateDescription");
            entity.Property(e => e.CHtmlTemplateName)
                .HasMaxLength(255)
                .HasColumnName("cHtmlTemplateName");
            entity.Property(e => e.DCreated)
                .HasColumnType("datetime")
                .HasColumnName("dCreated");
            entity.Property(e => e.DUploaded)
                .HasColumnType("datetime")
                .HasColumnName("dUploaded");
            entity.Property(e => e.KEbayHtmlTemplateData).HasColumnName("kEbayHtmlTemplateData");
            entity.Property(e => e.NDeleted).HasColumnName("nDeleted");
            entity.Property(e => e.NEbayHtmlTemplateParent).HasColumnName("nEbayHtmlTemplateParent");
            entity.Property(e => e.NIsDefault).HasColumnName("nIsDefault");
        });

        modelBuilder.Entity<EbayVwHtmltemplatedatum>(entity =>
        {
            entity.HasKey(e => e.KEbayHtmlTemplateData).HasName("PK_dbo_ebay_vw_htmltemplatedata");

            entity.ToTable("ebay_vw_htmltemplatedata");

            entity.Property(e => e.KEbayHtmlTemplateData).HasColumnName("kEbayHtmlTemplateData");
            entity.Property(e => e.BData).HasColumnName("bData");
            entity.Property(e => e.CTemplate).HasColumnName("cTemplate");
        });

        modelBuilder.Entity<EbayVwHtmltemplatepreview>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ebay_vw_htmltemplatepreview");

            entity.Property(e => e.KHtmlTemplate).HasColumnName("kHtmlTemplate");
            entity.Property(e => e.Pict)
                .HasColumnType("image")
                .HasColumnName("pict");
            entity.Property(e => e.Size).HasColumnName("size");
        });

        modelBuilder.Entity<EbayVwHtmltemplaterendered>(entity =>
        {
            entity.HasKey(e => e.KEbayVwHtmltemplaterendered).HasName("PK_dbo_ebay_vw_htmltemplaterendered");

            entity.ToTable("ebay_vw_htmltemplaterendered");

            entity.HasIndex(e => e.KEbayItem, "IX_ebay_vw_htmltemplaterendered_kEbay_item");

            entity.Property(e => e.KEbayVwHtmltemplaterendered).HasColumnName("kEbay_vw_htmltemplaterendered");
            entity.Property(e => e.CTemplate).HasColumnName("cTemplate");
            entity.Property(e => e.KEbayItem).HasColumnName("kEbay_item");
        });

        modelBuilder.Entity<EbayVwHtmltemplatetag>(entity =>
        {
            entity.HasKey(e => e.KEbayHtmlTemplateTag).HasName("PK_dbo_ebay_vw_htmltemplatetag");

            entity.ToTable("ebay_vw_htmltemplatetag");

            entity.Property(e => e.KEbayHtmlTemplateTag).HasColumnName("kEbayHtmlTemplateTag");
            entity.Property(e => e.CTagExtension)
                .HasMaxLength(255)
                .HasColumnName("cTagExtension");
            entity.Property(e => e.CTagName)
                .HasMaxLength(255)
                .HasColumnName("cTagName");
            entity.Property(e => e.CTagType)
                .HasMaxLength(255)
                .HasColumnName("cTagType");
            entity.Property(e => e.KEbayHtmlTemplate).HasColumnName("kEbayHtmlTemplate");
        });

        modelBuilder.Entity<EbayXxBearbeitungszeiten>(entity =>
        {
            entity.HasKey(e => new { e.SiteId, e.CDispatchTime }).HasName("PK_dbo_ebay_xx_bearbeitungszeiten");

            entity.ToTable("ebay_xx_bearbeitungszeiten");

            entity.Property(e => e.SiteId).HasColumnName("SiteID");
            entity.Property(e => e.CDispatchTime)
                .HasMaxLength(20)
                .HasColumnName("cDispatchTime");
        });

        modelBuilder.Entity<EbayXxCategory>(entity =>
        {
            entity.HasKey(e => new { e.SiteId, e.CategoryId }).HasName("PK_dbo_ebay_xx_categories");

            entity.ToTable("ebay_xx_categories");

            entity.HasIndex(e => new { e.SiteId, e.CategoryParentId }, "IX_ebay_xx_categories_SiteID_CategoryParentId");

            entity.Property(e => e.SiteId).HasColumnName("SiteID");
            entity.Property(e => e.CategoryName).HasMaxLength(255);
            entity.Property(e => e.CompatibleVehicleType)
                .HasMaxLength(100)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.ConditionValues).HasMaxLength(255);
        });

        modelBuilder.Entity<EbayXxCondition>(entity =>
        {
            entity.HasKey(e => new { e.SiteId, e.Id }).HasName("PK_dbo_ebay_xx_condition");

            entity.ToTable("ebay_xx_condition");

            entity.Property(e => e.SiteId).HasColumnName("SiteID");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.DisplayName).HasMaxLength(255);
        });

        modelBuilder.Entity<EbayXxI>(entity =>
        {
            entity.HasKey(e => new { e.SiteId, e.CategoryId, e.KName }).HasName("PK_dbo_ebay_xx_is");

            entity.ToTable("ebay_xx_is");

            entity.Property(e => e.SiteId).HasColumnName("SiteID");
            entity.Property(e => e.KName).HasColumnName("kName");
            entity.Property(e => e.CHelpText)
                .HasMaxLength(255)
                .HasColumnName("cHelpText");
            entity.Property(e => e.CHelpUrl)
                .HasMaxLength(255)
                .HasColumnName("cHelpURL");
            entity.Property(e => e.IsRecommended).HasColumnName("isRecommended");
            entity.Property(e => e.NMaxValues).HasColumnName("nMaxValues");
            entity.Property(e => e.NMinValues).HasColumnName("nMinValues");
            entity.Property(e => e.NSelectionMode).HasColumnName("nSelectionMode");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<EbayXxIsglobalname>(entity =>
        {
            entity.HasKey(e => e.KName).HasName("PK_dbo_ebay_xx_isglobalname");

            entity.ToTable("ebay_xx_isglobalname");

            entity.Property(e => e.KName)
                .ValueGeneratedNever()
                .HasColumnName("kName");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
        });

        modelBuilder.Entity<EbayXxIsglobalvalue>(entity =>
        {
            entity.HasKey(e => e.KValue).HasName("PK_dbo_ebay_xx_isglobalvalue");

            entity.ToTable("ebay_xx_isglobalvalue");

            entity.Property(e => e.KValue)
                .ValueGeneratedNever()
                .HasColumnName("kValue");
            entity.Property(e => e.CValue)
                .HasMaxLength(255)
                .HasColumnName("cValue");
        });

        modelBuilder.Entity<EbayXxIsrelation>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ebay_xx_isrelation");

            entity.HasIndex(e => new { e.SiteId, e.CategoryId }, "IX_ebay_xx_isrelation_SiteID_CategoryId");

            entity.Property(e => e.KName).HasColumnName("kName");
            entity.Property(e => e.KNameParent).HasColumnName("kNameParent");
            entity.Property(e => e.KValue).HasColumnName("kValue");
            entity.Property(e => e.KValueParent).HasColumnName("kValueParent");
            entity.Property(e => e.SiteId).HasColumnName("SiteID");
        });

        modelBuilder.Entity<EbayXxIsvalue>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ebay_xx_isvalue");

            entity.HasIndex(e => new { e.SiteId, e.CategoryId }, "IX_ebay_xx_isvalue_SiteID_CategoryId");

            entity.Property(e => e.KName).HasColumnName("kName");
            entity.Property(e => e.KValue).HasColumnName("kValue");
            entity.Property(e => e.SiteId).HasColumnName("SiteID");
        });

        modelBuilder.Entity<EbayXxLaufzeiten>(entity =>
        {
            entity.HasKey(e => new { e.SiteId, e.CType, e.CDuration }).HasName("PK_dbo_ebay_xx_laufzeiten");

            entity.ToTable("ebay_xx_laufzeiten");

            entity.Property(e => e.SiteId).HasColumnName("SiteID");
            entity.Property(e => e.CType)
                .HasMaxLength(30)
                .HasColumnName("cType");
            entity.Property(e => e.CDuration)
                .HasMaxLength(20)
                .HasColumnName("cDuration");
        });

        modelBuilder.Entity<EbayXxRueckgabe>(entity =>
        {
            entity.HasKey(e => new { e.SiteId, e.CType, e.COption }).HasName("PK_dbo_ebay_xx_rueckgabe");

            entity.ToTable("ebay_xx_rueckgabe");

            entity.Property(e => e.SiteId).HasColumnName("SiteID");
            entity.Property(e => e.CType)
                .HasMaxLength(30)
                .HasColumnName("cType");
            entity.Property(e => e.COption)
                .HasMaxLength(255)
                .HasColumnName("cOption");
            entity.Property(e => e.CDescription)
                .HasMaxLength(255)
                .HasColumnName("cDescription");
        });

        modelBuilder.Entity<EbayXxSite>(entity =>
        {
            entity.HasKey(e => e.SiteId).HasName("PK_dbo_ebay_xx_sites");

            entity.ToTable("ebay_xx_sites");

            entity.Property(e => e.SiteId)
                .ValueGeneratedNever()
                .HasColumnName("SiteID");
            entity.Property(e => e.CAbbreviation)
                .HasMaxLength(20)
                .HasColumnName("cAbbreviation");
            entity.Property(e => e.CLandIso)
                .HasMaxLength(20)
                .HasColumnName("cLandISO");
            entity.Property(e => e.CName)
                .HasMaxLength(50)
                .HasColumnName("cName");
            entity.Property(e => e.CSiteCodeType)
                .HasMaxLength(50)
                .HasColumnName("cSiteCodeType");
            entity.Property(e => e.CSprachIso)
                .HasMaxLength(20)
                .HasColumnName("cSprachISO");
            entity.Property(e => e.CWaehrungIso)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("cWaehrungISO");
            entity.Property(e => e.DLastUpdate)
                .HasColumnType("datetime")
                .HasColumnName("dLastUpdate");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.NVersion).HasColumnName("nVersion");
            entity.Property(e => e.Www)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("www");
        });

        modelBuilder.Entity<EbayXxVersandarten>(entity =>
        {
            entity.HasKey(e => new { e.SiteId, e.ShippingServiceId }).HasName("PK_dbo_ebay_xx_versandarten");

            entity.ToTable("ebay_xx_versandarten");

            entity.Property(e => e.SiteId).HasColumnName("SiteID");
            entity.Property(e => e.ShippingServiceId).HasColumnName("ShippingServiceID");
            entity.Property(e => e.CDescription)
                .HasMaxLength(255)
                .HasColumnName("cDescription");
            entity.Property(e => e.MappedToShippingServiceId).HasColumnName("MappedToShippingServiceID");
            entity.Property(e => e.ShippingService).HasMaxLength(255);
        });

        modelBuilder.Entity<EbayXxVersandlaender>(entity =>
        {
            entity.HasKey(e => new { e.SiteId, e.ShippingLocation }).HasName("PK_dbo_ebay_xx_versandlaender");

            entity.ToTable("ebay_xx_versandlaender");

            entity.Property(e => e.SiteId).HasColumnName("SiteID");
            entity.Property(e => e.ShippingLocation).HasMaxLength(255);
            entity.Property(e => e.CDescription)
                .HasMaxLength(255)
                .HasColumnName("cDescription");
        });

        modelBuilder.Entity<EbayXxZahlungsmethoden>(entity =>
        {
            entity.HasKey(e => new { e.SiteId, e.PaymentOption }).HasName("PK_dbo_ebay_xx_zahlungsmethoden");

            entity.ToTable("ebay_xx_zahlungsmethoden");

            entity.Property(e => e.SiteId).HasColumnName("SiteID");
            entity.Property(e => e.PaymentOption).HasMaxLength(255);
            entity.Property(e => e.DisplayText).HasMaxLength(255);
        });

        modelBuilder.Entity<EbayZahlungOut>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ebay_zahlung_out");

            entity.Property(e => e.DDatum)
                .HasMaxLength(12)
                .HasColumnName("dDatum");
            entity.Property(e => e.FBetrag)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBetrag");
            entity.Property(e => e.KEbayCheckout).HasColumnName("kEbayCheckout");
        });

        modelBuilder.Entity<ExternalInvoice>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ExternalInvoice", "Report");

            entity.Property(e => e.BillingAddressCity).HasMaxLength(255);
            entity.Property(e => e.BillingAddressCompany).HasMaxLength(128);
            entity.Property(e => e.BillingAddressCountry).HasMaxLength(255);
            entity.Property(e => e.BillingAddressFirstname).HasMaxLength(128);
            entity.Property(e => e.BillingAddressLastname).HasMaxLength(255);
            entity.Property(e => e.BillingAddressSalutation).HasMaxLength(30);
            entity.Property(e => e.BillingAddressStreet).HasMaxLength(255);
            entity.Property(e => e.BillingAddressTitle).HasMaxLength(64);
            entity.Property(e => e.BillingAddressZipCode).HasMaxLength(24);
            entity.Property(e => e.BuyerVatcountryIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BuyerVATCountryISO");
            entity.Property(e => e.BuyerVatid)
                .HasMaxLength(50)
                .HasColumnName("BuyerVATId");
            entity.Property(e => e.BuyerVatidType).HasColumnName("BuyerVATIdType");
            entity.Property(e => e.CurrencyFactor).HasColumnType("decimal(23, 15)");
            entity.Property(e => e.CurrencyIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CurrencyISO");
            entity.Property(e => e.ExternalInvoiceNumber).HasMaxLength(50);
            entity.Property(e => e.FUmgerechneterGesamtUstBetrag)
                .HasColumnType("decimal(23, 15)")
                .HasColumnName("fUmgerechneterGesamtUstBetrag");
            entity.Property(e => e.SdiaccountNumber)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SDIAccountNumber");
            entity.Property(e => e.SellerVatcountryIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SellerVATCountryISO");
            entity.Property(e => e.SellerVatid)
                .HasMaxLength(50)
                .HasColumnName("SellerVATId");
            entity.Property(e => e.TaxAuthority).HasMaxLength(200);
            entity.Property(e => e.TaxAuthorityLevel).HasMaxLength(50);
            entity.Property(e => e.VatidCalculationAddress).HasColumnName("VATIdCalculationAddress");
        });

        modelBuilder.Entity<ExternalInvoicePosition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ExternalInvoicePosition", "Report");

            entity.Property(e => e.CLieferadresseLandIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLieferadresseLandISO");
            entity.Property(e => e.CLieferadresseOrt).HasColumnName("cLieferadresseOrt");
            entity.Property(e => e.CLieferadressePlz)
                .HasMaxLength(10)
                .HasColumnName("cLieferadressePLZ");
            entity.Property(e => e.CLieferadresseRegion).HasColumnName("cLieferadresseRegion");
            entity.Property(e => e.CLieferadresseSteuercode)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseSteuercode");
            entity.Property(e => e.CVersandadresseLandIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cVersandadresseLandISO");
            entity.Property(e => e.CVersandadresseOrt).HasColumnName("cVersandadresseOrt");
            entity.Property(e => e.CVersandadressePlz)
                .HasMaxLength(10)
                .HasColumnName("cVersandadressePLZ");
            entity.Property(e => e.CVersandadresseRegion).HasColumnName("cVersandadresseRegion");
            entity.Property(e => e.CVersandadresseSteuercode)
                .HasMaxLength(30)
                .HasColumnName("cVersandadresseSteuercode");
            entity.Property(e => e.GrossDiscountTotal).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.GrossPriceTotal).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.InternalId).ValueGeneratedOnAdd();
            entity.Property(e => e.KAmazonVcsbestellungPos).HasColumnName("kAmazonVCSBestellungPos");
            entity.Property(e => e.NetDiscountTotal).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.NetPriceTotal).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.OrderCurrencyIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OrderCurrencyISO");
            entity.Property(e => e.OrderNumber).HasMaxLength(50);
            entity.Property(e => e.Quantity).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.Sku)
                .HasMaxLength(100)
                .HasColumnName("SKU");
            entity.Property(e => e.TaxDiscountTotal).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.TaxTotal).HasColumnType("decimal(10, 2)");
        });

        modelBuilder.Entity<FulfillerPoductAttributeForFfnMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("FulfillerPoductAttributeForFfnMapping", "FulfillmentNetwork");

            entity.Property(e => e.CGruppe)
                .HasMaxLength(150)
                .HasColumnName("cGruppe");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.Ffntyp)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("FFNTyp");
            entity.Property(e => e.KAttribut).HasColumnName("kAttribut");
        });

        modelBuilder.Entity<FulfilmentOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("FulfilmentOrder", "Report");

            entity.Property(e => e.ApiShippingDate)
                .HasComment("Datum der Übertragung zum Fulfiller")
                .HasColumnType("datetime");
            entity.Property(e => e.CompanyInternalId).HasComment("Interne ID der Firma");
            entity.Property(e => e.CreationDate)
                .HasComment("Erstelldatum des Fulfillmentauftrags")
                .HasColumnType("datetime");
            entity.Property(e => e.CurrencyIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("ISO-Code der Währung")
                .HasColumnName("CurrencyISO");
            entity.Property(e => e.CustomerInternalId).HasComment("Interne ID des Kunden");
            entity.Property(e => e.DeliveryNoteId)
                .HasMaxLength(255)
                .HasComment("Nummer des Lieferscheins");
            entity.Property(e => e.DeliveryNoteInternalId).HasComment("Interne ID des Lieferscheins");
            entity.Property(e => e.DeliveryProperty)
                .HasMaxLength(30)
                .HasComment("Lieferpriorität des Fulfillmentauftrags");
            entity.Property(e => e.FaxingDate)
                .HasComment("Datum des Faxversands")
                .HasColumnType("datetime");
            entity.Property(e => e.InProcessDate)
                .HasComment("Datum an dem der Fulfillmentauftrag in Bearbeitung ging")
                .HasColumnType("datetime");
            entity.Property(e => e.InternalId).HasComment("Interne ID des Fulfillmentauftrags");
            entity.Property(e => e.MailingDate)
                .HasComment("Maildatum des Fulfillmentauftrags")
                .HasColumnType("datetime");
            entity.Property(e => e.OperationId)
                .HasMaxLength(67)
                .HasComment("Auftrags-ID des Fulfillmentauftragvorgangs");
            entity.Property(e => e.PrintingDate)
                .HasComment("Druckdatum des Fulfillmentauftrags")
                .HasColumnType("datetime");
            entity.Property(e => e.SalesOrderId)
                .HasMaxLength(50)
                .HasComment("Nummer der Bestellung");
            entity.Property(e => e.SalesOrderInternalId).HasComment("Interne ID der Bestellung");
            entity.Property(e => e.SalesOrderText).HasComment("Auftragsdrucktext");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Status des Fulfillmentauftrags");
            entity.Property(e => e.UserInternalId).HasComment("Interne ID des Benutzers");
            entity.Property(e => e.WarehouseInternalId).HasComment("Interne ID des Warenlagers");
        });

        modelBuilder.Entity<FulfilmentOrderPosition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("FulfilmentOrderPosition", "Report");

            entity.Property(e => e.DeliveryNotePositionInternalId).HasComment("Interne ID der Lieferscheinposition");
            entity.Property(e => e.FulfilmentOrderInternalId).HasComment("Interne ID der Fulfillmentauftragspositionen");
            entity.Property(e => e.IndividualWeight)
                .HasComment("Gewicht des Artikels")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.InternalId).HasComment("Interne ID des Artikels");
            entity.Property(e => e.ItemDescriptionDetailed).HasComment("Lange Artikelbeschreibung");
            entity.Property(e => e.ItemDescriptionShort).HasComment("Kurze Artikelbeschreibung");
            entity.Property(e => e.ItemGiftText)
                .HasMaxLength(1000)
                .HasComment("Geschenktext für den Artikel");
            entity.Property(e => e.ItemNote)
                .HasMaxLength(2000)
                .HasComment("Hinweis zum Artikel in der Position");
            entity.Property(e => e.LanguageInternalId).HasComment("Interne ID zur verwendeten Sprache");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasComment("Drucktext zur Fulfillmentauftragsposition");
            entity.Property(e => e.Note)
                .HasMaxLength(4000)
                .HasComment("Hinweis der Lieferscheinposition zur Fulfillmentauftragsposition");
            entity.Property(e => e.Quantity)
                .HasComment("Anzahl pro Position")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Sku)
                .HasMaxLength(100)
                .HasComment("Artikelnummer des Artikels auf der Position")
                .HasColumnName("SKU");
            entity.Property(e => e.Sorting).HasComment("Sortierung der Fulfillmentauftragspositionen");
            entity.Property(e => e.Status).HasComment("Status der Fulfillmentauftragsposition");
            entity.Property(e => e.TotalWeight)
                .HasComment("Gewicht der Menge in der Position")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Unit)
                .HasMaxLength(255)
                .HasComment("Einheit des Artikels");
        });

        modelBuilder.Entity<FulfilmentOrderShipToAddress>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("FulfilmentOrderShipToAddress", "Report");

            entity.Property(e => e.Address).HasMaxLength(255);
            entity.Property(e => e.AddressSupplement).HasMaxLength(255);
            entity.Property(e => e.City).HasMaxLength(64);
            entity.Property(e => e.Company).HasMaxLength(128);
            entity.Property(e => e.CompanySupplement).HasMaxLength(60);
            entity.Property(e => e.Country).HasMaxLength(64);
            entity.Property(e => e.CountryIso)
                .HasMaxLength(5)
                .HasColumnName("CountryISO");
            entity.Property(e => e.EmailAddress).HasMaxLength(255);
            entity.Property(e => e.Fax).HasMaxLength(30);
            entity.Property(e => e.FirstName).HasMaxLength(126);
            entity.Property(e => e.LastName).HasMaxLength(126);
            entity.Property(e => e.MobilePhone).HasMaxLength(30);
            entity.Property(e => e.Phone).HasMaxLength(30);
            entity.Property(e => e.PostalCode).HasMaxLength(24);
            entity.Property(e => e.Salutation).HasMaxLength(30);
            entity.Property(e => e.State).HasMaxLength(255);
            entity.Property(e => e.Title).HasMaxLength(64);
            entity.Property(e => e.ValueAddedTaxId).HasMaxLength(20);
        });

        modelBuilder.Entity<GoodsIn>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("GoodsIn", "BI");

            entity.Property(e => e.Amount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BatchName).HasMaxLength(255);
            entity.Property(e => e.BestBeforeDate).HasColumnType("datetime");
            entity.Property(e => e.BinLocationId).HasColumnName("BinLocationID");
            entity.Property(e => e.CreationDate).HasColumnType("datetime");
            entity.Property(e => e.CustomerCreditNotePosId).HasColumnName("CustomerCreditNotePosID");
            entity.Property(e => e.CustomerOrderPosId).HasColumnName("CustomerOrderPosID");
            entity.Property(e => e.CustomerReturnPosId).HasColumnName("CustomerReturnPosID");
            entity.Property(e => e.GoodsInComment).HasMaxLength(255);
            entity.Property(e => e.GoodsInId)
                .ValueGeneratedOnAdd()
                .HasColumnName("GoodsInID");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.MovementTypeId).HasColumnName("MovementTypeID");
            entity.Property(e => e.NetPurchasePrice).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
            entity.Property(e => e.SupplierOrderPosId).HasColumnName("SupplierOrderPosID");
            entity.Property(e => e.SystemUserId).HasColumnName("SystemUserID");
        });

        modelBuilder.Entity<GoodsOut>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("GoodsOut", "BI");

            entity.Property(e => e.Amount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BinLocationId).HasColumnName("BinLocationID");
            entity.Property(e => e.CreationDate).HasColumnType("datetime");
            entity.Property(e => e.DeliveryNotePosId).HasColumnName("DeliveryNotePosID");
            entity.Property(e => e.GoodsInId).HasColumnName("GoodsInID");
            entity.Property(e => e.GoodsOutComment).HasMaxLength(255);
            entity.Property(e => e.GoodsOutId)
                .ValueGeneratedOnAdd()
                .HasColumnName("GoodsOutID");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.MovementTypeId).HasColumnName("MovementTypeID");
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
            entity.Property(e => e.SystemUserId).HasColumnName("SystemUserID");
        });

        modelBuilder.Entity<GroupOfProduct>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("GroupOfProducts", "BI");

            entity.Property(e => e.GroupOfProductsId).HasColumnName("GroupOfProductsID");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
        });

        modelBuilder.Entity<GroupOfProductsName>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("GroupOfProductsName", "BI");

            entity.Property(e => e.GroupOfProductsId).HasColumnName("GroupOfProductsID");
            entity.Property(e => e.LanguageIso)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Name).HasMaxLength(128);
        });

        modelBuilder.Entity<InventoryDifferenceList>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("InventoryDifferenceList", "Report");

            entity.Property(e => e.FromDate).HasColumnType("datetime");
            entity.Property(e => e.QuantityDifference).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ToDate).HasColumnType("datetime");
            entity.Property(e => e.TotalPurchasePriceNet).HasColumnType("decimal(25, 13)");
        });

        modelBuilder.Entity<InventoryDifferenceListPosition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("InventoryDifferenceListPosition", "Report");

            entity.Property(e => e.Asin)
                .HasMaxLength(255)
                .HasColumnName("ASIN");
            entity.Property(e => e.FromDate).HasColumnType("datetime");
            entity.Property(e => e.IsSleditem).HasColumnName("IsSLEDItem");
            entity.Property(e => e.ItemBarCode).HasMaxLength(255);
            entity.Property(e => e.ItemDescription).HasMaxLength(255);
            entity.Property(e => e.PurchasePriceNetPerSalesUnit).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Quantity).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Sku)
                .HasMaxLength(100)
                .HasColumnName("SKU");
            entity.Property(e => e.ToDate).HasColumnType("datetime");
            entity.Property(e => e.TotalPurchasePriceNet).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.UserName).HasMaxLength(255);
        });

        modelBuilder.Entity<Invoice>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Invoice", "Report");

            entity.Property(e => e.CashDiscount)
                .HasComment("Skonto der Rechnung")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.CashDiscountValidity).HasComment("Skontozeitraum der Rechnung");
            entity.Property(e => e.Comment).HasComment("Bemerkung zur Rechnung");
            entity.Property(e => e.CompanyInternalId).HasComment("Interne ID der Firma in der Rechnung");
            entity.Property(e => e.CountryIso)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasComment("ISO-Code des Landes der Rechnung")
                .HasColumnName("CountryISO");
            entity.Property(e => e.CreationDate)
                .HasComment("Erstelldatum der Rechnung")
                .HasColumnType("datetime");
            entity.Property(e => e.CurrencyFactor)
                .HasComment("Faktor zur Umrechnung in die angegeben Währung")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.CurrencyIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("ISO-Code der Währung")
                .HasColumnName("CurrencyISO");
            entity.Property(e => e.CustomerInternalId).HasComment("Interne ID des Kunden");
            entity.Property(e => e.ExemptFromVat)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasComment("Art der Steuerbefreiung in der Rechnung")
                .HasColumnName("ExemptFromVAT");
            entity.Property(e => e.FinancingCosts)
                .HasComment("Finanzierungskosten")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.HasInvoiceAsPdf)
                .HasComment("Rechnung als PDF vorhanden")
                .HasColumnName("HasInvoiceAsPDF");
            entity.Property(e => e.InternalId).HasComment("Interne ID der Rechnung");
            entity.Property(e => e.InvoiceData).HasComment("Angehängte Dokumente der Rechnung");
            entity.Property(e => e.InvoiceNote).HasComment("Hinweis in der Rechnung");
            entity.Property(e => e.InvoiceNumber)
                .HasMaxLength(50)
                .HasComment("Nummer der Rechnung");
            entity.Property(e => e.InvoicePrintingText).HasComment("Drucktext zur Rechnung");
            entity.Property(e => e.IsExternalInvoice).HasComment("Ist eine externe Rechnung");
            entity.Property(e => e.LanguageIso)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("ISO-Code der Sprache der Rechnung")
                .HasColumnName("LanguageISO");
            entity.Property(e => e.MailingDate)
                .HasComment("Maildatum der Rechnung")
                .HasColumnType("datetime");
            entity.Property(e => e.MandateReference)
                .HasMaxLength(30)
                .HasComment("Mandatsreferenz des Kunden zur Rechnung");
            entity.Property(e => e.OpenGrossPrice)
                .HasComment("Offene Gesamtsumme der Rechnung")
                .HasColumnType("decimal(27, 13)");
            entity.Property(e => e.OperationId)
                .HasMaxLength(58)
                .HasComment("Vorgangs-ID der Rechnung");
            entity.Property(e => e.PaymentMethodName)
                .HasMaxLength(255)
                .HasComment("Name der Zahlungsart");
            entity.Property(e => e.PrintingDate)
                .HasComment("Druckdatum der Rechnung")
                .HasColumnType("datetime");
            entity.Property(e => e.ServiceDate)
                .HasComment("Lieferdatum der Rechnung")
                .HasColumnType("datetime");
            entity.Property(e => e.ShipFromCountryCurrencyFactor)
                .HasComment("Währungsfaktor des Versandlandes")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShipFromCountryCurrencyIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Faktor zur Umrechnung in die Versandlandwährung")
                .HasColumnName("ShipFromCountryCurrencyISO");
            entity.Property(e => e.ShipFromCountryIso)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Währung des Versandlandes")
                .HasColumnName("ShipFromCountryISO");
            entity.Property(e => e.ShippingMethodInternalId).HasComment("Interne ID der Versandart der Rechnung");
            entity.Property(e => e.ShopName)
                .HasMaxLength(255)
                .HasComment("Name des Shops der Bestellung");
            entity.Property(e => e.TaxCountryCurrencyFactor)
                .HasComment("Währungsfaktor des Steuerlandes")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.TaxCountryCurrencyIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("ISO-Code der Währung des Steuerlandes der Rechnung")
                .HasColumnName("TaxCountryCurrencyISO");
            entity.Property(e => e.TaxCountryIso)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("ISO-Code des Steuerlandes der Rechnung")
                .HasColumnName("TaxCountryISO");
            entity.Property(e => e.TermOfPayment).HasComment("Zahlungsziel in Tagen für die Rechnung");
            entity.Property(e => e.TotalGrossPrice)
                .HasComment("Zu zahlender Gesamtbruttopreis der Rechnung")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.TotalNetPrice)
                .HasComment("Gesamtnettopreis der Rechnung")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.UseNetPrice).HasComment("Nettopreise benutzen (Kundengruppe)");
            entity.Property(e => e.UserInternalId).HasComment("Interne ID des (JTL-Wawi) Bearbeiters der Rechnung");
            entity.Property(e => e.ValueAddedTaxId)
                .HasMaxLength(25)
                .HasComment("Ust-IdNr. der Rechnung");
            entity.Property(e => e.ValutaDate)
                .HasComment("Erstelldatum der Rechnung")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<InvoiceBillToAddress>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("InvoiceBillToAddress", "Report");

            entity.Property(e => e.Address).HasMaxLength(255);
            entity.Property(e => e.AddressSupplement).HasMaxLength(255);
            entity.Property(e => e.City).HasMaxLength(255);
            entity.Property(e => e.Company).HasMaxLength(128);
            entity.Property(e => e.CompanySupplement).HasMaxLength(60);
            entity.Property(e => e.Country).HasMaxLength(255);
            entity.Property(e => e.CountryIso)
                .HasMaxLength(5)
                .HasColumnName("CountryISO");
            entity.Property(e => e.CustomerNumber).HasMaxLength(30);
            entity.Property(e => e.EmailAddress).HasMaxLength(255);
            entity.Property(e => e.Fax).HasMaxLength(30);
            entity.Property(e => e.FirstName).HasMaxLength(255);
            entity.Property(e => e.LastName).HasMaxLength(255);
            entity.Property(e => e.MobilePhone).HasMaxLength(30);
            entity.Property(e => e.Phone).HasMaxLength(30);
            entity.Property(e => e.PostalCode).HasMaxLength(24);
            entity.Property(e => e.Salutation).HasMaxLength(30);
            entity.Property(e => e.State).HasMaxLength(255);
            entity.Property(e => e.Title).HasMaxLength(64);
            entity.Property(e => e.ValueAddedTaxId).HasMaxLength(20);
        });

        modelBuilder.Entity<InvoiceCorrection>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("InvoiceCorrection", "Report");

            entity.Property(e => e.CanceledInvoiceCorrectionCreationDate).HasColumnType("datetime");
            entity.Property(e => e.CanceledInvoiceCorrectionNumber).HasMaxLength(50);
            entity.Property(e => e.CancellationType)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.CompanyInternalId).HasComment("Interne ID der Firma");
            entity.Property(e => e.CountryIso)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasComment("ISO-Code des Ziellandes der Rechnungskorrektur")
                .HasColumnName("CountryISO");
            entity.Property(e => e.CreationDate)
                .HasComment("Erstelldatum der Rechnungskorrektur")
                .HasColumnType("datetime");
            entity.Property(e => e.CurrencyFactor)
                .HasComment("Faktor zur Umrechnung der Währung")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.CurrencyIso)
                .HasMaxLength(20)
                .HasComment("ISO-Code der Währungsangabe")
                .HasColumnName("CurrencyISO");
            entity.Property(e => e.CustomerInternalId).HasComment("Interne ID des Kunden");
            entity.Property(e => e.ExemptFromVat)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasComment("Art der Steuerbefreiung in der Rechnungskorrektur")
                .HasColumnName("ExemptFromVAT");
            entity.Property(e => e.InternalId).HasComment("Interne ID der Rechnungskorrektur");
            entity.Property(e => e.InvoiceCorrectionNumber)
                .HasMaxLength(50)
                .HasComment("Nummer der Rechnungskorrektur");
            entity.Property(e => e.InvoiceCorrectionText).HasComment("Text zur Rechnungskorrektur");
            entity.Property(e => e.InvoiceInternalId).HasComment("Interne ID der Rechnung zur Rechnungskorrektur");
            entity.Property(e => e.InvoiceNumber)
                .HasMaxLength(50)
                .HasComment("Nummer der Rechnung");
            entity.Property(e => e.InvoiceValutaDate).HasColumnType("datetime");
            entity.Property(e => e.LanguageInternalId).HasComment("Interne ID der Sprache");
            entity.Property(e => e.LanguageIso)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("ISO-Code der Sprache der Rechnungskorrektur")
                .HasColumnName("LanguageISO");
            entity.Property(e => e.MailingDate)
                .HasComment("Maildatum der Rechnungskorrektur")
                .HasColumnType("datetime");
            entity.Property(e => e.OperationId)
                .HasMaxLength(68)
                .HasComment("Vargangs-ID der Rechnungskorrektur");
            entity.Property(e => e.PlatformInternalId).HasComment("Interne ID der Plattform");
            entity.Property(e => e.Price)
                .HasComment("Preis der Rechnungskorrektur")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.PrintingDate)
                .HasComment("Druckdatum der Rechnungskorrektur")
                .HasColumnType("datetime");
            entity.Property(e => e.ShipFromCountryCurrencyFactor)
                .HasComment("Faktor zur Umrechnung der Versandlandwährung")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShipFromCountryCurrencyIso)
                .HasMaxLength(20)
                .HasComment("ISO-Code der Versandlandwährung")
                .HasColumnName("ShipFromCountryCurrencyISO");
            entity.Property(e => e.ShipFromCountryIso)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("ISO des Versandlandes der Rechnungskorrektur")
                .HasColumnName("ShipFromCountryISO");
            entity.Property(e => e.ShortText)
                .HasMaxLength(255)
                .HasComment("Kurzer Drucktext zur Rechnungskorrektur");
            entity.Property(e => e.Status)
                .HasMaxLength(255)
                .HasComment("Status der Rechnungskorrektur");
            entity.Property(e => e.TaxCountryCurrencyFactor)
                .HasComment("Währungsfaktor des Steuerlandes der Rechnungskorrektur")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.TaxCountryCurrencyIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("ISO-Code der Währung des Steuerlandes der Rechnungskorrektur")
                .HasColumnName("TaxCountryCurrencyISO");
            entity.Property(e => e.TaxCountryIso)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("ISO-Code des Steuerlandes der Rechnungskorrektur")
                .HasColumnName("TaxCountryISO");
            entity.Property(e => e.Text)
                .HasMaxLength(4000)
                .HasComment("Drucktext zur Rechnungskorrektur");
            entity.Property(e => e.TotalGrossPrice)
                .HasComment("Gesamtbruttopreis der Rechnungskorrektur")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.TotalNetPrice)
                .HasComment("Gesamtnettopreis der Rechnungskorrektur")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.UseNetPrice).HasComment("Nettopreis benutzen (Kundengruppe)");
            entity.Property(e => e.UserInternalId).HasComment("Interne ID des Benutzers");
            entity.Property(e => e.ValueAddedTaxId)
                .HasMaxLength(25)
                .HasComment("Umsatzsteuer-ID der Rechnungskorrektur");
        });

        modelBuilder.Entity<InvoiceCorrectionBillToAddress>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("InvoiceCorrectionBillToAddress", "Report");

            entity.Property(e => e.Address).HasMaxLength(255);
            entity.Property(e => e.AddressSupplement).HasMaxLength(255);
            entity.Property(e => e.City).HasMaxLength(255);
            entity.Property(e => e.Company).HasMaxLength(128);
            entity.Property(e => e.CompanySupplement).HasMaxLength(60);
            entity.Property(e => e.Country).HasMaxLength(255);
            entity.Property(e => e.CountryIso)
                .HasMaxLength(5)
                .HasColumnName("CountryISO");
            entity.Property(e => e.CustomerNumber).HasMaxLength(30);
            entity.Property(e => e.EmailAddress).HasMaxLength(255);
            entity.Property(e => e.Fax).HasMaxLength(30);
            entity.Property(e => e.FirstName).HasMaxLength(255);
            entity.Property(e => e.LastName).HasMaxLength(255);
            entity.Property(e => e.MobilePhone).HasMaxLength(30);
            entity.Property(e => e.Phone).HasMaxLength(30);
            entity.Property(e => e.PostalCode).HasMaxLength(24);
            entity.Property(e => e.Salutation).HasMaxLength(30);
            entity.Property(e => e.State).HasMaxLength(255);
            entity.Property(e => e.Title).HasMaxLength(64);
            entity.Property(e => e.ValueAddedTaxId).HasMaxLength(20);
        });

        modelBuilder.Entity<InvoiceCorrectionPosition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("InvoiceCorrectionPosition", "Report");

            entity.Property(e => e.BillOfMaterialsPosition)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasComment("Interne ID für Stücklistenpositionen");
            entity.Property(e => e.BillOfMaterialsPositionParentId).HasComment("Typ der Vaterartikel-ID des Stücklistenangebots der Rechnungskorrekturposition");
            entity.Property(e => e.ConfigurationItemInternalId).HasComment("Interne ID des Konfigurationsartikels in der Rechnungskorrekturposition");
            entity.Property(e => e.ConfiguratorPosition)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasComment("Gibt den Typ der Konfiguratorposition an");
            entity.Property(e => e.ConfiguratorPositionParentId).HasComment("Typ der Vaterartikel-ID des Konfigurationsangebots der Rechnungskorrekturposition");
            entity.Property(e => e.DiscountRate)
                .HasComment("Rabatt in Prozent")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.DiscountValue)
                .HasComment("Rabattbetrag")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Ean)
                .HasMaxLength(255)
                .HasComment("Internationale Artikelnummer")
                .HasColumnName("EAN");
            entity.Property(e => e.GrossPricePerUnit)
                .HasComment("Bruttopreis Einzel pro Artikel")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.IndividualShippingWeight)
                .HasComment("Einzel Versandgewicht des Artikels")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.IndividualWeight)
                .HasComment("Einzelgewicht des Artikels")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.InternalId).HasComment("Interne ID der Rechnungskorrektur");
            entity.Property(e => e.InvoiceCorrectionInternalId).HasComment("Interne ID der Rechnungskorrektur");
            entity.Property(e => e.ItemDescriptionBrief).HasComment("Kurze Beschreibung der Position der Rechnungskorrektur");
            entity.Property(e => e.ItemDescriptionDetailed).HasComment("Ausführliche Artikelbeschreibung der Position der Rechnungskorrektur");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasComment("Drucktext der Position");
            entity.Property(e => e.NetPricePerUnit)
                .HasComment("Nettopreis Einzel pro Artikel")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Note).HasComment("Hinweis in den Rechnungskorrekturpositionen");
            entity.Property(e => e.PositionType)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Typ der Position");
            entity.Property(e => e.ProductInternalId).HasComment("Interne ID des Artikels der Position");
            entity.Property(e => e.Quantity)
                .HasComment("Anzahl des Artikels in der Position")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Sku)
                .HasMaxLength(100)
                .HasComment("Artikelnummer des Artikels in der Position")
                .HasColumnName("SKU");
            entity.Property(e => e.Sorting).HasComment("Sortierung Rechnungskorrekturposition");
            entity.Property(e => e.TotalGrossPrice)
                .HasComment("Bruttopreis Gesamt über die Anzahl der Artikel in der Position")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.TotalNetPrice)
                .HasComment("Nettopreis Gesamt über die Anzahl der Artikel in der Position")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.TotalShippingWeight)
                .HasComment("Gesamt Versandgewicht des Artikels über die Anzahl in der Position")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.TotalWeight)
                .HasComment("Gesamtgewicht über die Anzahl des Artikels in der Position")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Unit)
                .HasMaxLength(255)
                .HasComment("Einheit der Rechnungskorrekturposition");
            entity.Property(e => e.Vatrate)
                .HasComment("MwSt in Prozent")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("VATRate");
            entity.Property(e => e.Vatvalue)
                .HasComment("MwSt Betrag pro Position")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("VATValue");
        });

        modelBuilder.Entity<InvoiceCorrectionPositionConfiguration>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("InvoiceCorrectionPositionConfiguration", "Report");

            entity.Property(e => e.AdditionalNetPrice).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.ValueText).HasMaxLength(255);
        });

        modelBuilder.Entity<InvoiceCorrectionPositionDeliveryDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("InvoiceCorrectionPositionDeliveryDetails", "Report");

            entity.Property(e => e.BatchNumber).HasMaxLength(255);
            entity.Property(e => e.BestBeforeDate).HasColumnType("datetime");
            entity.Property(e => e.Quantity).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.SerialNumber).HasMaxLength(128);
        });

        modelBuilder.Entity<InvoicePayment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("InvoicePayments", "Report");

            entity.Property(e => e.ExternalTransactionId).HasMaxLength(255);
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.Note).HasMaxLength(2000);
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentMethod).HasMaxLength(255);
            entity.Property(e => e.PaymentType)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.StandardChartOfAccountsManual).HasMaxLength(255);
            entity.Property(e => e.Value).HasColumnType("decimal(25, 13)");
        });

        modelBuilder.Entity<InvoicePaymentInformation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("InvoicePaymentInformation", "Report");

            entity.Property(e => e.DebitAccountHolder).HasMaxLength(255);
            entity.Property(e => e.DebitBank).HasMaxLength(255);
            entity.Property(e => e.DebitBic)
                .HasMaxLength(32)
                .HasColumnName("DebitBIC");
            entity.Property(e => e.DebitCreditorId).HasMaxLength(35);
            entity.Property(e => e.DebitDueDate).HasColumnType("datetime");
            entity.Property(e => e.DebitEndToEndId).HasMaxLength(50);
            entity.Property(e => e.DebitIban)
                .HasMaxLength(34)
                .HasColumnName("DebitIBAN");
            entity.Property(e => e.DebitMandateReference).HasMaxLength(30);
            entity.Property(e => e.DebitSubject).HasMaxLength(58);
            entity.Property(e => e.FinancingCosts).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.PayPalId).HasMaxLength(250);
            entity.Property(e => e.PayeeAccountHolder).HasMaxLength(255);
            entity.Property(e => e.PayeeBank).HasMaxLength(255);
            entity.Property(e => e.PayeeBic)
                .HasMaxLength(32)
                .HasColumnName("PayeeBIC");
            entity.Property(e => e.PayeeDueDate).HasColumnType("datetime");
            entity.Property(e => e.PayeeEndToEndId).HasMaxLength(50);
            entity.Property(e => e.PayeeIban)
                .HasMaxLength(34)
                .HasColumnName("PayeeIBAN");
            entity.Property(e => e.PayeeSubject).HasMaxLength(58);
            entity.Property(e => e.PaymentMethodType)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.TransferAccountHolder).HasMaxLength(255);
            entity.Property(e => e.TransferBank).HasMaxLength(50);
            entity.Property(e => e.TransferBic)
                .HasMaxLength(64)
                .HasColumnName("TransferBIC");
            entity.Property(e => e.TransferDueDate).HasColumnType("datetime");
            entity.Property(e => e.TransferEndToEndId).HasMaxLength(50);
            entity.Property(e => e.TransferIban)
                .HasMaxLength(64)
                .HasColumnName("TransferIBAN");
            entity.Property(e => e.TransferSubject).HasMaxLength(58);
        });

        modelBuilder.Entity<InvoicePosition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("InvoicePosition", "Report");

            entity.Property(e => e.AmazonCustomJson).HasColumnName("AmazonCustomJSON");
            entity.Property(e => e.BillOfMaterialsPosition)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasComment("Stücklistenposition");
            entity.Property(e => e.BillOfMaterialsPositionParentId).HasComment("Typ der Vaterartikel-ID des Stücklistenangebots der Rechnungskorrekturposition");
            entity.Property(e => e.ConfigurationItemInternalId).HasComment("Interne ID des Konfigurationsartikels");
            entity.Property(e => e.ConfiguratorPosition)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasComment("Gibt den Typ der Konfiguratorposition an");
            entity.Property(e => e.ConfiguratorPositionParentId).HasComment("Typ der Vaterartikel-ID des Konfigurationsangebots derRechnungskorrekturposition");
            entity.Property(e => e.DiscountRate)
                .HasComment("Rabatt in Prozent")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.DiscountValue)
                .HasComment("Betrag des Rabatts")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Ean)
                .HasMaxLength(255)
                .HasComment("Internationale Artikelnummer der Rechnungskorrekturposition")
                .HasColumnName("EAN");
            entity.Property(e => e.GrossPricePerUnit)
                .HasComment("Einzelbruttopreis der Position")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.IndividualShippingWeight)
                .HasComment("Einzelversandgewicht des Artikels")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.IndividualWeight)
                .HasComment("Einzelgewicht des Artikels")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.InternalId).HasComment("Interne ID der Rechnung");
            entity.Property(e => e.InvoiceInternalId).HasComment("Interne ID der Rechnung zur Rechnungsposition");
            entity.Property(e => e.ItemDescriptionBrief).HasComment("Kurze Artikelbeschreibung");
            entity.Property(e => e.ItemDescriptionDetailed).HasComment("Lange Artikelbeschreibung");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasComment("Text zur Artikelposition");
            entity.Property(e => e.NetPricePerUnit)
                .HasComment("Einzelnettopreis der Position")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Note).HasComment("Hinweis zur Rechnungsposition");
            entity.Property(e => e.PositionType)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Gibt den Positionstyp an");
            entity.Property(e => e.ProductInternalId).HasComment("Interne ID des Artikels der Position");
            entity.Property(e => e.PurchaseNetPrice)
                .HasComment("Netto Einkaufspreis der Position")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Quantity)
                .HasComment("Anzahl pro Position")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.RevenueAccount)
                .HasMaxLength(10)
                .HasComment("Erlöskonto zur Rechnungsposition");
            entity.Property(e => e.Sku)
                .HasMaxLength(100)
                .HasComment("Artikelnummer zu der Position")
                .HasColumnName("SKU");
            entity.Property(e => e.Sorting).HasComment("Gibt die Sortierung der Positionen an");
            entity.Property(e => e.TotalGrossPrice)
                .HasComment("Gesamtbruttopreis über die Anzahl in der Position")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.TotalNetPrice)
                .HasComment("Gesamtnettopreis über die Anzahl in der Position")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.TotalShippingWeight)
                .HasComment("Gesamtversandgewicht der Position")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.TotalWeight)
                .HasComment("Gesamtgewicht der Position")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Unit)
                .HasMaxLength(255)
                .HasComment("Einheit des Artikels der Position");
            entity.Property(e => e.Vatrate)
                .HasComment("MwSt Satz in Prozent")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("VATRate");
            entity.Property(e => e.Vatvalue)
                .HasComment("Betrag der MwSt")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("VATValue");
        });

        modelBuilder.Entity<InvoicePositionConfiguration>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("InvoicePositionConfiguration", "Report");

            entity.Property(e => e.AdditionalNetPrice).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.ValueText).HasMaxLength(255);
        });

        modelBuilder.Entity<InvoicePositionDeliveryDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("InvoicePositionDeliveryDetails", "Report");

            entity.Property(e => e.BatchNumber).HasMaxLength(255);
            entity.Property(e => e.BestBeforeDate).HasColumnType("datetime");
            entity.Property(e => e.Quantity).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.SerialNumber).HasMaxLength(128);
        });

        modelBuilder.Entity<InvoiceShipToAddress>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("InvoiceShipToAddress", "Report");

            entity.Property(e => e.Address).HasMaxLength(255);
            entity.Property(e => e.AddressSupplement).HasMaxLength(255);
            entity.Property(e => e.City).HasMaxLength(255);
            entity.Property(e => e.Company).HasMaxLength(128);
            entity.Property(e => e.CompanySupplement).HasMaxLength(60);
            entity.Property(e => e.Country).HasMaxLength(255);
            entity.Property(e => e.CountryIso)
                .HasMaxLength(5)
                .HasColumnName("CountryISO");
            entity.Property(e => e.CustomerNumber).HasMaxLength(30);
            entity.Property(e => e.EmailAddress).HasMaxLength(255);
            entity.Property(e => e.Fax).HasMaxLength(30);
            entity.Property(e => e.FirstName).HasMaxLength(255);
            entity.Property(e => e.LastName).HasMaxLength(255);
            entity.Property(e => e.MobilePhone).HasMaxLength(30);
            entity.Property(e => e.Phone).HasMaxLength(30);
            entity.Property(e => e.PostalCode).HasMaxLength(24);
            entity.Property(e => e.Salutation).HasMaxLength(30);
            entity.Property(e => e.State).HasMaxLength(255);
            entity.Property(e => e.Title).HasMaxLength(64);
            entity.Property(e => e.ValueAddedTaxId).HasMaxLength(20);
        });

        modelBuilder.Entity<Language>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Language", "BI");

            entity.Property(e => e.Iso2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ISO2");
            entity.Property(e => e.Iso3)
                .HasMaxLength(3)
                .HasColumnName("ISO3");
            entity.Property(e => e.LanguageId).HasColumnName("LanguageID");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.NameGerman).HasMaxLength(64);
        });

        modelBuilder.Entity<Lieferantenfaktoren>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Lieferantenfaktoren", "Statistik");

            entity.Property(e => e.CFirma)
                .HasMaxLength(255)
                .HasColumnName("cFirma");
            entity.Property(e => e.Faktor)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("FAKTOR");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
        });

        modelBuilder.Entity<LvAbonnement>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvAbonnements", "Kunde");

            entity.Property(e => e.CBestellNr)
                .HasMaxLength(50)
                .HasColumnName("cBestellNr");
            entity.Property(e => e.CWaehrung)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWaehrung");
            entity.Property(e => e.DEnddatum)
                .HasColumnType("datetime")
                .HasColumnName("dEnddatum");
            entity.Property(e => e.DNextFaelligkeit)
                .HasColumnType("datetime")
                .HasColumnName("dNextFaelligkeit");
            entity.Property(e => e.DStartdatum)
                .HasColumnType("datetime")
                .HasColumnName("dStartdatum");
            entity.Property(e => e.FFaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fFaktor");
            entity.Property(e => e.FGutschrift)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGutschrift");
            entity.Property(e => e.FWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWert");
            entity.Property(e => e.FZahlung)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZahlung");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.NZahlungsziel).HasColumnName("nZahlungsziel");
            entity.Property(e => e.Zahlungsart).HasMaxLength(255);
        });

        modelBuilder.Entity<LvAbonnementsposition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvAbonnementsposition", "Verkauf");

            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CErloeskonto)
                .HasMaxLength(10)
                .HasColumnName("cErloeskonto");
            entity.Property(e => e.CHinweis)
                .HasMaxLength(2000)
                .HasColumnName("cHinweis");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.DNextFaelligkeit)
                .HasColumnType("datetime")
                .HasColumnName("dNextFaelligkeit");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.FAufEinkaufsliste)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAufEinkaufsliste");
            entity.Property(e => e.FAuslieferungGesperrt)
                .HasColumnType("decimal(25, 4)")
                .HasColumnName("fAuslieferungGesperrt");
            entity.Property(e => e.FLagerbestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLagerbestand");
            entity.Property(e => e.FMwSt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwSt");
            entity.Property(e => e.FVerfuegbar)
                .HasColumnType("numeric(25, 4)")
                .HasColumnName("fVerfuegbar");
            entity.Property(e => e.FVerfuegbarGesperrt)
                .HasColumnType("decimal(25, 4)")
                .HasColumnName("fVerfuegbarGesperrt");
            entity.Property(e => e.FVkNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVkNetto");
            entity.Property(e => e.FVkbrutto)
                .HasColumnType("decimal(38, 12)")
                .HasColumnName("fVKBrutto");
            entity.Property(e => e.FVknettoGesamt)
                .HasColumnType("decimal(28, 4)")
                .HasColumnName("fVKNettoGesamt");
            entity.Property(e => e.FZulauf)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZulauf");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KAuftragPosition).HasColumnName("kAuftragPosition");
            entity.Property(e => e.KKonfigurationsVater).HasColumnName("kKonfigurationsVater");
            entity.Property(e => e.KStuecklistenVater).HasColumnName("kStuecklistenVater");
            entity.Property(e => e.NIntervall).HasColumnName("nIntervall");
            entity.Property(e => e.NIntervallTyp).HasColumnName("nIntervallTyp");
            entity.Property(e => e.NIstFaellig).HasColumnName("nIstFaellig");
            entity.Property(e => e.NLagerAktiv).HasColumnName("nLagerAktiv");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<LvAbonnementsverwaltung>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvAbonnementsverwaltung", "Verkauf");

            entity.Property(e => e.CAbonnementsnummer)
                .HasMaxLength(50)
                .HasColumnName("cAbonnementsnummer");
            entity.Property(e => e.CAnmerkung).HasColumnName("cAnmerkung");
            entity.Property(e => e.CBenutzername)
                .HasMaxLength(255)
                .HasColumnName("cBenutzername");
            entity.Property(e => e.CFirmenname)
                .HasMaxLength(255)
                .HasColumnName("cFirmenname");
            entity.Property(e => e.CKundeNr)
                .HasMaxLength(30)
                .HasColumnName("cKundeNr");
            entity.Property(e => e.CKundengruppe)
                .HasMaxLength(255)
                .HasColumnName("cKundengruppe");
            entity.Property(e => e.CLieferadresseAdresszusatz)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseAdresszusatz");
            entity.Property(e => e.CLieferadresseAnrede)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseAnrede");
            entity.Property(e => e.CLieferadresseBundesland)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseBundesland");
            entity.Property(e => e.CLieferadresseFax)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseFax");
            entity.Property(e => e.CLieferadresseFirma)
                .HasMaxLength(128)
                .HasColumnName("cLieferadresseFirma");
            entity.Property(e => e.CLieferadresseLand)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseLand");
            entity.Property(e => e.CLieferadresseLandIso)
                .HasMaxLength(5)
                .HasColumnName("cLieferadresseLandIso");
            entity.Property(e => e.CLieferadresseMail)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseMail");
            entity.Property(e => e.CLieferadresseMobilTelefon)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseMobilTelefon");
            entity.Property(e => e.CLieferadresseNachname)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseNachname");
            entity.Property(e => e.CLieferadresseOrt)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseOrt");
            entity.Property(e => e.CLieferadressePlz)
                .HasMaxLength(24)
                .HasColumnName("cLieferadressePlz");
            entity.Property(e => e.CLieferadressePostId)
                .HasMaxLength(255)
                .HasColumnName("cLieferadressePostId");
            entity.Property(e => e.CLieferadresseStrasse)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseStrasse");
            entity.Property(e => e.CLieferadresseTelefon)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseTelefon");
            entity.Property(e => e.CLieferadresseTitel)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseTitel");
            entity.Property(e => e.CLieferadresseVorname)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseVorname");
            entity.Property(e => e.CLieferadresseZusatz)
                .HasMaxLength(60)
                .HasColumnName("cLieferadresseZusatz");
            entity.Property(e => e.CRechnungsadresseAdresszusatz)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseAdresszusatz");
            entity.Property(e => e.CRechnungsadresseAnrede)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseAnrede");
            entity.Property(e => e.CRechnungsadresseBundesland)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseBundesland");
            entity.Property(e => e.CRechnungsadresseFax)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseFax");
            entity.Property(e => e.CRechnungsadresseFirma)
                .HasMaxLength(128)
                .HasColumnName("cRechnungsadresseFirma");
            entity.Property(e => e.CRechnungsadresseLand)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseLand");
            entity.Property(e => e.CRechnungsadresseLandIso)
                .HasMaxLength(5)
                .HasColumnName("cRechnungsadresseLandIso");
            entity.Property(e => e.CRechnungsadresseMail)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseMail");
            entity.Property(e => e.CRechnungsadresseMobilTelefon)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseMobilTelefon");
            entity.Property(e => e.CRechnungsadresseNachname)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseNachname");
            entity.Property(e => e.CRechnungsadresseOrt)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseOrt");
            entity.Property(e => e.CRechnungsadressePlz)
                .HasMaxLength(24)
                .HasColumnName("cRechnungsadressePlz");
            entity.Property(e => e.CRechnungsadressePostId)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadressePostId");
            entity.Property(e => e.CRechnungsadresseStrasse)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseStrasse");
            entity.Property(e => e.CRechnungsadresseTelefon)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseTelefon");
            entity.Property(e => e.CRechnungsadresseTitel)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseTitel");
            entity.Property(e => e.CRechnungsadresseVorname)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseVorname");
            entity.Property(e => e.CRechnungsadresseZusatz)
                .HasMaxLength(60)
                .HasColumnName("cRechnungsadresseZusatz");
            entity.Property(e => e.CSonstiges).HasColumnName("cSonstiges");
            entity.Property(e => e.CStatustext)
                .HasMaxLength(255)
                .HasColumnName("cStatustext");
            entity.Property(e => e.CVersandartname)
                .HasMaxLength(255)
                .HasColumnName("cVersandartname");
            entity.Property(e => e.CVersandlandIso)
                .HasMaxLength(5)
                .HasColumnName("cVersandlandISO");
            entity.Property(e => e.CVersandlandWaehrung)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cVersandlandWaehrung");
            entity.Property(e => e.CWaehrung)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWaehrung");
            entity.Property(e => e.CZahlungsartname)
                .HasMaxLength(255)
                .HasColumnName("cZahlungsartname");
            entity.Property(e => e.CZahlungsmodulId)
                .HasMaxLength(255)
                .HasColumnName("cZahlungsmodulID");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DNextFaelligkeit)
                .HasColumnType("datetime")
                .HasColumnName("dNextFaelligkeit");
            entity.Property(e => e.FAuftragswertBrutto)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAuftragswertBrutto");
            entity.Property(e => e.FAuftragswertNetto)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAuftragswertNetto");
            entity.Property(e => e.FAuftragswertVersandland)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("fAuftragswertVersandland");
            entity.Property(e => e.FVersandlandWaehrungFaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVersandlandWaehrungFaktor");
            entity.Property(e => e.FWaehrungsfaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWaehrungsfaktor");
            entity.Property(e => e.FZusatzgewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZusatzgewicht");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBestellhinweis).HasColumnName("kBestellhinweis");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.KVersandart).HasColumnName("kVersandart");
            entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");
            entity.Property(e => e.NBeschreibung).HasColumnName("nBeschreibung");
            entity.Property(e => e.NIsBaldFaellig).HasColumnName("nIsBaldFaellig");
            entity.Property(e => e.NIsFaellig).HasColumnName("nIsFaellig");
            entity.Property(e => e.NSteuereinstellung).HasColumnName("nSteuereinstellung");
        });

        modelBuilder.Entity<LvAbrechnung>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvAbrechnung", "FulfillmentNetwork");

            entity.Property(e => e.CAbrechnungsNummer)
                .HasMaxLength(50)
                .HasColumnName("cAbrechnungsNummer");
            entity.Property(e => e.CAnmerkung).HasColumnName("cAnmerkung");
            entity.Property(e => e.CBenutzer)
                .HasMaxLength(255)
                .HasColumnName("cBenutzer");
            entity.Property(e => e.CHaendler)
                .HasMaxLength(128)
                .HasColumnName("cHaendler");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CVorname)
                .HasMaxLength(255)
                .HasColumnName("cVorname");
            entity.Property(e => e.DAbrechnungBis)
                .HasColumnType("datetime")
                .HasColumnName("dAbrechnungBis");
            entity.Property(e => e.DAbrechnungVon)
                .HasColumnType("datetime")
                .HasColumnName("dAbrechnungVon");
            entity.Property(e => e.DAuftragErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dAuftragErstellt");
            entity.Property(e => e.KAbrechnung).HasColumnName("kAbrechnung");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KFulfillmentLieferant).HasColumnName("kFulfillmentLieferant");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.NAktiveAbrechnung).HasColumnName("nAktiveAbrechnung");
            entity.Property(e => e.NAuftragErstellt).HasColumnName("nAuftragErstellt");
            entity.Property(e => e.NStorno).HasColumnName("nStorno");
        });

        modelBuilder.Entity<LvAbrechnungEinzelnachwei>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvAbrechnungEinzelnachweis", "FulfillmentNetwork");

            entity.Property(e => e.CHinweis)
                .HasMaxLength(4000)
                .HasColumnName("cHinweis");
            entity.Property(e => e.CName)
                .HasMaxLength(671)
                .HasColumnName("cName");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.KAbrechnung).HasColumnName("kAbrechnung");
            entity.Property(e => e.KAbrechnungEinzelnachweis).HasColumnName("kAbrechnungEinzelnachweis");
            entity.Property(e => e.KAbrechnungPos).HasColumnName("kAbrechnungPos");
            entity.Property(e => e.KObjektPk).HasColumnName("kObjektPk");
            entity.Property(e => e.NObjekt).HasColumnName("nObjekt");
        });

        modelBuilder.Entity<LvAbrechnungPositionen>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvAbrechnungPositionen", "FulfillmentNetwork");

            entity.Property(e => e.CArtikelnummer)
                .HasMaxLength(100)
                .HasColumnName("cArtikelnummer");
            entity.Property(e => e.CBezeichnung)
                .HasMaxLength(255)
                .HasColumnName("cBezeichnung");
            entity.Property(e => e.CEinheit)
                .HasMaxLength(255)
                .HasColumnName("cEinheit");
            entity.Property(e => e.CHinweis)
                .HasMaxLength(4000)
                .HasColumnName("cHinweis");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.FMwSt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwSt");
            entity.Property(e => e.FRabatt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabatt");
            entity.Property(e => e.FVkBrutto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVkBrutto");
            entity.Property(e => e.FVkBruttoGesamt)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fVkBruttoGesamt");
            entity.Property(e => e.FVkNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVkNetto");
            entity.Property(e => e.FVkNettoGesamt)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fVkNettoGesamt");
            entity.Property(e => e.KAbrechnung).HasColumnName("kAbrechnung");
            entity.Property(e => e.KAbrechnungPos)
                .ValueGeneratedOnAdd()
                .HasColumnName("kAbrechnungPos");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<LvAmazonAbgleichAngebote>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvAmazonAbgleichAngebote", "Amazon");

            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CArtikelName)
                .HasMaxLength(255)
                .HasColumnName("cArtikelName");
            entity.Property(e => e.CAsin1)
                .HasMaxLength(30)
                .HasColumnName("cAsin1");
            entity.Property(e => e.CEan)
                .HasMaxLength(255)
                .HasColumnName("cEan");
            entity.Property(e => e.CIsbn)
                .HasMaxLength(255)
                .HasColumnName("cIsbn");
            entity.Property(e => e.CItemname)
                .HasMaxLength(255)
                .HasColumnName("cItemname");
            entity.Property(e => e.CKommentar)
                .HasMaxLength(46)
                .IsUnicode(false)
                .HasColumnName("cKommentar");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CSellerSku)
                .HasMaxLength(100)
                .HasColumnName("cSellerSku");
            entity.Property(e => e.CUpc)
                .HasMaxLength(255)
                .HasColumnName("cUpc");
            entity.Property(e => e.CWaehrung)
                .HasMaxLength(20)
                .HasColumnName("cWaehrung");
            entity.Property(e => e.FPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPreis");
            entity.Property(e => e.FPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPrice");
            entity.Property(e => e.FVersandkosten)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVersandkosten");
            entity.Property(e => e.KAmazonAngebot)
                .HasMaxLength(610)
                .HasColumnName("kAmazonAngebot");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.NMaxBestand).HasColumnName("nMaxBestand");
            entity.Property(e => e.NPlattform).HasColumnName("nPlattform");
            entity.Property(e => e.NPreisBestandsAnpassung).HasColumnName("nPreisBestandsAnpassung");
            entity.Property(e => e.NQuantity).HasColumnName("nQuantity");
            entity.Property(e => e.NWirdAusSortimentEntfernt).HasColumnName("nWirdAusSortimentEntfernt");
        });

        modelBuilder.Entity<LvAmazonAbgleichBestellungPo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvAmazonAbgleichBestellungPos", "Amazon");

            entity.Property(e => e.CArtNr)
                .HasMaxLength(50)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CArtikelname)
                .HasMaxLength(255)
                .HasColumnName("cArtikelname");
            entity.Property(e => e.DShipdate)
                .HasColumnType("datetime")
                .HasColumnName("dShipdate");
            entity.Property(e => e.FItemPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fItemPrice");
            entity.Property(e => e.KAmazonBestellung).HasColumnName("kAmazonBestellung");
            entity.Property(e => e.KAmazonBestellungPos).HasColumnName("kAmazonBestellungPos");
            entity.Property(e => e.NQuantityPurchased).HasColumnName("nQuantityPurchased");
        });

        modelBuilder.Entity<LvAmazonAbgleichBestellungen>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvAmazonAbgleichBestellungen", "Amazon");

            entity.Property(e => e.CBillCity)
                .HasMaxLength(100)
                .HasColumnName("cBillCity");
            entity.Property(e => e.CBillCountry)
                .HasMaxLength(5)
                .HasColumnName("cBillCountry");
            entity.Property(e => e.CBillPostalcode)
                .HasMaxLength(20)
                .HasColumnName("cBillPostalcode");
            entity.Property(e => e.CBillState)
                .HasMaxLength(100)
                .HasColumnName("cBillState");
            entity.Property(e => e.CBilladdress1)
                .HasMaxLength(255)
                .HasColumnName("cBilladdress1");
            entity.Property(e => e.CBilladdress2)
                .HasMaxLength(255)
                .HasColumnName("cBilladdress2");
            entity.Property(e => e.CBilladdress3)
                .HasMaxLength(255)
                .HasColumnName("cBilladdress3");
            entity.Property(e => e.CBuyerEmail)
                .HasMaxLength(255)
                .HasColumnName("cBuyerEmail");
            entity.Property(e => e.CBuyerName)
                .HasMaxLength(255)
                .HasColumnName("cBuyerName");
            entity.Property(e => e.CBuyerPhonenumber)
                .HasMaxLength(50)
                .HasColumnName("cBuyerPhonenumber");
            entity.Property(e => e.CCurrency)
                .HasMaxLength(5)
                .HasColumnName("cCurrency");
            entity.Property(e => e.CItemPromotionId)
                .HasMaxLength(255)
                .HasColumnName("cItemPromotionId");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.COrderId)
                .HasMaxLength(30)
                .HasColumnName("cOrderId");
            entity.Property(e => e.CRecipientName)
                .HasMaxLength(255)
                .HasColumnName("cRecipientName");
            entity.Property(e => e.CShipAddress1)
                .HasMaxLength(255)
                .HasColumnName("cShipAddress1");
            entity.Property(e => e.CShipCity)
                .HasMaxLength(100)
                .HasColumnName("cShipCity");
            entity.Property(e => e.CShipCountry)
                .HasMaxLength(5)
                .HasColumnName("cShipCountry");
            entity.Property(e => e.CShipPhonenumber)
                .HasMaxLength(100)
                .HasColumnName("cShipPhonenumber");
            entity.Property(e => e.CShipPostalcode)
                .HasMaxLength(20)
                .HasColumnName("cShipPostalcode");
            entity.Property(e => e.CShipState)
                .HasMaxLength(100)
                .HasColumnName("cShipState");
            entity.Property(e => e.CShipaddress2)
                .HasMaxLength(255)
                .HasColumnName("cShipaddress2");
            entity.Property(e => e.CShipaddress3)
                .HasMaxLength(255)
                .HasColumnName("cShipaddress3");
            entity.Property(e => e.CShippromotionId)
                .HasMaxLength(50)
                .HasColumnName("cShippromotionId");
            entity.Property(e => e.CShipserviceleve)
                .HasMaxLength(30)
                .HasColumnName("cShipserviceleve");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DPaymentsDate)
                .HasColumnType("datetime")
                .HasColumnName("dPaymentsDate");
            entity.Property(e => e.DPurchaseDate)
                .HasColumnType("datetime")
                .HasColumnName("dPurchaseDate");
            entity.Property(e => e.FItemPromotionDiscount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fItemPromotionDiscount");
            entity.Property(e => e.KAmazonBestellung).HasColumnName("kAmazonBestellung");
            entity.Property(e => e.KUser).HasColumnName("kUser");
        });

        modelBuilder.Entity<LvAmazonAbrechnungsdaten>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvAmazonAbrechnungsdaten", "Amazon");

            entity.Property(e => e.Currency).HasMaxLength(10);
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DepositDate).HasColumnType("datetime");
            entity.Property(e => e.KMessageId).HasColumnName("kMessageId");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.ReportId).HasColumnName("ReportID");
            entity.Property(e => e.SettlementEndDate).HasColumnType("datetime");
            entity.Property(e => e.SettlementId).HasColumnName("SettlementID");
            entity.Property(e => e.SettlementStartDate).HasColumnType("datetime");
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Username).HasMaxLength(255);
        });

        modelBuilder.Entity<LvAmazonAbrechnungsdatenPo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvAmazonAbrechnungsdatenPos", "Amazon");

            entity.Property(e => e.AdjustmentId)
                .HasMaxLength(100)
                .HasColumnName("AdjustmentID");
            entity.Property(e => e.Amount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.AmountDescription).HasMaxLength(50);
            entity.Property(e => e.AmountType).HasMaxLength(30);
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.FulfillmentId)
                .HasMaxLength(20)
                .HasColumnName("FulfillmentID");
            entity.Property(e => e.KMessageId).HasColumnName("kMessageId");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.MarketplaceName).HasMaxLength(20);
            entity.Property(e => e.MerchantOrderId)
                .HasMaxLength(50)
                .HasColumnName("MerchantOrderID");
            entity.Property(e => e.MerchantOrderItemId)
                .HasMaxLength(50)
                .HasColumnName("MerchantOrderItemID");
            entity.Property(e => e.OrderId)
                .HasMaxLength(30)
                .HasColumnName("OrderID");
            entity.Property(e => e.OrderItemCode).HasMaxLength(30);
            entity.Property(e => e.PostedDateTime).HasColumnType("datetime");
            entity.Property(e => e.PromotionId)
                .HasMaxLength(30)
                .HasColumnName("PromotionID");
            entity.Property(e => e.SettlementId).HasColumnName("SettlementID");
            entity.Property(e => e.ShipmentId)
                .HasMaxLength(20)
                .HasColumnName("ShipmentID");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.TransactionType).HasMaxLength(30);
        });

        modelBuilder.Entity<LvAmazonAngebote>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvAmazonAngebote", "Amazon");

            entity.Property(e => e.CApaPreisabstandMaxFormel).HasColumnName("cApaPreisabstandMaxFormel");
            entity.Property(e => e.CApaPreisabstandMinFormel).HasColumnName("cApaPreisabstandMinFormel");
            entity.Property(e => e.CApaVorlageName)
                .HasMaxLength(100)
                .HasColumnName("cApaVorlageName");
            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CArtikelName)
                .HasMaxLength(255)
                .HasColumnName("cArtikelName");
            entity.Property(e => e.CAsin1)
                .HasMaxLength(30)
                .HasColumnName("cAsin1");
            entity.Property(e => e.CBarcode)
                .HasMaxLength(255)
                .HasColumnName("cBarcode");
            entity.Property(e => e.CConditionnote)
                .HasMaxLength(2000)
                .HasColumnName("cConditionnote");
            entity.Property(e => e.CConditiontype)
                .HasMaxLength(25)
                .HasColumnName("cConditiontype");
            entity.Property(e => e.CEinheit)
                .HasMaxLength(255)
                .HasColumnName("cEinheit");
            entity.Property(e => e.CFnsku)
                .HasMaxLength(50)
                .HasColumnName("cFnsku");
            entity.Property(e => e.CFulfilledNetwork)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("cFulfilledNetwork");
            entity.Property(e => e.CFulfillmentChannel)
                .HasMaxLength(20)
                .HasColumnName("cFulfillmentChannel");
            entity.Property(e => e.CHan)
                .HasMaxLength(255)
                .HasColumnName("cHan");
            entity.Property(e => e.CHersteller)
                .HasMaxLength(255)
                .HasColumnName("cHersteller");
            entity.Property(e => e.CIsbn)
                .HasMaxLength(255)
                .HasColumnName("cIsbn");
            entity.Property(e => e.CItemname)
                .HasMaxLength(255)
                .HasColumnName("cItemname");
            entity.Property(e => e.CPfUsername)
                .HasMaxLength(255)
                .HasColumnName("cPfUsername");
            entity.Property(e => e.CPlattformname)
                .HasMaxLength(30)
                .HasColumnName("cPlattformname");
            entity.Property(e => e.CSellerSku)
                .HasMaxLength(100)
                .HasColumnName("cSellerSku");
            entity.Property(e => e.CSteuercodeName)
                .HasMaxLength(40)
                .HasColumnName("cSteuercodeName");
            entity.Property(e => e.CUpc)
                .HasMaxLength(255)
                .HasColumnName("cUpc");
            entity.Property(e => e.CVersandgruppe)
                .HasMaxLength(50)
                .HasColumnName("cVersandgruppe");
            entity.Property(e => e.CWaehrung)
                .HasMaxLength(20)
                .HasColumnName("cWaehrung");
            entity.Property(e => e.CWarehouseConditiontype)
                .HasMaxLength(25)
                .HasColumnName("cWarehouseConditiontype");
            entity.Property(e => e.DLastSwitchFulfillmentTo)
                .HasColumnType("datetime")
                .HasColumnName("dLastSwitchFulfillmentTo");
            entity.Property(e => e.DOpendate)
                .HasColumnType("datetime")
                .HasColumnName("dOpendate");
            entity.Property(e => e.DRestockdate)
                .HasColumnType("datetime")
                .HasColumnName("dRestockdate");
            entity.Property(e => e.DSaleEnd)
                .HasColumnType("datetime")
                .HasColumnName("dSaleEnd");
            entity.Property(e => e.DSaleStart)
                .HasColumnType("datetime")
                .HasColumnName("dSaleStart");
            entity.Property(e => e.DSellerdaten)
                .HasColumnType("datetime")
                .HasColumnName("dSellerdaten");
            entity.Property(e => e.FAbstandPrice)
                .HasColumnType("decimal(26, 13)")
                .HasColumnName("fAbstandPrice");
            entity.Property(e => e.FAmazonVk)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAmazonVk");
            entity.Property(e => e.FApaAbverkaufAenderungMaxPreis)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fApaAbverkaufAenderungMaxPreis");
            entity.Property(e => e.FApaAbverkaufAenderungMaxPreisTyp).HasColumnName("fApaAbverkaufAenderungMaxPreisTyp");
            entity.Property(e => e.FApaAbverkaufAenderungMinPreis)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fApaAbverkaufAenderungMinPreis");
            entity.Property(e => e.FApaAbverkaufAenderungMinPreisTyp).HasColumnName("fApaAbverkaufAenderungMinPreisTyp");
            entity.Property(e => e.FApaMargensteigerungAenderungMaxPreis)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fApaMargensteigerungAenderungMaxPreis");
            entity.Property(e => e.FApaMargensteigerungAenderungMaxPreisTyp).HasColumnName("fApaMargensteigerungAenderungMaxPreisTyp");
            entity.Property(e => e.FApaMargensteigerungAenderungMinPreis)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fApaMargensteigerungAenderungMinPreis");
            entity.Property(e => e.FApaMargensteigerungAenderungMinPreisTyp).HasColumnName("fApaMargensteigerungAenderungMinPreisTyp");
            entity.Property(e => e.FApaMaxPreisAufschlagProzent)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fApaMaxPreisAufschlagProzent");
            entity.Property(e => e.FApaMinPreisAufschlagProzent)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fApaMinPreisAufschlagProzent");
            entity.Property(e => e.FApaPreisabstand)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fApaPreisabstand");
            entity.Property(e => e.FApamaxPreis)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fApamaxPreis");
            entity.Property(e => e.FApaminPreis)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fApaminPreis");
            entity.Property(e => e.FEbayPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEbayPreis");
            entity.Property(e => e.FEkNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEkNetto");
            entity.Property(e => e.FFactor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fFactor");
            entity.Property(e => e.FGewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGewicht");
            entity.Property(e => e.FLagerbestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLagerbestand");
            entity.Property(e => e.FPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPreis");
            entity.Property(e => e.FPreisseller1)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPreisseller1");
            entity.Property(e => e.FPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPrice");
            entity.Property(e => e.FReserviert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fReserviert");
            entity.Property(e => e.FSalePrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fSalePrice");
            entity.Property(e => e.FVerfuegbar)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVerfuegbar");
            entity.Property(e => e.FVerfuegbarExtern)
                .HasColumnType("decimal(26, 13)")
                .HasColumnName("fVerfuegbarExtern");
            entity.Property(e => e.FVerfuegbarExternOhneFba)
                .HasColumnType("decimal(27, 13)")
                .HasColumnName("fVerfuegbarExternOhneFba");
            entity.Property(e => e.FVersandkosten)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVersandkosten");
            entity.Property(e => e.FVersandseller1)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVersandseller1");
            entity.Property(e => e.FVkNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVkNetto");
            entity.Property(e => e.FVolume)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVolume");
            entity.Property(e => e.KAmazonAngebot)
                .HasMaxLength(610)
                .HasColumnName("kAmazonAngebot");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KSteuercode).HasColumnName("kSteuercode");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.NAngebotFehlerAnzahl).HasColumnName("nAngebotFehlerAnzahl");
            entity.Property(e => e.NApaAbverkaufAktiv).HasColumnName("nApaAbverkaufAktiv");
            entity.Property(e => e.NApaAbverkaufBestandBis).HasColumnName("nApaAbverkaufBestandBis");
            entity.Property(e => e.NApaMargensteigerungAktiv).HasColumnName("nApaMargensteigerungAktiv");
            entity.Property(e => e.NApaMargensteigerungBestandAb).HasColumnName("nApaMargensteigerungBestandAb");
            entity.Property(e => e.NApaNutzen).HasColumnName("nApaNutzen");
            entity.Property(e => e.NApaPreisabstandKalkulation).HasColumnName("nApaPreisabstandKalkulation");
            entity.Property(e => e.NB2bpreiseSenden).HasColumnName("nB2BPreiseSenden");
            entity.Property(e => e.NBearbeitungszeit).HasColumnName("nBearbeitungszeit");
            entity.Property(e => e.NBearbeitungszeitAnpassen).HasColumnName("nBearbeitungszeitAnpassen");
            entity.Property(e => e.NChangedPrice).HasColumnName("nChangedPrice");
            entity.Property(e => e.NChangedQuantity).HasColumnName("nChangedQuantity");
            entity.Property(e => e.NCondition).HasColumnName("nCondition");
            entity.Property(e => e.NDefaultFulfillmentChannelQuantity).HasColumnName("nDefaultFulfillmentChannelQuantity");
            entity.Property(e => e.NDelete).HasColumnName("nDelete");
            entity.Property(e => e.NFfbaQuantity).HasColumnName("nFfbaQuantity");
            entity.Property(e => e.NHasPrice).HasColumnName("nHasPrice");
            entity.Property(e => e.NIstApaPreisabstandProzentual).HasColumnName("nIstApaPreisabstandProzentual");
            entity.Property(e => e.NIstVater).HasColumnName("nIstVater");
            entity.Property(e => e.NLagerAktiv).HasColumnName("nLagerAktiv");
            entity.Property(e => e.NLagerKleinerNull).HasColumnName("nLagerKleinerNull");
            entity.Property(e => e.NLagerSenden).HasColumnName("nLagerSenden");
            entity.Property(e => e.NMaxBestand).HasColumnName("nMaxBestand");
            entity.Property(e => e.NPlattform).HasColumnName("nPlattform");
            entity.Property(e => e.NPreisUndBestandsaenderungenAusschliessen).HasColumnName("nPreisUndBestandsaenderungenAusschliessen");
            entity.Property(e => e.NQuantity).HasColumnName("nQuantity");
            entity.Property(e => e.NQuantityInboundShipped).HasColumnName("nQuantityInboundShipped");
            entity.Property(e => e.NQuantityInboundWorking).HasColumnName("nQuantityInboundWorking");
            entity.Property(e => e.NQuantityReceiving).HasColumnName("nQuantityReceiving");
            entity.Property(e => e.NQuantityReserved).HasColumnName("nQuantityReserved");
            entity.Property(e => e.NQuantityTotal).HasColumnName("nQuantityTotal");
            entity.Property(e => e.NQuantityUnsellable).HasColumnName("nQuantityUnsellable");
            entity.Property(e => e.NQuantityWarehouse).HasColumnName("nQuantityWarehouse");
            entity.Property(e => e.NRepricerStrategie).HasColumnName("nRepricerStrategie");
            entity.Property(e => e.NSwitchFulfillmentTo).HasColumnName("nSwitchFulfillmentTo");
        });

        modelBuilder.Entity<LvAmazonAufzuschaltendeAngebote>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvAmazonAufzuschaltendeAngebote", "Amazon");

            entity.Property(e => e.CAmazonVersandgruppe)
                .HasMaxLength(50)
                .HasColumnName("cAmazonVersandgruppe");
            entity.Property(e => e.CArtikelName)
                .HasMaxLength(255)
                .HasColumnName("cArtikelName");
            entity.Property(e => e.CArtikelnummerWawi)
                .HasMaxLength(100)
                .HasColumnName("cArtikelnummerWawi");
            entity.Property(e => e.CAsin)
                .HasMaxLength(255)
                .HasColumnName("cAsin");
            entity.Property(e => e.CConditionnote)
                .HasMaxLength(2000)
                .HasColumnName("cConditionnote");
            entity.Property(e => e.CEan)
                .HasMaxLength(255)
                .HasColumnName("cEan");
            entity.Property(e => e.CHan)
                .HasMaxLength(255)
                .HasColumnName("cHan");
            entity.Property(e => e.CIsbn)
                .HasMaxLength(255)
                .HasColumnName("cIsbn");
            entity.Property(e => e.CLetzerFehler).HasColumnName("cLetzerFehler");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CPfUsername)
                .HasMaxLength(255)
                .HasColumnName("cPfUsername");
            entity.Property(e => e.CSellerSku)
                .HasMaxLength(100)
                .HasColumnName("cSellerSku");
            entity.Property(e => e.CUpc)
                .HasMaxLength(255)
                .HasColumnName("cUpc");
            entity.Property(e => e.CWaehrung)
                .HasMaxLength(20)
                .HasColumnName("cWaehrung");
            entity.Property(e => e.FPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPrice");
            entity.Property(e => e.FVerfuegbar)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVerfuegbar");
            entity.Property(e => e.KAmazonAngebotNeu)
                .HasMaxLength(610)
                .HasColumnName("kAmazonAngebotNeu");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.NCondition).HasColumnName("nCondition");
            entity.Property(e => e.NFulfillmentChannel).HasColumnName("nFulfillmentChannel");
            entity.Property(e => e.NPlattform).HasColumnName("nPlattform");
            entity.Property(e => e.NProductIdType).HasColumnName("nProductIdType");
            entity.Property(e => e.NQuantity).HasColumnName("nQuantity");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<LvAmazonBestellungPo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvAmazonBestellungPos", "Amazon");

            entity.Property(e => e.CArtNr)
                .HasMaxLength(50)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CCarrier)
                .HasMaxLength(20)
                .HasColumnName("cCarrier");
            entity.Property(e => e.CCustomUrl)
                .HasMaxLength(255)
                .HasColumnName("cCustomUrl");
            entity.Property(e => e.CErrorMessage)
                .HasMaxLength(2000)
                .HasColumnName("cErrorMessage");
            entity.Property(e => e.CFulfillmentCenterId)
                .HasMaxLength(20)
                .HasColumnName("cFulfillmentCenterId");
            entity.Property(e => e.CFulfillmentChannel)
                .HasMaxLength(20)
                .HasColumnName("cFulfillmentChannel");
            entity.Property(e => e.CGeschenkVerpackungstyp)
                .HasMaxLength(50)
                .HasColumnName("cGeschenkVerpackungstyp");
            entity.Property(e => e.CGrusstext)
                .HasMaxLength(255)
                .HasColumnName("cGrusstext");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CTrackingNumber)
                .HasMaxLength(50)
                .HasColumnName("cTrackingNumber");
            entity.Property(e => e.DEstimatedArrivalDate)
                .HasColumnType("datetime")
                .HasColumnName("dEstimatedArrivalDate");
            entity.Property(e => e.FGeschenkVerpackungskosten)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGeschenkVerpackungskosten");
            entity.Property(e => e.FItemPrice)
                .HasColumnType("decimal(36, 24)")
                .HasColumnName("fItemPrice");
            entity.Property(e => e.KAmazonBestellung).HasColumnName("kAmazonBestellung");
            entity.Property(e => e.KAmazonBestellungPos).HasColumnName("kAmazonBestellungPos");
            entity.Property(e => e.NErrorCode).HasColumnName("nErrorCode");
            entity.Property(e => e.NQuantityPurchased).HasColumnName("nQuantityPurchased");
            entity.Property(e => e.NVersandStatus).HasColumnName("nVersandStatus");
        });

        modelBuilder.Entity<LvAmazonBestellungen>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvAmazonBestellungen", "Amazon");

            entity.Property(e => e.CBillAddress1)
                .HasMaxLength(255)
                .HasColumnName("cBillAddress1");
            entity.Property(e => e.CBillAddress2)
                .HasMaxLength(255)
                .HasColumnName("cBillAddress2");
            entity.Property(e => e.CBillAddress3)
                .HasMaxLength(255)
                .HasColumnName("cBillAddress3");
            entity.Property(e => e.CBillCity)
                .HasMaxLength(100)
                .HasColumnName("cBillCity");
            entity.Property(e => e.CBillCountry)
                .HasMaxLength(5)
                .HasColumnName("cBillCountry");
            entity.Property(e => e.CBillPostalCode)
                .HasMaxLength(20)
                .HasColumnName("cBillPostalCode");
            entity.Property(e => e.CBillState)
                .HasMaxLength(100)
                .HasColumnName("cBillState");
            entity.Property(e => e.CBuyerCompanyName)
                .HasMaxLength(255)
                .HasColumnName("cBuyerCompanyName");
            entity.Property(e => e.CBuyerCstNumber)
                .HasMaxLength(50)
                .HasColumnName("cBuyerCstNumber");
            entity.Property(e => e.CBuyerEmail)
                .HasMaxLength(255)
                .HasColumnName("cBuyerEmail");
            entity.Property(e => e.CBuyerName)
                .HasMaxLength(255)
                .HasColumnName("cBuyerName");
            entity.Property(e => e.CBuyerPhonenumber)
                .HasMaxLength(50)
                .HasColumnName("cBuyerPhonenumber");
            entity.Property(e => e.CBuyerTaxRegistrationId)
                .HasMaxLength(50)
                .HasColumnName("cBuyerTaxRegistrationId");
            entity.Property(e => e.CCurrency)
                .HasMaxLength(5)
                .HasColumnName("cCurrency");
            entity.Property(e => e.CErrorMessage)
                .HasMaxLength(2000)
                .HasColumnName("cErrorMessage");
            entity.Property(e => e.CItemPromotionId)
                .HasMaxLength(255)
                .HasColumnName("cItemPromotionId");
            entity.Property(e => e.COrderId)
                .HasMaxLength(30)
                .HasColumnName("cOrderId");
            entity.Property(e => e.COrderStatus)
                .HasMaxLength(30)
                .HasColumnName("cOrderStatus");
            entity.Property(e => e.CPaymentMethod)
                .HasMaxLength(255)
                .HasColumnName("cPaymentMethod");
            entity.Property(e => e.CRecipientName)
                .HasMaxLength(255)
                .HasColumnName("cRecipientName");
            entity.Property(e => e.CSalesChannel)
                .HasMaxLength(100)
                .HasColumnName("cSalesChannel");
            entity.Property(e => e.CShipAddress1)
                .HasMaxLength(255)
                .HasColumnName("cShipAddress1");
            entity.Property(e => e.CShipAddress2)
                .HasMaxLength(255)
                .HasColumnName("cShipAddress2");
            entity.Property(e => e.CShipAddress3)
                .HasMaxLength(255)
                .HasColumnName("cShipAddress3");
            entity.Property(e => e.CShipCity)
                .HasMaxLength(100)
                .HasColumnName("cShipCity");
            entity.Property(e => e.CShipCountry)
                .HasMaxLength(5)
                .HasColumnName("cShipCountry");
            entity.Property(e => e.CShipPhonenumber)
                .HasMaxLength(100)
                .HasColumnName("cShipPhonenumber");
            entity.Property(e => e.CShipPostalcode)
                .HasMaxLength(20)
                .HasColumnName("cShipPostalcode");
            entity.Property(e => e.CShipPromotionId)
                .HasMaxLength(50)
                .HasColumnName("cShipPromotionId");
            entity.Property(e => e.CShipServiceName)
                .HasMaxLength(255)
                .HasColumnName("cShipServiceName");
            entity.Property(e => e.CShipServicelevel)
                .HasMaxLength(30)
                .HasColumnName("cShipServicelevel");
            entity.Property(e => e.CShipState)
                .HasMaxLength(100)
                .HasColumnName("cShipState");
            entity.Property(e => e.CStornobenutzer)
                .HasMaxLength(255)
                .HasColumnName("cStornobenutzer");
            entity.Property(e => e.CUserName)
                .HasMaxLength(255)
                .HasColumnName("cUserName");
            entity.Property(e => e.CVersandlandIso)
                .HasMaxLength(3)
                .HasColumnName("cVersandlandIso");
            entity.Property(e => e.DEarliestDeliveryAt)
                .HasColumnType("datetime")
                .HasColumnName("dEarliestDeliveryAt");
            entity.Property(e => e.DEarliestShipAt)
                .HasColumnType("datetime")
                .HasColumnName("dEarliestShipAt");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DLatestDeliveryAt)
                .HasColumnType("datetime")
                .HasColumnName("dLatestDeliveryAt");
            entity.Property(e => e.DLatestShipAt)
                .HasColumnType("datetime")
                .HasColumnName("dLatestShipAt");
            entity.Property(e => e.DPaymentsDate)
                .HasColumnType("datetime")
                .HasColumnName("dPaymentsDate");
            entity.Property(e => e.DPurchasedate)
                .HasColumnType("datetime")
                .HasColumnName("dPurchasedate");
            entity.Property(e => e.DStornozeitpunkt)
                .HasColumnType("datetime")
                .HasColumnName("dStornozeitpunkt");
            entity.Property(e => e.FItemPromotionalDiscount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fItemPromotionalDiscount");
            entity.Property(e => e.FSumGesamtOfItemPrice)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fSumGesamtOfItemPrice");
            entity.Property(e => e.FVersandkosten)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVersandkosten");
            entity.Property(e => e.KAmazonBestellung).HasColumnName("kAmazonBestellung");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.NAnzahlArtikel).HasColumnName("nAnzahlArtikel");
            entity.Property(e => e.NAnzahlPos).HasColumnName("nAnzahlPos");
            entity.Property(e => e.NB2b).HasColumnName("nB2B");
            entity.Property(e => e.NErrorCode).HasColumnName("nErrorCode");
            entity.Property(e => e.NFba).HasColumnName("nFba");
            entity.Property(e => e.NIstCustom).HasColumnName("nIstCustom");
            entity.Property(e => e.NIstGeschenk).HasColumnName("nIstGeschenk");
            entity.Property(e => e.NOrderStatus).HasColumnName("nOrderStatus");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
            entity.Property(e => e.NStornogrund).HasColumnName("nStornogrund");
            entity.Property(e => e.NVersandStatus).HasColumnName("nVersandStatus");
        });

        modelBuilder.Entity<LvAmazonFulfillmentAuftraege>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvAmazonFulfillmentAuftraege", "Amazon");

            entity.Property(e => e.CBestellnummer)
                .HasMaxLength(50)
                .HasColumnName("cBestellnummer");
            entity.Property(e => e.CFehlermeldung).HasColumnName("cFehlermeldung");
            entity.Property(e => e.CKommentar)
                .HasMaxLength(1000)
                .HasColumnName("cKommentar");
            entity.Property(e => e.CLieferadresseBundesland)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseBundesland");
            entity.Property(e => e.CLieferadresseEmail)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseEmail");
            entity.Property(e => e.CLieferadresseFax)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseFax");
            entity.Property(e => e.CLieferadresseFirma)
                .HasMaxLength(128)
                .HasColumnName("cLieferadresseFirma");
            entity.Property(e => e.CLieferadresseKundennummer)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseKundennummer");
            entity.Property(e => e.CLieferadresseLand)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseLand");
            entity.Property(e => e.CLieferadresseName)
                .HasMaxLength(126)
                .HasColumnName("cLieferadresseName");
            entity.Property(e => e.CLieferadresseOrt)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseOrt");
            entity.Property(e => e.CLieferadressePlz)
                .HasMaxLength(24)
                .HasColumnName("cLieferadressePLZ");
            entity.Property(e => e.CLieferadresseStrasse)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseStrasse");
            entity.Property(e => e.CLieferadresseTel)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseTel");
            entity.Property(e => e.CLieferadresseVorname)
                .HasMaxLength(126)
                .HasColumnName("cLieferadresseVorname");
            entity.Property(e => e.CLieferprioritaet)
                .HasMaxLength(30)
                .HasColumnName("cLieferprioritaet");
            entity.Property(e => e.CLieferscheinnummer)
                .HasMaxLength(255)
                .HasColumnName("cLieferscheinnummer");
            entity.Property(e => e.CPfUsername)
                .HasMaxLength(255)
                .HasColumnName("cPfUsername");
            entity.Property(e => e.DErstelltAm)
                .HasColumnType("datetime")
                .HasColumnName("dErstelltAm");
            entity.Property(e => e.DInBearbeitung)
                .HasColumnType("datetime")
                .HasColumnName("dInBearbeitung");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KFulfillmentAuftrag).HasColumnName("kFulfillmentAuftrag");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KLieferadresse).HasColumnName("kLieferadresse");
            entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.NFulfillmentDienstleister).HasColumnName("nFulfillmentDienstleister");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
            entity.Property(e => e.NWarenlagerFulfillment).HasColumnName("nWarenlagerFulfillment");
        });

        modelBuilder.Entity<LvAmazonFulfillmentAuftragPo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvAmazonFulfillmentAuftragPos", "Amazon");

            entity.Property(e => e.CAbhilfe)
                .HasMaxLength(255)
                .HasColumnName("cAbhilfe");
            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CArtikelGeschenkText)
                .HasMaxLength(1000)
                .HasColumnName("cArtikelGeschenkText");
            entity.Property(e => e.CArtikelHinweis)
                .HasMaxLength(2000)
                .HasColumnName("cArtikelHinweis");
            entity.Property(e => e.CErrorMessage)
                .HasMaxLength(1000)
                .HasColumnName("cErrorMessage");
            entity.Property(e => e.CErrorType)
                .HasMaxLength(20)
                .HasColumnName("cErrorType");
            entity.Property(e => e.CIdentCode)
                .HasMaxLength(255)
                .HasColumnName("cIdentCode");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KFulfillmentAuftrag).HasColumnName("kFulfillmentAuftrag");
            entity.Property(e => e.KFulfillmentAuftragPos).HasColumnName("kFulfillmentAuftragPos");
            entity.Property(e => e.NErrorCode).HasColumnName("nErrorCode");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<LvAmazonItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvAmazonItems", "Amazon");

            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CAsin)
                .HasMaxLength(255)
                .HasColumnName("cAsin");
            entity.Property(e => e.CDummyBarcode).HasColumnName("cDummyBarcode");
            entity.Property(e => e.CDummyBarcodeType).HasColumnName("cDummyBarcodeType");
            entity.Property(e => e.CDummyConditionType).HasColumnName("cDummyConditionType");
            entity.Property(e => e.CDummyParentChild).HasColumnName("cDummyParentChild");
            entity.Property(e => e.CDummyParentSku).HasColumnName("cDummyParentSku");
            entity.Property(e => e.CDummyPreis).HasColumnName("cDummyPreis");
            entity.Property(e => e.CEan)
                .HasMaxLength(255)
                .HasColumnName("cEan");
            entity.Property(e => e.CErrorHilfetext)
                .HasMaxLength(2000)
                .HasColumnName("cErrorHilfetext");
            entity.Property(e => e.CErrormessage).HasColumnName("cErrormessage");
            entity.Property(e => e.CFlatFileName).HasColumnName("cFlatFileName");
            entity.Property(e => e.CGroupName).HasColumnName("cGroupName");
            entity.Property(e => e.CHan)
                .HasMaxLength(255)
                .HasColumnName("cHan");
            entity.Property(e => e.CIsbn)
                .HasMaxLength(255)
                .HasColumnName("cIsbn");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CPfUsername)
                .HasMaxLength(255)
                .HasColumnName("cPfUsername");
            entity.Property(e => e.CProducttypeName).HasColumnName("cProducttypeName");
            entity.Property(e => e.CUpc)
                .HasMaxLength(255)
                .HasColumnName("cUpc");
            entity.Property(e => e.CValue).HasColumnName("cValue");
            entity.Property(e => e.DErrorErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErrorErstellt");
            entity.Property(e => e.DLastTransmission)
                .HasColumnType("datetime")
                .HasColumnName("dLastTransmission");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KGroup).HasColumnName("kGroup");
            entity.Property(e => e.KItem).HasColumnName("kItem");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.NErrorCode).HasColumnName("nErrorCode");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<LvAmazonLogsitzung>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvAmazonLogsitzung", "Amazon");

            entity.Property(e => e.CBenutzername)
                .HasMaxLength(255)
                .HasColumnName("cBenutzername");
            entity.Property(e => e.CRechnername)
                .HasMaxLength(64)
                .HasColumnName("cRechnername");
            entity.Property(e => e.CStatusmeldung)
                .HasMaxLength(2048)
                .HasColumnName("cStatusmeldung");
            entity.Property(e => e.DEnde)
                .HasColumnType("datetime")
                .HasColumnName("dEnde");
            entity.Property(e => e.DStart)
                .HasColumnType("datetime")
                .HasColumnName("dStart");
            entity.Property(e => e.KAmazonabgleichLogsitzung).HasColumnName("kAmazonabgleichLogsitzung");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<LvAngebotFehler>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvAngebotFehler", "SCX");

            entity.Property(e => e.CCode)
                .HasMaxLength(255)
                .HasColumnName("cCode");
            entity.Property(e => e.CLongMessage).HasColumnName("cLongMessage");
            entity.Property(e => e.CMessage).HasColumnName("cMessage");
            entity.Property(e => e.DCreatedAtUtc).HasColumnName("dCreatedAtUtc");
            entity.Property(e => e.KOffer).HasColumnName("kOffer");
            entity.Property(e => e.KOfferFailure)
                .ValueGeneratedOnAdd()
                .HasColumnName("kOfferFailure");
        });

        modelBuilder.Entity<LvAngebote>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvAngebote", "Kunde");

            entity.Property(e => e.CAngebotsnummer)
                .HasMaxLength(50)
                .HasColumnName("cAngebotsnummer");
            entity.Property(e => e.CAnmerkung).HasColumnName("cAnmerkung");
            entity.Property(e => e.CBenutzername)
                .HasMaxLength(255)
                .HasColumnName("cBenutzername");
            entity.Property(e => e.CBeschreibung)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cBeschreibung");
            entity.Property(e => e.CErloeskonto)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("cErloeskonto");
            entity.Property(e => e.CFirmenname)
                .HasMaxLength(255)
                .HasColumnName("cFirmenname");
            entity.Property(e => e.CLieferadresseAdresszusatz)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseAdresszusatz");
            entity.Property(e => e.CLieferadresseAnrede)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseAnrede");
            entity.Property(e => e.CLieferadresseBundesland)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseBundesland");
            entity.Property(e => e.CLieferadresseFax)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseFax");
            entity.Property(e => e.CLieferadresseFirma)
                .HasMaxLength(128)
                .HasColumnName("cLieferadresseFirma");
            entity.Property(e => e.CLieferadresseLand)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseLand");
            entity.Property(e => e.CLieferadresseLandIso)
                .HasMaxLength(5)
                .HasColumnName("cLieferadresseLandIso");
            entity.Property(e => e.CLieferadresseMail)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseMail");
            entity.Property(e => e.CLieferadresseMobilTelefon)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseMobilTelefon");
            entity.Property(e => e.CLieferadresseNachname)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseNachname");
            entity.Property(e => e.CLieferadresseOrt)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseOrt");
            entity.Property(e => e.CLieferadressePlz)
                .HasMaxLength(24)
                .HasColumnName("cLieferadressePlz");
            entity.Property(e => e.CLieferadressePostId)
                .HasMaxLength(255)
                .HasColumnName("cLieferadressePostId");
            entity.Property(e => e.CLieferadresseStrasse)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseStrasse");
            entity.Property(e => e.CLieferadresseTelefon)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseTelefon");
            entity.Property(e => e.CLieferadresseTitel)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseTitel");
            entity.Property(e => e.CLieferadresseVorname)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseVorname");
            entity.Property(e => e.CLieferadresseZusatz)
                .HasMaxLength(60)
                .HasColumnName("cLieferadresseZusatz");
            entity.Property(e => e.CPlattform)
                .HasMaxLength(30)
                .HasColumnName("cPlattform");
            entity.Property(e => e.CRechnungsadresseAdresszusatz)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseAdresszusatz");
            entity.Property(e => e.CRechnungsadresseAnrede)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseAnrede");
            entity.Property(e => e.CRechnungsadresseBundesland)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseBundesland");
            entity.Property(e => e.CRechnungsadresseFax)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseFax");
            entity.Property(e => e.CRechnungsadresseFirma)
                .HasMaxLength(128)
                .HasColumnName("cRechnungsadresseFirma");
            entity.Property(e => e.CRechnungsadresseKundennummer)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseKundennummer");
            entity.Property(e => e.CRechnungsadresseLand)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseLand");
            entity.Property(e => e.CRechnungsadresseLandIso)
                .HasMaxLength(5)
                .HasColumnName("cRechnungsadresseLandIso");
            entity.Property(e => e.CRechnungsadresseMail)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseMail");
            entity.Property(e => e.CRechnungsadresseMobilTelefon)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseMobilTelefon");
            entity.Property(e => e.CRechnungsadresseNachname)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseNachname");
            entity.Property(e => e.CRechnungsadresseOrt)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseOrt");
            entity.Property(e => e.CRechnungsadressePlz)
                .HasMaxLength(24)
                .HasColumnName("cRechnungsadressePlz");
            entity.Property(e => e.CRechnungsadressePostId)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadressePostId");
            entity.Property(e => e.CRechnungsadresseStrasse)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseStrasse");
            entity.Property(e => e.CRechnungsadresseTelefon)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseTelefon");
            entity.Property(e => e.CRechnungsadresseTitel)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseTitel");
            entity.Property(e => e.CRechnungsadresseVorname)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseVorname");
            entity.Property(e => e.CRechnungsadresseZuHaenden)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseZuHaenden");
            entity.Property(e => e.CRechnungsadresseZusatz)
                .HasMaxLength(60)
                .HasColumnName("cRechnungsadresseZusatz");
            entity.Property(e => e.CShopbestellnummer)
                .HasMaxLength(50)
                .HasColumnName("cShopbestellnummer");
            entity.Property(e => e.CShopname)
                .HasMaxLength(255)
                .HasColumnName("cShopname");
            entity.Property(e => e.CSonstiges).HasColumnName("cSonstiges");
            entity.Property(e => e.CStatustext)
                .HasMaxLength(255)
                .HasColumnName("cStatustext");
            entity.Property(e => e.CVersandartname)
                .HasMaxLength(255)
                .HasColumnName("cVersandartname");
            entity.Property(e => e.CWaehrung)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWaehrung");
            entity.Property(e => e.CZahlungsartname)
                .HasMaxLength(255)
                .HasColumnName("cZahlungsartname");
            entity.Property(e => e.DBezahldatum)
                .HasColumnType("datetime")
                .HasColumnName("dBezahldatum");
            entity.Property(e => e.DDruckdatum)
                .HasColumnType("datetime")
                .HasColumnName("dDruckdatum");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DMaildatum)
                .HasColumnType("datetime")
                .HasColumnName("dMaildatum");
            entity.Property(e => e.DZahlungsmaildatum)
                .HasColumnType("datetime")
                .HasColumnName("dZahlungsmaildatum");
            entity.Property(e => e.FAngebotswert)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAngebotswert");
            entity.Property(e => e.FKundenguthaben)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fKundenguthaben");
            entity.Property(e => e.FWaehrungsfaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWaehrungsfaktor");
            entity.Property(e => e.FZusatzgewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZusatzgewicht");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBestellhinweis).HasColumnName("kBestellhinweis");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KColor).HasColumnName("kColor");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KInetBestellung).HasColumnName("kInetBestellung");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.KText).HasColumnName("kText");
            entity.Property(e => e.NInnergemeinschaftlicheLieferung).HasColumnName("nInnergemeinschaftlicheLieferung");
            entity.Property(e => e.NUmsatzsteuerfrei).HasColumnName("nUmsatzsteuerfrei");
        });

        modelBuilder.Entity<LvAngebote1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvAngebote", "SCX");

            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CAsin)
                .HasMaxLength(255)
                .HasColumnName("cASIN");
            entity.Property(e => e.CChannel)
                .HasMaxLength(255)
                .HasColumnName("cChannel");
            entity.Property(e => e.CChannelCategoryId)
                .HasMaxLength(512)
                .HasColumnName("cChannelCategoryId");
            entity.Property(e => e.CChannelCategoryName)
                .HasMaxLength(250)
                .HasColumnName("cChannelCategoryName");
            entity.Property(e => e.CChannelName)
                .HasMaxLength(255)
                .HasColumnName("cChannelName");
            entity.Property(e => e.CErrorMessage).HasColumnName("cErrorMessage");
            entity.Property(e => e.CGtin)
                .HasMaxLength(255)
                .HasColumnName("cGTIN");
            entity.Property(e => e.CHan)
                .HasMaxLength(255)
                .HasColumnName("cHAN");
            entity.Property(e => e.CHersteller)
                .HasMaxLength(255)
                .HasColumnName("cHersteller");
            entity.Property(e => e.CIsbn)
                .HasMaxLength(255)
                .HasColumnName("cISBN");
            entity.Property(e => e.CListingUrl)
                .HasMaxLength(2000)
                .HasColumnName("cListingUrl");
            entity.Property(e => e.COfferTitle).HasColumnName("cOfferTitle");
            entity.Property(e => e.CShopname)
                .HasMaxLength(255)
                .HasColumnName("cShopname");
            entity.Property(e => e.CSku)
                .HasMaxLength(100)
                .HasColumnName("cSKU");
            entity.Property(e => e.CWaehrung)
                .HasMaxLength(3)
                .HasColumnName("cWaehrung");
            entity.Property(e => e.DActiveSince)
                .HasColumnType("datetime")
                .HasColumnName("dActiveSince");
            entity.Property(e => e.DExpirationDate)
                .HasColumnType("datetime")
                .HasColumnName("dExpirationDate");
            entity.Property(e => e.DLetzterUpload)
                .HasColumnType("datetime")
                .HasColumnName("dLetzterUpload");
            entity.Property(e => e.DPriceUpdatedUtc)
                .HasColumnType("datetime")
                .HasColumnName("dPriceUpdatedUtc");
            entity.Property(e => e.DQuantityUpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("dQuantityUpdatedAt");
            entity.Property(e => e.DStatusReceivedUtc)
                .HasColumnType("datetime")
                .HasColumnName("dStatusReceivedUtc");
            entity.Property(e => e.DZulaufVerfuegbarAm)
                .HasColumnType("datetime")
                .HasColumnName("dZulaufVerfuegbarAm");
            entity.Property(e => e.FArtGewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fArtGewicht");
            entity.Property(e => e.FEknetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEKNetto");
            entity.Property(e => e.FInAuftraegen)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fInAuftraegen");
            entity.Property(e => e.FMaximalerBestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMaximalerBestand");
            entity.Property(e => e.FMindestBestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMindestBestand");
            entity.Property(e => e.FNettoPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fNettoPreis");
            entity.Property(e => e.FProzent)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fProzent");
            entity.Property(e => e.FQuantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fQuantity");
            entity.Property(e => e.FVerfuegbar)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVerfuegbar");
            entity.Property(e => e.FVknetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVKNetto");
            entity.Property(e => e.FZulauf)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZulauf");
            entity.Property(e => e.FZuletztHochgeladenerPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZuletztHochgeladenerPreis");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KCategory).HasColumnName("kCategory");
            entity.Property(e => e.KChannel).HasColumnName("kChannel");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");
            entity.Property(e => e.KOffer).HasColumnName("kOffer");
            entity.Property(e => e.KPreis).HasColumnName("kPreis");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");
            entity.Property(e => e.KVerkaufskanalArtikelData).HasColumnName("kVerkaufskanalArtikelData");
            entity.Property(e => e.NAngebotstyp).HasColumnName("nAngebotstyp");
            entity.Property(e => e.NBearbeitungszeit).HasColumnName("nBearbeitungszeit");
            entity.Property(e => e.NIsExtern).HasColumnName("nIsExtern");
            entity.Property(e => e.NIsListed).HasColumnName("nIsListed");
            entity.Property(e => e.NLoeschintervallSchwebendAngebot).HasColumnName("nLoeschintervallSchwebendAngebot");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
            entity.Property(e => e.NType).HasColumnName("nType");
            entity.Property(e => e.NWawiStatus).HasColumnName("nWawiStatus");
        });

        modelBuilder.Entity<LvAngebotsposition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvAngebotsposition", "Verkauf");

            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CErloeskonto)
                .HasMaxLength(10)
                .HasColumnName("cErloeskonto");
            entity.Property(e => e.CHinweis)
                .HasMaxLength(2000)
                .HasColumnName("cHinweis");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.FAufEinkaufsliste)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAufEinkaufsliste");
            entity.Property(e => e.FAuslieferungGesperrt)
                .HasColumnType("decimal(25, 4)")
                .HasColumnName("fAuslieferungGesperrt");
            entity.Property(e => e.FLagerbestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLagerbestand");
            entity.Property(e => e.FMwSt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwSt");
            entity.Property(e => e.FVerfuegbar)
                .HasColumnType("numeric(25, 4)")
                .HasColumnName("fVerfuegbar");
            entity.Property(e => e.FVerfuegbarGesperrt)
                .HasColumnType("decimal(25, 4)")
                .HasColumnName("fVerfuegbarGesperrt");
            entity.Property(e => e.FVkNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVkNetto");
            entity.Property(e => e.FVkbrutto)
                .HasColumnType("decimal(38, 12)")
                .HasColumnName("fVKBrutto");
            entity.Property(e => e.FZulauf)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZulauf");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KAuftragPosition).HasColumnName("kAuftragPosition");
            entity.Property(e => e.KKonfigurationsVater).HasColumnName("kKonfigurationsVater");
            entity.Property(e => e.KStuecklistenVater).HasColumnName("kStuecklistenVater");
            entity.Property(e => e.NLagerAktiv).HasColumnName("nLagerAktiv");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<LvAngebotsverwaltung>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvAngebotsverwaltung", "Verkauf");

            entity.Property(e => e.CAngebotsnummer)
                .HasMaxLength(50)
                .HasColumnName("cAngebotsnummer");
            entity.Property(e => e.CAnmerkung).HasColumnName("cAnmerkung");
            entity.Property(e => e.CBenutzername)
                .HasMaxLength(255)
                .HasColumnName("cBenutzername");
            entity.Property(e => e.CExterneAuftragsnummer)
                .HasMaxLength(50)
                .HasColumnName("cExterneAuftragsnummer");
            entity.Property(e => e.CFirmenname)
                .HasMaxLength(255)
                .HasColumnName("cFirmenname");
            entity.Property(e => e.CKundeNr)
                .HasMaxLength(30)
                .HasColumnName("cKundeNr");
            entity.Property(e => e.CKundengruppe)
                .HasMaxLength(255)
                .HasColumnName("cKundengruppe");
            entity.Property(e => e.CLieferadresseAdresszusatz)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseAdresszusatz");
            entity.Property(e => e.CLieferadresseAnrede)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseAnrede");
            entity.Property(e => e.CLieferadresseBundesland)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseBundesland");
            entity.Property(e => e.CLieferadresseFax)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseFax");
            entity.Property(e => e.CLieferadresseFirma)
                .HasMaxLength(128)
                .HasColumnName("cLieferadresseFirma");
            entity.Property(e => e.CLieferadresseLand)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseLand");
            entity.Property(e => e.CLieferadresseLandIso)
                .HasMaxLength(5)
                .HasColumnName("cLieferadresseLandIso");
            entity.Property(e => e.CLieferadresseMail)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseMail");
            entity.Property(e => e.CLieferadresseMobilTelefon)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseMobilTelefon");
            entity.Property(e => e.CLieferadresseNachname)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseNachname");
            entity.Property(e => e.CLieferadresseOrt)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseOrt");
            entity.Property(e => e.CLieferadressePlz)
                .HasMaxLength(24)
                .HasColumnName("cLieferadressePlz");
            entity.Property(e => e.CLieferadressePostId)
                .HasMaxLength(255)
                .HasColumnName("cLieferadressePostId");
            entity.Property(e => e.CLieferadresseStrasse)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseStrasse");
            entity.Property(e => e.CLieferadresseTelefon)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseTelefon");
            entity.Property(e => e.CLieferadresseTitel)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseTitel");
            entity.Property(e => e.CLieferadresseVorname)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseVorname");
            entity.Property(e => e.CLieferadresseZusatz)
                .HasMaxLength(60)
                .HasColumnName("cLieferadresseZusatz");
            entity.Property(e => e.CRechnungsadresseAdresszusatz)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseAdresszusatz");
            entity.Property(e => e.CRechnungsadresseAnrede)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseAnrede");
            entity.Property(e => e.CRechnungsadresseBundesland)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseBundesland");
            entity.Property(e => e.CRechnungsadresseFax)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseFax");
            entity.Property(e => e.CRechnungsadresseFirma)
                .HasMaxLength(128)
                .HasColumnName("cRechnungsadresseFirma");
            entity.Property(e => e.CRechnungsadresseLand)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseLand");
            entity.Property(e => e.CRechnungsadresseLandIso)
                .HasMaxLength(5)
                .HasColumnName("cRechnungsadresseLandIso");
            entity.Property(e => e.CRechnungsadresseMail)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseMail");
            entity.Property(e => e.CRechnungsadresseMobilTelefon)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseMobilTelefon");
            entity.Property(e => e.CRechnungsadresseNachname)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseNachname");
            entity.Property(e => e.CRechnungsadresseOrt)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseOrt");
            entity.Property(e => e.CRechnungsadressePlz)
                .HasMaxLength(24)
                .HasColumnName("cRechnungsadressePlz");
            entity.Property(e => e.CRechnungsadressePostId)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadressePostId");
            entity.Property(e => e.CRechnungsadresseStrasse)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseStrasse");
            entity.Property(e => e.CRechnungsadresseTelefon)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseTelefon");
            entity.Property(e => e.CRechnungsadresseTitel)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseTitel");
            entity.Property(e => e.CRechnungsadresseVorname)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseVorname");
            entity.Property(e => e.CRechnungsadresseZusatz)
                .HasMaxLength(60)
                .HasColumnName("cRechnungsadresseZusatz");
            entity.Property(e => e.CShopname)
                .HasMaxLength(255)
                .HasColumnName("cShopname");
            entity.Property(e => e.CSonstiges).HasColumnName("cSonstiges");
            entity.Property(e => e.CStatustext)
                .HasMaxLength(255)
                .HasColumnName("cStatustext");
            entity.Property(e => e.CVersandartname)
                .HasMaxLength(255)
                .HasColumnName("cVersandartname");
            entity.Property(e => e.CWaehrung)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWaehrung");
            entity.Property(e => e.CZahlungsartname)
                .HasMaxLength(255)
                .HasColumnName("cZahlungsartname");
            entity.Property(e => e.DBezahldatum)
                .HasColumnType("datetime")
                .HasColumnName("dBezahldatum");
            entity.Property(e => e.DDruckdatum)
                .HasColumnType("datetime")
                .HasColumnName("dDruckdatum");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DMaildatum)
                .HasColumnType("datetime")
                .HasColumnName("dMaildatum");
            entity.Property(e => e.DZahldatum)
                .HasColumnType("datetime")
                .HasColumnName("dZahldatum");
            entity.Property(e => e.DZahlungsmaildatum)
                .HasColumnType("datetime")
                .HasColumnName("dZahlungsmaildatum");
            entity.Property(e => e.FAngebotswert)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAngebotswert");
            entity.Property(e => e.FWaehrungsfaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWaehrungsfaktor");
            entity.Property(e => e.FZusatzgewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZusatzgewicht");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBestellhinweis).HasColumnName("kBestellhinweis");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KInetBestellung).HasColumnName("kInetBestellung");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.KVersandart).HasColumnName("kVersandart");
            entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");
            entity.Property(e => e.NBeschreibung).HasColumnName("nBeschreibung");
            entity.Property(e => e.NFarbcode).HasColumnName("nFarbcode");
            entity.Property(e => e.NHatAuftrag).HasColumnName("nHatAuftrag");
            entity.Property(e => e.NKomplettAusgeliefert).HasColumnName("nKomplettAusgeliefert");
            entity.Property(e => e.NSteuereinstellung).HasColumnName("nSteuereinstellung");
            entity.Property(e => e.NZahlungszielTage).HasColumnName("nZahlungszielTage");
        });

        modelBuilder.Entity<LvArtikelVerkaeufe>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvArtikelVerkaeufe", "Kunde");

            entity.Property(e => e.AvgVkPreis).HasColumnType("decimal(38, 14)");
            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CArtikelName)
                .HasMaxLength(255)
                .HasColumnName("cArtikelName");
            entity.Property(e => e.CEan)
                .HasMaxLength(255)
                .HasColumnName("cEAN");
            entity.Property(e => e.FVknetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVKNetto");
            entity.Property(e => e.GesamtWert).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.LetzterKauf).HasColumnType("datetime");
            entity.Property(e => e.MengeKaeufe).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.VerkaufspreisBrutto).HasColumnType("decimal(38, 13)");
        });

        modelBuilder.Entity<LvAuftraege>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvAuftraege", "Kunde");

            entity.Property(e => e.CAnmerkung).HasColumnName("cAnmerkung");
            entity.Property(e => e.CAuftragsnummer)
                .HasMaxLength(50)
                .HasColumnName("cAuftragsnummer");
            entity.Property(e => e.CBenutzername)
                .HasMaxLength(255)
                .HasColumnName("cBenutzername");
            entity.Property(e => e.CBeschreibung)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cBeschreibung");
            entity.Property(e => e.CExistiertRechnung)
                .HasMaxLength(4)
                .HasColumnName("cExistiertRechnung");
            entity.Property(e => e.CFirmenname)
                .HasMaxLength(255)
                .HasColumnName("cFirmenname");
            entity.Property(e => e.CIstBezahlt)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("cIstBezahlt");
            entity.Property(e => e.CLieferadresseAnrede)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseAnrede");
            entity.Property(e => e.CLieferadresseBundesland)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseBundesland");
            entity.Property(e => e.CLieferadresseFax)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseFax");
            entity.Property(e => e.CLieferadresseFirma)
                .HasMaxLength(128)
                .HasColumnName("cLieferadresseFirma");
            entity.Property(e => e.CLieferadresseLand)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseLand");
            entity.Property(e => e.CLieferadresseLandIso)
                .HasMaxLength(5)
                .HasColumnName("cLieferadresseLandIso");
            entity.Property(e => e.CLieferadresseMail)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseMail");
            entity.Property(e => e.CLieferadresseMobiltelefonnummer)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseMobiltelefonnummer");
            entity.Property(e => e.CLieferadresseNachname)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseNachname");
            entity.Property(e => e.CLieferadresseOrt)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseOrt");
            entity.Property(e => e.CLieferadressePlz)
                .HasMaxLength(24)
                .HasColumnName("cLieferadressePlz");
            entity.Property(e => e.CLieferadressePostId)
                .HasMaxLength(255)
                .HasColumnName("cLieferadressePostId");
            entity.Property(e => e.CLieferadresseStrasse)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseStrasse");
            entity.Property(e => e.CLieferadresseTelefon)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseTelefon");
            entity.Property(e => e.CLieferadresseTitel)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseTitel");
            entity.Property(e => e.CLieferadresseVorname)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseVorname");
            entity.Property(e => e.CLieferadresseZusatz)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseZusatz");
            entity.Property(e => e.CLieferadresseZusatzinformationen)
                .HasMaxLength(60)
                .HasColumnName("cLieferadresseZusatzinformationen");
            entity.Property(e => e.CRechnungsadresseAdresszusatz)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseAdresszusatz");
            entity.Property(e => e.CRechnungsadresseAnrede)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseAnrede");
            entity.Property(e => e.CRechnungsadresseBundesland)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseBundesland");
            entity.Property(e => e.CRechnungsadresseFax)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseFax");
            entity.Property(e => e.CRechnungsadresseFirma)
                .HasMaxLength(128)
                .HasColumnName("cRechnungsadresseFirma");
            entity.Property(e => e.CRechnungsadresseKundennummer)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseKundennummer");
            entity.Property(e => e.CRechnungsadresseLand)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseLand");
            entity.Property(e => e.CRechnungsadresseLandIso)
                .HasMaxLength(5)
                .HasColumnName("cRechnungsadresseLandIso");
            entity.Property(e => e.CRechnungsadresseMail)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseMail");
            entity.Property(e => e.CRechnungsadresseMobiltelefonnummer)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseMobiltelefonnummer");
            entity.Property(e => e.CRechnungsadresseNachname)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseNachname");
            entity.Property(e => e.CRechnungsadresseOrt)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseOrt");
            entity.Property(e => e.CRechnungsadressePlz)
                .HasMaxLength(24)
                .HasColumnName("cRechnungsadressePlz");
            entity.Property(e => e.CRechnungsadressePostId)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadressePostId");
            entity.Property(e => e.CRechnungsadresseStrasse)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseStrasse");
            entity.Property(e => e.CRechnungsadresseTelefon)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseTelefon");
            entity.Property(e => e.CRechnungsadresseTitel)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseTitel");
            entity.Property(e => e.CRechnungsadresseVorname)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseVorname");
            entity.Property(e => e.CRechnungsadresseZuHaenden)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseZuHaenden");
            entity.Property(e => e.CRechnungsadresseZusatz)
                .HasMaxLength(60)
                .HasColumnName("cRechnungsadresseZusatz");
            entity.Property(e => e.CRechnungsnummer)
                .HasMaxLength(200)
                .HasColumnName("cRechnungsnummer");
            entity.Property(e => e.CRueckhalteGrund)
                .HasMaxLength(30)
                .HasColumnName("cRueckhalteGrund");
            entity.Property(e => e.CShopbestellnummer)
                .HasMaxLength(50)
                .HasColumnName("cShopbestellnummer");
            entity.Property(e => e.CShopname)
                .HasMaxLength(255)
                .HasColumnName("cShopname");
            entity.Property(e => e.CSonstiges).HasColumnName("cSonstiges");
            entity.Property(e => e.CStatustext)
                .HasMaxLength(255)
                .HasColumnName("cStatustext");
            entity.Property(e => e.CVersandartname)
                .HasMaxLength(255)
                .HasColumnName("cVersandartname");
            entity.Property(e => e.CVersandinfo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("cVersandinfo");
            entity.Property(e => e.CZahlungsartname)
                .HasMaxLength(255)
                .HasColumnName("cZahlungsartname");
            entity.Property(e => e.CZahlungsmodulId)
                .HasMaxLength(255)
                .HasColumnName("cZahlungsmodulID");
            entity.Property(e => e.CeBayBenutzername)
                .HasMaxLength(255)
                .HasColumnName("ceBayBenutzername");
            entity.Property(e => e.CeBayVerwendungszweck)
                .HasMaxLength(1000)
                .HasColumnName("ceBayVerwendungszweck");
            entity.Property(e => e.DBezahldatum)
                .HasColumnType("datetime")
                .HasColumnName("dBezahldatum");
            entity.Property(e => e.DDruckdatum)
                .HasColumnType("datetime")
                .HasColumnName("dDruckdatum");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DMaildatum)
                .HasColumnType("datetime")
                .HasColumnName("dMaildatum");
            entity.Property(e => e.DVersanddatum)
                .HasColumnType("datetime")
                .HasColumnName("dVersanddatum");
            entity.Property(e => e.DVersandmaildatum)
                .HasColumnType("datetime")
                .HasColumnName("dVersandmaildatum");
            entity.Property(e => e.DVoraussichtlichesLieferdatum)
                .HasColumnType("datetime")
                .HasColumnName("dVoraussichtlichesLieferdatum");
            entity.Property(e => e.DZahlungsmaildatum)
                .HasColumnType("datetime")
                .HasColumnName("dZahlungsmaildatum");
            entity.Property(e => e.FAuftragswert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAuftragswert");
            entity.Property(e => e.FAuftragswertVersandland)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("fAuftragswertVersandland");
            entity.Property(e => e.FBereitsgezahltWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBereitsgezahltWert");
            entity.Property(e => e.FGutgeschriebenerWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGutgeschriebenerWert");
            entity.Property(e => e.FMahnGebuehr)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMahnGebuehr");
            entity.Property(e => e.FOffenerWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fOffenerWert");
            entity.Property(e => e.FZusatzgewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZusatzgewicht");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBestellhinweis).HasColumnName("kBestellhinweis");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KColor).HasColumnName("kColor");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.KRueckhalteGrund).HasColumnName("kRueckhalteGrund");
            entity.Property(e => e.KText).HasColumnName("kText");
            entity.Property(e => e.NAnzahlRetouren).HasColumnName("nAnzahlRetouren");
            entity.Property(e => e.NAuftragsprioritaet).HasColumnName("nAuftragsprioritaet");
            entity.Property(e => e.NInnergemeinschaftlicheLieferung).HasColumnName("nInnergemeinschaftlicheLieferung");
            entity.Property(e => e.NKomplettgeliefert).HasColumnName("nKomplettgeliefert");
            entity.Property(e => e.NLieferstatus).HasColumnName("nLieferstatus");
            entity.Property(e => e.NMahnstufe).HasColumnName("nMahnstufe");
            entity.Property(e => e.NPlattform).HasColumnName("nPlattform");
            entity.Property(e => e.NStorniert).HasColumnName("nStorniert");
            entity.Property(e => e.NUmsatzsteuerfrei).HasColumnName("nUmsatzsteuerfrei");
            entity.Property(e => e.NWmsgesperrt).HasColumnName("nWMSGesperrt");
            entity.Property(e => e.NWmsteillieferung).HasColumnName("nWMSTeillieferung");
            entity.Property(e => e.NWmsvorkommissionieren).HasColumnName("nWMSVorkommissionieren");
        });

        modelBuilder.Entity<LvAuftrag>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvAuftrag", "Versand");

            entity.Property(e => e.CAmazonServiceLevel)
                .HasMaxLength(100)
                .HasColumnName("cAmazonServiceLevel");
            entity.Property(e => e.CAnmerkung).HasColumnName("cAnmerkung");
            entity.Property(e => e.CBenutzername)
                .HasMaxLength(255)
                .HasColumnName("cBenutzername");
            entity.Property(e => e.CBestellhinweis).HasColumnName("cBestellhinweis");
            entity.Property(e => e.CBestellnr)
                .HasMaxLength(50)
                .HasColumnName("cBestellnr");
            entity.Property(e => e.CFirmaName)
                .HasMaxLength(255)
                .HasColumnName("cFirmaName");
            entity.Property(e => e.CInetBestellnr)
                .HasMaxLength(50)
                .HasColumnName("cInetBestellnr");
            entity.Property(e => e.CKundeNr)
                .HasMaxLength(30)
                .HasColumnName("cKundeNr");
            entity.Property(e => e.CLieferadresseAdressZusatz)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseAdressZusatz");
            entity.Property(e => e.CLieferadresseAnrede)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseAnrede");
            entity.Property(e => e.CLieferadresseBundesland)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseBundesland");
            entity.Property(e => e.CLieferadresseFax)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseFax");
            entity.Property(e => e.CLieferadresseFirma)
                .HasMaxLength(128)
                .HasColumnName("cLieferadresseFirma");
            entity.Property(e => e.CLieferadresseLand)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseLand");
            entity.Property(e => e.CLieferadresseMail)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseMail");
            entity.Property(e => e.CLieferadresseNachname)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseNachname");
            entity.Property(e => e.CLieferadresseOrt)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseOrt");
            entity.Property(e => e.CLieferadressePlz)
                .HasMaxLength(24)
                .HasColumnName("cLieferadressePlz");
            entity.Property(e => e.CLieferadresseStrasse)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseStrasse");
            entity.Property(e => e.CLieferadresseTelefon)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseTelefon");
            entity.Property(e => e.CLieferadresseTitel)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseTitel");
            entity.Property(e => e.CLieferadresseVorname)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseVorname");
            entity.Property(e => e.CLieferadresseZusatz)
                .HasMaxLength(60)
                .HasColumnName("cLieferadresseZusatz");
            entity.Property(e => e.CPlattformName)
                .HasMaxLength(30)
                .HasColumnName("cPlattformName");
            entity.Property(e => e.CRechnungsadresseAdressZusatz)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseAdressZusatz");
            entity.Property(e => e.CRechnungsadresseFax)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseFax");
            entity.Property(e => e.CRechnungsadresseFirma)
                .HasMaxLength(128)
                .HasColumnName("cRechnungsadresseFirma");
            entity.Property(e => e.CRechnungsadresseLand)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseLand");
            entity.Property(e => e.CRechnungsadresseMail)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseMail");
            entity.Property(e => e.CRechnungsadresseNachname)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseNachname");
            entity.Property(e => e.CRechnungsadresseOrt)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseOrt");
            entity.Property(e => e.CRechnungsadressePlz)
                .HasMaxLength(24)
                .HasColumnName("cRechnungsadressePlz");
            entity.Property(e => e.CRechnungsadresseStrasse)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseStrasse");
            entity.Property(e => e.CRechnungsadresseTelefon)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseTelefon");
            entity.Property(e => e.CRechnungsadresseTitel)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseTitel");
            entity.Property(e => e.CRechnungsadresseVorname)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseVorname");
            entity.Property(e => e.CRechnungsadresseZusatz)
                .HasMaxLength(60)
                .HasColumnName("cRechnungsadresseZusatz");
            entity.Property(e => e.CRechnungsnummern)
                .HasMaxLength(200)
                .HasColumnName("cRechnungsnummern");
            entity.Property(e => e.CRueckhalteGrund)
                .HasMaxLength(30)
                .HasColumnName("cRueckhalteGrund");
            entity.Property(e => e.CShopName)
                .HasMaxLength(255)
                .HasColumnName("cShopName");
            entity.Property(e => e.CSpracheName)
                .HasMaxLength(255)
                .HasColumnName("cSpracheName");
            entity.Property(e => e.CStatus)
                .HasMaxLength(255)
                .HasColumnName("cStatus");
            entity.Property(e => e.CVersandartName)
                .HasMaxLength(255)
                .HasColumnName("cVersandartName");
            entity.Property(e => e.CWaehrungIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWaehrungISO");
            entity.Property(e => e.CZahlungsart)
                .HasMaxLength(255)
                .HasColumnName("cZahlungsart");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DGedruckt)
                .HasColumnType("datetime")
                .HasColumnName("dGedruckt");
            entity.Property(e => e.DMailVersandt)
                .HasColumnType("datetime")
                .HasColumnName("dMailVersandt");
            entity.Property(e => e.DVoraussichtlicheLieferung)
                .HasColumnType("datetime")
                .HasColumnName("dVoraussichtlicheLieferung");
            entity.Property(e => e.FAnzahlGepickt)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlGepickt");
            entity.Property(e => e.FArtikelgewicht)
                .HasColumnType("numeric(38, 13)")
                .HasColumnName("fArtikelgewicht");
            entity.Property(e => e.FArtikelversandgewicht)
                .HasColumnType("numeric(38, 13)")
                .HasColumnName("fArtikelversandgewicht");
            entity.Property(e => e.FGutschriftWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGutschriftWert");
            entity.Property(e => e.FWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWert");
            entity.Property(e => e.FZahlung)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZahlung");
            entity.Property(e => e.FZusatzgewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZusatzgewicht");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KColor).HasColumnName("kColor");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KInetBestellung).HasColumnName("kInetBestellung");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KRueckhalteGrund).HasColumnName("kRueckhalteGrund");
            entity.Property(e => e.KVersandart).HasColumnName("kVersandart");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");
            entity.Property(e => e.NAuftragStatus).HasColumnName("nAuftragStatus");
            entity.Property(e => e.NAuftragsprioritaet).HasColumnName("nAuftragsprioritaet");
            entity.Property(e => e.NIstBezahlt).HasColumnName("nIstBezahlt");
            entity.Property(e => e.NIstDropshipping).HasColumnName("nIstDropshipping");
            entity.Property(e => e.NIstWmsgesperrt).HasColumnName("nIstWMSGesperrt");
            entity.Property(e => e.NIstWmsteillieferungErlaubt).HasColumnName("nIstWMSTeillieferungErlaubt");
            entity.Property(e => e.NPickZustand).HasColumnName("nPickZustand");
            entity.Property(e => e.NPickstatus).HasColumnName("nPickstatus");
            entity.Property(e => e.NPlattform).HasColumnName("nPlattform");
            entity.Property(e => e.NVersandstatus).HasColumnName("nVersandstatus");
            entity.Property(e => e.NVersandstatusEigen).HasColumnName("nVersandstatusEigen");
            entity.Property(e => e.NWmsvorkommissionieren).HasColumnName("nWMSVorkommissionieren");
            entity.Property(e => e.NZahlungsstatus).HasColumnName("nZahlungsstatus");
        });

        modelBuilder.Entity<LvAuftragZahlungszuordnung>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvAuftragZahlungszuordnung", "Zahlungsabgleich");

            entity.Property(e => e.CBestellnummer)
                .HasMaxLength(50)
                .HasColumnName("cBestellnummer");
            entity.Property(e => e.CEbayBuyerUserId)
                .HasMaxLength(255)
                .HasColumnName("cEbayBuyerUserId");
            entity.Property(e => e.CExterneBestellNr)
                .HasMaxLength(50)
                .HasColumnName("cExterneBestellNr");
            entity.Property(e => e.CFirma)
                .HasMaxLength(128)
                .HasColumnName("cFirma");
            entity.Property(e => e.CKundennummer)
                .HasMaxLength(30)
                .HasColumnName("cKundennummer");
            entity.Property(e => e.CLieferscheinnummer)
                .HasMaxLength(50)
                .HasColumnName("cLieferscheinnummer");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CVerwendungszweck)
                .HasMaxLength(1000)
                .HasColumnName("cVerwendungszweck");
            entity.Property(e => e.CVorname)
                .HasMaxLength(255)
                .HasColumnName("cVorname");
            entity.Property(e => e.CZahlungsartbezeichnung)
                .HasMaxLength(255)
                .HasColumnName("cZahlungsartbezeichnung");
            entity.Property(e => e.DBelegdatum)
                .HasColumnType("datetime")
                .HasColumnName("dBelegdatum");
            entity.Property(e => e.FAuftragswert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAuftragswert");
            entity.Property(e => e.FBetrag)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBetrag");
            entity.Property(e => e.FOffenerWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fOffenerWert");
            entity.Property(e => e.FSkontowertInProzent)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fSkontowertInProzent");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");
            entity.Property(e => e.NRechnungStatus).HasColumnName("nRechnungStatus");
            entity.Property(e => e.NZahlungStatus).HasColumnName("nZahlungStatus");
        });

        modelBuilder.Entity<LvAuftragsposition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvAuftragsposition", "Verkauf");

            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CErloeskonto)
                .HasMaxLength(10)
                .HasColumnName("cErloeskonto");
            entity.Property(e => e.CHinweis)
                .HasMaxLength(2000)
                .HasColumnName("cHinweis");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.FAnzRetoure)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzRetoure");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.FAufEinkaufsliste)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAufEinkaufsliste");
            entity.Property(e => e.FAufRechnung)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAufRechnung");
            entity.Property(e => e.FAuslieferungGesperrt)
                .HasColumnType("decimal(25, 4)")
                .HasColumnName("fAuslieferungGesperrt");
            entity.Property(e => e.FFehlbestand)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fFehlbestand");
            entity.Property(e => e.FFehlbestandEigen)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fFehlbestandEigen");
            entity.Property(e => e.FGeliefert)
                .HasColumnType("decimal(25, 4)")
                .HasColumnName("fGeliefert");
            entity.Property(e => e.FGutgeschrieben)
                .HasColumnType("decimal(25, 4)")
                .HasColumnName("fGutgeschrieben");
            entity.Property(e => e.FLagerbestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLagerbestand");
            entity.Property(e => e.FLagerbestandEigen)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLagerbestandEigen");
            entity.Property(e => e.FMwSt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwSt");
            entity.Property(e => e.FOffeneAuftragsmenge)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fOffeneAuftragsmenge");
            entity.Property(e => e.FVerfuegbar)
                .HasColumnType("numeric(25, 4)")
                .HasColumnName("fVerfuegbar");
            entity.Property(e => e.FVerfuegbarGesperrt)
                .HasColumnType("decimal(25, 4)")
                .HasColumnName("fVerfuegbarGesperrt");
            entity.Property(e => e.FVkNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVkNetto");
            entity.Property(e => e.FVkbrutto)
                .HasColumnType("decimal(38, 12)")
                .HasColumnName("fVKBrutto");
            entity.Property(e => e.FVknettoGesamt)
                .HasColumnType("decimal(25, 4)")
                .HasColumnName("fVKNettoGesamt");
            entity.Property(e => e.FZulauf)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZulauf");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KAuftragPosition).HasColumnName("kAuftragPosition");
            entity.Property(e => e.KKonfigurationsVater).HasColumnName("kKonfigurationsVater");
            entity.Property(e => e.KStuecklistenVater).HasColumnName("kStuecklistenVater");
            entity.Property(e => e.NAnzahlFehlbestandEigen)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("nAnzahlFehlbestandEigen");
            entity.Property(e => e.NAuftragStatus).HasColumnName("nAuftragStatus");
            entity.Property(e => e.NLagerAktiv).HasColumnName("nLagerAktiv");
            entity.Property(e => e.NLieferbarStatus).HasColumnName("nLieferbarStatus");
            entity.Property(e => e.NLieferbarStatusEigen).HasColumnName("nLieferbarStatusEigen");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<LvAuftragsposition1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvAuftragsposition", "Versand");

            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CArtikelbezeichnung)
                .HasMaxLength(255)
                .HasColumnName("cArtikelbezeichnung");
            entity.Property(e => e.CHinweis)
                .HasMaxLength(2000)
                .HasColumnName("cHinweis");
            entity.Property(e => e.FAnzahlAufPicklisten)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlAufPicklisten");
            entity.Property(e => e.FAuftragsmenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAuftragsmenge");
            entity.Property(e => e.FAuslieferungGesperrt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAuslieferungGesperrt");
            entity.Property(e => e.FBereitsGeliefert)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fBereitsGeliefert");
            entity.Property(e => e.FBestandWms)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fBestandWMS");
            entity.Property(e => e.FFehlbestand)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fFehlbestand");
            entity.Property(e => e.FFehlbestandEigen)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fFehlbestandEigen");
            entity.Property(e => e.FGesamtbestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGesamtbestand");
            entity.Property(e => e.FOffeneAuftragsmenge)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fOffeneAuftragsmenge");
            entity.Property(e => e.FReserviert)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fReserviert");
            entity.Property(e => e.FReserviertEigen)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fReserviertEigen");
            entity.Property(e => e.FVerfuegbarGesperrt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVerfuegbarGesperrt");
            entity.Property(e => e.FZulauf)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZulauf");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KKonfigurationsVater).HasColumnName("kKonfigurationsVater");
            entity.Property(e => e.KStuecklistenVater).HasColumnName("kStuecklistenVater");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.NHatLagerbestandInVariationen).HasColumnName("nHatLagerbestandInVariationen");
            entity.Property(e => e.NIstFreiposition).HasColumnName("nIstFreiposition");
            entity.Property(e => e.NIstLagerartikel).HasColumnName("nIstLagerartikel");
            entity.Property(e => e.NLieferbarStatus).HasColumnName("nLieferbarStatus");
            entity.Property(e => e.NLieferbarStatusEigen).HasColumnName("nLieferbarStatusEigen");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<LvAuftragspositionsvariation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvAuftragspositionsvariation", "Versand");

            entity.Property(e => e.CWert)
                .HasMaxLength(255)
                .HasColumnName("cWert");
            entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
        });

        modelBuilder.Entity<LvAuftragsverwaltung>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvAuftragsverwaltung", "Verkauf");

            entity.Property(e => e.CAnmerkung).HasColumnName("cAnmerkung");
            entity.Property(e => e.CAuftragsnummer)
                .HasMaxLength(50)
                .HasColumnName("cAuftragsnummer");
            entity.Property(e => e.CBenutzername)
                .HasMaxLength(255)
                .HasColumnName("cBenutzername");
            entity.Property(e => e.CExterneAuftragsnummer)
                .HasMaxLength(50)
                .HasColumnName("cExterneAuftragsnummer");
            entity.Property(e => e.CFarbbedeutung)
                .HasMaxLength(255)
                .HasColumnName("cFarbbedeutung");
            entity.Property(e => e.CFirmenname)
                .HasMaxLength(255)
                .HasColumnName("cFirmenname");
            entity.Property(e => e.CKundeNr)
                .HasMaxLength(30)
                .HasColumnName("cKundeNr");
            entity.Property(e => e.CKundengruppe)
                .HasMaxLength(255)
                .HasColumnName("cKundengruppe");
            entity.Property(e => e.CLieferadresseAdresszusatz)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseAdresszusatz");
            entity.Property(e => e.CLieferadresseAnrede)
                .HasMaxLength(20)
                .HasColumnName("cLieferadresseAnrede");
            entity.Property(e => e.CLieferadresseBundesland)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseBundesland");
            entity.Property(e => e.CLieferadresseFax)
                .HasMaxLength(20)
                .HasColumnName("cLieferadresseFax");
            entity.Property(e => e.CLieferadresseFirma)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseFirma");
            entity.Property(e => e.CLieferadresseLand)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseLand");
            entity.Property(e => e.CLieferadresseLandIso)
                .HasMaxLength(5)
                .HasColumnName("cLieferadresseLandIso");
            entity.Property(e => e.CLieferadresseMail)
                .HasMaxLength(50)
                .HasColumnName("cLieferadresseMail");
            entity.Property(e => e.CLieferadresseMobilTelefon)
                .HasMaxLength(20)
                .HasColumnName("cLieferadresseMobilTelefon");
            entity.Property(e => e.CLieferadresseNachname)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseNachname");
            entity.Property(e => e.CLieferadresseOrt)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseOrt");
            entity.Property(e => e.CLieferadressePlz)
                .HasMaxLength(15)
                .HasColumnName("cLieferadressePlz");
            entity.Property(e => e.CLieferadressePostId)
                .HasMaxLength(64)
                .HasColumnName("cLieferadressePostId");
            entity.Property(e => e.CLieferadresseStrasse)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseStrasse");
            entity.Property(e => e.CLieferadresseTelefon)
                .HasMaxLength(20)
                .HasColumnName("cLieferadresseTelefon");
            entity.Property(e => e.CLieferadresseTitel)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseTitel");
            entity.Property(e => e.CLieferadresseVorname)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseVorname");
            entity.Property(e => e.CLieferadresseZusatz)
                .HasMaxLength(60)
                .HasColumnName("cLieferadresseZusatz");
            entity.Property(e => e.CRechnungsadresseAdresszusatz)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseAdresszusatz");
            entity.Property(e => e.CRechnungsadresseAnrede)
                .HasMaxLength(20)
                .HasColumnName("cRechnungsadresseAnrede");
            entity.Property(e => e.CRechnungsadresseBundesland)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseBundesland");
            entity.Property(e => e.CRechnungsadresseFax)
                .HasMaxLength(20)
                .HasColumnName("cRechnungsadresseFax");
            entity.Property(e => e.CRechnungsadresseFirma)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseFirma");
            entity.Property(e => e.CRechnungsadresseLand)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseLand");
            entity.Property(e => e.CRechnungsadresseLandIso)
                .HasMaxLength(5)
                .HasColumnName("cRechnungsadresseLandIso");
            entity.Property(e => e.CRechnungsadresseMail)
                .HasMaxLength(50)
                .HasColumnName("cRechnungsadresseMail");
            entity.Property(e => e.CRechnungsadresseMobilTelefon)
                .HasMaxLength(20)
                .HasColumnName("cRechnungsadresseMobilTelefon");
            entity.Property(e => e.CRechnungsadresseNachname)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseNachname");
            entity.Property(e => e.CRechnungsadresseOrt)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseOrt");
            entity.Property(e => e.CRechnungsadressePlz)
                .HasMaxLength(15)
                .HasColumnName("cRechnungsadressePlz");
            entity.Property(e => e.CRechnungsadressePostId)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadressePostId");
            entity.Property(e => e.CRechnungsadresseStrasse)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseStrasse");
            entity.Property(e => e.CRechnungsadresseTelefon)
                .HasMaxLength(20)
                .HasColumnName("cRechnungsadresseTelefon");
            entity.Property(e => e.CRechnungsadresseTitel)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseTitel");
            entity.Property(e => e.CRechnungsadresseVorname)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseVorname");
            entity.Property(e => e.CRechnungsadresseZusatz)
                .HasMaxLength(60)
                .HasColumnName("cRechnungsadresseZusatz");
            entity.Property(e => e.CRechnungsnummern)
                .HasMaxLength(200)
                .HasColumnName("cRechnungsnummern");
            entity.Property(e => e.CRueckhalteGrund)
                .HasMaxLength(30)
                .HasColumnName("cRueckhalteGrund");
            entity.Property(e => e.CShopname)
                .HasMaxLength(255)
                .HasColumnName("cShopname");
            entity.Property(e => e.CSonstiges).HasColumnName("cSonstiges");
            entity.Property(e => e.CStatustext)
                .HasMaxLength(255)
                .HasColumnName("cStatustext");
            entity.Property(e => e.CStornoBenutzername)
                .HasMaxLength(255)
                .HasColumnName("cStornoBenutzername");
            entity.Property(e => e.CStornoKommentar)
                .HasMaxLength(100)
                .HasColumnName("cStornoKommentar");
            entity.Property(e => e.CStornogrund)
                .HasMaxLength(50)
                .HasColumnName("cStornogrund");
            entity.Property(e => e.CVersandartname)
                .HasMaxLength(255)
                .HasColumnName("cVersandartname");
            entity.Property(e => e.CVersandlandIso)
                .HasMaxLength(5)
                .HasColumnName("cVersandlandISO");
            entity.Property(e => e.CVersandlandWaehrung)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cVersandlandWaehrung");
            entity.Property(e => e.CWaehrung)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWaehrung");
            entity.Property(e => e.CZahlungsartname)
                .HasMaxLength(255)
                .HasColumnName("cZahlungsartname");
            entity.Property(e => e.CZahlungsmodulId)
                .HasMaxLength(64)
                .HasColumnName("cZahlungsmodulID");
            entity.Property(e => e.CeBayBenutzername)
                .HasMaxLength(64)
                .HasColumnName("ceBayBenutzername");
            entity.Property(e => e.CeBayVerwendungszweck)
                .HasMaxLength(1000)
                .HasColumnName("ceBayVerwendungszweck");
            entity.Property(e => e.DBezahldatum)
                .HasColumnType("datetime")
                .HasColumnName("dBezahldatum");
            entity.Property(e => e.DDruckdatum)
                .HasColumnType("datetime")
                .HasColumnName("dDruckdatum");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DMaildatum)
                .HasColumnType("datetime")
                .HasColumnName("dMaildatum");
            entity.Property(e => e.DStorniert)
                .HasColumnType("datetime")
                .HasColumnName("dStorniert");
            entity.Property(e => e.DVersanddatum)
                .HasColumnType("datetime")
                .HasColumnName("dVersanddatum");
            entity.Property(e => e.DVoraussichtlichesLieferdatum)
                .HasColumnType("datetime")
                .HasColumnName("dVoraussichtlichesLieferdatum");
            entity.Property(e => e.DZahldatum)
                .HasColumnType("datetime")
                .HasColumnName("dZahldatum");
            entity.Property(e => e.DZahlungsmaildatum)
                .HasColumnType("datetime")
                .HasColumnName("dZahlungsmaildatum");
            entity.Property(e => e.FAuftragswertBrutto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAuftragswertBrutto");
            entity.Property(e => e.FAuftragswertNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAuftragswertNetto");
            entity.Property(e => e.FAuftragswertVersandland)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("fAuftragswertVersandland");
            entity.Property(e => e.FBereitsgezahltWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBereitsgezahltWert");
            entity.Property(e => e.FGutgeschriebenerWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGutgeschriebenerWert");
            entity.Property(e => e.FOffenerWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fOffenerWert");
            entity.Property(e => e.FVersandlandWaehrungFaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVersandlandWaehrungFaktor");
            entity.Property(e => e.FWaehrungsfaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWaehrungsfaktor");
            entity.Property(e => e.FZusatzgewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZusatzgewicht");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBestellhinweis).HasColumnName("kBestellhinweis");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KInetBestellung).HasColumnName("kInetBestellung");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KRueckhaltegrund).HasColumnName("kRueckhaltegrund");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.KVersandart).HasColumnName("kVersandart");
            entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");
            entity.Property(e => e.NAuftragStatus).HasColumnName("nAuftragStatus");
            entity.Property(e => e.NBeschreibung).HasColumnName("nBeschreibung");
            entity.Property(e => e.NDebitorennr).HasColumnName("nDebitorennr");
            entity.Property(e => e.NFarbcode).HasColumnName("nFarbcode");
            entity.Property(e => e.NInet).HasColumnName("nInet");
            entity.Property(e => e.NInnergemeinschaftlicheLieferung).HasColumnName("nInnergemeinschaftlicheLieferung");
            entity.Property(e => e.NIstExterneRechnung).HasColumnName("nIstExterneRechnung");
            entity.Property(e => e.NIstReadOnly).HasColumnName("nIstReadOnly");
            entity.Property(e => e.NKomplettAusgeliefert).HasColumnName("nKomplettAusgeliefert");
            entity.Property(e => e.NLieferprioritaet).HasColumnName("nLieferprioritaet");
            entity.Property(e => e.NLieferstatus).HasColumnName("nLieferstatus");
            entity.Property(e => e.NPending).HasColumnName("nPending");
            entity.Property(e => e.NPlattformTyp).HasColumnName("nPlattformTyp");
            entity.Property(e => e.NRechnungStatus).HasColumnName("nRechnungStatus");
            entity.Property(e => e.NSteuereinstellung).HasColumnName("nSteuereinstellung");
            entity.Property(e => e.NStorniert).HasColumnName("nStorniert");
            entity.Property(e => e.NUmsatzsteuerfrei).HasColumnName("nUmsatzsteuerfrei");
            entity.Property(e => e.NWmsgesperrt).HasColumnName("nWMSGesperrt");
            entity.Property(e => e.NWmsteillieferung).HasColumnName("nWMSTeillieferung");
            entity.Property(e => e.NWmsvorkommissionieren).HasColumnName("nWMSVorkommissionieren");
            entity.Property(e => e.NZahlungStatus).HasColumnName("nZahlungStatus");
            entity.Property(e => e.NZahlungszielTage).HasColumnName("nZahlungszielTage");
        });

        modelBuilder.Entity<LvAuftragsverwaltungCache>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvAuftragsverwaltungCache", "Verkauf");

            entity.Property(e => e.CAnmerkung).HasColumnName("cAnmerkung");
            entity.Property(e => e.CAuftragsnummer)
                .HasMaxLength(50)
                .HasColumnName("cAuftragsnummer");
            entity.Property(e => e.CBenutzername)
                .HasMaxLength(255)
                .HasColumnName("cBenutzername");
            entity.Property(e => e.CExterneAuftragsnummer)
                .HasMaxLength(50)
                .HasColumnName("cExterneAuftragsnummer");
            entity.Property(e => e.CFarbbedeutung)
                .HasMaxLength(255)
                .HasColumnName("cFarbbedeutung");
            entity.Property(e => e.CFirmenname)
                .HasMaxLength(255)
                .HasColumnName("cFirmenname");
            entity.Property(e => e.CKundeNr)
                .HasMaxLength(30)
                .HasColumnName("cKundeNr");
            entity.Property(e => e.CKundengruppe)
                .HasMaxLength(255)
                .HasColumnName("cKundengruppe");
            entity.Property(e => e.CLieferadresseAdresszusatz)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseAdresszusatz");
            entity.Property(e => e.CLieferadresseAnrede)
                .HasMaxLength(20)
                .HasColumnName("cLieferadresseAnrede");
            entity.Property(e => e.CLieferadresseBundesland)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseBundesland");
            entity.Property(e => e.CLieferadresseFax)
                .HasMaxLength(20)
                .HasColumnName("cLieferadresseFax");
            entity.Property(e => e.CLieferadresseFirma)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseFirma");
            entity.Property(e => e.CLieferadresseLand)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseLand");
            entity.Property(e => e.CLieferadresseLandIso)
                .HasMaxLength(5)
                .HasColumnName("cLieferadresseLandIso");
            entity.Property(e => e.CLieferadresseMail)
                .HasMaxLength(50)
                .HasColumnName("cLieferadresseMail");
            entity.Property(e => e.CLieferadresseMobilTelefon)
                .HasMaxLength(20)
                .HasColumnName("cLieferadresseMobilTelefon");
            entity.Property(e => e.CLieferadresseNachname)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseNachname");
            entity.Property(e => e.CLieferadresseOrt)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseOrt");
            entity.Property(e => e.CLieferadressePlz)
                .HasMaxLength(15)
                .HasColumnName("cLieferadressePlz");
            entity.Property(e => e.CLieferadressePostId)
                .HasMaxLength(64)
                .HasColumnName("cLieferadressePostId");
            entity.Property(e => e.CLieferadresseStrasse)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseStrasse");
            entity.Property(e => e.CLieferadresseTelefon)
                .HasMaxLength(20)
                .HasColumnName("cLieferadresseTelefon");
            entity.Property(e => e.CLieferadresseTitel)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseTitel");
            entity.Property(e => e.CLieferadresseVorname)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseVorname");
            entity.Property(e => e.CLieferadresseZusatz)
                .HasMaxLength(60)
                .HasColumnName("cLieferadresseZusatz");
            entity.Property(e => e.CRechnungsadresseAdresszusatz)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseAdresszusatz");
            entity.Property(e => e.CRechnungsadresseAnrede)
                .HasMaxLength(20)
                .HasColumnName("cRechnungsadresseAnrede");
            entity.Property(e => e.CRechnungsadresseBundesland)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseBundesland");
            entity.Property(e => e.CRechnungsadresseFax)
                .HasMaxLength(20)
                .HasColumnName("cRechnungsadresseFax");
            entity.Property(e => e.CRechnungsadresseFirma)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseFirma");
            entity.Property(e => e.CRechnungsadresseLand)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseLand");
            entity.Property(e => e.CRechnungsadresseLandIso)
                .HasMaxLength(5)
                .HasColumnName("cRechnungsadresseLandIso");
            entity.Property(e => e.CRechnungsadresseMail)
                .HasMaxLength(50)
                .HasColumnName("cRechnungsadresseMail");
            entity.Property(e => e.CRechnungsadresseMobilTelefon)
                .HasMaxLength(20)
                .HasColumnName("cRechnungsadresseMobilTelefon");
            entity.Property(e => e.CRechnungsadresseNachname)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseNachname");
            entity.Property(e => e.CRechnungsadresseOrt)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseOrt");
            entity.Property(e => e.CRechnungsadressePlz)
                .HasMaxLength(15)
                .HasColumnName("cRechnungsadressePlz");
            entity.Property(e => e.CRechnungsadressePostId)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadressePostId");
            entity.Property(e => e.CRechnungsadresseStrasse)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseStrasse");
            entity.Property(e => e.CRechnungsadresseTelefon)
                .HasMaxLength(20)
                .HasColumnName("cRechnungsadresseTelefon");
            entity.Property(e => e.CRechnungsadresseTitel)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseTitel");
            entity.Property(e => e.CRechnungsadresseVorname)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseVorname");
            entity.Property(e => e.CRechnungsadresseZusatz)
                .HasMaxLength(60)
                .HasColumnName("cRechnungsadresseZusatz");
            entity.Property(e => e.CRechnungsnummern)
                .HasMaxLength(200)
                .HasColumnName("cRechnungsnummern");
            entity.Property(e => e.CRueckhalteGrund)
                .HasMaxLength(30)
                .HasColumnName("cRueckhalteGrund");
            entity.Property(e => e.CShopname)
                .HasMaxLength(255)
                .HasColumnName("cShopname");
            entity.Property(e => e.CSonstiges).HasColumnName("cSonstiges");
            entity.Property(e => e.CStatustext)
                .HasMaxLength(255)
                .HasColumnName("cStatustext");
            entity.Property(e => e.CStornoBenutzername)
                .HasMaxLength(255)
                .HasColumnName("cStornoBenutzername");
            entity.Property(e => e.CStornoKommentar)
                .HasMaxLength(100)
                .HasColumnName("cStornoKommentar");
            entity.Property(e => e.CStornogrund)
                .HasMaxLength(50)
                .HasColumnName("cStornogrund");
            entity.Property(e => e.CVersandartname)
                .HasMaxLength(255)
                .HasColumnName("cVersandartname");
            entity.Property(e => e.CVersandlandIso)
                .HasMaxLength(5)
                .HasColumnName("cVersandlandISO");
            entity.Property(e => e.CVersandlandWaehrung)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cVersandlandWaehrung");
            entity.Property(e => e.CWaehrung)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWaehrung");
            entity.Property(e => e.CZahlungsartname)
                .HasMaxLength(255)
                .HasColumnName("cZahlungsartname");
            entity.Property(e => e.CZahlungsmodulId)
                .HasMaxLength(64)
                .HasColumnName("cZahlungsmodulID");
            entity.Property(e => e.CeBayBenutzername)
                .HasMaxLength(64)
                .HasColumnName("ceBayBenutzername");
            entity.Property(e => e.CeBayVerwendungszweck)
                .HasMaxLength(1000)
                .HasColumnName("ceBayVerwendungszweck");
            entity.Property(e => e.DBezahldatum)
                .HasColumnType("datetime")
                .HasColumnName("dBezahldatum");
            entity.Property(e => e.DDruckdatum)
                .HasColumnType("datetime")
                .HasColumnName("dDruckdatum");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DMaildatum)
                .HasColumnType("datetime")
                .HasColumnName("dMaildatum");
            entity.Property(e => e.DStorniert)
                .HasColumnType("datetime")
                .HasColumnName("dStorniert");
            entity.Property(e => e.DVersanddatum)
                .HasColumnType("datetime")
                .HasColumnName("dVersanddatum");
            entity.Property(e => e.DVoraussichtlichesLieferdatum)
                .HasColumnType("datetime")
                .HasColumnName("dVoraussichtlichesLieferdatum");
            entity.Property(e => e.DZahldatum)
                .HasColumnType("datetime")
                .HasColumnName("dZahldatum");
            entity.Property(e => e.DZahlungsmaildatum)
                .HasColumnType("datetime")
                .HasColumnName("dZahlungsmaildatum");
            entity.Property(e => e.FAuftragswertBrutto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAuftragswertBrutto");
            entity.Property(e => e.FAuftragswertNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAuftragswertNetto");
            entity.Property(e => e.FAuftragswertVersandland)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("fAuftragswertVersandland");
            entity.Property(e => e.FBereitsgezahltWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBereitsgezahltWert");
            entity.Property(e => e.FGutgeschriebenerWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGutgeschriebenerWert");
            entity.Property(e => e.FOffenerWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fOffenerWert");
            entity.Property(e => e.FVersandlandWaehrungFaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVersandlandWaehrungFaktor");
            entity.Property(e => e.FWaehrungsfaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWaehrungsfaktor");
            entity.Property(e => e.FZusatzgewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZusatzgewicht");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBestellhinweis).HasColumnName("kBestellhinweis");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KInetBestellung).HasColumnName("kInetBestellung");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KRueckhaltegrund).HasColumnName("kRueckhaltegrund");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.KVersandart).HasColumnName("kVersandart");
            entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");
            entity.Property(e => e.NAuftragStatus).HasColumnName("nAuftragStatus");
            entity.Property(e => e.NBeschreibung).HasColumnName("nBeschreibung");
            entity.Property(e => e.NDebitorennr).HasColumnName("nDebitorennr");
            entity.Property(e => e.NFarbcode).HasColumnName("nFarbcode");
            entity.Property(e => e.NInet).HasColumnName("nInet");
            entity.Property(e => e.NInnergemeinschaftlicheLieferung).HasColumnName("nInnergemeinschaftlicheLieferung");
            entity.Property(e => e.NIstExterneRechnung).HasColumnName("nIstExterneRechnung");
            entity.Property(e => e.NIstReadOnly).HasColumnName("nIstReadOnly");
            entity.Property(e => e.NKomplettAusgeliefert).HasColumnName("nKomplettAusgeliefert");
            entity.Property(e => e.NLieferprioritaet).HasColumnName("nLieferprioritaet");
            entity.Property(e => e.NLieferstatus).HasColumnName("nLieferstatus");
            entity.Property(e => e.NPending).HasColumnName("nPending");
            entity.Property(e => e.NPlattformTyp).HasColumnName("nPlattformTyp");
            entity.Property(e => e.NRechnungStatus).HasColumnName("nRechnungStatus");
            entity.Property(e => e.NSteuereinstellung).HasColumnName("nSteuereinstellung");
            entity.Property(e => e.NStorniert).HasColumnName("nStorniert");
            entity.Property(e => e.NUmsatzsteuerfrei).HasColumnName("nUmsatzsteuerfrei");
            entity.Property(e => e.NWmsgesperrt).HasColumnName("nWMSGesperrt");
            entity.Property(e => e.NWmsteillieferung).HasColumnName("nWMSTeillieferung");
            entity.Property(e => e.NWmsvorkommissionieren).HasColumnName("nWMSVorkommissionieren");
            entity.Property(e => e.NZahlungStatus).HasColumnName("nZahlungStatus");
            entity.Property(e => e.NZahlungszielTage).HasColumnName("nZahlungszielTage");
        });

        modelBuilder.Entity<LvAuftragsverwaltungDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvAuftragsverwaltungDetail", "Verkauf");

            entity.Property(e => e.CAnmerkung).HasColumnName("cAnmerkung");
            entity.Property(e => e.CSonstiges).HasColumnName("cSonstiges");
            entity.Property(e => e.CStornobenutzer)
                .HasMaxLength(255)
                .HasColumnName("cStornobenutzer");
            entity.Property(e => e.DStornozeitpunkt)
                .HasColumnType("datetime")
                .HasColumnName("dStornozeitpunkt");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.NStornogrund).HasColumnName("nStornogrund");
        });

        modelBuilder.Entity<LvBestellPosGutschriftErstellbar>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvBestellPosGutschriftErstellbar", "Verkauf");

            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CEinheit)
                .HasMaxLength(255)
                .HasColumnName("cEinheit");
            entity.Property(e => e.CHinweis)
                .HasMaxLength(2000)
                .HasColumnName("cHinweis");
            entity.Property(e => e.CItemId)
                .HasMaxLength(255)
                .HasColumnName("cItemID");
            entity.Property(e => e.COrderItemId)
                .HasMaxLength(255)
                .HasColumnName("cOrderItemId");
            entity.Property(e => e.CString)
                .HasMaxLength(255)
                .HasColumnName("cString");
            entity.Property(e => e.CStringStandard)
                .HasMaxLength(255)
                .HasColumnName("cStringStandard");
            entity.Property(e => e.CTransactionId)
                .HasMaxLength(255)
                .HasColumnName("cTransactionID");
            entity.Property(e => e.CUnique)
                .HasMaxLength(30)
                .HasColumnName("cUnique");
            entity.Property(e => e.FEkNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEkNetto");
            entity.Property(e => e.FMwSt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwSt");
            entity.Property(e => e.FRabatt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabatt");
            entity.Property(e => e.FVkNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVkNetto");
            entity.Property(e => e.FVkpreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVKPreis");
            entity.Property(e => e.KAmazonBestellungPos).HasColumnName("kAmazonBestellungPos");
            entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");
            entity.Property(e => e.KBestellStueckliste).HasColumnName("kBestellStueckliste");
            entity.Property(e => e.KKonfigItem).HasColumnName("kKonfigItem");
            entity.Property(e => e.NAnzahl)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("nAnzahl");
            entity.Property(e => e.NDropshipping).HasColumnName("nDropshipping");
            entity.Property(e => e.NHatUpload).HasColumnName("nHatUpload");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NType).HasColumnName("nType");
            entity.Property(e => e.TArtikelKArtikel).HasColumnName("tArtikel_kArtikel");
            entity.Property(e => e.TBestellungKBestellung).HasColumnName("tBestellung_kBestellung");
        });

        modelBuilder.Entity<LvBestellPositionen>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvBestellPositionen", "Beschaffung");

            entity.Property(e => e.CArtNr)
                .HasMaxLength(255)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CHan)
                .HasMaxLength(255)
                .HasColumnName("cHAN");
            entity.Property(e => e.CHinweis)
                .HasMaxLength(2000)
                .HasColumnName("cHinweis");
            entity.Property(e => e.CKommentar)
                .HasMaxLength(512)
                .HasColumnName("cKommentar");
            entity.Property(e => e.CLieferantenArtNr)
                .HasMaxLength(255)
                .HasColumnName("cLieferantenArtNr");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CNameLief)
                .HasMaxLength(255)
                .HasColumnName("cNameLief");
            entity.Property(e => e.DLieferdatum)
                .HasColumnType("datetime")
                .HasColumnName("dLieferdatum");
            entity.Property(e => e.FEkNettoGesamt)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fEkNettoGesamt");
            entity.Property(e => e.FEknetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEKNetto");
            entity.Property(e => e.FEknettoArtikel)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEKNettoArtikel");
            entity.Property(e => e.FMenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMenge");
            entity.Property(e => e.FMengeGeliefert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMengeGeliefert");
            entity.Property(e => e.FUst)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fUST");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KBestellungPos).HasColumnName("kBestellungPos");
            entity.Property(e => e.NPosTyp).HasColumnName("nPosTyp");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<LvBestellung>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvBestellung", "Beschaffung");

            entity.Property(e => e.CBenutzerName)
                .HasMaxLength(255)
                .HasColumnName("cBenutzerName");
            entity.Property(e => e.CBestellnummer)
                .HasMaxLength(255)
                .HasColumnName("cBestellnummer");
            entity.Property(e => e.CBezugsAuftragsNummer)
                .HasMaxLength(255)
                .HasColumnName("cBezugsAuftragsNummer");
            entity.Property(e => e.CDruckAnmerkung).HasColumnName("cDruckAnmerkung");
            entity.Property(e => e.CFremdbelegnummer)
                .HasMaxLength(255)
                .HasColumnName("cFremdbelegnummer");
            entity.Property(e => e.CInternerKommentar).HasColumnName("cInternerKommentar");
            entity.Property(e => e.CKundeFirma)
                .HasMaxLength(128)
                .HasColumnName("cKundeFirma");
            entity.Property(e => e.CKundeName)
                .HasMaxLength(255)
                .HasColumnName("cKundeName");
            entity.Property(e => e.CKundeVorname)
                .HasMaxLength(255)
                .HasColumnName("cKundeVorname");
            entity.Property(e => e.CKundenNr)
                .HasMaxLength(30)
                .HasColumnName("cKundenNr");
            entity.Property(e => e.CLieferadresseFirma)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseFirma");
            entity.Property(e => e.CLieferadresseLand)
                .HasMaxLength(5)
                .HasColumnName("cLieferadresseLand");
            entity.Property(e => e.CLieferadresseMail)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseMail");
            entity.Property(e => e.CLieferadresseName)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseName");
            entity.Property(e => e.CLieferadresseOrt)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseOrt");
            entity.Property(e => e.CLieferadressePlz)
                .HasMaxLength(255)
                .HasColumnName("cLieferadressePlz");
            entity.Property(e => e.CLieferadresseStrasse)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseStrasse");
            entity.Property(e => e.CLieferadresseVorname)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseVorname");
            entity.Property(e => e.CLieferanschrift)
                .HasMaxLength(1279)
                .HasColumnName("cLieferanschrift");
            entity.Property(e => e.CLieferantEigeneKundennummer)
                .HasMaxLength(64)
                .HasColumnName("cLieferantEigeneKundennummer");
            entity.Property(e => e.CLieferantFirmenZusatz)
                .HasMaxLength(255)
                .HasColumnName("cLieferantFirmenZusatz");
            entity.Property(e => e.CLieferantName)
                .HasMaxLength(255)
                .HasColumnName("cLieferantName");
            entity.Property(e => e.CLieferantennummer)
                .HasMaxLength(64)
                .HasColumnName("cLieferantennummer");
            entity.Property(e => e.CRechnungsadresseFirma)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseFirma");
            entity.Property(e => e.CRechnungsadresseName)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseName");
            entity.Property(e => e.CRechnungsadresseVorname)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseVorname");
            entity.Property(e => e.CWarenLagerName)
                .HasMaxLength(255)
                .HasColumnName("cWarenLagerName");
            entity.Property(e => e.DAngemahnt)
                .HasColumnType("datetime")
                .HasColumnName("dAngemahnt");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DExportiert)
                .HasColumnType("datetime")
                .HasColumnName("dExportiert");
            entity.Property(e => e.DGedruckt)
                .HasColumnType("datetime")
                .HasColumnName("dGedruckt");
            entity.Property(e => e.DGefaxt)
                .HasColumnType("datetime")
                .HasColumnName("dGefaxt");
            entity.Property(e => e.DGemailt)
                .HasColumnType("datetime")
                .HasColumnName("dGemailt");
            entity.Property(e => e.DLieferdatum)
                .HasColumnType("datetime")
                .HasColumnName("dLieferdatum");
            entity.Property(e => e.FGesamtmenge)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fGesamtmenge");
            entity.Property(e => e.FMengeGeliefert)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fMengeGeliefert");
            entity.Property(e => e.FProzentGeliefert)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("fProzentGeliefert");
            entity.Property(e => e.FSummePositionenBrutto)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("fSummePositionenBrutto");
            entity.Property(e => e.FSummePositionenNetto)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fSummePositionenNetto");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KInboundRef).HasColumnName("kInboundRef");
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.NAlterBestellung).HasColumnName("nAlterBestellung");
            entity.Property(e => e.NAnzahlPositionen).HasColumnName("nAnzahlPositionen");
            entity.Property(e => e.NBestaetigt).HasColumnName("nBestaetigt");
            entity.Property(e => e.NHasEingangsrechnung).HasColumnName("nHasEingangsrechnung");
            entity.Property(e => e.NIstUeberfaellig).HasColumnName("nIstUeberfaellig");
            entity.Property(e => e.NManuellAbgeschlossen).HasColumnName("nManuellAbgeschlossen");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<LvBestellungen>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvBestellungen", "SCX");

            entity.Property(e => e.CAnmerkung).HasColumnName("cAnmerkung");
            entity.Property(e => e.CAuftragsnummer)
                .HasMaxLength(50)
                .HasColumnName("cAuftragsnummer");
            entity.Property(e => e.CBenutzername)
                .HasMaxLength(255)
                .HasColumnName("cBenutzername");
            entity.Property(e => e.CChannelDisplayName)
                .HasMaxLength(255)
                .HasColumnName("cChannelDisplayName");
            entity.Property(e => e.CExterneAuftragsnummer)
                .HasMaxLength(50)
                .HasColumnName("cExterneAuftragsnummer");
            entity.Property(e => e.CFarbbedeutung)
                .HasMaxLength(255)
                .HasColumnName("cFarbbedeutung");
            entity.Property(e => e.CFirmenname)
                .HasMaxLength(255)
                .HasColumnName("cFirmenname");
            entity.Property(e => e.CKundeNr)
                .HasMaxLength(30)
                .HasColumnName("cKundeNr");
            entity.Property(e => e.CKundengruppe)
                .HasMaxLength(255)
                .HasColumnName("cKundengruppe");
            entity.Property(e => e.CLieferadresseAdresszusatz)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseAdresszusatz");
            entity.Property(e => e.CLieferadresseAnrede)
                .HasMaxLength(20)
                .HasColumnName("cLieferadresseAnrede");
            entity.Property(e => e.CLieferadresseBundesland)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseBundesland");
            entity.Property(e => e.CLieferadresseFax)
                .HasMaxLength(20)
                .HasColumnName("cLieferadresseFax");
            entity.Property(e => e.CLieferadresseFirma)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseFirma");
            entity.Property(e => e.CLieferadresseLand)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseLand");
            entity.Property(e => e.CLieferadresseLandIso)
                .HasMaxLength(5)
                .HasColumnName("cLieferadresseLandIso");
            entity.Property(e => e.CLieferadresseMail)
                .HasMaxLength(50)
                .HasColumnName("cLieferadresseMail");
            entity.Property(e => e.CLieferadresseMobilTelefon)
                .HasMaxLength(20)
                .HasColumnName("cLieferadresseMobilTelefon");
            entity.Property(e => e.CLieferadresseNachname)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseNachname");
            entity.Property(e => e.CLieferadresseOrt)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseOrt");
            entity.Property(e => e.CLieferadressePlz)
                .HasMaxLength(15)
                .HasColumnName("cLieferadressePlz");
            entity.Property(e => e.CLieferadressePostId)
                .HasMaxLength(64)
                .HasColumnName("cLieferadressePostId");
            entity.Property(e => e.CLieferadresseStrasse)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseStrasse");
            entity.Property(e => e.CLieferadresseTelefon)
                .HasMaxLength(20)
                .HasColumnName("cLieferadresseTelefon");
            entity.Property(e => e.CLieferadresseTitel)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseTitel");
            entity.Property(e => e.CLieferadresseVorname)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseVorname");
            entity.Property(e => e.CLieferadresseZusatz)
                .HasMaxLength(60)
                .HasColumnName("cLieferadresseZusatz");
            entity.Property(e => e.CRechnungsadresseAdresszusatz)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseAdresszusatz");
            entity.Property(e => e.CRechnungsadresseAnrede)
                .HasMaxLength(20)
                .HasColumnName("cRechnungsadresseAnrede");
            entity.Property(e => e.CRechnungsadresseBundesland)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseBundesland");
            entity.Property(e => e.CRechnungsadresseFax)
                .HasMaxLength(20)
                .HasColumnName("cRechnungsadresseFax");
            entity.Property(e => e.CRechnungsadresseFirma)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseFirma");
            entity.Property(e => e.CRechnungsadresseLand)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseLand");
            entity.Property(e => e.CRechnungsadresseLandIso)
                .HasMaxLength(5)
                .HasColumnName("cRechnungsadresseLandIso");
            entity.Property(e => e.CRechnungsadresseMail)
                .HasMaxLength(50)
                .HasColumnName("cRechnungsadresseMail");
            entity.Property(e => e.CRechnungsadresseMobilTelefon)
                .HasMaxLength(20)
                .HasColumnName("cRechnungsadresseMobilTelefon");
            entity.Property(e => e.CRechnungsadresseNachname)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseNachname");
            entity.Property(e => e.CRechnungsadresseOrt)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseOrt");
            entity.Property(e => e.CRechnungsadressePlz)
                .HasMaxLength(15)
                .HasColumnName("cRechnungsadressePlz");
            entity.Property(e => e.CRechnungsadressePostId)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadressePostId");
            entity.Property(e => e.CRechnungsadresseStrasse)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseStrasse");
            entity.Property(e => e.CRechnungsadresseTelefon)
                .HasMaxLength(20)
                .HasColumnName("cRechnungsadresseTelefon");
            entity.Property(e => e.CRechnungsadresseTitel)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseTitel");
            entity.Property(e => e.CRechnungsadresseVorname)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseVorname");
            entity.Property(e => e.CRechnungsadresseZusatz)
                .HasMaxLength(60)
                .HasColumnName("cRechnungsadresseZusatz");
            entity.Property(e => e.CRechnungsnummern)
                .HasMaxLength(200)
                .HasColumnName("cRechnungsnummern");
            entity.Property(e => e.CRueckhalteGrund)
                .HasMaxLength(30)
                .HasColumnName("cRueckhalteGrund");
            entity.Property(e => e.CShopname)
                .HasMaxLength(255)
                .HasColumnName("cShopname");
            entity.Property(e => e.CSonstiges).HasColumnName("cSonstiges");
            entity.Property(e => e.CStatustext)
                .HasMaxLength(255)
                .HasColumnName("cStatustext");
            entity.Property(e => e.CStornoBenutzername)
                .HasMaxLength(255)
                .HasColumnName("cStornoBenutzername");
            entity.Property(e => e.CStornoKommentar)
                .HasMaxLength(100)
                .HasColumnName("cStornoKommentar");
            entity.Property(e => e.CStornogrund)
                .HasMaxLength(50)
                .HasColumnName("cStornogrund");
            entity.Property(e => e.CVersandartname)
                .HasMaxLength(255)
                .HasColumnName("cVersandartname");
            entity.Property(e => e.CVersandlandIso)
                .HasMaxLength(5)
                .HasColumnName("cVersandlandISO");
            entity.Property(e => e.CVersandlandWaehrung)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cVersandlandWaehrung");
            entity.Property(e => e.CWaehrung)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWaehrung");
            entity.Property(e => e.CZahlungsartname)
                .HasMaxLength(255)
                .HasColumnName("cZahlungsartname");
            entity.Property(e => e.CZahlungsmodulId)
                .HasMaxLength(64)
                .HasColumnName("cZahlungsmodulID");
            entity.Property(e => e.CeBayBenutzername)
                .HasMaxLength(64)
                .HasColumnName("ceBayBenutzername");
            entity.Property(e => e.CeBayVerwendungszweck)
                .HasMaxLength(1000)
                .HasColumnName("ceBayVerwendungszweck");
            entity.Property(e => e.DBezahldatum)
                .HasColumnType("datetime")
                .HasColumnName("dBezahldatum");
            entity.Property(e => e.DDruckdatum)
                .HasColumnType("datetime")
                .HasColumnName("dDruckdatum");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DMaildatum)
                .HasColumnType("datetime")
                .HasColumnName("dMaildatum");
            entity.Property(e => e.DStorniert)
                .HasColumnType("datetime")
                .HasColumnName("dStorniert");
            entity.Property(e => e.DVersanddatum)
                .HasColumnType("datetime")
                .HasColumnName("dVersanddatum");
            entity.Property(e => e.DVoraussichtlichesLieferdatum)
                .HasColumnType("datetime")
                .HasColumnName("dVoraussichtlichesLieferdatum");
            entity.Property(e => e.DZahldatum)
                .HasColumnType("datetime")
                .HasColumnName("dZahldatum");
            entity.Property(e => e.DZahlungsmaildatum)
                .HasColumnType("datetime")
                .HasColumnName("dZahlungsmaildatum");
            entity.Property(e => e.FAuftragswertBrutto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAuftragswertBrutto");
            entity.Property(e => e.FAuftragswertNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAuftragswertNetto");
            entity.Property(e => e.FAuftragswertVersandland)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("fAuftragswertVersandland");
            entity.Property(e => e.FBereitsgezahltWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBereitsgezahltWert");
            entity.Property(e => e.FGutgeschriebenerWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGutgeschriebenerWert");
            entity.Property(e => e.FOffenerWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fOffenerWert");
            entity.Property(e => e.FVersandlandWaehrungFaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVersandlandWaehrungFaktor");
            entity.Property(e => e.FWaehrungsfaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWaehrungsfaktor");
            entity.Property(e => e.FZusatzgewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZusatzgewicht");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBestellhinweis).HasColumnName("kBestellhinweis");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KInetBestellung).HasColumnName("kInetBestellung");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KRueckhaltegrund).HasColumnName("kRueckhaltegrund");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.KVersandart).HasColumnName("kVersandart");
            entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");
            entity.Property(e => e.NAuftragStatus).HasColumnName("nAuftragStatus");
            entity.Property(e => e.NBeschreibung).HasColumnName("nBeschreibung");
            entity.Property(e => e.NCancellationUpload).HasColumnName("nCancellationUpload");
            entity.Property(e => e.NDebitorennr).HasColumnName("nDebitorennr");
            entity.Property(e => e.NFarbcode).HasColumnName("nFarbcode");
            entity.Property(e => e.NInet).HasColumnName("nInet");
            entity.Property(e => e.NInnergemeinschaftlicheLieferung).HasColumnName("nInnergemeinschaftlicheLieferung");
            entity.Property(e => e.NInvoiceUpload).HasColumnName("nInvoiceUpload");
            entity.Property(e => e.NIstExterneRechnung).HasColumnName("nIstExterneRechnung");
            entity.Property(e => e.NIstReadOnly).HasColumnName("nIstReadOnly");
            entity.Property(e => e.NKomplettAusgeliefert).HasColumnName("nKomplettAusgeliefert");
            entity.Property(e => e.NLieferprioritaet).HasColumnName("nLieferprioritaet");
            entity.Property(e => e.NLieferstatus).HasColumnName("nLieferstatus");
            entity.Property(e => e.NPaymentUpload).HasColumnName("nPaymentUpload");
            entity.Property(e => e.NPending).HasColumnName("nPending");
            entity.Property(e => e.NPlattformTyp).HasColumnName("nPlattformTyp");
            entity.Property(e => e.NRechnungStatus).HasColumnName("nRechnungStatus");
            entity.Property(e => e.NReturnUpload).HasColumnName("nReturnUpload");
            entity.Property(e => e.NShippingUpload).HasColumnName("nShippingUpload");
            entity.Property(e => e.NSteuereinstellung).HasColumnName("nSteuereinstellung");
            entity.Property(e => e.NStorniert).HasColumnName("nStorniert");
            entity.Property(e => e.NUmsatzsteuerfrei).HasColumnName("nUmsatzsteuerfrei");
            entity.Property(e => e.NWmsgesperrt).HasColumnName("nWMSGesperrt");
            entity.Property(e => e.NWmsteillieferung).HasColumnName("nWMSTeillieferung");
            entity.Property(e => e.NWmsvorkommissionieren).HasColumnName("nWMSVorkommissionieren");
            entity.Property(e => e.NZahlungStatus).HasColumnName("nZahlungStatus");
            entity.Property(e => e.NZahlungszielTage).HasColumnName("nZahlungszielTage");
        });

        modelBuilder.Entity<LvBinOverview>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvBinOverview");

            entity.Property(e => e.CArtikelNr)
                .HasMaxLength(100)
                .HasColumnName("cArtikelNr");
            entity.Property(e => e.CBinName)
                .HasMaxLength(50)
                .HasColumnName("cBinName");
            entity.Property(e => e.FAnzahlAktuell)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlAktuell");
            entity.Property(e => e.FBreite)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBreite");
            entity.Property(e => e.FHoehe)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fHoehe");
            entity.Property(e => e.FLaenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLaenge");
            entity.Property(e => e.FMaxVolume)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("fMaxVolume");
            entity.Property(e => e.FMaxWeight)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMaxWeight");
            entity.Property(e => e.FSumVolume)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("fSumVolume");
            entity.Property(e => e.FSumWeight)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fSumWeight");
            entity.Property(e => e.FUsedCapacityVolume)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("fUsedCapacityVolume");
            entity.Property(e => e.FUsedCapacityWeight)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("fUsedCapacityWeight");
            entity.Property(e => e.KBinType).HasColumnName("kBinType");
            entity.Property(e => e.KId).HasColumnName("kId");
            entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.KWorkbenchResource).HasColumnName("kWorkbenchResource");
            entity.Property(e => e.NAnzahlArtikel).HasColumnName("nAnzahlArtikel");
            entity.Property(e => e.NCapacityVolumeValid).HasColumnName("nCapacityVolumeValid");
            entity.Property(e => e.NCapacityWeightValid).HasColumnName("nCapacityWeightValid");
            entity.Property(e => e.NGesperrt).HasColumnName("nGesperrt");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<LvConnectorLogeintrag>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvConnectorLogeintrag", "Sync");

            entity.Property(e => e.CExtendedMessage).HasColumnName("cExtendedMessage");
            entity.Property(e => e.CMeldung)
                .HasMaxLength(2048)
                .HasColumnName("cMeldung");
            entity.Property(e => e.DZeitpunkt)
                .HasColumnType("datetime")
                .HasColumnName("dZeitpunkt");
            entity.Property(e => e.KConnectorLogeintrag)
                .ValueGeneratedOnAdd()
                .HasColumnName("kConnectorLogeintrag");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KSyncLogsitzung).HasColumnName("kSyncLogsitzung");
            entity.Property(e => e.NCallType).HasColumnName("nCallType");
            entity.Property(e => e.NSchweregrad).HasColumnName("nSchweregrad");
        });

        modelBuilder.Entity<LvDbeSlogeintrag>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvDbeSLogeintrag", "Sync");

            entity.Property(e => e.CExtendedMessage).HasColumnName("cExtendedMessage");
            entity.Property(e => e.CMeldung)
                .HasMaxLength(2048)
                .HasColumnName("cMeldung");
            entity.Property(e => e.DZeitpunkt)
                .HasColumnType("datetime")
                .HasColumnName("dZeitpunkt");
            entity.Property(e => e.KDbeSlogeintrag)
                .ValueGeneratedOnAdd()
                .HasColumnName("kDbeSLogeintrag");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KSyncLogsitzung).HasColumnName("kSyncLogsitzung");
            entity.Property(e => e.NCallType).HasColumnName("nCallType");
            entity.Property(e => e.NSchweregrad).HasColumnName("nSchweregrad");
        });

        modelBuilder.Entity<LvDisposition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvDisposition", "pps");

            entity.Property(e => e.Artikelname).HasMaxLength(255);
            entity.Property(e => e.Artikelnummer).HasMaxLength(100);
            entity.Property(e => e.Bearbeiter).HasMaxLength(255);
            entity.Property(e => e.BenutzerNameDispo).HasMaxLength(255);
            entity.Property(e => e.BestandAufEinkaufsliste).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestandEigen).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestandGesamt).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestandImZulauf).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestandInAuftraegen).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestandVerfuegbar).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Breite).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.CComment).HasColumnName("cComment");
            entity.Property(e => e.CHan)
                .HasMaxLength(255)
                .HasColumnName("cHAN");
            entity.Property(e => e.CIso)
                .HasMaxLength(10)
                .HasColumnName("cISO");
            entity.Property(e => e.CIso2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cISO2");
            entity.Property(e => e.CKultur)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("cKultur");
            entity.Property(e => e.CNameDeu)
                .HasMaxLength(255)
                .HasColumnName("cNameDeu");
            entity.Property(e => e.CNameEng)
                .HasMaxLength(255)
                .HasColumnName("cNameEng");
            entity.Property(e => e.DCreated).HasColumnName("dCreated");
            entity.Property(e => e.DFilterDate).HasColumnName("dFilterDate");
            entity.Property(e => e.DIntendedCompletionDate).HasColumnName("dIntendedCompletionDate");
            entity.Property(e => e.Ean)
                .HasMaxLength(255)
                .HasColumnName("EAN");
            entity.Property(e => e.Einheit).HasMaxLength(255);
            entity.Property(e => e.FActualQuantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fActualQuantity");
            entity.Property(e => e.FPlannedQuantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPlannedQuantity");
            entity.Property(e => e.FQuantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fQuantity");
            entity.Property(e => e.FQuantityInProductionOrders)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fQuantityInProductionOrders");
            entity.Property(e => e.Gewicht).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Hoehe).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.InProduktion).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.IstMhd).HasColumnName("IstMHD");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KDisposition).HasColumnName("kDisposition");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.Laenge).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Masseinheit).HasMaxLength(255);
            entity.Property(e => e.Mindestbestand).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.NReferenceType).HasColumnName("nReferenceType");
            entity.Property(e => e.NStandard).HasColumnName("nStandard");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
            entity.Property(e => e.Produzierbar).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ReferenceFieldIssue).HasMaxLength(255);
            entity.Property(e => e.ReferenceFieldIssuePosition).HasMaxLength(5);
            entity.Property(e => e.Versandgewicht).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Warengruppe).HasMaxLength(255);
            entity.Property(e => e.ZustandName).HasMaxLength(50);
        });

        modelBuilder.Entity<LvEbayAngebote>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvEbayAngebote", "Ebay");

            entity.Property(e => e.CArtikelKategorieName)
                .HasMaxLength(255)
                .HasColumnName("cArtikelKategorieName");
            entity.Property(e => e.CArtikelnummer)
                .HasMaxLength(100)
                .HasColumnName("cArtikelnummer");
            entity.Property(e => e.CCountryName)
                .HasMaxLength(255)
                .HasColumnName("cCountryName");
            entity.Property(e => e.CEbayCategory1Name)
                .HasMaxLength(255)
                .HasColumnName("cEbayCategory1Name");
            entity.Property(e => e.CEbayCategory2Name)
                .HasMaxLength(255)
                .HasColumnName("cEbayCategory2Name");
            entity.Property(e => e.CEbayUserName)
                .HasMaxLength(40)
                .HasColumnName("cEbayUserName");
            entity.Property(e => e.CFehler)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("cFehler");
            entity.Property(e => e.CHighBidderUserId)
                .HasMaxLength(255)
                .HasColumnName("cHighBidderUserId");
            entity.Property(e => e.CHtmlTemplateName)
                .HasMaxLength(255)
                .HasColumnName("cHtmlTemplateName");
            entity.Property(e => e.CItemId)
                .HasMaxLength(255)
                .HasColumnName("cItemId");
            entity.Property(e => e.CListingDuration)
                .HasMaxLength(255)
                .HasColumnName("cListingDuration");
            entity.Property(e => e.CListingType)
                .HasMaxLength(255)
                .HasColumnName("cListingType");
            entity.Property(e => e.CLocation)
                .HasMaxLength(255)
                .HasColumnName("cLocation");
            entity.Property(e => e.CPayPalEmailAddress)
                .HasMaxLength(255)
                .HasColumnName("cPayPalEmailAddress");
            entity.Property(e => e.CPaymentMethods)
                .HasMaxLength(255)
                .HasColumnName("cPaymentMethods");
            entity.Property(e => e.CPlattform)
                .HasMaxLength(30)
                .HasColumnName("cPlattform");
            entity.Property(e => e.CPostalCode)
                .HasMaxLength(50)
                .HasColumnName("cPostalCode");
            entity.Property(e => e.CRelistId)
                .HasMaxLength(255)
                .HasColumnName("cRelistId");
            entity.Property(e => e.CRueckgabefrist)
                .HasMaxLength(20)
                .HasColumnName("cRueckgabefrist");
            entity.Property(e => e.CScheduleDate)
                .HasMaxLength(10)
                .HasColumnName("cScheduleDate");
            entity.Property(e => e.CScheduleTime)
                .HasMaxLength(5)
                .HasColumnName("cScheduleTime");
            entity.Property(e => e.CShipToLocations)
                .HasMaxLength(255)
                .HasColumnName("cShipToLocations");
            entity.Property(e => e.CShopCategory)
                .HasMaxLength(255)
                .HasColumnName("cShopCategory");
            entity.Property(e => e.CShopCategory2)
                .HasMaxLength(255)
                .HasColumnName("cShopCategory2");
            entity.Property(e => e.CSubTitle)
                .HasMaxLength(55)
                .HasColumnName("cSubTitle");
            entity.Property(e => e.CTemplateName)
                .HasMaxLength(1000)
                .HasColumnName("cTemplateName");
            entity.Property(e => e.CTitle)
                .HasMaxLength(4000)
                .HasColumnName("cTitle");
            entity.Property(e => e.CType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cType");
            entity.Property(e => e.CUserProfilePayment)
                .HasMaxLength(255)
                .HasColumnName("cUserProfilePayment");
            entity.Property(e => e.CUserProfileReturn)
                .HasMaxLength(255)
                .HasColumnName("cUserProfileReturn");
            entity.Property(e => e.CUserProfileShipping)
                .HasMaxLength(255)
                .HasColumnName("cUserProfileShipping");
            entity.Property(e => e.CVersandkostenTraeger)
                .HasMaxLength(50)
                .HasColumnName("cVersandkostenTraeger");
            entity.Property(e => e.CWaehrungIso)
                .HasMaxLength(20)
                .HasColumnName("cWaehrungIso");
            entity.Property(e => e.CZahlunghinweis)
                .IsUnicode(false)
                .HasColumnName("cZahlunghinweis");
            entity.Property(e => e.CZusatzoptionen)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("cZusatzoptionen");
            entity.Property(e => e.DEndtime)
                .HasColumnType("datetime")
                .HasColumnName("dEndtime");
            entity.Property(e => e.DStarttime)
                .HasColumnType("datetime")
                .HasColumnName("dStarttime");
            entity.Property(e => e.FArtikelEbayPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fArtikelEbayPreis");
            entity.Property(e => e.FBestOfferAutoAcceptPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBestOfferAutoAcceptPrice");
            entity.Property(e => e.FBestOfferMinPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBestOfferMinPrice");
            entity.Property(e => e.FBuyItNowPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBuyItNowPrice");
            entity.Property(e => e.FCurrentPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fCurrentPrice");
            entity.Property(e => e.FReservePrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fReservePrice");
            entity.Property(e => e.FReserviert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fReserviert");
            entity.Property(e => e.FStartPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fStartPrice");
            entity.Property(e => e.FStreichPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fStreichPreis");
            entity.Property(e => e.FTotalFees)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fTotalFees");
            entity.Property(e => e.FVatPercent)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVatPercent");
            entity.Property(e => e.FVerfuegbar)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVerfuegbar");
            entity.Property(e => e.FWawiPreisBrutto)
                .HasColumnType("numeric(38, 11)")
                .HasColumnName("fWawiPreisBrutto");
            entity.Property(e => e.FWawiPreisNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWawiPreisNetto");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KEbayItem).HasColumnName("kEbayItem");
            entity.Property(e => e.KEbayUser).HasColumnName("kEbayUser");
            entity.Property(e => e.KEbayVorlage).HasColumnName("kEbayVorlage");
            entity.Property(e => e.KKategorie).HasColumnName("kKategorie");
            entity.Property(e => e.NAngebotsmenge).HasColumnName("nAngebotsmenge");
            entity.Property(e => e.NAutomatischEinstellen).HasColumnName("nAutomatischEinstellen");
            entity.Property(e => e.NBestOfferEnabled).HasColumnName("nBestOfferEnabled");
            entity.Property(e => e.NBestandReserviert).HasColumnName("nBestandReserviert");
            entity.Property(e => e.NBidCount).HasColumnName("nBidCount");
            entity.Property(e => e.NBidderCount).HasColumnName("nBidderCount");
            entity.Property(e => e.NDispatchTimeMax).HasColumnName("nDispatchTimeMax");
            entity.Property(e => e.NEbayCategory1Id).HasColumnName("nEbayCategory1Id");
            entity.Property(e => e.NEbayCategory2Id).HasColumnName("nEbayCategory2Id");
            entity.Property(e => e.NEbayPlus).HasColumnName("nEbayPlus");
            entity.Property(e => e.NGalleryType).HasColumnName("nGalleryType");
            entity.Property(e => e.NGesamtmenge).HasColumnName("nGesamtmenge");
            entity.Property(e => e.NGetItFast).HasColumnName("nGetItFast");
            entity.Property(e => e.NGrundpreisAngabe).HasColumnName("nGrundpreisAngabe");
            entity.Property(e => e.NHitCounter).HasColumnName("nHitCounter");
            entity.Property(e => e.NListingType).HasColumnName("nListingType");
            entity.Property(e => e.NLotSize).HasColumnName("nLotSize");
            entity.Property(e => e.NMaxQuantity).HasColumnName("nMaxQuantity");
            entity.Property(e => e.NMinQuantity).HasColumnName("nMinQuantity");
            entity.Property(e => e.NNurAnGewerbliche).HasColumnName("nNurAnGewerbliche");
            entity.Property(e => e.NPremium).HasColumnName("nPremium");
            entity.Property(e => e.NQuantity).HasColumnName("nQuantity");
            entity.Property(e => e.NRueckgabeMoeglich).HasColumnName("nRueckgabeMoeglich");
            entity.Property(e => e.NScheduleServerSide).HasColumnName("nScheduleServerSide");
            entity.Property(e => e.NSendVat).HasColumnName("nSendVAT");
            entity.Property(e => e.NSiteId).HasColumnName("nSiteId");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
            entity.Property(e => e.NStreichPreisTyp).HasColumnName("nStreichPreisTyp");
            entity.Property(e => e.NUeberverkaeufeMoeglich).HasColumnName("nUeberverkaeufeMoeglich");
            entity.Property(e => e.NVariationenAktiv).HasColumnName("nVariationenAktiv");
            entity.Property(e => e.NVerkauft).HasColumnName("nVerkauft");
            entity.Property(e => e.NVorlageLaufend).HasColumnName("nVorlageLaufend");
        });

        modelBuilder.Entity<LvEbayKundenanfragen>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvEbayKundenanfragen", "Ebay");

            entity.Property(e => e.CArtikelnummer)
                .HasMaxLength(100)
                .HasColumnName("cArtikelnummer");
            entity.Property(e => e.CEbayUserName)
                .HasMaxLength(40)
                .HasColumnName("cEbayUserName");
            entity.Property(e => e.CItemId)
                .HasMaxLength(255)
                .HasColumnName("cItemId");
            entity.Property(e => e.CMessage).HasColumnName("cMessage");
            entity.Property(e => e.CMessageId)
                .HasMaxLength(255)
                .HasColumnName("cMessageId");
            entity.Property(e => e.CPlattform)
                .HasMaxLength(30)
                .HasColumnName("cPlattform");
            entity.Property(e => e.CSenderId)
                .HasMaxLength(255)
                .HasColumnName("cSenderId");
            entity.Property(e => e.CSubject)
                .HasMaxLength(255)
                .HasColumnName("cSubject");
            entity.Property(e => e.CTitle)
                .HasMaxLength(80)
                .HasColumnName("cTitle");
            entity.Property(e => e.DCreationDate)
                .HasMaxLength(30)
                .HasColumnName("dCreationDate");
            entity.Property(e => e.FEbayItemPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEbayItemPrice");
            entity.Property(e => e.FVerfuegbar)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVerfuegbar");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KEbayItem).HasColumnName("kEbayItem");
            entity.Property(e => e.KEbayUser).HasColumnName("kEbayUser");
            entity.Property(e => e.KMemberMessageIn).HasColumnName("kMemberMessageIn");
            entity.Property(e => e.NPublic).HasColumnName("nPublic");
            entity.Property(e => e.NSiteId).HasColumnName("nSiteId");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<LvEbayKundenfeedback>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvEbayKundenfeedback", "Ebay");

            entity.Property(e => e.CArtikelnummer)
                .HasMaxLength(100)
                .HasColumnName("cArtikelnummer");
            entity.Property(e => e.CCommentText)
                .HasMaxLength(80)
                .HasColumnName("cCommentText");
            entity.Property(e => e.CCommentType)
                .HasMaxLength(255)
                .HasColumnName("cCommentType");
            entity.Property(e => e.CCommentingUser)
                .HasMaxLength(255)
                .HasColumnName("cCommentingUser");
            entity.Property(e => e.CEbayUserName)
                .HasMaxLength(40)
                .HasColumnName("cEbayUserName");
            entity.Property(e => e.CFeedbackId)
                .HasMaxLength(255)
                .HasColumnName("cFeedbackID");
            entity.Property(e => e.CFeedbackRole)
                .HasMaxLength(255)
                .HasColumnName("cFeedbackRole");
            entity.Property(e => e.CItemId)
                .HasMaxLength(255)
                .HasColumnName("cItemId");
            entity.Property(e => e.CPlattform)
                .HasMaxLength(30)
                .HasColumnName("cPlattform");
            entity.Property(e => e.CTitle)
                .HasMaxLength(80)
                .HasColumnName("cTitle");
            entity.Property(e => e.CTransactionId)
                .HasMaxLength(255)
                .HasColumnName("cTransactionID");
            entity.Property(e => e.DCommentTime)
                .HasMaxLength(30)
                .HasColumnName("dCommentTime");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KEbayItem).HasColumnName("kEbayItem");
            entity.Property(e => e.KEbayUser).HasColumnName("kEbayUser");
            entity.Property(e => e.KFeedbackIn).HasColumnName("kFeedbackIn");
            entity.Property(e => e.NCommentingUserScore).HasColumnName("nCommentingUserScore");
            entity.Property(e => e.NSiteId).HasColumnName("nSiteId");
        });

        modelBuilder.Entity<LvEbayPreisvorschlaege>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvEbayPreisvorschlaege", "Ebay");

            entity.Property(e => e.CArtikelnummer)
                .HasMaxLength(100)
                .HasColumnName("cArtikelnummer");
            entity.Property(e => e.CBestOfferId)
                .HasMaxLength(256)
                .HasColumnName("cBestOfferId");
            entity.Property(e => e.CCounterMessage)
                .HasMaxLength(255)
                .HasColumnName("cCounterMessage");
            entity.Property(e => e.CCurrency)
                .HasMaxLength(256)
                .HasColumnName("cCurrency");
            entity.Property(e => e.CEmail)
                .HasMaxLength(256)
                .HasColumnName("cEmail");
            entity.Property(e => e.CItemId)
                .HasMaxLength(256)
                .HasColumnName("cItemId");
            entity.Property(e => e.CMessage)
                .HasMaxLength(501)
                .HasColumnName("cMessage");
            entity.Property(e => e.CPlattform)
                .HasMaxLength(30)
                .HasColumnName("cPlattform");
            entity.Property(e => e.CTitle)
                .HasMaxLength(80)
                .HasColumnName("cTitle");
            entity.Property(e => e.CUserId)
                .HasMaxLength(256)
                .HasColumnName("cUserId");
            entity.Property(e => e.DExpirationTime)
                .HasColumnType("datetime")
                .HasColumnName("dExpirationTime");
            entity.Property(e => e.FCounterPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fCounterPrice");
            entity.Property(e => e.FEbayItemPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEbayItemPrice");
            entity.Property(e => e.FPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPrice");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KEbayUser).HasColumnName("kEbayUser");
            entity.Property(e => e.NCounterQuantity).HasColumnName("nCounterQuantity");
            entity.Property(e => e.NFeedbackScore).HasColumnName("nFeedbackScore");
            entity.Property(e => e.NQuantity).HasColumnName("nQuantity");
            entity.Property(e => e.NSiteId).HasColumnName("nSiteId");
        });

        modelBuilder.Entity<LvEbayTransaction>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvEbayTransactions", "Ebay");

            entity.Property(e => e.CArtikelnummer)
                .HasMaxLength(100)
                .HasColumnName("cArtikelnummer");
            entity.Property(e => e.CBestellNr)
                .HasMaxLength(50)
                .HasColumnName("cBestellNr");
            entity.Property(e => e.CBezahltOffen)
                .HasMaxLength(255)
                .HasColumnName("cBezahltOffen");
            entity.Property(e => e.CCityName)
                .HasMaxLength(64)
                .HasColumnName("cCityName");
            entity.Property(e => e.CCommentTextIn)
                .HasMaxLength(80)
                .HasColumnName("cCommentTextIn");
            entity.Property(e => e.CCommentTypeIn)
                .HasMaxLength(255)
                .HasColumnName("cCommentTypeIn");
            entity.Property(e => e.CCountryName)
                .HasMaxLength(255)
                .HasColumnName("cCountryName");
            entity.Property(e => e.CDispute)
                .HasMaxLength(255)
                .HasColumnName("cDispute");
            entity.Property(e => e.CEbayBuyerName)
                .HasMaxLength(255)
                .HasColumnName("cEbayBuyerName");
            entity.Property(e => e.CEbayItemType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cEbayItemType");
            entity.Property(e => e.CEbayUserName)
                .HasMaxLength(40)
                .HasColumnName("cEbayUserName");
            entity.Property(e => e.CEmail)
                .HasMaxLength(255)
                .HasColumnName("cEmail");
            entity.Property(e => e.CItemId)
                .HasMaxLength(255)
                .HasColumnName("cItemId");
            entity.Property(e => e.CPaymentStatus)
                .HasMaxLength(255)
                .HasColumnName("cPaymentStatus");
            entity.Property(e => e.CPlattform)
                .HasMaxLength(30)
                .HasColumnName("cPlattform");
            entity.Property(e => e.CPostalCode)
                .HasMaxLength(12)
                .HasColumnName("cPostalCode");
            entity.Property(e => e.CRelistId)
                .HasMaxLength(255)
                .HasColumnName("cRelistId");
            entity.Property(e => e.CSaCityName)
                .HasMaxLength(64)
                .HasColumnName("cSA_CityName");
            entity.Property(e => e.CSaCountryname)
                .HasMaxLength(255)
                .HasColumnName("cSA_Countryname");
            entity.Property(e => e.CSaName)
                .HasMaxLength(255)
                .HasColumnName("cSA_Name");
            entity.Property(e => e.CSaPostalCode)
                .HasMaxLength(12)
                .HasColumnName("cSA_PostalCode");
            entity.Property(e => e.CSaStateOrProvince)
                .HasMaxLength(64)
                .HasColumnName("cSA_StateOrProvince");
            entity.Property(e => e.CSaStreet)
                .HasMaxLength(255)
                .HasColumnName("cSA_Street");
            entity.Property(e => e.CSaStreet1)
                .HasMaxLength(255)
                .HasColumnName("cSA_Street1");
            entity.Property(e => e.CSaStreet2)
                .HasMaxLength(255)
                .HasColumnName("cSA_Street2");
            entity.Property(e => e.CSku)
                .HasMaxLength(64)
                .HasColumnName("cSku");
            entity.Property(e => e.CSssShippingService)
                .HasMaxLength(255)
                .HasColumnName("cSSS_ShippingService");
            entity.Property(e => e.CStreet)
                .HasMaxLength(255)
                .HasColumnName("cStreet");
            entity.Property(e => e.CStreet1)
                .HasMaxLength(255)
                .HasColumnName("cStreet1");
            entity.Property(e => e.CStreet2)
                .HasMaxLength(255)
                .HasColumnName("cStreet2");
            entity.Property(e => e.CTitle)
                .HasMaxLength(4000)
                .HasColumnName("cTitle");
            entity.Property(e => e.CTransactionId)
                .HasMaxLength(255)
                .HasColumnName("cTransactionId");
            entity.Property(e => e.CUserId)
                .HasMaxLength(255)
                .HasColumnName("cUserId");
            entity.Property(e => e.CVariationTitle)
                .HasMaxLength(255)
                .HasColumnName("cVariationTitle");
            entity.Property(e => e.CVerwendungszweck)
                .HasMaxLength(32)
                .HasColumnName("cVerwendungszweck");
            entity.Property(e => e.CZahlungsart)
                .HasMaxLength(255)
                .HasColumnName("cZahlungsart");
            entity.Property(e => e.CZusatzoptionen)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("cZusatzoptionen");
            entity.Property(e => e.DAbgeschlossenAm)
                .HasColumnType("datetime")
                .HasColumnName("dAbgeschlossenAm");
            entity.Property(e => e.DBezahltAbgeschlossen)
                .HasColumnType("datetime")
                .HasColumnName("dBezahltAbgeschlossen");
            entity.Property(e => e.DCheckoutErstelltAm)
                .HasColumnType("datetime")
                .HasColumnName("dCheckoutErstelltAm");
            entity.Property(e => e.DCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("dCreateDate");
            entity.Property(e => e.DVersendet)
                .HasColumnType("datetime")
                .HasColumnName("dVersendet");
            entity.Property(e => e.FAmountPaid)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAmountPaid");
            entity.Property(e => e.FSssShippingServiceAdditionalCost)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fSSS_ShippingServiceAdditionalCost");
            entity.Property(e => e.FSssShippingServiceCost)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fSSS_ShippingServiceCost");
            entity.Property(e => e.FSteuersatz)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fSteuersatz");
            entity.Property(e => e.FTransactionPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fTransactionPrice");
            entity.Property(e => e.FVerfuegbar)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVerfuegbar");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KBuyer).HasColumnName("kBuyer");
            entity.Property(e => e.KEbayItem).HasColumnName("kEbayItem");
            entity.Property(e => e.KEbayTemplate).HasColumnName("kEbayTemplate");
            entity.Property(e => e.KEbayUser).HasColumnName("kEbayUser");
            entity.Property(e => e.KEigenschaftKombi).HasColumnName("kEigenschaftKombi");
            entity.Property(e => e.KTransaction).HasColumnName("kTransaction");
            entity.Property(e => e.NCheckOut).HasColumnName("nCheckOut");
            entity.Property(e => e.NEbayItemStatus).HasColumnName("nEbayItemStatus");
            entity.Property(e => e.NGalleryType).HasColumnName("nGalleryType");
            entity.Property(e => e.NKomplettAusgeliefert).HasColumnName("nKomplettAusgeliefert");
            entity.Property(e => e.NKonflikt).HasColumnName("nKonflikt");
            entity.Property(e => e.NListingType).HasColumnName("nListingType");
            entity.Property(e => e.NPremium).HasColumnName("nPremium");
            entity.Property(e => e.NQuantity).HasColumnName("nQuantity");
            entity.Property(e => e.NQuantityPurchased).HasColumnName("nQuantityPurchased");
            entity.Property(e => e.NSiteId).HasColumnName("nSiteId");
            entity.Property(e => e.NTransactionStatus).HasColumnName("nTransactionStatus");
            entity.Property(e => e.NVariationenAktiv).HasColumnName("nVariationenAktiv");
            entity.Property(e => e.NVersandZahlungStatus).HasColumnName("nVersandZahlungStatus");
        });

        modelBuilder.Entity<LvEbayZuAktualisierendeAngebote>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvEbayZuAktualisierendeAngebote", "Ebay");

            entity.Property(e => e.CArtikelnummer)
                .HasMaxLength(100)
                .HasColumnName("cArtikelnummer");
            entity.Property(e => e.CEbayUserName)
                .HasMaxLength(40)
                .HasColumnName("cEbayUserName");
            entity.Property(e => e.CItemId)
                .HasMaxLength(255)
                .HasColumnName("cItemId");
            entity.Property(e => e.CPlattform)
                .HasMaxLength(30)
                .HasColumnName("cPlattform");
            entity.Property(e => e.CTitle)
                .HasMaxLength(80)
                .HasColumnName("cTitle");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KEbayItem).HasColumnName("kEbayItem");
            entity.Property(e => e.KEbayUser).HasColumnName("kEbayUser");
            entity.Property(e => e.NAngebotsmenge).HasColumnName("nAngebotsmenge");
            entity.Property(e => e.NBilderOderBeschreibung).HasColumnName("nBilderOderBeschreibung");
            entity.Property(e => e.NFahrzeugverwendungsliste).HasColumnName("nFahrzeugverwendungsliste");
            entity.Property(e => e.NFehler).HasColumnName("nFehler");
            entity.Property(e => e.NKategorie).HasColumnName("nKategorie");
            entity.Property(e => e.NPreise).HasColumnName("nPreise");
            entity.Property(e => e.NRest).HasColumnName("nRest");
            entity.Property(e => e.NRueckgabe).HasColumnName("nRueckgabe");
            entity.Property(e => e.NSiteId).HasColumnName("nSiteId");
            entity.Property(e => e.NVariationenAktiv).HasColumnName("nVariationenAktiv");
            entity.Property(e => e.NVarkombisNichtPreis).HasColumnName("nVarkombisNichtPreis");
            entity.Property(e => e.NVarkombisPreis).HasColumnName("nVarkombisPreis");
            entity.Property(e => e.NVersand).HasColumnName("nVersand");
            entity.Property(e => e.NZahlungsarten).HasColumnName("nZahlungsarten");
        });

        modelBuilder.Entity<LvEingangsrechnung>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvEingangsrechnung", "Beschaffung");

            entity.Property(e => e.CAdresszusatz)
                .HasMaxLength(255)
                .HasColumnName("cAdresszusatz");
            entity.Property(e => e.CBundesland)
                .HasMaxLength(255)
                .HasColumnName("cBundesland");
            entity.Property(e => e.CEigeneRechnungsnummer)
                .HasMaxLength(255)
                .HasColumnName("cEigeneRechnungsnummer");
            entity.Property(e => e.CFax)
                .HasMaxLength(255)
                .HasColumnName("cFax");
            entity.Property(e => e.CFremdbelegnummer)
                .HasMaxLength(255)
                .HasColumnName("cFremdbelegnummer");
            entity.Property(e => e.CLandIso)
                .HasMaxLength(5)
                .HasColumnName("cLandISO");
            entity.Property(e => e.CLieferant)
                .HasMaxLength(255)
                .HasColumnName("cLieferant");
            entity.Property(e => e.CMail)
                .HasMaxLength(255)
                .HasColumnName("cMail");
            entity.Property(e => e.CMobil)
                .HasMaxLength(255)
                .HasColumnName("cMobil");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPlz)
                .HasMaxLength(255)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTel)
                .HasMaxLength(255)
                .HasColumnName("cTel");
            entity.Property(e => e.CWaehrungLieferantIso)
                .HasMaxLength(20)
                .HasColumnName("cWaehrungLieferantIso");
            entity.Property(e => e.DBelegdatum)
                .HasColumnType("datetime")
                .HasColumnName("dBelegdatum");
            entity.Property(e => e.DBezahlt)
                .HasColumnType("datetime")
                .HasColumnName("dBezahlt");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DZahlungsziel)
                .HasColumnType("datetime")
                .HasColumnName("dZahlungsziel");
            entity.Property(e => e.FBrutto)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("fBrutto");
            entity.Property(e => e.FBruttoLieferantenWaehrung)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("fBruttoLieferantenWaehrung");
            entity.Property(e => e.FNetto)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fNetto");
            entity.Property(e => e.FNettoLieferantenWaehrung)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("fNettoLieferantenWaehrung");
            entity.Property(e => e.KEingangsrechnung).HasColumnName("kEingangsrechnung");
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
            entity.Property(e => e.NTageVerbleibend).HasColumnName("nTageVerbleibend");
            entity.Property(e => e.NZahlungFreigegeben).HasColumnName("nZahlungFreigegeben");
        });

        modelBuilder.Entity<LvEingangsrechnungBestellung>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvEingangsrechnungBestellung", "Beschaffung");

            entity.Property(e => e.CEigeneBestellnummer)
                .HasMaxLength(255)
                .HasColumnName("cEigeneBestellnummer");
            entity.Property(e => e.CFremdbelegnummer)
                .HasMaxLength(255)
                .HasColumnName("cFremdbelegnummer");
            entity.Property(e => e.KEingangsrechnung).HasColumnName("kEingangsrechnung");
            entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");
        });

        modelBuilder.Entity<LvEingangsrechnungPo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvEingangsrechnungPos", "Beschaffung");

            entity.Property(e => e.CArtNr)
                .HasMaxLength(255)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CEinheit)
                .HasMaxLength(255)
                .HasColumnName("cEinheit");
            entity.Property(e => e.CHan)
                .HasMaxLength(255)
                .HasColumnName("cHan");
            entity.Property(e => e.CHinweis)
                .HasMaxLength(255)
                .HasColumnName("cHinweis");
            entity.Property(e => e.CLieferantenArtNr)
                .HasMaxLength(255)
                .HasColumnName("cLieferantenArtNr");
            entity.Property(e => e.CLieferantenBezeichnung)
                .HasMaxLength(255)
                .HasColumnName("cLieferantenBezeichnung");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.FEkbrutto)
                .HasColumnType("decimal(38, 12)")
                .HasColumnName("fEKBrutto");
            entity.Property(e => e.FEkbruttoGesamt)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("fEKBruttoGesamt");
            entity.Property(e => e.FEknetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEKNetto");
            entity.Property(e => e.FEknettoGesamt)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fEKNettoGesamt");
            entity.Property(e => e.FMenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMenge");
            entity.Property(e => e.FMwSt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwSt");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KEingangsrechnung).HasColumnName("kEingangsrechnung");
            entity.Property(e => e.KEingangsrechnungPos).HasColumnName("kEingangsrechnungPos");
            entity.Property(e => e.KLieferantenbestellung).HasColumnName("kLieferantenbestellung");
        });

        modelBuilder.Entity<LvEinkaufskosten>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvEinkaufskosten", "Verkauf");

            entity.Property(e => e.FKalkKosten)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fKalkKosten");
            entity.Property(e => e.FKosten)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fKosten");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
        });

        modelBuilder.Entity<LvEinkaufsliste>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvEinkaufsliste", "Beschaffung");

            entity.Property(e => e.BestellmengeGesamt).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CBarcode)
                .HasMaxLength(255)
                .HasColumnName("cBarcode");
            entity.Property(e => e.CHan)
                .HasMaxLength(255)
                .HasColumnName("cHAN");
            entity.Property(e => e.CHinweis).HasColumnName("cHinweis");
            entity.Property(e => e.CLiefArtNr)
                .HasMaxLength(255)
                .HasColumnName("cLiefArtNr");
            entity.Property(e => e.CLieferantGuenstigster)
                .HasMaxLength(322)
                .HasColumnName("cLieferantGuenstigster");
            entity.Property(e => e.CLieferantName)
                .HasMaxLength(255)
                .HasColumnName("cLieferantName");
            entity.Property(e => e.CLieferantSchnellster)
                .HasMaxLength(322)
                .HasColumnName("cLieferantSchnellster");
            entity.Property(e => e.CLieferantStd)
                .HasMaxLength(322)
                .HasColumnName("cLieferantStd");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CNameBeimLieferanten)
                .HasMaxLength(255)
                .HasColumnName("cNameBeimLieferanten");
            entity.Property(e => e.CNameBenutzer)
                .HasMaxLength(255)
                .HasColumnName("cNameBenutzer");
            entity.Property(e => e.CWaehrungIso)
                .HasMaxLength(5)
                .HasColumnName("cWaehrungISO");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.FAbnahmeIntervall)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAbnahmeIntervall");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.FArtikelGld)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fArtikelGld");
            entity.Property(e => e.FAufEinkaufslisteGesetzt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAufEinkaufslisteGesetzt");
            entity.Property(e => e.FEknettoAktuell)
                .HasColumnType("numeric(25, 13)")
                .HasColumnName("fEKNettoAktuell");
            entity.Property(e => e.FFehlbestand)
                .HasColumnType("decimal(27, 13)")
                .HasColumnName("fFehlbestand");
            entity.Property(e => e.FLagerbestandEigen)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLagerbestandEigen");
            entity.Property(e => e.FLiefBestand)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fLiefBestand");
            entity.Property(e => e.FMindestbestand)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fMindestbestand");
            entity.Property(e => e.FMindestbestandGlobal)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMindestbestandGlobal");
            entity.Property(e => e.FReserviert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fReserviert");
            entity.Property(e => e.FVerfuegbar)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVerfuegbar");
            entity.Property(e => e.FZulauf)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZulauf");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KArtikelEinkaufsliste).HasColumnName("kArtikelEinkaufsliste");
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.KLieferantGuenstigster).HasColumnName("kLieferantGuenstigster");
            entity.Property(e => e.KLieferantSchnellster).HasColumnName("kLieferantSchnellster");
            entity.Property(e => e.KLieferantStd).HasColumnName("kLieferantStd");
            entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");
            entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");
            entity.Property(e => e.NLieferzeit).HasColumnName("nLieferzeit");
            entity.Property(e => e.NMindestAbnahme).HasColumnName("nMindestAbnahme");
            entity.Property(e => e.NStandardLager).HasColumnName("nStandardLager");
            entity.Property(e => e.NTeilbar).HasColumnName("nTeilbar");
            entity.Property(e => e.WarenlagerName).HasMaxLength(255);
        });

        modelBuilder.Entity<LvExterneRechnung>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvExterneRechnung", "Verkauf");

            entity.Property(e => e.CExterneRechnungsnr)
                .HasMaxLength(50)
                .HasColumnName("cExterneRechnungsnr");
            entity.Property(e => e.CWaehrungIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWaehrungISO");
            entity.Property(e => e.DBelegzeitpunktUtc).HasColumnName("dBelegzeitpunktUtc");
            entity.Property(e => e.FSummeBrutto)
                .HasColumnType("decimal(23, 15)")
                .HasColumnName("fSummeBrutto");
            entity.Property(e => e.FSummeNetto)
                .HasColumnType("decimal(23, 15)")
                .HasColumnName("fSummeNetto");
            entity.Property(e => e.KExterneRechnung).HasColumnName("kExterneRechnung");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
        });

        modelBuilder.Entity<LvExterneRechnungsposition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvExterneRechnungsposition", "Verkauf");

            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CAuftragsnr)
                .HasMaxLength(50)
                .HasColumnName("cAuftragsnr");
            entity.Property(e => e.CAuftragswaehrungIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAuftragswaehrungISO");
            entity.Property(e => e.DAuftragszeitpunktUtc).HasColumnName("dAuftragszeitpunktUtc");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(10, 4)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.FSummeBrutto)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("fSummeBrutto");
            entity.Property(e => e.FSummeRabattBrutto)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("fSummeRabattBrutto");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KAuftragPosition).HasColumnName("kAuftragPosition");
            entity.Property(e => e.KExterneRechnung).HasColumnName("kExterneRechnung");
            entity.Property(e => e.KExterneRechnungPosition)
                .ValueGeneratedOnAdd()
                .HasColumnName("kExterneRechnungPosition");
            entity.Property(e => e.KExterneRechnungPositionVater).HasColumnName("kExterneRechnungPositionVater");
        });

        modelBuilder.Entity<LvExternerBeleg>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvExternerBeleg", "Rechnung");

            entity.Property(e => e.CBelegnr)
                .HasMaxLength(50)
                .HasColumnName("cBelegnr");
            entity.Property(e => e.CWaehrungIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWaehrungISO");
            entity.Property(e => e.DBelegdatumUtc).HasColumnName("dBelegdatumUtc");
            entity.Property(e => e.FVkBrutto)
                .HasColumnType("decimal(25, 2)")
                .HasColumnName("fVkBrutto");
            entity.Property(e => e.FVkNetto)
                .HasColumnType("decimal(25, 2)")
                .HasColumnName("fVkNetto");
            entity.Property(e => e.KExternerBeleg).HasColumnName("kExternerBeleg");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
        });

        modelBuilder.Entity<LvExternerBelegPositionen>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvExternerBelegPositionen", "Rechnung");

            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CExterneAuftragsnummer)
                .HasMaxLength(50)
                .HasColumnName("cExterneAuftragsnummer");
            entity.Property(e => e.DExternesAuftragsdatumUtc).HasColumnName("dExternesAuftragsdatumUtc");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.FVkBrutto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVkBrutto");
            entity.Property(e => e.FVkNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVkNetto");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KAuftragPosition).HasColumnName("kAuftragPosition");
            entity.Property(e => e.KExternerBeleg).HasColumnName("kExternerBeleg");
            entity.Property(e => e.KExternerBelegPosition).HasColumnName("kExternerBelegPosition");
            entity.Property(e => e.KExternerBelegPositionVater).HasColumnName("kExternerBelegPositionVater");
        });

        modelBuilder.Entity<LvFulfillmentauftrag>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvFulfillmentauftrag", "Versand");

            entity.Property(e => e.CBezugsauftragsnummer)
                .HasMaxLength(50)
                .HasColumnName("cBezugsauftragsnummer");
            entity.Property(e => e.CBezugslieferscheinnummer)
                .HasMaxLength(255)
                .HasColumnName("cBezugslieferscheinnummer");
            entity.Property(e => e.CDienstleister)
                .HasMaxLength(255)
                .HasColumnName("cDienstleister");
            entity.Property(e => e.CFehlermeldung).HasColumnName("cFehlermeldung");
            entity.Property(e => e.CKommentar)
                .HasMaxLength(1000)
                .HasColumnName("cKommentar");
            entity.Property(e => e.CKundeNr)
                .HasMaxLength(30)
                .HasColumnName("cKundeNr");
            entity.Property(e => e.CKundenNummer)
                .HasMaxLength(30)
                .HasColumnName("cKundenNummer");
            entity.Property(e => e.CLieferadresseAdressZusatz)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseAdressZusatz");
            entity.Property(e => e.CLieferadresseAnrede)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseAnrede");
            entity.Property(e => e.CLieferadresseBundesland)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseBundesland");
            entity.Property(e => e.CLieferadresseFax)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseFax");
            entity.Property(e => e.CLieferadresseFirma)
                .HasMaxLength(128)
                .HasColumnName("cLieferadresseFirma");
            entity.Property(e => e.CLieferadresseLand)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseLand");
            entity.Property(e => e.CLieferadresseMail)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseMail");
            entity.Property(e => e.CLieferadresseNachname)
                .HasMaxLength(126)
                .HasColumnName("cLieferadresseNachname");
            entity.Property(e => e.CLieferadresseOrt)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseOrt");
            entity.Property(e => e.CLieferadressePlz)
                .HasMaxLength(24)
                .HasColumnName("cLieferadressePlz");
            entity.Property(e => e.CLieferadresseStrasse)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseStrasse");
            entity.Property(e => e.CLieferadresseTelefon)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseTelefon");
            entity.Property(e => e.CLieferadresseVorname)
                .HasMaxLength(126)
                .HasColumnName("cLieferadresseVorname");
            entity.Property(e => e.CLieferadresseZusatz)
                .HasMaxLength(60)
                .HasColumnName("cLieferadresseZusatz");
            entity.Property(e => e.CLieferprioritaet)
                .HasMaxLength(30)
                .HasColumnName("cLieferprioritaet");
            entity.Property(e => e.CRechnungsadresseAdressZusatz)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseAdressZusatz");
            entity.Property(e => e.CRechnungsadresseFax)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseFax");
            entity.Property(e => e.CRechnungsadresseFirma)
                .HasMaxLength(128)
                .HasColumnName("cRechnungsadresseFirma");
            entity.Property(e => e.CRechnungsadresseLand)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseLand");
            entity.Property(e => e.CRechnungsadresseMail)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseMail");
            entity.Property(e => e.CRechnungsadresseNachname)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseNachname");
            entity.Property(e => e.CRechnungsadresseOrt)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseOrt");
            entity.Property(e => e.CRechnungsadressePlz)
                .HasMaxLength(24)
                .HasColumnName("cRechnungsadressePlz");
            entity.Property(e => e.CRechnungsadresseStrasse)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseStrasse");
            entity.Property(e => e.CRechnungsadresseTelefon)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseTelefon");
            entity.Property(e => e.CRechnungsadresseTitel)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseTitel");
            entity.Property(e => e.CRechnungsadresseVorname)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseVorname");
            entity.Property(e => e.CRechnungsadresseZusatz)
                .HasMaxLength(60)
                .HasColumnName("cRechnungsadresseZusatz");
            entity.Property(e => e.CStornoCode)
                .HasMaxLength(255)
                .HasColumnName("cStornoCode");
            entity.Property(e => e.CStornoGrund).HasColumnName("cStornoGrund");
            entity.Property(e => e.CTransaktionsnummer)
                .HasMaxLength(255)
                .HasColumnName("cTransaktionsnummer");
            entity.Property(e => e.DErstelltAm)
                .HasColumnType("datetime")
                .HasColumnName("dErstelltAm");
            entity.Property(e => e.DInBearbeitungSeit)
                .HasColumnType("datetime")
                .HasColumnName("dInBearbeitungSeit");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.NAmazonUser).HasColumnName("nAmazonUser");
            entity.Property(e => e.NFulfillmentDienstleister).HasColumnName("nFulfillmentDienstleister");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<LvFulfillmentauftragsposition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvFulfillmentauftragsposition", "Versand");

            entity.Property(e => e.CAbhilfe)
                .HasMaxLength(255)
                .HasColumnName("cAbhilfe");
            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CArtikelGeschenkText)
                .HasMaxLength(255)
                .HasColumnName("cArtikelGeschenkText");
            entity.Property(e => e.CArtikelHinweis)
                .HasMaxLength(2000)
                .HasColumnName("cArtikelHinweis");
            entity.Property(e => e.CCarrier)
                .HasMaxLength(20)
                .HasColumnName("cCarrier");
            entity.Property(e => e.CErrorMessage)
                .HasMaxLength(2000)
                .HasColumnName("cErrorMessage");
            entity.Property(e => e.CErrorType)
                .HasMaxLength(20)
                .HasColumnName("cErrorType");
            entity.Property(e => e.CIdentCode)
                .HasMaxLength(50)
                .HasColumnName("cIdentCode");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KFulfillmentAuftrag).HasColumnName("kFulfillmentAuftrag");
            entity.Property(e => e.KFulfillmentAuftragPos).HasColumnName("kFulfillmentAuftragPos");
            entity.Property(e => e.NErrorCode).HasColumnName("nErrorCode");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<LvIduUploadQueue>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvIduUploadQueue", "Amazon");

            entity.Property(e => e.CBelegnummer)
                .HasMaxLength(50)
                .HasColumnName("cBelegnummer");
            entity.Property(e => e.CMeldung)
                .HasMaxLength(4000)
                .HasColumnName("cMeldung");
            entity.Property(e => e.COrderId)
                .HasMaxLength(30)
                .HasColumnName("cOrderId");
            entity.Property(e => e.DAusgabeBeendetUtc).HasColumnName("dAusgabeBeendetUtc");
            entity.Property(e => e.DAusgabeGestartetUtc).HasColumnName("dAusgabeGestartetUtc");
            entity.Property(e => e.DBelegdatum).HasColumnName("dBelegdatum");
            entity.Property(e => e.DErstelltUtc).HasColumnName("dErstelltUtc");
            entity.Property(e => e.DLetzteStatusAenderung).HasColumnName("dLetzteStatusAenderung");
            entity.Property(e => e.DUploadErfolgtUtc).HasColumnName("dUploadErfolgtUtc");
            entity.Property(e => e.KBeleg).HasColumnName("kBeleg");
            entity.Property(e => e.KIduUploadQueue)
                .ValueGeneratedOnAdd()
                .HasColumnName("kIduUploadQueue");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.NAusgabeVersuche).HasColumnName("nAusgabeVersuche");
            entity.Property(e => e.NBelegtyp).HasColumnName("nBelegtyp");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
            entity.Property(e => e.NUploadVersuche).HasColumnName("nUploadVersuche");
        });

        modelBuilder.Entity<LvInetBestellung>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvInetBestellung", "DbeS");

            entity.Property(e => e.CInetBestNr)
                .HasMaxLength(50)
                .HasColumnName("cInetBestNr");
            entity.Property(e => e.CKommentar)
                .HasMaxLength(255)
                .HasColumnName("cKommentar");
            entity.Property(e => e.CLieferFirma)
                .HasMaxLength(128)
                .HasColumnName("cLieferFirma");
            entity.Property(e => e.CLieferLand)
                .HasMaxLength(255)
                .HasColumnName("cLieferLand");
            entity.Property(e => e.CLieferMail)
                .HasMaxLength(255)
                .HasColumnName("cLieferMail");
            entity.Property(e => e.CLieferName)
                .HasMaxLength(255)
                .HasColumnName("cLieferName");
            entity.Property(e => e.CLieferOrt)
                .HasMaxLength(255)
                .HasColumnName("cLieferOrt");
            entity.Property(e => e.CLieferPlz)
                .HasMaxLength(20)
                .HasColumnName("cLieferPLZ");
            entity.Property(e => e.CLieferStrasse)
                .HasMaxLength(255)
                .HasColumnName("cLieferStrasse");
            entity.Property(e => e.CLieferTel)
                .HasMaxLength(45)
                .HasColumnName("cLieferTel");
            entity.Property(e => e.CLieferVorname)
                .HasMaxLength(255)
                .HasColumnName("cLieferVorname");
            entity.Property(e => e.CRechnungFirma)
                .HasMaxLength(128)
                .HasColumnName("cRechnungFirma");
            entity.Property(e => e.CRechnungLand)
                .HasMaxLength(255)
                .HasColumnName("cRechnungLand");
            entity.Property(e => e.CRechnungMail)
                .HasMaxLength(255)
                .HasColumnName("cRechnungMail");
            entity.Property(e => e.CRechnungName)
                .HasMaxLength(255)
                .HasColumnName("cRechnungName");
            entity.Property(e => e.CRechnungOrt)
                .HasMaxLength(255)
                .HasColumnName("cRechnungOrt");
            entity.Property(e => e.CRechnungPlz)
                .HasMaxLength(24)
                .HasColumnName("cRechnungPLZ");
            entity.Property(e => e.CRechnungStrasse)
                .HasMaxLength(255)
                .HasColumnName("cRechnungStrasse");
            entity.Property(e => e.CRechnungTel)
                .HasMaxLength(30)
                .HasColumnName("cRechnungTel");
            entity.Property(e => e.CRechnungVorname)
                .HasMaxLength(255)
                .HasColumnName("cRechnungVorname");
            entity.Property(e => e.DTimestamp)
                .HasColumnType("datetime")
                .HasColumnName("dTimestamp");
            entity.Property(e => e.KInetAdress).HasColumnName("kInetAdress");
            entity.Property(e => e.KInetBestellung).HasColumnName("kInetBestellung");
            entity.Property(e => e.KShop).HasColumnName("kShop");
        });

        modelBuilder.Entity<LvInetBestellungPositionen>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvInetBestellungPositionen", "DbeS");

            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CEinheit)
                .HasMaxLength(255)
                .HasColumnName("cEinheit");
            entity.Property(e => e.CHinweis)
                .HasMaxLength(2000)
                .HasColumnName("cHinweis");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.FMwSt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwSt");
            entity.Property(e => e.FPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPreis");
            entity.Property(e => e.KArikel).HasColumnName("kArikel");
            entity.Property(e => e.KInetBestellPos).HasColumnName("kInetBestellPos");
            entity.Property(e => e.KInetBestellung).HasColumnName("kInetBestellung");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nAnzahl");
            entity.Property(e => e.NType).HasColumnName("nType");
        });

        modelBuilder.Entity<LvInetKunde>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvInetKunde", "DbeS");

            entity.Property(e => e.CBenutzername)
                .HasMaxLength(20)
                .HasColumnName("cBenutzername");
            entity.Property(e => e.CFax)
                .HasMaxLength(45)
                .HasColumnName("cFax");
            entity.Property(e => e.CFirma)
                .HasMaxLength(128)
                .HasColumnName("cFirma");
            entity.Property(e => e.CLand)
                .HasMaxLength(64)
                .HasColumnName("cLand");
            entity.Property(e => e.CMail)
                .HasMaxLength(255)
                .HasColumnName("cMail");
            entity.Property(e => e.CNachname)
                .HasMaxLength(128)
                .HasColumnName("cNachname");
            entity.Property(e => e.CPlz)
                .HasMaxLength(20)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CStadt)
                .HasMaxLength(64)
                .HasColumnName("cStadt");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTel)
                .HasMaxLength(45)
                .HasColumnName("cTel");
            entity.Property(e => e.CUstid)
                .HasMaxLength(20)
                .HasColumnName("cUSTID");
            entity.Property(e => e.CVorname)
                .HasMaxLength(128)
                .HasColumnName("cVorname");
            entity.Property(e => e.KInetKunde).HasColumnName("kInetKunde");
            entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");
            entity.Property(e => e.KShop).HasColumnName("kShop");
        });

        modelBuilder.Entity<LvItemStockDemand>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvItemStockDemand", "Beschaffung");

            entity.Property(e => e.BenutzerNameDemand).HasMaxLength(255);
            entity.Property(e => e.BestandAufEinkaufsliste).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestandEigen).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestandGesamt).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestandImZulauf).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestandInAuftraegen).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestandVerfuegbar).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Breite).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CComment)
                .HasColumnType("ntext")
                .HasColumnName("cComment");
            entity.Property(e => e.CHan)
                .HasMaxLength(255)
                .HasColumnName("cHAN");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.DCreationDate).HasColumnName("dCreationDate");
            entity.Property(e => e.DFilterDate).HasColumnName("dFilterDate");
            entity.Property(e => e.DTargetDate).HasColumnName("dTargetDate");
            entity.Property(e => e.FQuantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fQuantity");
            entity.Property(e => e.Gewicht).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Gtin)
                .HasMaxLength(255)
                .HasColumnName("GTIN");
            entity.Property(e => e.Hoehe).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.IContext).HasColumnName("iContext");
            entity.Property(e => e.InProduktion).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.IstMhd).HasColumnName("IstMHD");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KContext).HasColumnName("kContext");
            entity.Property(e => e.KItemStockDemand).HasColumnName("kItemStockDemand");
            entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");
            entity.Property(e => e.KWarenLagerBereich).HasColumnName("kWarenLagerBereich");
            entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");
            entity.Property(e => e.Laenge).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Mindestbestand).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
            entity.Property(e => e.Produzierbar).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Versandgewicht).HasColumnType("decimal(25, 13)");
        });

        modelBuilder.Entity<LvJtlTrackingPakete>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvJtlTrackingPakete", "Versand");

            entity.Property(e => e.CAuftragsnummer)
                .HasMaxLength(50)
                .HasColumnName("cAuftragsnummer");
            entity.Property(e => e.CExterneBestellnummer)
                .HasMaxLength(50)
                .HasColumnName("cExterneBestellnummer");
            entity.Property(e => e.CFirma)
                .HasMaxLength(255)
                .HasColumnName("cFirma");
            entity.Property(e => e.CKundeNr)
                .HasMaxLength(30)
                .HasColumnName("cKundeNr");
            entity.Property(e => e.CLieferadresseAdressZusatz)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseAdressZusatz");
            entity.Property(e => e.CLieferadresseAnrede)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseAnrede");
            entity.Property(e => e.CLieferadresseBundesland)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseBundesland");
            entity.Property(e => e.CLieferadresseFax)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseFax");
            entity.Property(e => e.CLieferadresseFirma)
                .HasMaxLength(128)
                .HasColumnName("cLieferadresseFirma");
            entity.Property(e => e.CLieferadresseLand)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseLand");
            entity.Property(e => e.CLieferadresseMail)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseMail");
            entity.Property(e => e.CLieferadresseNachname)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseNachname");
            entity.Property(e => e.CLieferadresseOrt)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseOrt");
            entity.Property(e => e.CLieferadressePlz)
                .HasMaxLength(24)
                .HasColumnName("cLieferadressePlz");
            entity.Property(e => e.CLieferadresseStrasse)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseStrasse");
            entity.Property(e => e.CLieferadresseTelefon)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseTelefon");
            entity.Property(e => e.CLieferadresseTitel)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseTitel");
            entity.Property(e => e.CLieferadresseVorname)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseVorname");
            entity.Property(e => e.CLieferadresseZusatz)
                .HasMaxLength(60)
                .HasColumnName("cLieferadresseZusatz");
            entity.Property(e => e.CLieferscheinnummer)
                .HasMaxLength(50)
                .HasColumnName("cLieferscheinnummer");
            entity.Property(e => e.CRechnungsadresseAdressZusatz)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseAdressZusatz");
            entity.Property(e => e.CRechnungsadresseFax)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseFax");
            entity.Property(e => e.CRechnungsadresseFirma)
                .HasMaxLength(128)
                .HasColumnName("cRechnungsadresseFirma");
            entity.Property(e => e.CRechnungsadresseLand)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseLand");
            entity.Property(e => e.CRechnungsadresseMail)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseMail");
            entity.Property(e => e.CRechnungsadresseNachname)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseNachname");
            entity.Property(e => e.CRechnungsadresseOrt)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseOrt");
            entity.Property(e => e.CRechnungsadressePlz)
                .HasMaxLength(24)
                .HasColumnName("cRechnungsadressePlz");
            entity.Property(e => e.CRechnungsadresseStrasse)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseStrasse");
            entity.Property(e => e.CRechnungsadresseTelefon)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseTelefon");
            entity.Property(e => e.CRechnungsadresseTitel)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseTitel");
            entity.Property(e => e.CRechnungsadresseVorname)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseVorname");
            entity.Property(e => e.CRechnungsadresseZusatz)
                .HasMaxLength(60)
                .HasColumnName("cRechnungsadresseZusatz");
            entity.Property(e => e.CRechnungsnummer)
                .HasMaxLength(200)
                .HasColumnName("cRechnungsnummer");
            entity.Property(e => e.CTrackingId)
                .HasMaxLength(255)
                .HasColumnName("cTrackingID");
            entity.Property(e => e.CVersandart)
                .HasMaxLength(255)
                .HasColumnName("cVersandart");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DnextUpdateAttempt)
                .HasColumnType("datetime")
                .HasColumnName("dnextUpdateAttempt");
            entity.Property(e => e.DregisteredAt)
                .HasColumnType("datetime")
                .HasColumnName("dregisteredAt");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");
            entity.Property(e => e.KVersand).HasColumnName("kVersand");
            entity.Property(e => e.KVersandart).HasColumnName("kVersandart");
            entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");
            entity.Property(e => e.NTrackingServiceProvider).HasColumnName("nTrackingServiceProvider");
            entity.Property(e => e.NTrackingStatus).HasColumnName("nTrackingStatus");
            entity.Property(e => e.NVersandStatus).HasColumnName("nVersandStatus");
        });

        modelBuilder.Entity<LvKunde>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvKunde", "Kunde");

            entity.Property(e => e.CAdressZusatz)
                .HasMaxLength(255)
                .HasColumnName("cAdressZusatz");
            entity.Property(e => e.CAnrede)
                .HasMaxLength(30)
                .HasColumnName("cAnrede");
            entity.Property(e => e.CBundesland)
                .HasMaxLength(255)
                .HasColumnName("cBundesland");
            entity.Property(e => e.CEbayName)
                .HasMaxLength(255)
                .HasColumnName("cEbayName");
            entity.Property(e => e.CEmail)
                .HasMaxLength(255)
                .HasColumnName("cEMail");
            entity.Property(e => e.CFax)
                .HasMaxLength(30)
                .HasColumnName("cFax");
            entity.Property(e => e.CFirma)
                .HasMaxLength(128)
                .HasColumnName("cFirma");
            entity.Property(e => e.CGeburtstag)
                .HasMaxLength(10)
                .HasColumnName("cGeburtstag");
            entity.Property(e => e.CHerkunft)
                .HasMaxLength(255)
                .HasColumnName("cHerkunft");
            entity.Property(e => e.CHrnr)
                .HasMaxLength(255)
                .HasColumnName("cHRNr");
            entity.Property(e => e.CKundenNr)
                .HasMaxLength(30)
                .HasColumnName("cKundenNr");
            entity.Property(e => e.CLand)
                .HasMaxLength(255)
                .HasColumnName("cLand");
            entity.Property(e => e.CMobil)
                .HasMaxLength(30)
                .HasColumnName("cMobil");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPlz)
                .HasMaxLength(24)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CPostId)
                .HasMaxLength(255)
                .HasColumnName("cPostID");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTel)
                .HasMaxLength(30)
                .HasColumnName("cTel");
            entity.Property(e => e.CTitel)
                .HasMaxLength(64)
                .HasColumnName("cTitel");
            entity.Property(e => e.CUstid)
                .HasMaxLength(20)
                .HasColumnName("cUSTID");
            entity.Property(e => e.CVorname)
                .HasMaxLength(255)
                .HasColumnName("cVorname");
            entity.Property(e => e.CWww)
                .HasMaxLength(255)
                .HasColumnName("cWWW");
            entity.Property(e => e.CZusatz)
                .HasMaxLength(60)
                .HasColumnName("cZusatz");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.FRabatt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabatt");
            entity.Property(e => e.KBuyer).HasColumnName("kBuyer");
            entity.Property(e => e.KInetKunde).HasColumnName("kInetKunde");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");
            entity.Property(e => e.KKundenKategorie).HasColumnName("kKundenKategorie");
            entity.Property(e => e.KundenGruppe).HasMaxLength(255);
            entity.Property(e => e.KundenKategorie).HasMaxLength(128);
            entity.Property(e => e.NDebitorennr).HasColumnName("nDebitorennr");
            entity.Property(e => e.NJtlFulfillment).HasColumnName("nJtlFulfillment");
            entity.Property(e => e.NZahlungsziel).HasColumnName("nZahlungsziel");
        });

        modelBuilder.Entity<LvKundenDaten>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvKundenDaten", "Kunde");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAdressZusatz)
                .HasMaxLength(255)
                .HasColumnName("cAdressZusatz");
            entity.Property(e => e.CAnrede)
                .HasMaxLength(30)
                .HasColumnName("cAnrede");
            entity.Property(e => e.CBundesland)
                .HasMaxLength(255)
                .HasColumnName("cBundesland");
            entity.Property(e => e.CEbayName)
                .HasMaxLength(255)
                .HasColumnName("cEbayName");
            entity.Property(e => e.CFax)
                .HasMaxLength(30)
                .HasColumnName("cFax");
            entity.Property(e => e.CFirma)
                .HasMaxLength(128)
                .HasColumnName("cFirma");
            entity.Property(e => e.CGeburtstag)
                .HasMaxLength(10)
                .HasColumnName("cGeburtstag");
            entity.Property(e => e.CHerkunft)
                .HasMaxLength(255)
                .HasColumnName("cHerkunft");
            entity.Property(e => e.CHrnr)
                .HasMaxLength(255)
                .HasColumnName("cHRNr");
            entity.Property(e => e.CIso)
                .HasMaxLength(5)
                .HasColumnName("cISO");
            entity.Property(e => e.CKassenKunde)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cKassenKunde");
            entity.Property(e => e.CKundenNr)
                .HasMaxLength(30)
                .HasColumnName("cKundenNr");
            entity.Property(e => e.CLand)
                .HasMaxLength(255)
                .HasColumnName("cLand");
            entity.Property(e => e.CMail)
                .HasMaxLength(255)
                .HasColumnName("cMail");
            entity.Property(e => e.CMobil)
                .HasMaxLength(30)
                .HasColumnName("cMobil");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CNewsletter)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cNewsletter");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPlz)
                .HasMaxLength(24)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CPostId)
                .HasMaxLength(255)
                .HasColumnName("cPostID");
            entity.Property(e => e.CSperre)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cSperre");
            entity.Property(e => e.CSteuerNr)
                .HasMaxLength(255)
                .HasColumnName("cSteuerNr");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTel)
                .HasMaxLength(30)
                .HasColumnName("cTel");
            entity.Property(e => e.CTitel)
                .HasMaxLength(64)
                .HasColumnName("cTitel");
            entity.Property(e => e.CUstid)
                .HasMaxLength(20)
                .HasColumnName("cUSTID");
            entity.Property(e => e.CVorname)
                .HasMaxLength(255)
                .HasColumnName("cVorname");
            entity.Property(e => e.CWww)
                .HasMaxLength(255)
                .HasColumnName("cWWW");
            entity.Property(e => e.CZusatz)
                .HasMaxLength(60)
                .HasColumnName("cZusatz");
            entity.Property(e => e.DDatumUstiderfolgreichGeprüft)
                .HasColumnType("datetime")
                .HasColumnName("dDatumUSTIDErfolgreichGeprüft");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.FProvision)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fProvision");
            entity.Property(e => e.FRabatt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabatt");
            entity.Property(e => e.FSkonto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fSkonto");
            entity.Property(e => e.KAdresse).HasColumnName("kAdresse");
            entity.Property(e => e.KBuyer).HasColumnName("kBuyer");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KInetAdresse).HasColumnName("kInetAdresse");
            entity.Property(e => e.KInetKunde).HasColumnName("kInetKunde");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KKundenDrucktext).HasColumnName("kKundenDrucktext");
            entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");
            entity.Property(e => e.KKundenKategorie).HasColumnName("kKundenKategorie");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");
            entity.Property(e => e.NDebitorennr).HasColumnName("nDebitorennr");
            entity.Property(e => e.NKreditlimit).HasColumnName("nKreditlimit");
            entity.Property(e => e.NMahnrhythmus).HasColumnName("nMahnrhythmus");
            entity.Property(e => e.NMahnstopp).HasColumnName("nMahnstopp");
            entity.Property(e => e.NSkontoInTagen).HasColumnName("nSkontoInTagen");
            entity.Property(e => e.NStandard).HasColumnName("nStandard");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
            entity.Property(e => e.NUstiderfolgreichGeprüft).HasColumnName("nUSTIDErfolgreichGeprüft");
            entity.Property(e => e.NVertreter).HasColumnName("nVertreter");
            entity.Property(e => e.NZahlungsziel).HasColumnName("nZahlungsziel");
        });

        modelBuilder.Entity<LvLagerUebersicht>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvLagerUebersicht", "FulfillmentNetwork");

            entity.Property(e => e.BelegterPlatz).HasColumnType("numeric(38, 6)");
            entity.Property(e => e.Bestand).HasColumnType("numeric(38, 1)");
            entity.Property(e => e.Datum).HasColumnType("datetime");
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.Kosten).HasColumnType("numeric(38, 1)");
        });

        modelBuilder.Entity<LvLagerkosten>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvLagerkosten", "FulfillmentNetwork");

            entity.Property(e => e.CArtNr)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CLiefArtNr)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("cLiefArtNr");
            entity.Property(e => e.Datum).HasColumnType("datetime");
            entity.Property(e => e.FLagerBestand)
                .HasColumnType("numeric(1, 1)")
                .HasColumnName("fLagerBestand");
            entity.Property(e => e.Firma)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.Kubikmeter).HasColumnType("numeric(6, 6)");
            entity.Property(e => e.KubikmeterGesamt).HasColumnType("numeric(6, 6)");
            entity.Property(e => e.LagergebührProTag).HasColumnType("numeric(1, 1)");
            entity.Property(e => e.PreisProM3).HasColumnType("numeric(1, 1)");
        });

        modelBuilder.Entity<LvLagerkostenRegeln>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvLagerkostenRegeln", "FulfillmentNetwork");

            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CArtikelname)
                .HasMaxLength(255)
                .HasColumnName("cArtikelname");
            entity.Property(e => e.CBereich)
                .HasMaxLength(100)
                .HasColumnName("cBereich");
            entity.Property(e => e.CSessionId)
                .HasMaxLength(255)
                .HasColumnName("cSessionId");
            entity.Property(e => e.CWarenLagerPlatzName)
                .HasMaxLength(50)
                .HasColumnName("cWarenLagerPlatzName");
            entity.Property(e => e.FVkpreis)
                .HasColumnType("decimal(38, 12)")
                .HasColumnName("fVKPreis");
            entity.Property(e => e.KAbrechnungLagerplatz).HasColumnName("kAbrechnungLagerplatz");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");
            entity.Property(e => e.KWarenLagerPlatzTyp).HasColumnName("kWarenLagerPlatzTyp");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.KWmslagerBereich).HasColumnName("kWMSLagerBereich");
            entity.Property(e => e.NLagerkostenBerechnung).HasColumnName("nLagerkostenBerechnung");
            entity.Property(e => e.NModus).HasColumnName("nModus");
            entity.Property(e => e.NRegel).HasColumnName("nRegel");
        });

        modelBuilder.Entity<LvLagerkostenUebersicht>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvLagerkostenUebersicht", "FulfillmentNetwork");

            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CArtNrIndividuell)
                .HasMaxLength(100)
                .HasColumnName("cArtNrIndividuell");
            entity.Property(e => e.CName)
                .HasMaxLength(50)
                .HasColumnName("cName");
            entity.Property(e => e.CSessionId)
                .HasMaxLength(255)
                .HasColumnName("cSessionId");
            entity.Property(e => e.FBreite)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBreite");
            entity.Property(e => e.FHoehe)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fHoehe");
            entity.Property(e => e.FLaenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLaenge");
            entity.Property(e => e.FVkpreis)
                .HasColumnType("decimal(38, 12)")
                .HasColumnName("fVKPreis");
            entity.Property(e => e.KAbrechnungLagerplatz).HasColumnName("kAbrechnungLagerplatz");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KArtikelIndividuell).HasColumnName("kArtikelIndividuell");
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");
            entity.Property(e => e.KWarenLagerPlatzTyp).HasColumnName("kWarenLagerPlatzTyp");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.NLagerkostenBerechnung).HasColumnName("nLagerkostenBerechnung");
            entity.Property(e => e.NModus).HasColumnName("nModus");
            entity.Property(e => e.NRegel).HasColumnName("nRegel");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<LvLieferant>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvLieferant", "Beschaffung");

            entity.Property(e => e.CAnmerkung)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("cAnmerkung");
            entity.Property(e => e.CEigeneKundennummer)
                .HasMaxLength(64)
                .HasColumnName("cEigeneKundennummer");
            entity.Property(e => e.CEmail)
                .HasMaxLength(255)
                .HasColumnName("cEMail");
            entity.Property(e => e.CFax)
                .HasMaxLength(30)
                .HasColumnName("cFax");
            entity.Property(e => e.CFirma)
                .HasMaxLength(255)
                .HasColumnName("cFirma");
            entity.Property(e => e.CFirmaZusatz)
                .HasMaxLength(255)
                .HasColumnName("cFirmaZusatz");
            entity.Property(e => e.CKontakt)
                .HasMaxLength(255)
                .HasColumnName("cKontakt");
            entity.Property(e => e.CLand)
                .HasMaxLength(255)
                .HasColumnName("cLand");
            entity.Property(e => e.CLieferantennummer)
                .HasMaxLength(64)
                .HasColumnName("cLieferantennummer");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPlz)
                .HasMaxLength(10)
                .HasColumnName("cPlz");
            entity.Property(e => e.CSprache)
                .HasMaxLength(255)
                .HasColumnName("cSprache");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTelDurchwahl)
                .HasMaxLength(30)
                .HasColumnName("cTelDurchwahl");
            entity.Property(e => e.CTelZentrale)
                .HasMaxLength(30)
                .HasColumnName("cTelZentrale");
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.NIstJtlFulfillment).HasColumnName("nIstJtlFulfillment");
        });

        modelBuilder.Entity<LvLieferschein>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvLieferschein", "Versand");

            entity.Property(e => e.CAnmerkung).HasColumnName("cAnmerkung");
            entity.Property(e => e.CBenutzerName)
                .HasMaxLength(255)
                .HasColumnName("cBenutzerName");
            entity.Property(e => e.CBestellNr)
                .HasMaxLength(50)
                .HasColumnName("cBestellNr");
            entity.Property(e => e.CBestellungInetBestellNr)
                .HasMaxLength(50)
                .HasColumnName("cBestellungInetBestellNr");
            entity.Property(e => e.CBestellungStatus)
                .HasMaxLength(255)
                .HasColumnName("cBestellungStatus");
            entity.Property(e => e.CFirmaName)
                .HasMaxLength(255)
                .HasColumnName("cFirmaName");
            entity.Property(e => e.CFulfillmentLager)
                .HasMaxLength(255)
                .HasColumnName("cFulfillmentLager");
            entity.Property(e => e.CHinweis)
                .HasMaxLength(255)
                .HasColumnName("cHinweis");
            entity.Property(e => e.CKundeNr)
                .HasMaxLength(30)
                .HasColumnName("cKundeNr");
            entity.Property(e => e.CLieferadresseAdressZusatz)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseAdressZusatz");
            entity.Property(e => e.CLieferadresseAnrede)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseAnrede");
            entity.Property(e => e.CLieferadresseBundesland)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseBundesland");
            entity.Property(e => e.CLieferadresseFax)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseFax");
            entity.Property(e => e.CLieferadresseFirma)
                .HasMaxLength(128)
                .HasColumnName("cLieferadresseFirma");
            entity.Property(e => e.CLieferadresseLand)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseLand");
            entity.Property(e => e.CLieferadresseMail)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseMail");
            entity.Property(e => e.CLieferadresseNachname)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseNachname");
            entity.Property(e => e.CLieferadresseOrt)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseOrt");
            entity.Property(e => e.CLieferadressePlz)
                .HasMaxLength(24)
                .HasColumnName("cLieferadressePlz");
            entity.Property(e => e.CLieferadresseStrasse)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseStrasse");
            entity.Property(e => e.CLieferadresseTelefon)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseTelefon");
            entity.Property(e => e.CLieferadresseTitel)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseTitel");
            entity.Property(e => e.CLieferadresseVorname)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseVorname");
            entity.Property(e => e.CLieferadresseZusatz)
                .HasMaxLength(60)
                .HasColumnName("cLieferadresseZusatz");
            entity.Property(e => e.CLieferantFirma)
                .HasMaxLength(255)
                .HasColumnName("cLieferantFirma");
            entity.Property(e => e.CLieferscheinNr)
                .HasMaxLength(50)
                .HasColumnName("cLieferscheinNr");
            entity.Property(e => e.CRechnungsadresseAdressZusatz)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseAdressZusatz");
            entity.Property(e => e.CRechnungsadresseFax)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseFax");
            entity.Property(e => e.CRechnungsadresseFirma)
                .HasMaxLength(128)
                .HasColumnName("cRechnungsadresseFirma");
            entity.Property(e => e.CRechnungsadresseLand)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseLand");
            entity.Property(e => e.CRechnungsadresseMail)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseMail");
            entity.Property(e => e.CRechnungsadresseNachname)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseNachname");
            entity.Property(e => e.CRechnungsadresseOrt)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseOrt");
            entity.Property(e => e.CRechnungsadressePlz)
                .HasMaxLength(24)
                .HasColumnName("cRechnungsadressePlz");
            entity.Property(e => e.CRechnungsadresseStrasse)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseStrasse");
            entity.Property(e => e.CRechnungsadresseTelefon)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseTelefon");
            entity.Property(e => e.CRechnungsadresseTitel)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseTitel");
            entity.Property(e => e.CRechnungsadresseVorname)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseVorname");
            entity.Property(e => e.CRechnungsadresseZusatz)
                .HasMaxLength(60)
                .HasColumnName("cRechnungsadresseZusatz");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DGedruckt)
                .HasColumnType("datetime")
                .HasColumnName("dGedruckt");
            entity.Property(e => e.DMailVersand)
                .HasColumnType("datetime")
                .HasColumnName("dMailVersand");
            entity.Property(e => e.DVersendet)
                .HasColumnType("datetime")
                .HasColumnName("dVersendet");
            entity.Property(e => e.FArtikelgewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fArtikelgewicht");
            entity.Property(e => e.FVersandgewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVersandgewicht");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");
            entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");
            entity.Property(e => e.KVersandart).HasColumnName("kVersandart");
            entity.Property(e => e.NAnzahlPakete).HasColumnName("nAnzahlPakete");
            entity.Property(e => e.NAnzahlVersendetePakete).HasColumnName("nAnzahlVersendetePakete");
            entity.Property(e => e.NIstDropshipping).HasColumnName("nIstDropshipping");
            entity.Property(e => e.NIstExterneRechnung).HasColumnName("nIstExterneRechnung");
            entity.Property(e => e.NIstFulfillment).HasColumnName("nIstFulfillment");
            entity.Property(e => e.NPlattform).HasColumnName("nPlattform");
            entity.Property(e => e.NPlattformTyp).HasColumnName("nPlattformTyp");
            entity.Property(e => e.NRechnungStatus).HasColumnName("nRechnungStatus");
            entity.Property(e => e.NShippingStatus).HasColumnName("nShippingStatus");
        });

        modelBuilder.Entity<LvLieferscheinWarenlagerausgang>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvLieferscheinWarenlagerausgang", "Versand");

            entity.Property(e => e.CChargenNr)
                .HasMaxLength(255)
                .HasColumnName("cChargenNr");
            entity.Property(e => e.CLagerplatz)
                .HasMaxLength(511)
                .HasColumnName("cLagerplatz");
            entity.Property(e => e.CWarenlagerName)
                .HasMaxLength(255)
                .HasColumnName("cWarenlagerName");
            entity.Property(e => e.DMhd)
                .HasColumnType("datetime")
                .HasColumnName("dMHD");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");
            entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");
            entity.Property(e => e.KWarenLagerAusgang).HasColumnName("kWarenLagerAusgang");
            entity.Property(e => e.NIstWmslager).HasColumnName("nIstWMSLager");
        });

        modelBuilder.Entity<LvLieferscheinpaket>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvLieferscheinpaket", "Versand");

            entity.Property(e => e.CEnclosedReturnIdentCode)
                .HasMaxLength(255)
                .HasColumnName("cEnclosedReturnIdentCode");
            entity.Property(e => e.CFulfillmentCenter)
                .HasMaxLength(50)
                .HasColumnName("cFulfillmentCenter");
            entity.Property(e => e.CHinweis)
                .HasMaxLength(255)
                .HasColumnName("cHinweis");
            entity.Property(e => e.CSendungsreferenz)
                .HasMaxLength(50)
                .HasColumnName("cSendungsreferenz");
            entity.Property(e => e.CTrackingId)
                .HasMaxLength(255)
                .HasColumnName("cTrackingId");
            entity.Property(e => e.CVersandartName)
                .HasMaxLength(255)
                .HasColumnName("cVersandartName");
            entity.Property(e => e.DVerpackt)
                .HasColumnType("datetime")
                .HasColumnName("dVerpackt");
            entity.Property(e => e.DVersendet)
                .HasColumnType("datetime")
                .HasColumnName("dVersendet");
            entity.Property(e => e.DVoraussichtlichesLieferdatum)
                .HasColumnType("datetime")
                .HasColumnName("dVoraussichtlichesLieferdatum");
            entity.Property(e => e.FGewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGewicht");
            entity.Property(e => e.KInternePaketnummer).HasColumnName("kInternePaketnummer");
            entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<LvLieferscheinposition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvLieferscheinposition", "Versand");

            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CHinweis)
                .HasMaxLength(4000)
                .HasColumnName("cHinweis");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.FMenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMenge");
            entity.Property(e => e.FMengeRechnung)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fMengeRechnung");
            entity.Property(e => e.FVerfuegbarGesperrt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVerfuegbarGesperrt");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");
            entity.Property(e => e.KKonfigurationsVater).HasColumnName("kKonfigurationsVater");
            entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");
            entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");
            entity.Property(e => e.KStuecklistenVater).HasColumnName("kStuecklistenVater");
        });

        modelBuilder.Entity<LvLieferschwellen>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvLieferschwellen");

            entity.Property(e => e.Land).HasMaxLength(5);
            entity.Property(e => e.Lieferschwelle).HasColumnType("decimal(9, 2)");
            entity.Property(e => e.NAktuellEur)
                .HasColumnType("decimal(9, 2)")
                .HasColumnName("nAktuellEur");
            entity.Property(e => e.NAktuellPer)
                .HasColumnType("decimal(9, 2)")
                .HasColumnName("nAktuellPer");
            entity.Property(e => e.NLetztesJahrEur)
                .HasColumnType("decimal(9, 2)")
                .HasColumnName("nLetztesJahrEur");
            entity.Property(e => e.NLetztesJahrPer)
                .HasColumnType("decimal(9, 2)")
                .HasColumnName("nLetztesJahrPer");
            entity.Property(e => e.RowColor)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LvLogbuch>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvLogbuch", "FulfillmentNetwork");

            entity.Property(e => e.AnzahlGebucht).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Artikelname).HasMaxLength(255);
            entity.Property(e => e.Artikelnummer).HasMaxLength(100);
            entity.Property(e => e.Bestellnummer).HasMaxLength(50);
            entity.Property(e => e.Bezugsnummer).HasMaxLength(255);
            entity.Property(e => e.CLieferscheinNr)
                .HasMaxLength(50)
                .HasColumnName("cLieferscheinNr");
            entity.Property(e => e.CMessage).HasColumnName("cMessage");
            entity.Property(e => e.CMessageDetails).HasColumnName("cMessageDetails");
            entity.Property(e => e.CRequestId)
                .HasMaxLength(64)
                .HasColumnName("cRequestId");
            entity.Property(e => e.CSessionId)
                .HasMaxLength(100)
                .HasColumnName("cSessionId");
            entity.Property(e => e.DTimestamp)
                .HasColumnType("datetime")
                .HasColumnName("dTimestamp");
            entity.Property(e => e.FulfillmentAuftrag).HasMaxLength(50);
            entity.Property(e => e.FulfillmentLager).HasMaxLength(255);
            entity.Property(e => e.FulfillmentLieferant).HasMaxLength(255);
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KArtikelHistory).HasColumnName("kArtikelHistory");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KFulfillmentAuftrag).HasColumnName("kFulfillmentAuftrag");
            entity.Property(e => e.KFulfillmentLog).HasColumnName("kFulfillmentLog");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");
            entity.Property(e => e.KLieferavis).HasColumnName("kLieferavis");
            entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");
            entity.Property(e => e.KRmRetoure).HasColumnName("kRmRetoure");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.Kundennummer).HasMaxLength(30);
            entity.Property(e => e.LieferantenBestellung).HasMaxLength(255);
            entity.Property(e => e.Lieferavisnummer).HasMaxLength(512);
            entity.Property(e => e.NLogLevel).HasColumnName("nLogLevel");
            entity.Property(e => e.NMessageSource).HasColumnName("nMessageSource");
            entity.Property(e => e.Retourennummer).HasMaxLength(255);
        });

        modelBuilder.Entity<LvLogeintrag>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvLogeintrag");

            entity.Property(e => e.CBenutzername)
                .HasMaxLength(255)
                .HasColumnName("cBenutzername");
            entity.Property(e => e.CMeldung)
                .HasMaxLength(4000)
                .HasColumnName("cMeldung");
            entity.Property(e => e.DZeitpunkt)
                .HasColumnType("datetime")
                .HasColumnName("dZeitpunkt");
            entity.Property(e => e.NSchweregrad).HasColumnName("nSchweregrad");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
            entity.Property(e => e.NVorgang).HasColumnName("nVorgang");
        });

        modelBuilder.Entity<LvLogsitzung>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvLogsitzung", "Sync");

            entity.Property(e => e.CBenutzername)
                .HasMaxLength(255)
                .HasColumnName("cBenutzername");
            entity.Property(e => e.CRechnername)
                .HasMaxLength(64)
                .HasColumnName("cRechnername");
            entity.Property(e => e.CStatusMeldung)
                .HasMaxLength(2048)
                .HasColumnName("cStatusMeldung");
            entity.Property(e => e.DEnde)
                .HasColumnType("datetime")
                .HasColumnName("dEnde");
            entity.Property(e => e.DStart)
                .HasColumnType("datetime")
                .HasColumnName("dStart");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KSyncLogsitzung).HasColumnName("kSyncLogsitzung");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<LvLogsitzung1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvLogsitzung", "Zahlungsabgleich");

            entity.Property(e => e.CBenutzername)
                .HasMaxLength(255)
                .HasColumnName("cBenutzername");
            entity.Property(e => e.CRechnername)
                .HasMaxLength(64)
                .HasColumnName("cRechnername");
            entity.Property(e => e.CStatusmeldung)
                .HasMaxLength(2048)
                .HasColumnName("cStatusmeldung");
            entity.Property(e => e.DEnde)
                .HasColumnType("datetime")
                .HasColumnName("dEnde");
            entity.Property(e => e.DStart)
                .HasColumnType("datetime")
                .HasColumnName("dStart");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KZahlungsabgleichLogsitzung).HasColumnName("kZahlungsabgleichLogsitzung");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<LvNotification>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvNotification", "SCX");

            entity.Property(e => e.CChannel)
                .HasMaxLength(255)
                .HasColumnName("cChannel");
            entity.Property(e => e.CEventId)
                .HasMaxLength(122)
                .HasColumnName("cEventId");
            entity.Property(e => e.COfferTitle).HasColumnName("cOfferTitle");
            entity.Property(e => e.COrderCancellationRequestId)
                .HasMaxLength(255)
                .HasColumnName("cOrderCancellationRequestId");
            entity.Property(e => e.CReference)
                .HasMaxLength(255)
                .HasColumnName("cReference");
            entity.Property(e => e.CShopName)
                .HasMaxLength(255)
                .HasColumnName("cShopName");
            entity.Property(e => e.CShortMessage).HasColumnName("cShortMessage");
            entity.Property(e => e.DCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("dCreationDate");
            entity.Property(e => e.KId).HasColumnName("kId");
            entity.Property(e => e.KNotification).HasColumnName("kNotification");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NGelesen).HasColumnName("nGelesen");
            entity.Property(e => e.NSeverity).HasColumnName("nSeverity");
            entity.Property(e => e.NType).HasColumnName("nType");
        });

        modelBuilder.Entity<LvNotificationDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvNotificationDetail", "SCX");

            entity.Property(e => e.CCode)
                .HasMaxLength(255)
                .HasColumnName("cCode");
            entity.Property(e => e.CMessage).HasColumnName("cMessage");
            entity.Property(e => e.KNotification).HasColumnName("kNotification");
            entity.Property(e => e.KNotificationDetail)
                .ValueGeneratedOnAdd()
                .HasColumnName("kNotificationDetail");
        });

        modelBuilder.Entity<LvOffenePosten>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvOffenePosten", "Mahnwesen");

            entity.Property(e => e.Betrag).HasColumnType("decimal(28, 4)");
            entity.Property(e => e.CBestellNr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cBestellNr");
            entity.Property(e => e.CFirma)
                .HasMaxLength(128)
                .HasColumnName("cFirma");
            entity.Property(e => e.CKommentar).HasColumnName("cKommentar");
            entity.Property(e => e.CKundenNr)
                .HasMaxLength(30)
                .HasColumnName("cKundenNr");
            entity.Property(e => e.CMail)
                .HasMaxLength(255)
                .HasColumnName("cMail");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CRechnungsNr)
                .HasMaxLength(50)
                .HasColumnName("cRechnungsNr");
            entity.Property(e => e.CVorname)
                .HasMaxLength(255)
                .HasColumnName("cVorname");
            entity.Property(e => e.FBruttoBetrag)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBruttoBetrag");
            entity.Property(e => e.Gesamt).HasColumnType("decimal(28, 4)");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KFirmaHistory).HasColumnName("kFirmaHistory");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");
            entity.Property(e => e.KMahnstufe).HasColumnName("kMahnstufe");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.KZahlungsErinnerung).HasColumnName("kZahlungsErinnerung");
            entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");
            entity.Property(e => e.MahnBetrag).HasColumnType("decimal(28, 4)");
            entity.Property(e => e.Mahngebuehr).HasColumnType("decimal(28, 4)");
            entity.Property(e => e.Mahnstufe).HasMaxLength(255);
            entity.Property(e => e.MahnungErstellt).HasColumnType("datetime");
            entity.Property(e => e.NIstEntwurf).HasColumnName("nIstEntwurf");
            entity.Property(e => e.NMahnstopp).HasColumnName("nMahnstopp");
            entity.Property(e => e.NaechstesZahlungsziel)
                .HasColumnType("datetime")
                .HasColumnName("naechstesZahlungsziel");
            entity.Property(e => e.OffenerPosten).HasColumnType("decimal(28, 4)");
            entity.Property(e => e.RechnungZahlungsZiel).HasColumnType("datetime");
            entity.Property(e => e.Rechnungsdatum).HasColumnType("datetime");
            entity.Property(e => e.Versanddatum).HasColumnType("datetime");
        });

        modelBuilder.Entity<LvOperation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvOperation", "pps");

            entity.Property(e => e.Bearbeiter).HasMaxLength(255);
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.COperationNumber)
                .HasMaxLength(100)
                .HasColumnName("cOperationNumber");
            entity.Property(e => e.KOperation).HasColumnName("kOperation");
            entity.Property(e => e.NIsCompletionMandatory).HasColumnName("nIsCompletionMandatory");
            entity.Property(e => e.NIsInactive).HasColumnName("nIsInactive");
            entity.Property(e => e.NIsInternal).HasColumnName("nIsInternal");
        });

        modelBuilder.Entity<LvPakete>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvPakete", "Kunde");

            entity.Property(e => e.CBestellNr)
                .HasMaxLength(50)
                .HasColumnName("cBestellNr");
            entity.Property(e => e.CFulfillmentCenter)
                .HasMaxLength(50)
                .HasColumnName("cFulfillmentCenter");
            entity.Property(e => e.CHinweis)
                .HasMaxLength(255)
                .HasColumnName("cHinweis");
            entity.Property(e => e.CLieferscheinNr)
                .HasMaxLength(50)
                .HasColumnName("cLieferscheinNr");
            entity.Property(e => e.CSendungsreferenz)
                .HasMaxLength(50)
                .HasColumnName("cSendungsreferenz");
            entity.Property(e => e.CTrackingId)
                .HasMaxLength(255)
                .HasColumnName("cTrackingId");
            entity.Property(e => e.CVersandartName)
                .HasMaxLength(255)
                .HasColumnName("cVersandartName");
            entity.Property(e => e.DVerpackt)
                .HasColumnType("datetime")
                .HasColumnName("dVerpackt");
            entity.Property(e => e.DVersendet)
                .HasColumnType("datetime")
                .HasColumnName("dVersendet");
            entity.Property(e => e.DVoraussichtlichesLieferdatum)
                .HasColumnType("datetime")
                .HasColumnName("dVoraussichtlichesLieferdatum");
            entity.Property(e => e.FGewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGewicht");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KInternePaketnummer).HasColumnName("kInternePaketnummer");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");
            entity.Property(e => e.NTrackingStatus).HasColumnName("nTrackingStatus");
            entity.Property(e => e.NVersandStatus).HasColumnName("nVersandStatus");
        });

        modelBuilder.Entity<LvPickliste>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvPickliste", "Versand");

            entity.Property(e => e.CAnlagebenutzer)
                .HasMaxLength(255)
                .HasColumnName("cAnlagebenutzer");
            entity.Property(e => e.CLetzterBenutzer)
                .HasMaxLength(255)
                .HasColumnName("cLetzterBenutzer");
            entity.Property(e => e.CPicklisteNr)
                .HasMaxLength(255)
                .HasColumnName("cPicklisteNr");
            entity.Property(e => e.CVorlage)
                .HasMaxLength(64)
                .HasColumnName("cVorlage");
            entity.Property(e => e.CWarenlagerName)
                .HasMaxLength(255)
                .HasColumnName("cWarenlagerName");
            entity.Property(e => e.DGedruckt)
                .HasColumnType("datetime")
                .HasColumnName("dGedruckt");
            entity.Property(e => e.DLetzteBearbeitung)
                .HasColumnType("datetime")
                .HasColumnName("dLetzteBearbeitung");
            entity.Property(e => e.DZeitstempel)
                .HasColumnType("datetime")
                .HasColumnName("dZeitstempel");
            entity.Property(e => e.KPickliste).HasColumnName("kPickliste");
            entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");
            entity.Property(e => e.NLagerplatzVerwaltung).HasColumnName("nLagerplatzVerwaltung");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
            entity.Property(e => e.NType).HasColumnName("nType");
        });

        modelBuilder.Entity<LvPicklistenposition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvPicklistenposition", "Versand");

            entity.Property(e => e.CAuftragArtNr)
                .HasMaxLength(100)
                .HasColumnName("cAuftragArtNr");
            entity.Property(e => e.CBestellNr)
                .HasMaxLength(50)
                .HasColumnName("cBestellNr");
            entity.Property(e => e.CLieferscheinNr)
                .HasMaxLength(50)
                .HasColumnName("cLieferscheinNr");
            entity.Property(e => e.CPicklisteNr)
                .HasMaxLength(255)
                .HasColumnName("cPicklisteNr");
            entity.Property(e => e.CString)
                .HasMaxLength(255)
                .HasColumnName("cString");
            entity.Property(e => e.CStringStandard)
                .HasMaxLength(255)
                .HasColumnName("cStringStandard");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KPickliste).HasColumnName("kPickliste");
            entity.Property(e => e.KPicklistePos).HasColumnName("kPicklistePos");
            entity.Property(e => e.LetzterStatusBenutzername).HasMaxLength(255);
            entity.Property(e => e.NIstStueckliste).HasColumnName("nIstStueckliste");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<LvPosLogeintrag>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvPosLogeintrag", "Sync");

            entity.Property(e => e.CJson).HasColumnName("cJson");
            entity.Property(e => e.CMeldung)
                .HasMaxLength(2048)
                .HasColumnName("cMeldung");
            entity.Property(e => e.DZeitpunkt)
                .HasColumnType("datetime")
                .HasColumnName("dZeitpunkt");
            entity.Property(e => e.KPosLogeintrag)
                .ValueGeneratedOnAdd()
                .HasColumnName("kPosLogeintrag");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KShopSubshop).HasColumnName("kShopSubshop");
            entity.Property(e => e.KSyncLogsitzung).HasColumnName("kSyncLogsitzung");
            entity.Property(e => e.NCallType).HasColumnName("nCallType");
            entity.Property(e => e.NLimit).HasColumnName("nLimit");
            entity.Property(e => e.NSchweregrad).HasColumnName("nSchweregrad");
        });

        modelBuilder.Entity<LvPreisanfrage>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvPreisanfrage", "Beschaffung");

            entity.Property(e => e.CKommentar).HasColumnName("cKommentar");
            entity.Property(e => e.CLieferadresseFirma)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseFirma");
            entity.Property(e => e.CLieferadresseLand)
                .HasMaxLength(5)
                .HasColumnName("cLieferadresseLand");
            entity.Property(e => e.CLieferadresseMail)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseMail");
            entity.Property(e => e.CLieferadresseName)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseName");
            entity.Property(e => e.CLieferadresseOrt)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseOrt");
            entity.Property(e => e.CLieferadressePlz)
                .HasMaxLength(255)
                .HasColumnName("cLieferadressePlz");
            entity.Property(e => e.CLieferadresseStrasse)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseStrasse");
            entity.Property(e => e.CLieferadresseVorname)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseVorname");
            entity.Property(e => e.CLieferant)
                .HasMaxLength(255)
                .HasColumnName("cLieferant");
            entity.Property(e => e.CLieferantEigeneKundennummer)
                .HasMaxLength(64)
                .HasColumnName("cLieferantEigeneKundennummer");
            entity.Property(e => e.CLieferantFirmenZusatz)
                .HasMaxLength(255)
                .HasColumnName("cLieferantFirmenZusatz");
            entity.Property(e => e.CLieferantennummer)
                .HasMaxLength(64)
                .HasColumnName("cLieferantennummer");
            entity.Property(e => e.CPreisanfrage)
                .HasMaxLength(255)
                .HasColumnName("cPreisanfrage");
            entity.Property(e => e.CRechnungsadresseFirma)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseFirma");
            entity.Property(e => e.CRechnungsadresseName)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseName");
            entity.Property(e => e.CRechnungsadresseVorname)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseVorname");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DGedruckt)
                .HasColumnType("datetime")
                .HasColumnName("dGedruckt");
            entity.Property(e => e.DGefaxt)
                .HasColumnType("datetime")
                .HasColumnName("dGefaxt");
            entity.Property(e => e.DGemailt)
                .HasColumnType("datetime")
                .HasColumnName("dGemailt");
            entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");
            entity.Property(e => e.NBestaetigt).HasColumnName("nBestaetigt");
        });

        modelBuilder.Entity<LvPreisanfragePo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvPreisanfragePos", "Beschaffung");

            entity.Property(e => e.CArtNr)
                .HasMaxLength(255)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CHan)
                .HasMaxLength(255)
                .HasColumnName("cHAN");
            entity.Property(e => e.CHinweis)
                .HasMaxLength(2000)
                .HasColumnName("cHinweis");
            entity.Property(e => e.CLieferantenArtNr)
                .HasMaxLength(255)
                .HasColumnName("cLieferantenArtNr");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CNameLief)
                .HasMaxLength(255)
                .HasColumnName("cNameLief");
            entity.Property(e => e.FAverageEkNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAverageEkNetto");
            entity.Property(e => e.FEknetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEKNetto");
            entity.Property(e => e.FMenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMenge");
            entity.Property(e => e.FUst)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fUST");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");
            entity.Property(e => e.KLieferantenBestellungPos).HasColumnName("kLieferantenBestellungPos");
        });

        modelBuilder.Entity<LvProducibleProductionOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvProducibleProductionOrder", "pps");

            entity.Property(e => e.CBenutzerCreated)
                .HasMaxLength(255)
                .HasColumnName("cBenutzerCreated");
            entity.Property(e => e.CBenutzerLastModified)
                .HasMaxLength(255)
                .HasColumnName("cBenutzerLastModified");
            entity.Property(e => e.CBenutzerReleased)
                .HasMaxLength(255)
                .HasColumnName("cBenutzerReleased");
            entity.Property(e => e.CIssueNumber)
                .HasMaxLength(100)
                .HasColumnName("cIssueNumber");
            entity.Property(e => e.DActualCompletion).HasColumnName("dActualCompletion");
            entity.Property(e => e.DActualStart).HasColumnName("dActualStart");
            entity.Property(e => e.DDelivery).HasColumnName("dDelivery");
            entity.Property(e => e.DFilterDate).HasColumnName("dFilterDate");
            entity.Property(e => e.DIssueDate).HasColumnName("dIssueDate");
            entity.Property(e => e.DLastModified).HasColumnName("dLastModified");
            entity.Property(e => e.DRelease).HasColumnName("dRelease");
            entity.Property(e => e.DTargetCompletion).HasColumnName("dTargetCompletion");
            entity.Property(e => e.DTargetStart).HasColumnName("dTargetStart");
            entity.Property(e => e.KProductionOrder).HasColumnName("kProductionOrder");
            entity.Property(e => e.NCombinedLotSize).HasColumnName("nCombinedLotSize");
            entity.Property(e => e.NLotCount).HasColumnName("nLotCount");
            entity.Property(e => e.NLotSize)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nLotSize");
            entity.Property(e => e.NTargetTotalQuantityBelowLotSizeAllowed).HasColumnName("nTargetTotalQuantityBelowLotSizeAllowed");
        });

        modelBuilder.Entity<LvProductionDispositionItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvProductionDispositionItem", "pps");

            entity.Property(e => e.Artikelname).HasMaxLength(255);
            entity.Property(e => e.Artikelnummer).HasMaxLength(100);
            entity.Property(e => e.Bearbeiter).HasMaxLength(255);
            entity.Property(e => e.BestandAufEinkaufsliste).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestandEigen).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestandGesamt).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestandImZulauf).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestandInAuftraegen).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestandVerfuegbar).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Breite).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.CHan)
                .HasMaxLength(255)
                .HasColumnName("cHAN");
            entity.Property(e => e.CIso)
                .HasMaxLength(10)
                .HasColumnName("cISO");
            entity.Property(e => e.CIso2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cISO2");
            entity.Property(e => e.CKultur)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("cKultur");
            entity.Property(e => e.CNameDeu)
                .HasMaxLength(255)
                .HasColumnName("cNameDeu");
            entity.Property(e => e.CNameEng)
                .HasMaxLength(255)
                .HasColumnName("cNameEng");
            entity.Property(e => e.DCreated).HasColumnName("dCreated");
            entity.Property(e => e.DIntendedCompletionDate).HasColumnName("dIntendedCompletionDate");
            entity.Property(e => e.Ean)
                .HasMaxLength(255)
                .HasColumnName("EAN");
            entity.Property(e => e.Einheit).HasMaxLength(255);
            entity.Property(e => e.FActualQuantity)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fActualQuantity");
            entity.Property(e => e.FActualQuantityInProductionOrders)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fActualQuantityInProductionOrders");
            entity.Property(e => e.FPlannedQuantity)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fPlannedQuantity");
            entity.Property(e => e.FQuantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fQuantity");
            entity.Property(e => e.FTargetQuantityInProductionOrders)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fTargetQuantityInProductionOrders");
            entity.Property(e => e.Gewicht).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Hoehe).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.InProduktion).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.IstMhd).HasColumnName("IstMHD");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KArtikelForKategorieArtikel).HasColumnName("kArtikelForKategorieArtikel");
            entity.Property(e => e.KDisposition).HasColumnName("kDisposition");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.Laenge).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Masseinheit).HasMaxLength(255);
            entity.Property(e => e.Mindestbestand).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.NStandard).HasColumnName("nStandard");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
            entity.Property(e => e.Produzierbar).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ReferenceFieldIssue).HasMaxLength(255);
            entity.Property(e => e.ReferenceFieldIssuePosition).HasMaxLength(5);
            entity.Property(e => e.Versandgewicht).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Warengruppe).HasMaxLength(255);
            entity.Property(e => e.ZustandName).HasMaxLength(50);
        });

        modelBuilder.Entity<LvProductionItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvProductionItem", "pps");

            entity.Property(e => e.Artikelname).HasMaxLength(255);
            entity.Property(e => e.Artikelnummer).HasMaxLength(100);
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.Bearbeiter).HasMaxLength(255);
            entity.Property(e => e.BestandAufEinkaufsliste).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestandEigen).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestandGesamt).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestandImZulauf).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestandInAuftraegen).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestandVerfuegbar).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Breite).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.CHan)
                .HasMaxLength(255)
                .HasColumnName("cHAN");
            entity.Property(e => e.CIso)
                .HasMaxLength(10)
                .HasColumnName("cISO");
            entity.Property(e => e.CIso2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cISO2");
            entity.Property(e => e.CKultur)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("cKultur");
            entity.Property(e => e.CNameDeu)
                .HasMaxLength(255)
                .HasColumnName("cNameDeu");
            entity.Property(e => e.CNameEng)
                .HasMaxLength(255)
                .HasColumnName("cNameEng");
            entity.Property(e => e.Ean)
                .HasMaxLength(255)
                .HasColumnName("EAN");
            entity.Property(e => e.Einheit).HasMaxLength(255);
            entity.Property(e => e.Gewicht).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Hoehe).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.InProduktion).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.IstMhd).HasColumnName("IstMHD");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KArtikelForKategorieArtikel).HasColumnName("kArtikelForKategorieArtikel");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.Laenge).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Masseinheit).HasMaxLength(255);
            entity.Property(e => e.Mindestbestand).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.NStandard).HasColumnName("nStandard");
            entity.Property(e => e.Produzierbar).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Versandgewicht).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Warengruppe).HasMaxLength(255);
            entity.Property(e => e.ZustandName).HasMaxLength(50);
        });

        modelBuilder.Entity<LvProductionOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvProductionOrder", "pps");

            entity.Property(e => e.CBenutzerCreated)
                .HasMaxLength(255)
                .HasColumnName("cBenutzerCreated");
            entity.Property(e => e.CBenutzerLastModified)
                .HasMaxLength(255)
                .HasColumnName("cBenutzerLastModified");
            entity.Property(e => e.CBenutzerReleased)
                .HasMaxLength(255)
                .HasColumnName("cBenutzerReleased");
            entity.Property(e => e.CIssueNumber)
                .HasMaxLength(100)
                .HasColumnName("cIssueNumber");
            entity.Property(e => e.DActualCompletion).HasColumnName("dActualCompletion");
            entity.Property(e => e.DActualStart).HasColumnName("dActualStart");
            entity.Property(e => e.DDelivery).HasColumnName("dDelivery");
            entity.Property(e => e.DFilterDate).HasColumnName("dFilterDate");
            entity.Property(e => e.DIssueDate).HasColumnName("dIssueDate");
            entity.Property(e => e.DLastModified).HasColumnName("dLastModified");
            entity.Property(e => e.DRelease).HasColumnName("dRelease");
            entity.Property(e => e.DTargetCompletion).HasColumnName("dTargetCompletion");
            entity.Property(e => e.DTargetStart).HasColumnName("dTargetStart");
            entity.Property(e => e.FProgress)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fProgress");
            entity.Property(e => e.KProductionOrder).HasColumnName("kProductionOrder");
            entity.Property(e => e.NCombinedLotSize).HasColumnName("nCombinedLotSize");
            entity.Property(e => e.NLotCount).HasColumnName("nLotCount");
            entity.Property(e => e.NLotSize)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nLotSize");
            entity.Property(e => e.NTargetTotalQuantityBelowLotSizeAllowed).HasColumnName("nTargetTotalQuantityBelowLotSizeAllowed");
        });

        modelBuilder.Entity<LvProductionProcess>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvProductionProcess", "pps");

            entity.Property(e => e.CCurrentOperationName)
                .HasMaxLength(255)
                .HasColumnName("cCurrentOperationName");
            entity.Property(e => e.CCurrentOperationNumber)
                .HasMaxLength(100)
                .HasColumnName("cCurrentOperationNumber");
            entity.Property(e => e.CCurrentUser)
                .HasMaxLength(255)
                .HasColumnName("cCurrentUser");
            entity.Property(e => e.CProductionBatchNumber)
                .HasMaxLength(100)
                .HasColumnName("cProductionBatchNumber");
            entity.Property(e => e.CWorkbenchNumber)
                .HasMaxLength(100)
                .HasColumnName("cWorkbenchNumber");
            entity.Property(e => e.DCreated).HasColumnName("dCreated");
            entity.Property(e => e.DFilterDate).HasColumnName("dFilterDate");
            entity.Property(e => e.DFinished).HasColumnName("dFinished");
            entity.Property(e => e.DLastAction).HasColumnName("dLastAction");
            entity.Property(e => e.IProcessType).HasColumnName("iProcessType");
            entity.Property(e => e.KBenutzerCurrent).HasColumnName("kBenutzerCurrent");
            entity.Property(e => e.KCreatedWorkbenchResource).HasColumnName("kCreatedWorkbenchResource");
            entity.Property(e => e.KCurrentWorkbenchResource).HasColumnName("kCurrentWorkbenchResource");
            entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");
            entity.Property(e => e.KWorkProcess).HasColumnName("kWorkProcess");
            entity.Property(e => e.NCurrentIteration).HasColumnName("nCurrentIteration");
            entity.Property(e => e.NHasBatchNumber).HasColumnName("nHasBatchNumber");
            entity.Property(e => e.NHasBestBeforeDate).HasColumnName("nHasBestBeforeDate");
            entity.Property(e => e.NHasProcessedPositions).HasColumnName("nHasProcessedPositions");
            entity.Property(e => e.NHasSerialNumber).HasColumnName("nHasSerialNumber");
            entity.Property(e => e.NOriginType).HasColumnName("nOriginType");
            entity.Property(e => e.NState).HasColumnName("nState");
            entity.Property(e => e.NTotalIteration).HasColumnName("nTotalIteration");
        });

        modelBuilder.Entity<LvQueue>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvQueue", "Pos");

            entity.Property(e => e.CAuftragsNr)
                .HasMaxLength(50)
                .HasColumnName("cAuftragsNr");
            entity.Property(e => e.CExterneAuftragsnummer)
                .HasMaxLength(50)
                .HasColumnName("cExterneAuftragsnummer");
            entity.Property(e => e.CFehler).HasColumnName("cFehler");
            entity.Property(e => e.CFiliale)
                .HasMaxLength(255)
                .HasColumnName("cFiliale");
            entity.Property(e => e.CJson).HasColumnName("cJson");
            entity.Property(e => e.CKasse)
                .HasMaxLength(50)
                .HasColumnName("cKasse");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KQueue).HasColumnName("kQueue");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KShopSubshop).HasColumnName("kShopSubshop");
            entity.Property(e => e.NCount).HasColumnName("nCount");
            entity.Property(e => e.NFailedStep).HasColumnName("nFailedStep");
            entity.Property(e => e.NInBearbeitung).HasColumnName("nInBearbeitung");
        });

        modelBuilder.Entity<LvRechnungZahlungszuordnung>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvRechnungZahlungszuordnung", "Zahlungsabgleich");

            entity.Property(e => e.CBestellnummer)
                .HasMaxLength(50)
                .HasColumnName("cBestellnummer");
            entity.Property(e => e.CExterneBestellNr)
                .HasMaxLength(50)
                .HasColumnName("cExterneBestellNr");
            entity.Property(e => e.CFirma)
                .HasMaxLength(128)
                .HasColumnName("cFirma");
            entity.Property(e => e.CKundennummer)
                .HasMaxLength(30)
                .HasColumnName("cKundennummer");
            entity.Property(e => e.CLieferscheinnummer)
                .HasMaxLength(50)
                .HasColumnName("cLieferscheinnummer");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CRechnungsnummer)
                .HasMaxLength(50)
                .HasColumnName("cRechnungsnummer");
            entity.Property(e => e.CUsername)
                .HasMaxLength(255)
                .HasColumnName("cUsername");
            entity.Property(e => e.CVerwendungszweck)
                .HasMaxLength(1000)
                .HasColumnName("cVerwendungszweck");
            entity.Property(e => e.CVorname)
                .HasMaxLength(255)
                .HasColumnName("cVorname");
            entity.Property(e => e.CZahlungsartbezeichnung)
                .HasMaxLength(255)
                .HasColumnName("cZahlungsartbezeichnung");
            entity.Property(e => e.DBelegdatum)
                .HasColumnType("datetime")
                .HasColumnName("dBelegdatum");
            entity.Property(e => e.DBestelldatum)
                .HasColumnType("datetime")
                .HasColumnName("dBestelldatum");
            entity.Property(e => e.FAuftragswert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAuftragswert");
            entity.Property(e => e.FBetrag)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBetrag");
            entity.Property(e => e.FMahngebuehr)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMahngebuehr");
            entity.Property(e => e.FOffenerWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fOffenerWert");
            entity.Property(e => e.FRechnungswert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRechnungswert");
            entity.Property(e => e.FSkontowertInProzent)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fSkontowertInProzent");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");
            entity.Property(e => e.NZahlungStatus).HasColumnName("nZahlungStatus");
        });

        modelBuilder.Entity<LvRechnungen>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvRechnungen", "Kunde");

            entity.Property(e => e.CAnmerkung).HasColumnName("cAnmerkung");
            entity.Property(e => e.CAuftragsnummer)
                .HasMaxLength(50)
                .HasColumnName("cAuftragsnummer");
            entity.Property(e => e.CBenutzername)
                .HasMaxLength(255)
                .HasColumnName("cBenutzername");
            entity.Property(e => e.CBeschreibung)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cBeschreibung");
            entity.Property(e => e.CErloeskonto)
                .HasMaxLength(64)
                .HasColumnName("cErloeskonto");
            entity.Property(e => e.CFirmenname)
                .HasMaxLength(255)
                .HasColumnName("cFirmenname");
            entity.Property(e => e.CIstBezahlt)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("cIstBezahlt");
            entity.Property(e => e.CLieferadresseAdresszusatz)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseAdresszusatz");
            entity.Property(e => e.CLieferadresseAnrede)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseAnrede");
            entity.Property(e => e.CLieferadresseBundesland)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseBundesland");
            entity.Property(e => e.CLieferadresseFax)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseFax");
            entity.Property(e => e.CLieferadresseFirma)
                .HasMaxLength(128)
                .HasColumnName("cLieferadresseFirma");
            entity.Property(e => e.CLieferadresseLand)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseLand");
            entity.Property(e => e.CLieferadresseLandIso)
                .HasMaxLength(5)
                .HasColumnName("cLieferadresseLandIso");
            entity.Property(e => e.CLieferadresseMail)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseMail");
            entity.Property(e => e.CLieferadresseMobilTelefon)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseMobilTelefon");
            entity.Property(e => e.CLieferadresseNachname)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseNachname");
            entity.Property(e => e.CLieferadresseOrt)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseOrt");
            entity.Property(e => e.CLieferadressePlz)
                .HasMaxLength(24)
                .HasColumnName("cLieferadressePlz");
            entity.Property(e => e.CLieferadressePostId)
                .HasMaxLength(255)
                .HasColumnName("cLieferadressePostId");
            entity.Property(e => e.CLieferadresseStrasse)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseStrasse");
            entity.Property(e => e.CLieferadresseTelefon)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseTelefon");
            entity.Property(e => e.CLieferadresseTitel)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseTitel");
            entity.Property(e => e.CLieferadresseVorname)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseVorname");
            entity.Property(e => e.CLieferadresseZusatz)
                .HasMaxLength(60)
                .HasColumnName("cLieferadresseZusatz");
            entity.Property(e => e.CRechnungsadresseAdresszusatz)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseAdresszusatz");
            entity.Property(e => e.CRechnungsadresseAnrede)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseAnrede");
            entity.Property(e => e.CRechnungsadresseBundesland)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseBundesland");
            entity.Property(e => e.CRechnungsadresseFax)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseFax");
            entity.Property(e => e.CRechnungsadresseFirma)
                .HasMaxLength(128)
                .HasColumnName("cRechnungsadresseFirma");
            entity.Property(e => e.CRechnungsadresseKundennummer)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseKundennummer");
            entity.Property(e => e.CRechnungsadresseLand)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseLand");
            entity.Property(e => e.CRechnungsadresseLandIso)
                .HasMaxLength(5)
                .HasColumnName("cRechnungsadresseLandIso");
            entity.Property(e => e.CRechnungsadresseMail)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseMail");
            entity.Property(e => e.CRechnungsadresseMobilTelefon)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseMobilTelefon");
            entity.Property(e => e.CRechnungsadresseNachname)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseNachname");
            entity.Property(e => e.CRechnungsadresseOrt)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseOrt");
            entity.Property(e => e.CRechnungsadressePlz)
                .HasMaxLength(24)
                .HasColumnName("cRechnungsadressePlz");
            entity.Property(e => e.CRechnungsadressePostId)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadressePostId");
            entity.Property(e => e.CRechnungsadresseStrasse)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseStrasse");
            entity.Property(e => e.CRechnungsadresseTelefon)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseTelefon");
            entity.Property(e => e.CRechnungsadresseTitel)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseTitel");
            entity.Property(e => e.CRechnungsadresseVorname)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseVorname");
            entity.Property(e => e.CRechnungsadresseZuHaenden)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseZuHaenden");
            entity.Property(e => e.CRechnungsadresseZusatz)
                .HasMaxLength(60)
                .HasColumnName("cRechnungsadresseZusatz");
            entity.Property(e => e.CRechnungsnummer)
                .HasMaxLength(50)
                .HasColumnName("cRechnungsnummer");
            entity.Property(e => e.CShopbestellnummer)
                .HasMaxLength(50)
                .HasColumnName("cShopbestellnummer");
            entity.Property(e => e.CShopname)
                .HasMaxLength(255)
                .HasColumnName("cShopname");
            entity.Property(e => e.CSonstiges).HasColumnName("cSonstiges");
            entity.Property(e => e.CStatustext)
                .HasMaxLength(255)
                .HasColumnName("cStatustext");
            entity.Property(e => e.CUmsatzsteuerId)
                .HasMaxLength(25)
                .HasColumnName("cUmsatzsteuerID");
            entity.Property(e => e.CVersandartname)
                .HasMaxLength(255)
                .HasColumnName("cVersandartname");
            entity.Property(e => e.CVersandinfo)
                .HasMaxLength(255)
                .HasColumnName("cVersandinfo");
            entity.Property(e => e.CWaehrung)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWaehrung");
            entity.Property(e => e.CZahlungsartname)
                .HasMaxLength(255)
                .HasColumnName("cZahlungsartname");
            entity.Property(e => e.CZahlungsmodulId)
                .HasMaxLength(255)
                .HasColumnName("cZahlungsmodulID");
            entity.Property(e => e.CeBayVerwendungszweck)
                .HasMaxLength(255)
                .HasColumnName("ceBayVerwendungszweck");
            entity.Property(e => e.DBezahldatum)
                .HasColumnType("datetime")
                .HasColumnName("dBezahldatum");
            entity.Property(e => e.DDruckdatum)
                .HasColumnType("datetime")
                .HasColumnName("dDruckdatum");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DMahndatum)
                .HasColumnType("datetime")
                .HasColumnName("dMahndatum");
            entity.Property(e => e.DMaildatum)
                .HasColumnType("datetime")
                .HasColumnName("dMaildatum");
            entity.Property(e => e.DVersanddatum)
                .HasColumnType("datetime")
                .HasColumnName("dVersanddatum");
            entity.Property(e => e.DVoraussichtlichesLieferdatum)
                .HasColumnType("datetime")
                .HasColumnName("dVoraussichtlichesLieferdatum");
            entity.Property(e => e.DZahlungsmaildatum)
                .HasColumnType("datetime")
                .HasColumnName("dZahlungsmaildatum");
            entity.Property(e => e.DZahlungsziel)
                .HasColumnType("datetime")
                .HasColumnName("dZahlungsziel");
            entity.Property(e => e.FBereitsgezahltWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBereitsgezahltWert");
            entity.Property(e => e.FGutgeschriebenerWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGutgeschriebenerWert");
            entity.Property(e => e.FKundenguthaben)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fKundenguthaben");
            entity.Property(e => e.FMahnGebuehr)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMahnGebuehr");
            entity.Property(e => e.FOffenerWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fOffenerWert");
            entity.Property(e => e.FRechnungswert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRechnungswert");
            entity.Property(e => e.FRechnungswertVersandland)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRechnungswertVersandland");
            entity.Property(e => e.FWaehrungsfaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWaehrungsfaktor");
            entity.Property(e => e.FZusatzgewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZusatzgewicht");
            entity.Property(e => e.KAdresse).HasColumnName("kAdresse");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KColor).HasColumnName("kColor");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KInetBestellung).HasColumnName("kInetBestellung");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KLieferadresse).HasColumnName("kLieferadresse");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.KRechnungsadresse).HasColumnName("kRechnungsadresse");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.KVersandart).HasColumnName("kVersandart");
            entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");
            entity.Property(e => e.NInnergemeinschaftlicheLieferung).HasColumnName("nInnergemeinschaftlicheLieferung");
            entity.Property(e => e.NIstAngemahnt).HasColumnName("nIstAngemahnt");
            entity.Property(e => e.NIstEntwurf).HasColumnName("nIstEntwurf");
            entity.Property(e => e.NIstExterneRechnung).HasColumnName("nIstExterneRechnung");
            entity.Property(e => e.NKomplettgeliefert).HasColumnName("nKomplettgeliefert");
            entity.Property(e => e.NMahnstopp).HasColumnName("nMahnstopp");
            entity.Property(e => e.NMahnstufe).HasColumnName("nMahnstufe");
            entity.Property(e => e.NPlattform).HasColumnName("nPlattform");
            entity.Property(e => e.NRechnungskorrekturErstellt).HasColumnName("nRechnungskorrekturErstellt");
            entity.Property(e => e.NStorniert).HasColumnName("nStorniert");
            entity.Property(e => e.NUmsatzsteuerfrei).HasColumnName("nUmsatzsteuerfrei");
            entity.Property(e => e.NZahlungszielInTagen).HasColumnName("nZahlungszielInTagen");
        });

        modelBuilder.Entity<LvRechnungskorrekturen>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvRechnungskorrekturen", "Kunde");

            entity.Property(e => e.CAnmerkung).HasColumnName("cAnmerkung");
            entity.Property(e => e.CBenutzername)
                .HasMaxLength(255)
                .HasColumnName("cBenutzername");
            entity.Property(e => e.CErloeskonto)
                .HasMaxLength(64)
                .HasColumnName("cErloeskonto");
            entity.Property(e => e.CFirmenname)
                .HasMaxLength(255)
                .HasColumnName("cFirmenname");
            entity.Property(e => e.CKurztext)
                .HasMaxLength(255)
                .HasColumnName("cKurztext");
            entity.Property(e => e.CLieferadresseAdresszusatz)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseAdresszusatz");
            entity.Property(e => e.CLieferadresseAnrede)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseAnrede");
            entity.Property(e => e.CLieferadresseBundesland)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseBundesland");
            entity.Property(e => e.CLieferadresseFax)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseFax");
            entity.Property(e => e.CLieferadresseFirma)
                .HasMaxLength(128)
                .HasColumnName("cLieferadresseFirma");
            entity.Property(e => e.CLieferadresseLand)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseLand");
            entity.Property(e => e.CLieferadresseLandIso)
                .HasMaxLength(5)
                .HasColumnName("cLieferadresseLandIso");
            entity.Property(e => e.CLieferadresseMail)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseMail");
            entity.Property(e => e.CLieferadresseMobilTelefon)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseMobilTelefon");
            entity.Property(e => e.CLieferadresseNachname)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseNachname");
            entity.Property(e => e.CLieferadresseOrt)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseOrt");
            entity.Property(e => e.CLieferadressePlz)
                .HasMaxLength(24)
                .HasColumnName("cLieferadressePlz");
            entity.Property(e => e.CLieferadressePostId)
                .HasMaxLength(255)
                .HasColumnName("cLieferadressePostId");
            entity.Property(e => e.CLieferadresseStrasse)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseStrasse");
            entity.Property(e => e.CLieferadresseTelefon)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseTelefon");
            entity.Property(e => e.CLieferadresseTitel)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseTitel");
            entity.Property(e => e.CLieferadresseVorname)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseVorname");
            entity.Property(e => e.CLieferadresseZusatz)
                .HasMaxLength(60)
                .HasColumnName("cLieferadresseZusatz");
            entity.Property(e => e.CRechnungsadresseAdresszusatz)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseAdresszusatz");
            entity.Property(e => e.CRechnungsadresseAnrede)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseAnrede");
            entity.Property(e => e.CRechnungsadresseBundesland)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseBundesland");
            entity.Property(e => e.CRechnungsadresseFax)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseFax");
            entity.Property(e => e.CRechnungsadresseFirma)
                .HasMaxLength(128)
                .HasColumnName("cRechnungsadresseFirma");
            entity.Property(e => e.CRechnungsadresseKundennummer)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseKundennummer");
            entity.Property(e => e.CRechnungsadresseLand)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseLand");
            entity.Property(e => e.CRechnungsadresseLandIso)
                .HasMaxLength(5)
                .HasColumnName("cRechnungsadresseLandIso");
            entity.Property(e => e.CRechnungsadresseMail)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseMail");
            entity.Property(e => e.CRechnungsadresseMobilTelefon)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseMobilTelefon");
            entity.Property(e => e.CRechnungsadresseNachname)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseNachname");
            entity.Property(e => e.CRechnungsadresseOrt)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseOrt");
            entity.Property(e => e.CRechnungsadressePlz)
                .HasMaxLength(24)
                .HasColumnName("cRechnungsadressePlz");
            entity.Property(e => e.CRechnungsadressePostId)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadressePostId");
            entity.Property(e => e.CRechnungsadresseStrasse)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseStrasse");
            entity.Property(e => e.CRechnungsadresseTelefon)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseTelefon");
            entity.Property(e => e.CRechnungsadresseTitel)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseTitel");
            entity.Property(e => e.CRechnungsadresseVorname)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseVorname");
            entity.Property(e => e.CRechnungsadresseZuHaenden)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseZuHaenden");
            entity.Property(e => e.CRechnungsadresseZusatz)
                .HasMaxLength(60)
                .HasColumnName("cRechnungsadresseZusatz");
            entity.Property(e => e.CRechnungskorrekturnummer)
                .HasMaxLength(50)
                .HasColumnName("cRechnungskorrekturnummer");
            entity.Property(e => e.CRechnungsnummer)
                .HasMaxLength(50)
                .HasColumnName("cRechnungsnummer");
            entity.Property(e => e.CSonstiges).HasColumnName("cSonstiges");
            entity.Property(e => e.CStatustext)
                .HasMaxLength(255)
                .HasColumnName("cStatustext");
            entity.Property(e => e.CText)
                .HasMaxLength(4000)
                .HasColumnName("cText");
            entity.Property(e => e.CWaehrung)
                .HasMaxLength(20)
                .HasColumnName("cWaehrung");
            entity.Property(e => e.CeBayBenutzername)
                .HasMaxLength(255)
                .HasColumnName("ceBayBenutzername");
            entity.Property(e => e.DDruckdatum)
                .HasColumnType("datetime")
                .HasColumnName("dDruckdatum");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DMaildatum)
                .HasColumnType("datetime")
                .HasColumnName("dMaildatum");
            entity.Property(e => e.FFaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fFaktor");
            entity.Property(e => e.FMwst)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwst");
            entity.Property(e => e.FPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPreis");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.KRechnungsadresse).HasColumnName("kRechnungsadresse");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.NPlattform).HasColumnName("nPlattform");
        });

        modelBuilder.Entity<LvRechnungskorrekturposition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvRechnungskorrekturposition", "Verkauf");

            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CExterneAuftragsnummer)
                .HasMaxLength(50)
                .HasColumnName("cExterneAuftragsnummer");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CShopname)
                .HasMaxLength(255)
                .HasColumnName("cShopname");
            entity.Property(e => e.CeBayBenutzername)
                .HasMaxLength(255)
                .HasColumnName("ceBayBenutzername");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 4)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.FMwSt)
                .HasColumnType("decimal(25, 4)")
                .HasColumnName("fMwSt");
            entity.Property(e => e.FVkbrutto)
                .HasColumnType("decimal(25, 4)")
                .HasColumnName("fVKBrutto");
            entity.Property(e => e.FVknetto)
                .HasColumnType("decimal(25, 4)")
                .HasColumnName("fVKNetto");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KAuftragPosition).HasColumnName("kAuftragPosition");
            entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");
            entity.Property(e => e.KGutschriftPos).HasColumnName("kGutschriftPos");
            entity.Property(e => e.KKonfigurationsVater).HasColumnName("kKonfigurationsVater");
            entity.Property(e => e.KRechnungPosition).HasColumnName("kRechnungPosition");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KStuecklistenVater).HasColumnName("kStuecklistenVater");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<LvRechnungskorrekturverwaltung>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvRechnungskorrekturverwaltung", "Verkauf");

            entity.Property(e => e.CAnmerkung).HasColumnName("cAnmerkung");
            entity.Property(e => e.CBenutzername)
                .HasMaxLength(255)
                .HasColumnName("cBenutzername");
            entity.Property(e => e.CErloeskonto)
                .HasMaxLength(64)
                .HasColumnName("cErloeskonto");
            entity.Property(e => e.CFirmenname)
                .HasMaxLength(255)
                .HasColumnName("cFirmenname");
            entity.Property(e => e.CKundeNr)
                .HasMaxLength(30)
                .HasColumnName("cKundeNr");
            entity.Property(e => e.CKundengruppe)
                .HasMaxLength(255)
                .HasColumnName("cKundengruppe");
            entity.Property(e => e.CKurztext)
                .HasMaxLength(255)
                .HasColumnName("cKurztext");
            entity.Property(e => e.CLieferadresseAdresszusatz)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseAdresszusatz");
            entity.Property(e => e.CLieferadresseAnrede)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseAnrede");
            entity.Property(e => e.CLieferadresseBundesland)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseBundesland");
            entity.Property(e => e.CLieferadresseFax)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseFax");
            entity.Property(e => e.CLieferadresseFirma)
                .HasMaxLength(128)
                .HasColumnName("cLieferadresseFirma");
            entity.Property(e => e.CLieferadresseLand)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseLand");
            entity.Property(e => e.CLieferadresseLandIso)
                .HasMaxLength(5)
                .HasColumnName("cLieferadresseLandIso");
            entity.Property(e => e.CLieferadresseMail)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseMail");
            entity.Property(e => e.CLieferadresseMobilTelefon)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseMobilTelefon");
            entity.Property(e => e.CLieferadresseNachname)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseNachname");
            entity.Property(e => e.CLieferadresseOrt)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseOrt");
            entity.Property(e => e.CLieferadressePlz)
                .HasMaxLength(24)
                .HasColumnName("cLieferadressePlz");
            entity.Property(e => e.CLieferadressePostId)
                .HasMaxLength(255)
                .HasColumnName("cLieferadressePostId");
            entity.Property(e => e.CLieferadresseStrasse)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseStrasse");
            entity.Property(e => e.CLieferadresseTelefon)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseTelefon");
            entity.Property(e => e.CLieferadresseTitel)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseTitel");
            entity.Property(e => e.CLieferadresseVorname)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseVorname");
            entity.Property(e => e.CLieferadresseZusatz)
                .HasMaxLength(60)
                .HasColumnName("cLieferadresseZusatz");
            entity.Property(e => e.CRechnungsadresseAdresszusatz)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseAdresszusatz");
            entity.Property(e => e.CRechnungsadresseAnrede)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseAnrede");
            entity.Property(e => e.CRechnungsadresseBundesland)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseBundesland");
            entity.Property(e => e.CRechnungsadresseFax)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseFax");
            entity.Property(e => e.CRechnungsadresseFirma)
                .HasMaxLength(128)
                .HasColumnName("cRechnungsadresseFirma");
            entity.Property(e => e.CRechnungsadresseLand)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseLand");
            entity.Property(e => e.CRechnungsadresseLandIso)
                .HasMaxLength(5)
                .HasColumnName("cRechnungsadresseLandIso");
            entity.Property(e => e.CRechnungsadresseMail)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseMail");
            entity.Property(e => e.CRechnungsadresseMobilTelefon)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseMobilTelefon");
            entity.Property(e => e.CRechnungsadresseNachname)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseNachname");
            entity.Property(e => e.CRechnungsadresseOrt)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseOrt");
            entity.Property(e => e.CRechnungsadressePlz)
                .HasMaxLength(24)
                .HasColumnName("cRechnungsadressePlz");
            entity.Property(e => e.CRechnungsadressePostId)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadressePostId");
            entity.Property(e => e.CRechnungsadresseStrasse)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseStrasse");
            entity.Property(e => e.CRechnungsadresseTelefon)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseTelefon");
            entity.Property(e => e.CRechnungsadresseTitel)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseTitel");
            entity.Property(e => e.CRechnungsadresseVorname)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseVorname");
            entity.Property(e => e.CRechnungsadresseZusatz)
                .HasMaxLength(60)
                .HasColumnName("cRechnungsadresseZusatz");
            entity.Property(e => e.CRechnungskorrekturnummer)
                .HasMaxLength(50)
                .HasColumnName("cRechnungskorrekturnummer");
            entity.Property(e => e.CRechnungsnummer)
                .HasMaxLength(50)
                .HasColumnName("cRechnungsnummer");
            entity.Property(e => e.CShopname)
                .HasMaxLength(255)
                .HasColumnName("cShopname");
            entity.Property(e => e.CSonstiges).HasColumnName("cSonstiges");
            entity.Property(e => e.CStatustext)
                .HasMaxLength(255)
                .HasColumnName("cStatustext");
            entity.Property(e => e.CStorniertVon)
                .HasMaxLength(255)
                .HasColumnName("cStorniertVon");
            entity.Property(e => e.CStornoKommentar)
                .HasMaxLength(100)
                .HasColumnName("cStornoKommentar");
            entity.Property(e => e.CStornogrund)
                .HasMaxLength(50)
                .HasColumnName("cStornogrund");
            entity.Property(e => e.CText)
                .HasMaxLength(4000)
                .HasColumnName("cText");
            entity.Property(e => e.CWaehrung)
                .HasMaxLength(20)
                .HasColumnName("cWaehrung");
            entity.Property(e => e.CeBayBenutzername)
                .HasMaxLength(255)
                .HasColumnName("ceBayBenutzername");
            entity.Property(e => e.DDruckdatum)
                .HasColumnType("datetime")
                .HasColumnName("dDruckdatum");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DMaildatum)
                .HasColumnType("datetime")
                .HasColumnName("dMaildatum");
            entity.Property(e => e.DStorniert)
                .HasColumnType("datetime")
                .HasColumnName("dStorniert");
            entity.Property(e => e.FFaktor)
                .HasColumnType("numeric(25, 13)")
                .HasColumnName("fFaktor");
            entity.Property(e => e.FMwst)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwst");
            entity.Property(e => e.FPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPreis");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.KRechnungsadresse).HasColumnName("kRechnungsadresse");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.NStorno).HasColumnName("nStorno");
            entity.Property(e => e.NStornoTyp).HasColumnName("nStornoTyp");
        });

        modelBuilder.Entity<LvRechnungsposition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvRechnungsposition", "Verkauf");

            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CAuftragsnummer)
                .HasMaxLength(50)
                .HasColumnName("cAuftragsnummer");
            entity.Property(e => e.CEinheit)
                .HasMaxLength(255)
                .HasColumnName("cEinheit");
            entity.Property(e => e.CErloeskonto)
                .HasMaxLength(10)
                .HasColumnName("cErloeskonto");
            entity.Property(e => e.CExterneAuftragsnummer)
                .HasMaxLength(50)
                .HasColumnName("cExterneAuftragsnummer");
            entity.Property(e => e.CHinweis).HasColumnName("cHinweis");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CStatustext)
                .HasMaxLength(255)
                .HasColumnName("cStatustext");
            entity.Property(e => e.CZahlungsmodulId)
                .HasMaxLength(255)
                .HasColumnName("cZahlungsmodulID");
            entity.Property(e => e.CeBayVerwendungszweck)
                .HasMaxLength(1000)
                .HasColumnName("ceBayVerwendungszweck");
            entity.Property(e => e.DVoraussichtlichesLieferdatum)
                .HasColumnType("datetime")
                .HasColumnName("dVoraussichtlichesLieferdatum");
            entity.Property(e => e.DZahlungsmaildatum)
                .HasColumnType("datetime")
                .HasColumnName("dZahlungsmaildatum");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.FBereitsgezahltWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBereitsgezahltWert");
            entity.Property(e => e.FBruttoPreisEinzeln)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBruttoPreisEinzeln");
            entity.Property(e => e.FBruttoPreisGesamt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBruttoPreisGesamt");
            entity.Property(e => e.FGewichtEinzeln)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGewichtEinzeln");
            entity.Property(e => e.FGewichtGesamt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGewichtGesamt");
            entity.Property(e => e.FGutgeschriebenerWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGutgeschriebenerWert");
            entity.Property(e => e.FMwSt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwSt");
            entity.Property(e => e.FMwStBetrag)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwStBetrag");
            entity.Property(e => e.FNettoPreisEinzeln)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fNettoPreisEinzeln");
            entity.Property(e => e.FNettoPreisGesamt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fNettoPreisGesamt");
            entity.Property(e => e.FRabattProzent)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabattProzent");
            entity.Property(e => e.FRabattvertrag)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabattvertrag");
            entity.Property(e => e.FVersandgewichtEinzeln)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVersandgewichtEinzeln");
            entity.Property(e => e.FVersandgewichtGesamt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVersandgewichtGesamt");
            entity.Property(e => e.FZusatzgewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZusatzgewicht");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KAuftragPosition).HasColumnName("kAuftragPosition");
            entity.Property(e => e.KKonfigVater).HasColumnName("kKonfigVater");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.KRechnungPosition).HasColumnName("kRechnungPosition");
            entity.Property(e => e.KRechnungStueckliste).HasColumnName("kRechnungStueckliste");
            entity.Property(e => e.KShopauftrag).HasColumnName("kShopauftrag");
            entity.Property(e => e.NArchiv).HasColumnName("nArchiv");
            entity.Property(e => e.NBeschreibung).HasColumnName("nBeschreibung");
            entity.Property(e => e.NInet).HasColumnName("nInet");
            entity.Property(e => e.NIstReadOnly).HasColumnName("nIstReadOnly");
            entity.Property(e => e.NKomplettgeliefert).HasColumnName("nKomplettgeliefert");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NStorniert).HasColumnName("nStorniert");
        });

        modelBuilder.Entity<LvRechnungsverwaltung>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvRechnungsverwaltung", "Verkauf");

            entity.Property(e => e.CAnmerkung).HasColumnName("cAnmerkung");
            entity.Property(e => e.CAuftragsNr)
                .HasMaxLength(200)
                .HasColumnName("cAuftragsNr");
            entity.Property(e => e.CBenutzername)
                .HasMaxLength(255)
                .HasColumnName("cBenutzername");
            entity.Property(e => e.CExterneAuftragsnummer)
                .HasMaxLength(50)
                .HasColumnName("cExterneAuftragsnummer");
            entity.Property(e => e.CFarbbedeutung)
                .HasMaxLength(255)
                .HasColumnName("cFarbbedeutung");
            entity.Property(e => e.CFirmenname)
                .HasMaxLength(255)
                .HasColumnName("cFirmenname");
            entity.Property(e => e.CKundeNr)
                .HasMaxLength(30)
                .HasColumnName("cKundeNr");
            entity.Property(e => e.CKundengruppe)
                .HasMaxLength(255)
                .HasColumnName("cKundengruppe");
            entity.Property(e => e.CLieferadresseAdresszusatz)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseAdresszusatz");
            entity.Property(e => e.CLieferadresseAnrede)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseAnrede");
            entity.Property(e => e.CLieferadresseBundesland)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseBundesland");
            entity.Property(e => e.CLieferadresseFax)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseFax");
            entity.Property(e => e.CLieferadresseFirma)
                .HasMaxLength(128)
                .HasColumnName("cLieferadresseFirma");
            entity.Property(e => e.CLieferadresseLand)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseLand");
            entity.Property(e => e.CLieferadresseLandIso)
                .HasMaxLength(5)
                .HasColumnName("cLieferadresseLandIso");
            entity.Property(e => e.CLieferadresseMail)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseMail");
            entity.Property(e => e.CLieferadresseMobilTelefon)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseMobilTelefon");
            entity.Property(e => e.CLieferadresseNachname)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseNachname");
            entity.Property(e => e.CLieferadresseOrt)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseOrt");
            entity.Property(e => e.CLieferadressePlz)
                .HasMaxLength(24)
                .HasColumnName("cLieferadressePlz");
            entity.Property(e => e.CLieferadressePostId)
                .HasMaxLength(255)
                .HasColumnName("cLieferadressePostId");
            entity.Property(e => e.CLieferadresseStrasse)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseStrasse");
            entity.Property(e => e.CLieferadresseTelefon)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseTelefon");
            entity.Property(e => e.CLieferadresseTitel)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseTitel");
            entity.Property(e => e.CLieferadresseVorname)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseVorname");
            entity.Property(e => e.CLieferadresseZusatz)
                .HasMaxLength(60)
                .HasColumnName("cLieferadresseZusatz");
            entity.Property(e => e.CRechnungsadresseAdresszusatz)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseAdresszusatz");
            entity.Property(e => e.CRechnungsadresseAnrede)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseAnrede");
            entity.Property(e => e.CRechnungsadresseBundesland)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseBundesland");
            entity.Property(e => e.CRechnungsadresseFax)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseFax");
            entity.Property(e => e.CRechnungsadresseFirma)
                .HasMaxLength(128)
                .HasColumnName("cRechnungsadresseFirma");
            entity.Property(e => e.CRechnungsadresseLand)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseLand");
            entity.Property(e => e.CRechnungsadresseLandIso)
                .HasMaxLength(5)
                .HasColumnName("cRechnungsadresseLandIso");
            entity.Property(e => e.CRechnungsadresseMail)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseMail");
            entity.Property(e => e.CRechnungsadresseMobilTelefon)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseMobilTelefon");
            entity.Property(e => e.CRechnungsadresseNachname)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseNachname");
            entity.Property(e => e.CRechnungsadresseOrt)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseOrt");
            entity.Property(e => e.CRechnungsadressePlz)
                .HasMaxLength(24)
                .HasColumnName("cRechnungsadressePlz");
            entity.Property(e => e.CRechnungsadressePostId)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadressePostId");
            entity.Property(e => e.CRechnungsadresseStrasse)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseStrasse");
            entity.Property(e => e.CRechnungsadresseTelefon)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseTelefon");
            entity.Property(e => e.CRechnungsadresseTitel)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseTitel");
            entity.Property(e => e.CRechnungsadresseVorname)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseVorname");
            entity.Property(e => e.CRechnungsadresseZusatz)
                .HasMaxLength(60)
                .HasColumnName("cRechnungsadresseZusatz");
            entity.Property(e => e.CRechnungsnummer)
                .HasMaxLength(50)
                .HasColumnName("cRechnungsnummer");
            entity.Property(e => e.CShopname)
                .HasMaxLength(255)
                .HasColumnName("cShopname");
            entity.Property(e => e.CSonstiges).HasColumnName("cSonstiges");
            entity.Property(e => e.CStornoBenutzername)
                .HasMaxLength(255)
                .HasColumnName("cStornoBenutzername");
            entity.Property(e => e.CStornoKommentar)
                .HasMaxLength(100)
                .HasColumnName("cStornoKommentar");
            entity.Property(e => e.CStornogrund)
                .HasMaxLength(50)
                .HasColumnName("cStornogrund");
            entity.Property(e => e.CUmsatzsteuerId)
                .HasMaxLength(25)
                .HasColumnName("cUmsatzsteuerID");
            entity.Property(e => e.CVersandart)
                .HasMaxLength(255)
                .HasColumnName("cVersandart");
            entity.Property(e => e.CWaehrung)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWaehrung");
            entity.Property(e => e.CZahlungsart)
                .HasMaxLength(255)
                .HasColumnName("cZahlungsart");
            entity.Property(e => e.CZahlungsartname)
                .HasMaxLength(255)
                .HasColumnName("cZahlungsartname");
            entity.Property(e => e.CeBayBenutzername)
                .HasMaxLength(255)
                .HasColumnName("ceBayBenutzername");
            entity.Property(e => e.DBezahldatum)
                .HasColumnType("datetime")
                .HasColumnName("dBezahldatum");
            entity.Property(e => e.DDruckdatum)
                .HasColumnType("datetime")
                .HasColumnName("dDruckdatum");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DLetzterVersand)
                .HasColumnType("datetime")
                .HasColumnName("dLetzterVersand");
            entity.Property(e => e.DMahndatum)
                .HasColumnType("datetime")
                .HasColumnName("dMahndatum");
            entity.Property(e => e.DMaildatum)
                .HasColumnType("datetime")
                .HasColumnName("dMaildatum");
            entity.Property(e => e.DStorniert)
                .HasColumnType("datetime")
                .HasColumnName("dStorniert");
            entity.Property(e => e.DValutadatum)
                .HasColumnType("datetime")
                .HasColumnName("dValutadatum");
            entity.Property(e => e.DZahlungsziel)
                .HasColumnType("datetime")
                .HasColumnName("dZahlungsziel");
            entity.Property(e => e.FBereitsgezahltWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBereitsgezahltWert");
            entity.Property(e => e.FGesamtBruttopreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGesamtBruttopreis");
            entity.Property(e => e.FGutgeschriebenerWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGutgeschriebenerWert");
            entity.Property(e => e.FOffenerWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fOffenerWert");
            entity.Property(e => e.FRechnungswertVersandland)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fRechnungswertVersandland");
            entity.Property(e => e.FWaehrungsfaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWaehrungsfaktor");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.KVersandart).HasColumnName("kVersandart");
            entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");
            entity.Property(e => e.NArchiv).HasColumnName("nArchiv");
            entity.Property(e => e.NDebitorennr).HasColumnName("nDebitorennr");
            entity.Property(e => e.NExistierendeRechnungDrucken).HasColumnName("nExistierendeRechnungDrucken");
            entity.Property(e => e.NFarbcode).HasColumnName("nFarbcode");
            entity.Property(e => e.NInnergemeinschaftlicheLieferung).HasColumnName("nInnergemeinschaftlicheLieferung");
            entity.Property(e => e.NIstAngemahnt).HasColumnName("nIstAngemahnt");
            entity.Property(e => e.NIstEntwurf).HasColumnName("nIstEntwurf");
            entity.Property(e => e.NIstExterneRechnung).HasColumnName("nIstExterneRechnung");
            entity.Property(e => e.NIstKomplettBezahlt).HasColumnName("nIstKomplettBezahlt");
            entity.Property(e => e.NKorrigiert).HasColumnName("nKorrigiert");
            entity.Property(e => e.NMahnstopp).HasColumnName("nMahnstopp");
            entity.Property(e => e.NMahnstufe).HasColumnName("nMahnstufe");
            entity.Property(e => e.NPlattformTyp).HasColumnName("nPlattformTyp");
            entity.Property(e => e.NRechnungskorrekturErstellt).HasColumnName("nRechnungskorrekturErstellt");
            entity.Property(e => e.NSteuereinstellung).HasColumnName("nSteuereinstellung");
            entity.Property(e => e.NStorno).HasColumnName("nStorno");
            entity.Property(e => e.NUmsatzsteuerfrei).HasColumnName("nUmsatzsteuerfrei");
            entity.Property(e => e.NZahlungStatus).HasColumnName("nZahlungStatus");
            entity.Property(e => e.NZahlungszielInTagen).HasColumnName("nZahlungszielInTagen");
        });

        modelBuilder.Entity<LvReplenishmentOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvReplenishmentOrder", "pps");

            entity.Property(e => e.CAuftragsNr)
                .HasMaxLength(50)
                .HasColumnName("cAuftragsNr");
            entity.Property(e => e.CBenutzerNameErstellt)
                .HasMaxLength(255)
                .HasColumnName("cBenutzerNameErstellt");
            entity.Property(e => e.COperationName)
                .HasMaxLength(255)
                .HasColumnName("cOperationName");
            entity.Property(e => e.COperationNumber)
                .HasMaxLength(100)
                .HasColumnName("cOperationNumber");
            entity.Property(e => e.CProductionBatchNumber)
                .HasMaxLength(100)
                .HasColumnName("cProductionBatchNumber");
            entity.Property(e => e.CProductionLotNumber)
                .HasMaxLength(100)
                .HasColumnName("cProductionLotNumber");
            entity.Property(e => e.CWarenlagerName)
                .HasMaxLength(255)
                .HasColumnName("cWarenlagerName");
            entity.Property(e => e.CWorkbenchName)
                .HasMaxLength(255)
                .HasColumnName("cWorkbenchName");
            entity.Property(e => e.CWorkbenchNummer)
                .HasMaxLength(100)
                .HasColumnName("cWorkbenchNummer");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KWorkbenchResource).HasColumnName("kWorkbenchResource");
            entity.Property(e => e.NState).HasColumnName("nState");
        });

        modelBuilder.Entity<LvReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvReport", "SCX");

            entity.Property(e => e.CReportType)
                .HasMaxLength(255)
                .HasColumnName("cReportType");
            entity.Property(e => e.CResource).HasColumnName("cResource");
            entity.Property(e => e.CScxReportId)
                .HasMaxLength(255)
                .HasColumnName("cScxReportId");
            entity.Property(e => e.DCreated)
                .HasColumnType("datetime")
                .HasColumnName("dCreated");
            entity.Property(e => e.DEndDate)
                .HasColumnType("datetime")
                .HasColumnName("dEndDate");
            entity.Property(e => e.DRequested)
                .HasColumnType("datetime")
                .HasColumnName("dRequested");
            entity.Property(e => e.DStartDate)
                .HasColumnType("datetime")
                .HasColumnName("dStartDate");
            entity.Property(e => e.KReport)
                .ValueGeneratedOnAdd()
                .HasColumnName("kReport");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<LvResource>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvResources", "ResPl");

            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CNumber)
                .HasMaxLength(100)
                .HasColumnName("cNumber");
            entity.Property(e => e.DCreated).HasColumnName("dCreated");
            entity.Property(e => e.DLastModified).HasColumnName("dLastModified");
            entity.Property(e => e.FCost)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fCost");
            entity.Property(e => e.KResource).HasColumnName("kResource");
            entity.Property(e => e.NAppoitmentRequestAutomatic).HasColumnName("nAppoitmentRequestAutomatic");
            entity.Property(e => e.NDivisible).HasColumnName("nDivisible");
            entity.Property(e => e.NInactive).HasColumnName("nInactive");
            entity.Property(e => e.NType).HasColumnName("nType");
            entity.Property(e => e.ResourceTypeName).HasMaxLength(255);
            entity.Property(e => e.TimeModelName).HasMaxLength(255);
            entity.Property(e => e.USpecialType).HasColumnName("uSpecialType");
        });

        modelBuilder.Entity<LvRetoure>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvRetoure", "RM");

            entity.Property(e => e.AbholadresseCAdressZusatz)
                .HasMaxLength(255)
                .HasColumnName("Abholadresse_cAdressZusatz");
            entity.Property(e => e.AbholadresseCAnrede)
                .HasMaxLength(30)
                .HasColumnName("Abholadresse_cAnrede");
            entity.Property(e => e.AbholadresseCBundesland)
                .HasMaxLength(255)
                .HasColumnName("Abholadresse_cBundesland");
            entity.Property(e => e.AbholadresseCFax)
                .HasMaxLength(30)
                .HasColumnName("Abholadresse_cFax");
            entity.Property(e => e.AbholadresseCFirma)
                .HasMaxLength(128)
                .HasColumnName("Abholadresse_cFirma");
            entity.Property(e => e.AbholadresseCIso)
                .HasMaxLength(5)
                .HasColumnName("Abholadresse_cISO");
            entity.Property(e => e.AbholadresseCLand)
                .HasMaxLength(255)
                .HasColumnName("Abholadresse_cLand");
            entity.Property(e => e.AbholadresseCMail)
                .HasMaxLength(255)
                .HasColumnName("Abholadresse_cMail");
            entity.Property(e => e.AbholadresseCMobil)
                .HasMaxLength(30)
                .HasColumnName("Abholadresse_cMobil");
            entity.Property(e => e.AbholadresseCName)
                .HasMaxLength(255)
                .HasColumnName("Abholadresse_cName");
            entity.Property(e => e.AbholadresseCOrt)
                .HasMaxLength(255)
                .HasColumnName("Abholadresse_cOrt");
            entity.Property(e => e.AbholadresseCPlz)
                .HasMaxLength(24)
                .HasColumnName("Abholadresse_cPLZ");
            entity.Property(e => e.AbholadresseCPostId)
                .HasMaxLength(255)
                .HasColumnName("Abholadresse_cPostID");
            entity.Property(e => e.AbholadresseCStrasse)
                .HasMaxLength(255)
                .HasColumnName("Abholadresse_cStrasse");
            entity.Property(e => e.AbholadresseCTel)
                .HasMaxLength(30)
                .HasColumnName("Abholadresse_cTel");
            entity.Property(e => e.AbholadresseCTitel)
                .HasMaxLength(64)
                .HasColumnName("Abholadresse_cTitel");
            entity.Property(e => e.AbholadresseCVorname)
                .HasMaxLength(255)
                .HasColumnName("Abholadresse_cVorname");
            entity.Property(e => e.AbholadresseCZusatz)
                .HasMaxLength(60)
                .HasColumnName("Abholadresse_cZusatz");
            entity.Property(e => e.CAdressZusatz)
                .HasMaxLength(255)
                .HasColumnName("cAdressZusatz");
            entity.Property(e => e.CAnrede)
                .HasMaxLength(30)
                .HasColumnName("cAnrede");
            entity.Property(e => e.CAnsprechpartner)
                .HasMaxLength(255)
                .HasColumnName("cAnsprechpartner");
            entity.Property(e => e.CBenutzer)
                .HasMaxLength(255)
                .HasColumnName("cBenutzer");
            entity.Property(e => e.CBestellNr)
                .HasMaxLength(50)
                .HasColumnName("cBestellNr");
            entity.Property(e => e.CBundesland)
                .HasMaxLength(255)
                .HasColumnName("cBundesland");
            entity.Property(e => e.CExternalNumber)
                .HasMaxLength(255)
                .HasColumnName("cExternalNumber");
            entity.Property(e => e.CFax)
                .HasMaxLength(30)
                .HasColumnName("cFax");
            entity.Property(e => e.CFfnReturnId)
                .HasMaxLength(255)
                .HasColumnName("cFfnReturnId");
            entity.Property(e => e.CFirma)
                .HasMaxLength(255)
                .HasColumnName("cFirma");
            entity.Property(e => e.CGutschriftNr)
                .HasMaxLength(50)
                .HasColumnName("cGutschriftNr");
            entity.Property(e => e.CIso)
                .HasMaxLength(5)
                .HasColumnName("cISO");
            entity.Property(e => e.CKommentarExtern).HasColumnName("cKommentarExtern");
            entity.Property(e => e.CKommentarIntern).HasColumnName("cKommentarIntern");
            entity.Property(e => e.CKundeFirma)
                .HasMaxLength(128)
                .HasColumnName("cKundeFirma");
            entity.Property(e => e.CKundenNr)
                .HasMaxLength(30)
                .HasColumnName("cKundenNr");
            entity.Property(e => e.CLand)
                .HasMaxLength(255)
                .HasColumnName("cLand");
            entity.Property(e => e.CLieferscheinNr)
                .HasMaxLength(50)
                .HasColumnName("cLieferscheinNr");
            entity.Property(e => e.CMail)
                .HasMaxLength(255)
                .HasColumnName("cMail");
            entity.Property(e => e.CMobil)
                .HasMaxLength(30)
                .HasColumnName("cMobil");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPlz)
                .HasMaxLength(24)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CPostId)
                .HasMaxLength(255)
                .HasColumnName("cPostID");
            entity.Property(e => e.CRechnungsNr)
                .HasMaxLength(50)
                .HasColumnName("cRechnungsNr");
            entity.Property(e => e.CRetoureNr)
                .HasMaxLength(255)
                .HasColumnName("cRetoureNr");
            entity.Property(e => e.CReturnId)
                .HasMaxLength(255)
                .HasColumnName("cReturnId");
            entity.Property(e => e.CStatus)
                .HasMaxLength(255)
                .HasColumnName("cStatus");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTel)
                .HasMaxLength(30)
                .HasColumnName("cTel");
            entity.Property(e => e.CTitel)
                .HasMaxLength(64)
                .HasColumnName("cTitel");
            entity.Property(e => e.CTrackingId)
                .HasMaxLength(255)
                .HasColumnName("cTrackingId");
            entity.Property(e => e.CVorname)
                .HasMaxLength(255)
                .HasColumnName("cVorname");
            entity.Property(e => e.CZusatz)
                .HasMaxLength(60)
                .HasColumnName("cZusatz");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.EbayUsername).HasMaxLength(255);
            entity.Property(e => e.ExterneAuftragsnummer).HasMaxLength(50);
            entity.Property(e => e.FAnzahlLieferschein).HasColumnName("fAnzahlLieferschein");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KBestellungUmtausch).HasColumnName("kBestellungUmtausch");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");
            entity.Property(e => e.KRmretoure).HasColumnName("kRMRetoure");
            entity.Property(e => e.KRmstatus).HasColumnName("kRMStatus");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.NHerkunft).HasColumnName("nHerkunft");
            entity.Property(e => e.Warenlager).HasMaxLength(255);
        });

        modelBuilder.Entity<LvRetoureBearbeiten>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvRetoureBearbeiten", "RM");

            entity.Property(e => e.CAdressZusatz)
                .HasMaxLength(255)
                .HasColumnName("cAdressZusatz");
            entity.Property(e => e.CAnrede)
                .HasMaxLength(30)
                .HasColumnName("cAnrede");
            entity.Property(e => e.CAnsprechpartner)
                .HasMaxLength(255)
                .HasColumnName("cAnsprechpartner");
            entity.Property(e => e.CBundesland)
                .HasMaxLength(255)
                .HasColumnName("cBundesland");
            entity.Property(e => e.CExternalNumber)
                .HasMaxLength(255)
                .HasColumnName("cExternalNumber");
            entity.Property(e => e.CFax)
                .HasMaxLength(30)
                .HasColumnName("cFax");
            entity.Property(e => e.CFfnReturnId)
                .HasMaxLength(255)
                .HasColumnName("cFfnReturnId");
            entity.Property(e => e.CFirma)
                .HasMaxLength(128)
                .HasColumnName("cFirma");
            entity.Property(e => e.CIso)
                .HasMaxLength(5)
                .HasColumnName("cISO");
            entity.Property(e => e.CKommentarExtern).HasColumnName("cKommentarExtern");
            entity.Property(e => e.CKommentarIntern).HasColumnName("cKommentarIntern");
            entity.Property(e => e.CKorrekturBetragKommentar).HasColumnName("cKorrekturBetragKommentar");
            entity.Property(e => e.CKundenNr)
                .HasMaxLength(30)
                .HasColumnName("cKundenNr");
            entity.Property(e => e.CLand)
                .HasMaxLength(255)
                .HasColumnName("cLand");
            entity.Property(e => e.CMail)
                .HasMaxLength(255)
                .HasColumnName("cMail");
            entity.Property(e => e.CMobil)
                .HasMaxLength(30)
                .HasColumnName("cMobil");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPlz)
                .HasMaxLength(24)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CPostId)
                .HasMaxLength(255)
                .HasColumnName("cPostID");
            entity.Property(e => e.CRetoureNr)
                .HasMaxLength(255)
                .HasColumnName("cRetoureNr");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTel)
                .HasMaxLength(30)
                .HasColumnName("cTel");
            entity.Property(e => e.CTitel)
                .HasMaxLength(64)
                .HasColumnName("cTitel");
            entity.Property(e => e.CVorname)
                .HasMaxLength(255)
                .HasColumnName("cVorname");
            entity.Property(e => e.CZusatz)
                .HasMaxLength(60)
                .HasColumnName("cZusatz");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.FKorrekturBetrag)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fKorrekturBetrag");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KBestellungUmtausch).HasColumnName("kBestellungUmtausch");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KRmretoure).HasColumnName("kRMRetoure");
            entity.Property(e => e.KRmretoureAbholAdresse).HasColumnName("kRMRetoureAbholAdresse");
            entity.Property(e => e.KRmstatus).HasColumnName("kRMStatus");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.NFulfillment).HasColumnName("nFulfillment");
            entity.Property(e => e.NHerkunft).HasColumnName("nHerkunft");
            entity.Property(e => e.NJtlFulfillment).HasColumnName("nJtlFulfillment");
            entity.Property(e => e.NKuponGutschriftGutschreiben).HasColumnName("nKuponGutschriftGutschreiben");
            entity.Property(e => e.NVersandkostenErstatten).HasColumnName("nVersandkostenErstatten");
        });

        modelBuilder.Entity<LvRetoureLieferscheinPo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvRetoureLieferscheinPos", "RM");

            entity.Property(e => e.AnzahlRetourniert).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.ArtikelName).HasMaxLength(255);
            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CLagerAktiv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLagerAktiv");
            entity.Property(e => e.CLieferscheinNr)
                .HasMaxLength(50)
                .HasColumnName("cLieferscheinNr");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CTeilbar)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cTeilbar");
            entity.Property(e => e.DPaketVersendet)
                .HasColumnType("datetime")
                .HasColumnName("dPaketVersendet");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.FMwSt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwSt");
            entity.Property(e => e.FRabatt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabatt");
            entity.Property(e => e.FVkNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVkNetto");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KAuftragPosition).HasColumnName("kAuftragPosition");
            entity.Property(e => e.KAuftragStueckliste).HasColumnName("kAuftragStueckliste");
            entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");
            entity.Property(e => e.KVaterArtikel).HasColumnName("kVaterArtikel");
            entity.Property(e => e.NType).HasColumnName("nType");
        });

        modelBuilder.Entity<LvRetourePosition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvRetourePosition", "RM");

            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CGrundKommentar).HasColumnName("cGrundKommentar");
            entity.Property(e => e.CLagerAktiv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLagerAktiv");
            entity.Property(e => e.CLieferscheinNr)
                .HasMaxLength(50)
                .HasColumnName("cLieferscheinNr");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CReturnItemId)
                .HasMaxLength(255)
                .HasColumnName("cReturnItemId");
            entity.Property(e => e.CString)
                .HasMaxLength(255)
                .HasColumnName("cString");
            entity.Property(e => e.CTeilbar)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cTeilbar");
            entity.Property(e => e.CZustandKommentar).HasColumnName("cZustandKommentar");
            entity.Property(e => e.DVersendet)
                .HasColumnType("datetime")
                .HasColumnName("dVersendet");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.FAnzahlLieferschein)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahlLieferschein");
            entity.Property(e => e.FMwSt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwSt");
            entity.Property(e => e.FRabatt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabatt");
            entity.Property(e => e.FVknetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVKNetto");
            entity.Property(e => e.FVkpreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVKPreis");
            entity.Property(e => e.Grund).HasMaxLength(50);
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");
            entity.Property(e => e.KRmgrund).HasColumnName("kRMGrund");
            entity.Property(e => e.KRmretoure).HasColumnName("kRMRetoure");
            entity.Property(e => e.KRmretourePos).HasColumnName("kRMRetourePos");
            entity.Property(e => e.KRmstatus).HasColumnName("kRMStatus");
            entity.Property(e => e.KVaterArtikel).HasColumnName("kVaterArtikel");
            entity.Property(e => e.KZustand).HasColumnName("kZustand");
            entity.Property(e => e.NGutschreiben).HasColumnName("nGutschreiben");
            entity.Property(e => e.Status).HasMaxLength(255);
            entity.Property(e => e.Ungebucht).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.Zustand).HasMaxLength(50);
        });

        modelBuilder.Entity<LvRetouren>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvRetouren", "Kunde");

            entity.Property(e => e.BestellNr).HasMaxLength(50);
            entity.Property(e => e.CRetoureNr)
                .HasMaxLength(255)
                .HasColumnName("cRetoureNr");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.Firma).HasMaxLength(255);
            entity.Property(e => e.KBestellungUmtausch).HasColumnName("kBestellungUmtausch");
            entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KRmretoure).HasColumnName("kRMRetoure");
            entity.Property(e => e.NStatusTyp).HasColumnName("nStatusTyp");
            entity.Property(e => e.Status).HasMaxLength(255);
            entity.Property(e => e.Warenlagername).HasMaxLength(255);
        });

        modelBuilder.Entity<LvRueckstandserinnerung>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvRueckstandserinnerung", "Beschaffung");

            entity.Property(e => e.CBestellungInternerKommentar).HasColumnName("cBestellungInternerKommentar");
            entity.Property(e => e.CBestellungLieferant)
                .HasMaxLength(255)
                .HasColumnName("cBestellungLieferant");
            entity.Property(e => e.CEigeneBestellnummer)
                .HasMaxLength(255)
                .HasColumnName("cEigeneBestellnummer");
            entity.Property(e => e.DBestellungErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dBestellungErstellt");
            entity.Property(e => e.DBestellungExportiert)
                .HasColumnType("datetime")
                .HasColumnName("dBestellungExportiert");
            entity.Property(e => e.DBestellungGedruckt)
                .HasColumnType("datetime")
                .HasColumnName("dBestellungGedruckt");
            entity.Property(e => e.DBestellungGefaxt)
                .HasColumnType("datetime")
                .HasColumnName("dBestellungGefaxt");
            entity.Property(e => e.DBestellungGemailt)
                .HasColumnType("datetime")
                .HasColumnName("dBestellungGemailt");
            entity.Property(e => e.DBestellungLieferdatum)
                .HasColumnType("datetime")
                .HasColumnName("dBestellungLieferdatum");
            entity.Property(e => e.DErinnerungDatum)
                .HasColumnType("datetime")
                .HasColumnName("dErinnerungDatum");
            entity.Property(e => e.FBetragNetto)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fBetragNetto");
            entity.Property(e => e.KBestellungLieferant).HasColumnName("kBestellungLieferant");
            entity.Property(e => e.KLieferantenBestellungErinnerung).HasColumnName("kLieferantenBestellungErinnerung");
            entity.Property(e => e.NBestellungStatus).HasColumnName("nBestellungStatus");
        });

        modelBuilder.Entity<LvRueckstandserinnerungLieferanten>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvRueckstandserinnerungLieferanten", "Beschaffung");

            entity.Property(e => e.CBestellungLieferant)
                .HasMaxLength(255)
                .HasColumnName("cBestellungLieferant");
            entity.Property(e => e.KBestellungLieferant).HasColumnName("kBestellungLieferant");
        });

        modelBuilder.Entity<LvRueckstandserinnerungsposition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvRueckstandserinnerungsposition", "Beschaffung");

            entity.Property(e => e.CArtNr)
                .HasMaxLength(255)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CHinweis)
                .HasMaxLength(2000)
                .HasColumnName("cHinweis");
            entity.Property(e => e.CLieferantenArtNr)
                .HasMaxLength(255)
                .HasColumnName("cLieferantenArtNr");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.FEknetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEKNetto");
            entity.Property(e => e.FEknettoGesamt)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fEKNettoGesamt");
            entity.Property(e => e.FUst)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fUST");
            entity.Property(e => e.KLieferantenBestellungErinnerung).HasColumnName("kLieferantenBestellungErinnerung");
        });

        modelBuilder.Entity<LvScxLogeintrag>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvScxLogeintrag", "Sync");

            entity.Property(e => e.CErweiterteMeldung).HasColumnName("cErweiterteMeldung");
            entity.Property(e => e.CMeldung)
                .HasMaxLength(2048)
                .HasColumnName("cMeldung");
            entity.Property(e => e.DZeitpunkt)
                .HasColumnType("datetime")
                .HasColumnName("dZeitpunkt");
            entity.Property(e => e.KScxLogeintrag)
                .ValueGeneratedOnAdd()
                .HasColumnName("kScxLogeintrag");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KSyncLogsitzung).HasColumnName("kSyncLogsitzung");
            entity.Property(e => e.NCallType).HasColumnName("nCallType");
            entity.Property(e => e.NErweiterterInhalt).HasColumnName("nErweiterterInhalt");
            entity.Property(e => e.NSchweregrad).HasColumnName("nSchweregrad");
        });

        modelBuilder.Entity<LvStockAccount>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvStockAccount", "pps");

            entity.Property(e => e.CBatchNumber)
                .HasMaxLength(255)
                .HasColumnName("cBatchNumber");
            entity.Property(e => e.CBinName)
                .HasMaxLength(50)
                .HasColumnName("cBinName");
            entity.Property(e => e.DShelfLifeEndDate)
                .HasColumnType("datetime")
                .HasColumnName("dShelfLifeEndDate");
            entity.Property(e => e.FBreite)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBreite");
            entity.Property(e => e.FHoehe)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fHoehe");
            entity.Property(e => e.FLaenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLaenge");
            entity.Property(e => e.FMaxVolume)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("fMaxVolume");
            entity.Property(e => e.FMaxWeight)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMaxWeight");
            entity.Property(e => e.FReservedQuantity)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fReservedQuantity");
            entity.Property(e => e.FStockQuantity)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fStockQuantity");
            entity.Property(e => e.FSumVolume)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("fSumVolume");
            entity.Property(e => e.FSumWeight)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fSumWeight");
            entity.Property(e => e.FUsedCapacityVolume)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("fUsedCapacityVolume");
            entity.Property(e => e.FUsedCapacityWeight)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("fUsedCapacityWeight");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBinType).HasColumnName("kBinType");
            entity.Property(e => e.KId).HasColumnName("kId");
            entity.Property(e => e.KReference).HasColumnName("kReference");
            entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");
            entity.Property(e => e.NCapacityVolumeValid).HasColumnName("nCapacityVolumeValid");
            entity.Property(e => e.NCapacityWeightValid).HasColumnName("nCapacityWeightValid");
            entity.Property(e => e.NGesperrt).HasColumnName("nGesperrt");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<LvStornobelegposition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvStornobelegposition", "Verkauf");

            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CExterneAuftragsnummer)
                .HasMaxLength(50)
                .HasColumnName("cExterneAuftragsnummer");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CShopname)
                .HasMaxLength(255)
                .HasColumnName("cShopname");
            entity.Property(e => e.CeBayBenutzername)
                .HasMaxLength(255)
                .HasColumnName("ceBayBenutzername");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 4)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.FMwSt)
                .HasColumnType("decimal(25, 4)")
                .HasColumnName("fMwSt");
            entity.Property(e => e.FVkbrutto)
                .HasColumnType("decimal(25, 4)")
                .HasColumnName("fVKBrutto");
            entity.Property(e => e.FVknetto)
                .HasColumnType("decimal(25, 4)")
                .HasColumnName("fVKNetto");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KAuftragPosition).HasColumnName("kAuftragPosition");
            entity.Property(e => e.KKonfigurationsVater).HasColumnName("kKonfigurationsVater");
            entity.Property(e => e.KRechnungPosition).HasColumnName("kRechnungPosition");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KStornobeleg).HasColumnName("kStornobeleg");
            entity.Property(e => e.KStornobelegPos).HasColumnName("kStornobelegPos");
            entity.Property(e => e.KStuecklistenVater).HasColumnName("kStuecklistenVater");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<LvStornobelegverwaltung>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvStornobelegverwaltung", "Verkauf");

            entity.Property(e => e.CAnmerkung).HasColumnName("cAnmerkung");
            entity.Property(e => e.CBenutzername)
                .HasMaxLength(255)
                .HasColumnName("cBenutzername");
            entity.Property(e => e.CErloeskonto)
                .HasMaxLength(64)
                .HasColumnName("cErloeskonto");
            entity.Property(e => e.CFirmenname)
                .HasMaxLength(255)
                .HasColumnName("cFirmenname");
            entity.Property(e => e.CKundeNr)
                .HasMaxLength(30)
                .HasColumnName("cKundeNr");
            entity.Property(e => e.CKundengruppe)
                .HasMaxLength(255)
                .HasColumnName("cKundengruppe");
            entity.Property(e => e.CKurztext)
                .HasMaxLength(255)
                .HasColumnName("cKurztext");
            entity.Property(e => e.CLieferadresseAdresszusatz)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseAdresszusatz");
            entity.Property(e => e.CLieferadresseAnrede)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseAnrede");
            entity.Property(e => e.CLieferadresseBundesland)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseBundesland");
            entity.Property(e => e.CLieferadresseFax)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseFax");
            entity.Property(e => e.CLieferadresseFirma)
                .HasMaxLength(128)
                .HasColumnName("cLieferadresseFirma");
            entity.Property(e => e.CLieferadresseLand)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseLand");
            entity.Property(e => e.CLieferadresseLandIso)
                .HasMaxLength(5)
                .HasColumnName("cLieferadresseLandIso");
            entity.Property(e => e.CLieferadresseMail)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseMail");
            entity.Property(e => e.CLieferadresseMobilTelefon)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseMobilTelefon");
            entity.Property(e => e.CLieferadresseNachname)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseNachname");
            entity.Property(e => e.CLieferadresseOrt)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseOrt");
            entity.Property(e => e.CLieferadressePlz)
                .HasMaxLength(24)
                .HasColumnName("cLieferadressePlz");
            entity.Property(e => e.CLieferadressePostId)
                .HasMaxLength(255)
                .HasColumnName("cLieferadressePostId");
            entity.Property(e => e.CLieferadresseStrasse)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseStrasse");
            entity.Property(e => e.CLieferadresseTelefon)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseTelefon");
            entity.Property(e => e.CLieferadresseTitel)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseTitel");
            entity.Property(e => e.CLieferadresseVorname)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseVorname");
            entity.Property(e => e.CLieferadresseZusatz)
                .HasMaxLength(60)
                .HasColumnName("cLieferadresseZusatz");
            entity.Property(e => e.CRechnungsadresseAdresszusatz)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseAdresszusatz");
            entity.Property(e => e.CRechnungsadresseAnrede)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseAnrede");
            entity.Property(e => e.CRechnungsadresseBundesland)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseBundesland");
            entity.Property(e => e.CRechnungsadresseFax)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseFax");
            entity.Property(e => e.CRechnungsadresseFirma)
                .HasMaxLength(128)
                .HasColumnName("cRechnungsadresseFirma");
            entity.Property(e => e.CRechnungsadresseLand)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseLand");
            entity.Property(e => e.CRechnungsadresseLandIso)
                .HasMaxLength(5)
                .HasColumnName("cRechnungsadresseLandIso");
            entity.Property(e => e.CRechnungsadresseMail)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseMail");
            entity.Property(e => e.CRechnungsadresseMobilTelefon)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseMobilTelefon");
            entity.Property(e => e.CRechnungsadresseNachname)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseNachname");
            entity.Property(e => e.CRechnungsadresseOrt)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseOrt");
            entity.Property(e => e.CRechnungsadressePlz)
                .HasMaxLength(24)
                .HasColumnName("cRechnungsadressePlz");
            entity.Property(e => e.CRechnungsadressePostId)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadressePostId");
            entity.Property(e => e.CRechnungsadresseStrasse)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseStrasse");
            entity.Property(e => e.CRechnungsadresseTelefon)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseTelefon");
            entity.Property(e => e.CRechnungsadresseTitel)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseTitel");
            entity.Property(e => e.CRechnungsadresseVorname)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseVorname");
            entity.Property(e => e.CRechnungsadresseZusatz)
                .HasMaxLength(60)
                .HasColumnName("cRechnungsadresseZusatz");
            entity.Property(e => e.CRechnungsnummer)
                .HasMaxLength(50)
                .HasColumnName("cRechnungsnummer");
            entity.Property(e => e.CShopname)
                .HasMaxLength(255)
                .HasColumnName("cShopname");
            entity.Property(e => e.CSonstiges).HasColumnName("cSonstiges");
            entity.Property(e => e.CStatustext)
                .HasMaxLength(255)
                .HasColumnName("cStatustext");
            entity.Property(e => e.CStornobelegnummer)
                .HasMaxLength(50)
                .HasColumnName("cStornobelegnummer");
            entity.Property(e => e.CText)
                .HasMaxLength(4000)
                .HasColumnName("cText");
            entity.Property(e => e.CWaehrung)
                .HasMaxLength(20)
                .HasColumnName("cWaehrung");
            entity.Property(e => e.CeBayBenutzername)
                .HasMaxLength(255)
                .HasColumnName("ceBayBenutzername");
            entity.Property(e => e.DDruckdatum)
                .HasColumnType("datetime")
                .HasColumnName("dDruckdatum");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DMaildatum)
                .HasColumnType("datetime")
                .HasColumnName("dMaildatum");
            entity.Property(e => e.FFaktor)
                .HasColumnType("numeric(25, 13)")
                .HasColumnName("fFaktor");
            entity.Property(e => e.FMwst)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwst");
            entity.Property(e => e.FPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPreis");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.KRechnungsadresse).HasColumnName("kRechnungsadresse");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.KStornobeleg).HasColumnName("kStornobeleg");
            entity.Property(e => e.NStorno).HasColumnName("nStorno");
            entity.Property(e => e.NStornoTyp).HasColumnName("nStornoTyp");
        });

        modelBuilder.Entity<LvTicket>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvTickets", "Kunde");

            entity.Property(e => e.CEindeutigeId)
                .HasMaxLength(255)
                .HasColumnName("cEindeutigeId");
            entity.Property(e => e.CStatusName)
                .HasMaxLength(255)
                .HasColumnName("cStatusName");
            entity.Property(e => e.CTitel)
                .HasMaxLength(998)
                .HasColumnName("cTitel");
            entity.Property(e => e.DErstellung)
                .HasColumnType("datetime")
                .HasColumnName("dErstellung");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KTicket).HasColumnName("kTicket");
            entity.Property(e => e.NIstInPapierkorb).HasColumnName("nIstInPapierkorb");
            entity.Property(e => e.NPrioritaet).HasColumnName("nPrioritaet");
            entity.Property(e => e.NVollstaendigAngelegt).HasColumnName("nVollstaendigAngelegt");
        });

        modelBuilder.Entity<LvUmsatzuebersicht>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvUmsatzuebersicht", "Zahlungsabgleich");

            entity.Property(e => e.CAbgleichsbenutzername)
                .HasMaxLength(255)
                .HasColumnName("cAbgleichsbenutzername");
            entity.Property(e => e.CInternerKommentar)
                .HasMaxLength(1000)
                .HasColumnName("cInternerKommentar");
            entity.Property(e => e.CKonto)
                .HasMaxLength(500)
                .HasColumnName("cKonto");
            entity.Property(e => e.CKontoIdentifikation)
                .HasMaxLength(50)
                .HasColumnName("cKontoIdentifikation");
            entity.Property(e => e.CKontozusatz)
                .HasMaxLength(500)
                .HasColumnName("cKontozusatz");
            entity.Property(e => e.CName)
                .HasMaxLength(500)
                .HasColumnName("cName");
            entity.Property(e => e.CTransaktionId)
                .HasMaxLength(100)
                .HasColumnName("cTransaktionID");
            entity.Property(e => e.CVerwendungszweck)
                .HasMaxLength(1000)
                .HasColumnName("cVerwendungszweck");
            entity.Property(e => e.CWaehrungIso)
                .HasMaxLength(3)
                .HasColumnName("cWaehrungISO");
            entity.Property(e => e.DAbgleichszeitpunkt)
                .HasColumnType("datetime")
                .HasColumnName("dAbgleichszeitpunkt");
            entity.Property(e => e.DBuchungsdatum)
                .HasColumnType("datetime")
                .HasColumnName("dBuchungsdatum");
            entity.Property(e => e.FBetrag)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBetrag");
            entity.Property(e => e.FSummeZahlungszuweisungen)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fSummeZahlungszuweisungen");
            entity.Property(e => e.KAbgleichsbenutzer).HasColumnName("kAbgleichsbenutzer");
            entity.Property(e => e.KZahlungsabgleichModul).HasColumnName("kZahlungsabgleichModul");
            entity.Property(e => e.KZahlungsabgleichUmsatz).HasColumnName("kZahlungsabgleichUmsatz");
            entity.Property(e => e.NAnzahlZahlungszuweisungen).HasColumnName("nAnzahlZahlungszuweisungen");
            entity.Property(e => e.NBuchungstyp).HasColumnName("nBuchungstyp");
            entity.Property(e => e.NSichtbar).HasColumnName("nSichtbar");
        });

        modelBuilder.Entity<LvUserResource>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvUserResources", "ResPl");

            entity.Property(e => e.BenutzerName).HasMaxLength(255);
            entity.Property(e => e.CAbteilung)
                .HasMaxLength(255)
                .HasColumnName("cAbteilung");
            entity.Property(e => e.CEmail)
                .HasMaxLength(255)
                .HasColumnName("cEMail");
            entity.Property(e => e.CLogin)
                .HasMaxLength(15)
                .HasColumnName("cLogin");
            entity.Property(e => e.CMobil)
                .HasMaxLength(255)
                .HasColumnName("cMobil");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CNumber)
                .HasMaxLength(100)
                .HasColumnName("cNumber");
            entity.Property(e => e.DCreated).HasColumnName("dCreated");
            entity.Property(e => e.DLastModified).HasColumnName("dLastModified");
            entity.Property(e => e.FCost)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fCost");
            entity.Property(e => e.KResource).HasColumnName("kResource");
            entity.Property(e => e.NAppoitmentRequestAutomatic).HasColumnName("nAppoitmentRequestAutomatic");
            entity.Property(e => e.NDivisible).HasColumnName("nDivisible");
            entity.Property(e => e.NInactive).HasColumnName("nInactive");
            entity.Property(e => e.ResourceTypeName).HasMaxLength(255);
            entity.Property(e => e.USpecialType).HasColumnName("uSpecialType");
        });

        modelBuilder.Entity<LvVcsBuchungsPositionen>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvVcsBuchungsPositionen", "Amazon");

            entity.Property(e => e.Asin)
                .HasMaxLength(30)
                .HasColumnName("ASIN");
            entity.Property(e => e.BuyerEinvoiceAccountId)
                .HasMaxLength(30)
                .HasColumnName("BuyerEInvoiceAccountId");
            entity.Property(e => e.BuyerTaxRegistration).HasMaxLength(30);
            entity.Property(e => e.BuyerTaxRegistrationJurisdiction).HasMaxLength(20);
            entity.Property(e => e.BuyerTaxRegistrationType).HasMaxLength(30);
            entity.Property(e => e.CDocumentType)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasColumnName("cDocumentType");
            entity.Property(e => e.CIdentifier)
                .HasMaxLength(100)
                .HasColumnName("cIdentifier");
            entity.Property(e => e.ConvertedTaxAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Currency).HasMaxLength(10);
            entity.Property(e => e.DAktualisiertUtc).HasColumnName("dAktualisiertUtc");
            entity.Property(e => e.DErstelltUtc).HasColumnName("dErstelltUtc");
            entity.Property(e => e.DStatusAktualisiertUtc).HasColumnName("dStatusAktualisiertUtc");
            entity.Property(e => e.DVerarbeitetUtc).HasColumnName("dVerarbeitetUtc");
            entity.Property(e => e.EinvoiceUrl)
                .HasMaxLength(500)
                .HasColumnName("EInvoiceUrl");
            entity.Property(e => e.ExportOutsideEu)
                .HasMaxLength(20)
                .HasColumnName("ExportOutsideEU");
            entity.Property(e => e.FGiftwrapTaxExclusivePrice)
                .HasColumnType("decimal(26, 13)")
                .HasColumnName("fGiftwrapTaxExclusivePrice");
            entity.Property(e => e.FGiftwrapTaxInclusivePrice)
                .HasColumnType("decimal(26, 13)")
                .HasColumnName("fGiftwrapTaxInclusivePrice");
            entity.Property(e => e.FShippingTaxExclusivePrice)
                .HasColumnType("decimal(26, 13)")
                .HasColumnName("fShippingTaxExclusivePrice");
            entity.Property(e => e.FShippingTaxInclusivePrice)
                .HasColumnType("decimal(26, 13)")
                .HasColumnName("fShippingTaxInclusivePrice");
            entity.Property(e => e.FTaxExclusivePrice)
                .HasColumnType("decimal(26, 13)")
                .HasColumnName("fTaxExclusivePrice");
            entity.Property(e => e.FTaxInclusivePrice)
                .HasColumnType("decimal(26, 13)")
                .HasColumnName("fTaxInclusivePrice");
            entity.Property(e => e.GiftwraptaxAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("GIFTWRAPTaxAmount");
            entity.Property(e => e.GiftwraptaxAmountPromo)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("GIFTWRAPTaxAmountPromo");
            entity.Property(e => e.GiftwraptaxExclusivePromoAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("GIFTWRAPTaxExclusivePromoAmount");
            entity.Property(e => e.GiftwraptaxExclusiveSellingPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("GIFTWRAPTaxExclusiveSellingPrice");
            entity.Property(e => e.GiftwraptaxInclusivePromoAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("GIFTWRAPTaxInclusivePromoAmount");
            entity.Property(e => e.GiftwraptaxInclusiveSellingPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("GIFTWRAPTaxInclusiveSellingPrice");
            entity.Property(e => e.InvoiceLevelCurrencyCode).HasMaxLength(20);
            entity.Property(e => e.InvoiceLevelExchangeRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.InvoiceLevelExchangeRateDate).HasColumnType("date");
            entity.Property(e => e.InvoiceUrl).HasMaxLength(500);
            entity.Property(e => e.JurisdictionLevel).HasMaxLength(30);
            entity.Property(e => e.JurisdictionName).HasMaxLength(80);
            entity.Property(e => e.KMessageId).HasColumnName("kMessageId");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.MarketplaceId)
                .HasMaxLength(20)
                .HasColumnName("MarketplaceID");
            entity.Property(e => e.MerchantId)
                .HasMaxLength(50)
                .HasColumnName("MerchantID");
            entity.Property(e => e.OrderDate).HasColumnType("date");
            entity.Property(e => e.OrderId)
                .HasMaxLength(30)
                .HasColumnName("OrderID");
            entity.Property(e => e.OriginalVatinvoiceNumber)
                .HasMaxLength(100)
                .HasColumnName("OriginalVATInvoiceNumber");
            entity.Property(e => e.OurpricetaxAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("OURPRICETaxAmount");
            entity.Property(e => e.OurpricetaxAmountPromo)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("OURPRICETaxAmountPromo");
            entity.Property(e => e.OurpricetaxExclusivePromoAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("OURPRICETaxExclusivePromoAmount");
            entity.Property(e => e.OurpricetaxExclusiveSellingPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("OURPRICETaxExclusiveSellingPrice");
            entity.Property(e => e.OurpricetaxInclusivePromoAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("OURPRICETaxInclusivePromoAmount");
            entity.Property(e => e.OurpricetaxInclusiveSellingPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("OURPRICETaxInclusiveSellingPrice");
            entity.Property(e => e.ProductTaxCode).HasMaxLength(30);
            entity.Property(e => e.ReturnFcCountry).HasMaxLength(10);
            entity.Property(e => e.SdiinvoiceDeliveryStatus)
                .HasMaxLength(100)
                .HasColumnName("SDIInvoiceDeliveryStatus");
            entity.Property(e => e.SdiinvoiceErrorCode)
                .HasMaxLength(30)
                .HasColumnName("SDIInvoiceErrorCode");
            entity.Property(e => e.SdiinvoiceErrorDescription).HasColumnName("SDIInvoiceErrorDescription");
            entity.Property(e => e.SdiinvoiceStatusLastUpdatedDate)
                .HasColumnType("date")
                .HasColumnName("SDIInvoiceStatusLastUpdatedDate");
            entity.Property(e => e.SellerTaxRegistration).HasMaxLength(30);
            entity.Property(e => e.SellerTaxRegistrationJurisdiction).HasMaxLength(20);
            entity.Property(e => e.ShipFromCity).HasMaxLength(300);
            entity.Property(e => e.ShipFromCountry).HasMaxLength(10);
            entity.Property(e => e.ShipFromPostalCode).HasMaxLength(30);
            entity.Property(e => e.ShipFromState).HasMaxLength(100);
            entity.Property(e => e.ShipFromTaxLocationCode).HasMaxLength(30);
            entity.Property(e => e.ShipToCity).HasMaxLength(300);
            entity.Property(e => e.ShipToCountry).HasMaxLength(10);
            entity.Property(e => e.ShipToLocationCode).HasMaxLength(30);
            entity.Property(e => e.ShipToPostalCode).HasMaxLength(30);
            entity.Property(e => e.ShipToState).HasMaxLength(100);
            entity.Property(e => e.ShipmentDate).HasColumnType("date");
            entity.Property(e => e.ShipmentId)
                .HasMaxLength(30)
                .HasColumnName("ShipmentID");
            entity.Property(e => e.ShippingtaxAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SHIPPINGTaxAmount");
            entity.Property(e => e.ShippingtaxAmountPromo)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SHIPPINGTaxAmountPromo");
            entity.Property(e => e.ShippingtaxExclusivePromoAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SHIPPINGTaxExclusivePromoAmount");
            entity.Property(e => e.ShippingtaxExclusiveSellingPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SHIPPINGTaxExclusiveSellingPrice");
            entity.Property(e => e.ShippingtaxInclusivePromoAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SHIPPINGTaxInclusivePromoAmount");
            entity.Property(e => e.ShippingtaxInclusiveSellingPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SHIPPINGTaxInclusiveSellingPrice");
            entity.Property(e => e.Sku)
                .HasMaxLength(100)
                .HasColumnName("SKU");
            entity.Property(e => e.TaxAddressRole).HasMaxLength(30);
            entity.Property(e => e.TaxCalculationDate).HasColumnType("date");
            entity.Property(e => e.TaxCalculationReasonCode).HasMaxLength(30);
            entity.Property(e => e.TaxCollectionResponsibility).HasMaxLength(30);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.TaxReportingScheme).HasMaxLength(30);
            entity.Property(e => e.TaxType).HasMaxLength(30);
            entity.Property(e => e.TransactionId)
                .HasMaxLength(50)
                .HasColumnName("TransactionID");
            entity.Property(e => e.TransactionType).HasMaxLength(50);
            entity.Property(e => e.VatinvoiceNumber)
                .HasMaxLength(100)
                .HasColumnName("VATInvoiceNumber");
        });

        modelBuilder.Entity<LvVcsBuchungsPositionenHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvVcsBuchungsPositionenHistory", "Amazon");

            entity.Property(e => e.Asin)
                .HasMaxLength(30)
                .HasColumnName("ASIN");
            entity.Property(e => e.BuyerEinvoiceAccountId)
                .HasMaxLength(30)
                .HasColumnName("BuyerEInvoiceAccountId");
            entity.Property(e => e.BuyerTaxRegistration).HasMaxLength(30);
            entity.Property(e => e.BuyerTaxRegistrationJurisdiction).HasMaxLength(20);
            entity.Property(e => e.BuyerTaxRegistrationType).HasMaxLength(30);
            entity.Property(e => e.CDocumentType)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasColumnName("cDocumentType");
            entity.Property(e => e.CIdentifier)
                .HasMaxLength(100)
                .HasColumnName("cIdentifier");
            entity.Property(e => e.ConvertedTaxAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Currency).HasMaxLength(10);
            entity.Property(e => e.DAktualisiertUtc).HasColumnName("dAktualisiertUtc");
            entity.Property(e => e.DErstelltUtc).HasColumnName("dErstelltUtc");
            entity.Property(e => e.DStatusAktualisiertUtc).HasColumnName("dStatusAktualisiertUtc");
            entity.Property(e => e.DVerarbeitetUtc).HasColumnName("dVerarbeitetUtc");
            entity.Property(e => e.EinvoiceUrl)
                .HasMaxLength(500)
                .HasColumnName("EInvoiceUrl");
            entity.Property(e => e.ExportOutsideEu)
                .HasMaxLength(20)
                .HasColumnName("ExportOutsideEU");
            entity.Property(e => e.FGiftwrapTaxExclusivePrice)
                .HasColumnType("decimal(26, 13)")
                .HasColumnName("fGiftwrapTaxExclusivePrice");
            entity.Property(e => e.FGiftwrapTaxInclusivePrice)
                .HasColumnType("decimal(26, 13)")
                .HasColumnName("fGiftwrapTaxInclusivePrice");
            entity.Property(e => e.FShippingTaxExclusivePrice)
                .HasColumnType("decimal(26, 13)")
                .HasColumnName("fShippingTaxExclusivePrice");
            entity.Property(e => e.FShippingTaxInclusivePrice)
                .HasColumnType("decimal(26, 13)")
                .HasColumnName("fShippingTaxInclusivePrice");
            entity.Property(e => e.FTaxExclusivePrice)
                .HasColumnType("decimal(26, 13)")
                .HasColumnName("fTaxExclusivePrice");
            entity.Property(e => e.FTaxInclusivePrice)
                .HasColumnType("decimal(26, 13)")
                .HasColumnName("fTaxInclusivePrice");
            entity.Property(e => e.GiftwraptaxAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("GIFTWRAPTaxAmount");
            entity.Property(e => e.GiftwraptaxAmountPromo)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("GIFTWRAPTaxAmountPromo");
            entity.Property(e => e.GiftwraptaxExclusivePromoAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("GIFTWRAPTaxExclusivePromoAmount");
            entity.Property(e => e.GiftwraptaxExclusiveSellingPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("GIFTWRAPTaxExclusiveSellingPrice");
            entity.Property(e => e.GiftwraptaxInclusivePromoAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("GIFTWRAPTaxInclusivePromoAmount");
            entity.Property(e => e.GiftwraptaxInclusiveSellingPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("GIFTWRAPTaxInclusiveSellingPrice");
            entity.Property(e => e.InvoiceLevelCurrencyCode).HasMaxLength(20);
            entity.Property(e => e.InvoiceLevelExchangeRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.InvoiceLevelExchangeRateDate).HasColumnType("date");
            entity.Property(e => e.InvoiceUrl).HasMaxLength(500);
            entity.Property(e => e.JurisdictionLevel).HasMaxLength(30);
            entity.Property(e => e.JurisdictionName).HasMaxLength(80);
            entity.Property(e => e.KMessageId).HasColumnName("kMessageId");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.MarketplaceId)
                .HasMaxLength(20)
                .HasColumnName("MarketplaceID");
            entity.Property(e => e.MerchantId)
                .HasMaxLength(50)
                .HasColumnName("MerchantID");
            entity.Property(e => e.OrderDate).HasColumnType("date");
            entity.Property(e => e.OrderId)
                .HasMaxLength(30)
                .HasColumnName("OrderID");
            entity.Property(e => e.OriginalVatinvoiceNumber)
                .HasMaxLength(100)
                .HasColumnName("OriginalVATInvoiceNumber");
            entity.Property(e => e.OurpricetaxAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("OURPRICETaxAmount");
            entity.Property(e => e.OurpricetaxAmountPromo)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("OURPRICETaxAmountPromo");
            entity.Property(e => e.OurpricetaxExclusivePromoAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("OURPRICETaxExclusivePromoAmount");
            entity.Property(e => e.OurpricetaxExclusiveSellingPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("OURPRICETaxExclusiveSellingPrice");
            entity.Property(e => e.OurpricetaxInclusivePromoAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("OURPRICETaxInclusivePromoAmount");
            entity.Property(e => e.OurpricetaxInclusiveSellingPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("OURPRICETaxInclusiveSellingPrice");
            entity.Property(e => e.ProductTaxCode).HasMaxLength(30);
            entity.Property(e => e.ReturnFcCountry).HasMaxLength(10);
            entity.Property(e => e.SdiinvoiceDeliveryStatus)
                .HasMaxLength(100)
                .HasColumnName("SDIInvoiceDeliveryStatus");
            entity.Property(e => e.SdiinvoiceErrorCode)
                .HasMaxLength(30)
                .HasColumnName("SDIInvoiceErrorCode");
            entity.Property(e => e.SdiinvoiceErrorDescription).HasColumnName("SDIInvoiceErrorDescription");
            entity.Property(e => e.SdiinvoiceStatusLastUpdatedDate)
                .HasColumnType("date")
                .HasColumnName("SDIInvoiceStatusLastUpdatedDate");
            entity.Property(e => e.SellerTaxRegistration).HasMaxLength(30);
            entity.Property(e => e.SellerTaxRegistrationJurisdiction).HasMaxLength(20);
            entity.Property(e => e.ShipFromCity).HasMaxLength(300);
            entity.Property(e => e.ShipFromCountry).HasMaxLength(10);
            entity.Property(e => e.ShipFromPostalCode).HasMaxLength(30);
            entity.Property(e => e.ShipFromState).HasMaxLength(100);
            entity.Property(e => e.ShipFromTaxLocationCode).HasMaxLength(30);
            entity.Property(e => e.ShipToCity).HasMaxLength(300);
            entity.Property(e => e.ShipToCountry).HasMaxLength(10);
            entity.Property(e => e.ShipToLocationCode).HasMaxLength(30);
            entity.Property(e => e.ShipToPostalCode).HasMaxLength(30);
            entity.Property(e => e.ShipToState).HasMaxLength(100);
            entity.Property(e => e.ShipmentDate).HasColumnType("date");
            entity.Property(e => e.ShipmentId)
                .HasMaxLength(30)
                .HasColumnName("ShipmentID");
            entity.Property(e => e.ShippingtaxAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SHIPPINGTaxAmount");
            entity.Property(e => e.ShippingtaxAmountPromo)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SHIPPINGTaxAmountPromo");
            entity.Property(e => e.ShippingtaxExclusivePromoAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SHIPPINGTaxExclusivePromoAmount");
            entity.Property(e => e.ShippingtaxExclusiveSellingPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SHIPPINGTaxExclusiveSellingPrice");
            entity.Property(e => e.ShippingtaxInclusivePromoAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SHIPPINGTaxInclusivePromoAmount");
            entity.Property(e => e.ShippingtaxInclusiveSellingPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SHIPPINGTaxInclusiveSellingPrice");
            entity.Property(e => e.Sku)
                .HasMaxLength(100)
                .HasColumnName("SKU");
            entity.Property(e => e.TaxAddressRole).HasMaxLength(30);
            entity.Property(e => e.TaxCalculationDate).HasColumnType("date");
            entity.Property(e => e.TaxCalculationReasonCode).HasMaxLength(30);
            entity.Property(e => e.TaxCollectionResponsibility).HasMaxLength(30);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.TaxReportingScheme).HasMaxLength(30);
            entity.Property(e => e.TaxType).HasMaxLength(30);
            entity.Property(e => e.TransactionId)
                .HasMaxLength(50)
                .HasColumnName("TransactionID");
            entity.Property(e => e.TransactionType).HasMaxLength(50);
            entity.Property(e => e.VatinvoiceNumber)
                .HasMaxLength(100)
                .HasColumnName("VATInvoiceNumber");
        });

        modelBuilder.Entity<LvVcsBuchungsdaten>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvVcsBuchungsdaten", "Amazon");

            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.OrderId)
                .HasMaxLength(30)
                .HasColumnName("OrderID");
            entity.Property(e => e.ShipmentDate).HasColumnType("date");
            entity.Property(e => e.VatinvoiceNumber)
                .HasMaxLength(100)
                .HasColumnName("VATInvoiceNumber");
        });

        modelBuilder.Entity<LvVcsInvoiceDuplicate>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvVcsInvoiceDuplicate", "Amazon");

            entity.Property(e => e.CAuftragsNr)
                .HasMaxLength(50)
                .HasColumnName("cAuftragsNr");
            entity.Property(e => e.CExterneAuftragsNr)
                .HasMaxLength(19)
                .HasColumnName("cExterneAuftragsNr");
            entity.Property(e => e.CExterneRechnungsNr)
                .HasMaxLength(100)
                .HasColumnName("cExterneRechnungsNr");
            entity.Property(e => e.CRechnungsNr)
                .HasMaxLength(50)
                .HasColumnName("cRechnungsNr");
            entity.Property(e => e.DAuftragsdatum)
                .HasColumnType("datetime")
                .HasColumnName("dAuftragsdatum");
            entity.Property(e => e.DExternErstelldatum)
                .HasColumnType("datetime")
                .HasColumnName("dExternErstelldatum");
            entity.Property(e => e.DRechnungsdatum)
                .HasColumnType("datetime")
                .HasColumnName("dRechnungsdatum");
            entity.Property(e => e.FAuftragsbetrag)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAuftragsbetrag");
            entity.Property(e => e.FExternerRechnungsbetrag)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fExternerRechnungsbetrag");
            entity.Property(e => e.FRechnungsbetrag)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRechnungsbetrag");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
        });

        modelBuilder.Entity<LvVcsLiteBuchungsPositionen>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvVcsLiteBuchungsPositionen", "Amazon");

            entity.Property(e => e.Asin)
                .HasMaxLength(10)
                .HasColumnName("ASIN");
            entity.Property(e => e.BillAddress1).HasMaxLength(255);
            entity.Property(e => e.BillAddress2).HasMaxLength(255);
            entity.Property(e => e.BillAddress3).HasMaxLength(255);
            entity.Property(e => e.BillCity).HasMaxLength(100);
            entity.Property(e => e.BillCountry).HasMaxLength(5);
            entity.Property(e => e.BillPostalCode).HasMaxLength(20);
            entity.Property(e => e.BillState).HasMaxLength(100);
            entity.Property(e => e.BillingName).HasMaxLength(255);
            entity.Property(e => e.BillingPhoneNumber).HasMaxLength(100);
            entity.Property(e => e.BuyerCompanyName).HasMaxLength(255);
            entity.Property(e => e.BuyerEinvoiceAccountId)
                .HasMaxLength(30)
                .HasColumnName("BuyerEInvoiceAccountId");
            entity.Property(e => e.BuyerName).HasMaxLength(255);
            entity.Property(e => e.BuyerTaxRegistrationType).HasMaxLength(30);
            entity.Property(e => e.BuyerVatNumber).HasMaxLength(30);
            entity.Property(e => e.Currency).HasMaxLength(10);
            entity.Property(e => e.DAktualisiertUtc).HasColumnName("dAktualisiertUtc");
            entity.Property(e => e.DErstelltUtc).HasColumnName("dErstelltUtc");
            entity.Property(e => e.DStatusAktualisiertUtc).HasColumnName("dStatusAktualisiertUtc");
            entity.Property(e => e.DVerarbeitetUtc).HasColumnName("dVerarbeitetUtc");
            entity.Property(e => e.FulfilledBy).HasMaxLength(30);
            entity.Property(e => e.GiftPromoVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftPromoVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftPromoVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftPromoVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftPromotionId)
                .HasMaxLength(50)
                .HasColumnName("GiftPromotionID");
            entity.Property(e => e.GiftWrapVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftWrapVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftWrapVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftWrapVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.InvoiceNumber).HasMaxLength(100);
            entity.Property(e => e.InvoiceStatus).HasMaxLength(100);
            entity.Property(e => e.InvoiceStatusDescription).HasMaxLength(255);
            entity.Property(e => e.IsBusinessOrder).HasMaxLength(5);
            entity.Property(e => e.ItemPromoVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemPromoVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemPromoVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemPromoVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemPromotionId)
                .HasMaxLength(50)
                .HasColumnName("ItemPromotionID");
            entity.Property(e => e.ItemVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.KVcsLite)
                .ValueGeneratedOnAdd()
                .HasColumnName("kVcsLite");
            entity.Property(e => e.LegacyCustomerOrderItemId).HasMaxLength(255);
            entity.Property(e => e.MarketplaceId)
                .HasMaxLength(20)
                .HasColumnName("MarketplaceID");
            entity.Property(e => e.OrderId)
                .HasMaxLength(50)
                .HasColumnName("OrderID");
            entity.Property(e => e.OrderItemId)
                .HasMaxLength(50)
                .HasColumnName("OrderItemID");
            entity.Property(e => e.OriginalVatInvoiceNumber).HasMaxLength(100);
            entity.Property(e => e.PriceDesignation).HasMaxLength(5);
            entity.Property(e => e.ProductName).HasMaxLength(255);
            entity.Property(e => e.PurchaseOrderNumber).HasMaxLength(255);
            entity.Property(e => e.QuantityPurchased).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.RecipientName).HasMaxLength(255);
            entity.Property(e => e.RecommendedInvoiceFormat).HasMaxLength(50);
            entity.Property(e => e.SellerVatNumber).HasMaxLength(30);
            entity.Property(e => e.ShipAddress1).HasMaxLength(255);
            entity.Property(e => e.ShipAddress2).HasMaxLength(255);
            entity.Property(e => e.ShipAddress3).HasMaxLength(255);
            entity.Property(e => e.ShipCity).HasMaxLength(100);
            entity.Property(e => e.ShipCountry).HasMaxLength(5);
            entity.Property(e => e.ShipFromCity).HasMaxLength(100);
            entity.Property(e => e.ShipFromCountry).HasMaxLength(5);
            entity.Property(e => e.ShipFromPostalCode).HasMaxLength(20);
            entity.Property(e => e.ShipFromState).HasMaxLength(100);
            entity.Property(e => e.ShipPhoneNumber).HasMaxLength(100);
            entity.Property(e => e.ShipPostalCode).HasMaxLength(20);
            entity.Property(e => e.ShipPromotionId)
                .HasMaxLength(50)
                .HasColumnName("ShipPromotionID");
            entity.Property(e => e.ShipServiceLevel).HasMaxLength(30);
            entity.Property(e => e.ShipState).HasMaxLength(100);
            entity.Property(e => e.ShippingId)
                .HasMaxLength(50)
                .HasColumnName("ShippingID");
            entity.Property(e => e.ShippingPromoVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingPromoVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingPromoVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingPromoVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Sku)
                .HasMaxLength(100)
                .HasColumnName("SKU");
            entity.Property(e => e.TransactionId)
                .HasMaxLength(50)
                .HasColumnName("TransactionID");
            entity.Property(e => e.TransactionType).HasMaxLength(50);
        });

        modelBuilder.Entity<LvVcsLiteBuchungsPositionenHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvVcsLiteBuchungsPositionenHistory", "Amazon");

            entity.Property(e => e.Asin)
                .HasMaxLength(10)
                .HasColumnName("ASIN");
            entity.Property(e => e.BillAddress1).HasMaxLength(255);
            entity.Property(e => e.BillAddress2).HasMaxLength(255);
            entity.Property(e => e.BillAddress3).HasMaxLength(255);
            entity.Property(e => e.BillCity).HasMaxLength(100);
            entity.Property(e => e.BillCountry).HasMaxLength(5);
            entity.Property(e => e.BillPostalCode).HasMaxLength(20);
            entity.Property(e => e.BillState).HasMaxLength(100);
            entity.Property(e => e.BillingName).HasMaxLength(255);
            entity.Property(e => e.BillingPhoneNumber).HasMaxLength(100);
            entity.Property(e => e.BuyerCompanyName).HasMaxLength(255);
            entity.Property(e => e.BuyerEinvoiceAccountId)
                .HasMaxLength(30)
                .HasColumnName("BuyerEInvoiceAccountId");
            entity.Property(e => e.BuyerName).HasMaxLength(255);
            entity.Property(e => e.BuyerTaxRegistrationType).HasMaxLength(30);
            entity.Property(e => e.BuyerVatNumber).HasMaxLength(30);
            entity.Property(e => e.Currency).HasMaxLength(10);
            entity.Property(e => e.DAktualisiertUtc).HasColumnName("dAktualisiertUtc");
            entity.Property(e => e.DErstelltUtc).HasColumnName("dErstelltUtc");
            entity.Property(e => e.DStatusAktualisiertUtc).HasColumnName("dStatusAktualisiertUtc");
            entity.Property(e => e.DVerarbeitetUtc).HasColumnName("dVerarbeitetUtc");
            entity.Property(e => e.FulfilledBy).HasMaxLength(30);
            entity.Property(e => e.GiftPromoVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftPromoVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftPromoVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftPromoVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftPromotionId)
                .HasMaxLength(50)
                .HasColumnName("GiftPromotionID");
            entity.Property(e => e.GiftWrapVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftWrapVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftWrapVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftWrapVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.InvoiceNumber).HasMaxLength(100);
            entity.Property(e => e.InvoiceStatus).HasMaxLength(100);
            entity.Property(e => e.InvoiceStatusDescription).HasMaxLength(255);
            entity.Property(e => e.IsBusinessOrder).HasMaxLength(5);
            entity.Property(e => e.ItemPromoVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemPromoVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemPromoVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemPromoVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemPromotionId)
                .HasMaxLength(50)
                .HasColumnName("ItemPromotionID");
            entity.Property(e => e.ItemVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.KVcsLite).HasColumnName("kVcsLite");
            entity.Property(e => e.LegacyCustomerOrderItemId).HasMaxLength(255);
            entity.Property(e => e.MarketplaceId)
                .HasMaxLength(20)
                .HasColumnName("MarketplaceID");
            entity.Property(e => e.OrderId)
                .HasMaxLength(50)
                .HasColumnName("OrderID");
            entity.Property(e => e.OrderItemId)
                .HasMaxLength(50)
                .HasColumnName("OrderItemID");
            entity.Property(e => e.OriginalVatInvoiceNumber).HasMaxLength(100);
            entity.Property(e => e.PriceDesignation).HasMaxLength(5);
            entity.Property(e => e.ProductName).HasMaxLength(255);
            entity.Property(e => e.PurchaseOrderNumber).HasMaxLength(255);
            entity.Property(e => e.QuantityPurchased).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.RecipientName).HasMaxLength(255);
            entity.Property(e => e.RecommendedInvoiceFormat).HasMaxLength(50);
            entity.Property(e => e.SellerVatNumber).HasMaxLength(30);
            entity.Property(e => e.ShipAddress1).HasMaxLength(255);
            entity.Property(e => e.ShipAddress2).HasMaxLength(255);
            entity.Property(e => e.ShipAddress3).HasMaxLength(255);
            entity.Property(e => e.ShipCity).HasMaxLength(100);
            entity.Property(e => e.ShipCountry).HasMaxLength(5);
            entity.Property(e => e.ShipFromCity).HasMaxLength(100);
            entity.Property(e => e.ShipFromCountry).HasMaxLength(5);
            entity.Property(e => e.ShipFromPostalCode).HasMaxLength(20);
            entity.Property(e => e.ShipFromState).HasMaxLength(100);
            entity.Property(e => e.ShipPhoneNumber).HasMaxLength(100);
            entity.Property(e => e.ShipPostalCode).HasMaxLength(20);
            entity.Property(e => e.ShipPromotionId)
                .HasMaxLength(50)
                .HasColumnName("ShipPromotionID");
            entity.Property(e => e.ShipServiceLevel).HasMaxLength(30);
            entity.Property(e => e.ShipState).HasMaxLength(100);
            entity.Property(e => e.ShippingId)
                .HasMaxLength(50)
                .HasColumnName("ShippingID");
            entity.Property(e => e.ShippingPromoVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingPromoVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingPromoVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingPromoVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Sku)
                .HasMaxLength(100)
                .HasColumnName("SKU");
            entity.Property(e => e.TransactionId)
                .HasMaxLength(50)
                .HasColumnName("TransactionID");
            entity.Property(e => e.TransactionType).HasMaxLength(10);
        });

        modelBuilder.Entity<LvVcsLiteBuchungsdaten>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvVcsLiteBuchungsdaten", "Amazon");

            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.OrderId)
                .HasMaxLength(50)
                .HasColumnName("OrderID");
            entity.Property(e => e.TransactionId)
                .HasMaxLength(50)
                .HasColumnName("TransactionID");
        });

        modelBuilder.Entity<LvVcsLiteUploadQueue>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvVcsLiteUploadQueue", "Amazon");

            entity.Property(e => e.CBelegnummer)
                .HasMaxLength(50)
                .HasColumnName("cBelegnummer");
            entity.Property(e => e.CMeldung)
                .HasMaxLength(4000)
                .HasColumnName("cMeldung");
            entity.Property(e => e.COrderId)
                .HasMaxLength(30)
                .HasColumnName("cOrderId");
            entity.Property(e => e.CShippingId)
                .HasMaxLength(50)
                .HasColumnName("cShippingID");
            entity.Property(e => e.CTransactionId)
                .HasMaxLength(50)
                .HasColumnName("cTransactionId");
            entity.Property(e => e.DAusgabeBeendetUtc).HasColumnName("dAusgabeBeendetUtc");
            entity.Property(e => e.DAusgabeGestartetUtc).HasColumnName("dAusgabeGestartetUtc");
            entity.Property(e => e.DBelegdatum).HasColumnName("dBelegdatum");
            entity.Property(e => e.DErstelltUtc).HasColumnName("dErstelltUtc");
            entity.Property(e => e.DLetzteStatusAenderung).HasColumnName("dLetzteStatusAenderung");
            entity.Property(e => e.DUploadErfolgtUtc).HasColumnName("dUploadErfolgtUtc");
            entity.Property(e => e.KExternerBeleg).HasColumnName("kExternerBeleg");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.KVcsLiteUploadQueue)
                .ValueGeneratedOnAdd()
                .HasColumnName("kVcsLiteUploadQueue");
            entity.Property(e => e.NAusgabeVersuche).HasColumnName("nAusgabeVersuche");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
            entity.Property(e => e.NUploadVersuche).HasColumnName("nUploadVersuche");
        });

        modelBuilder.Entity<LvVcsselfInvoiceLogeintrag>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvVCSSelfInvoiceLogeintrag", "Amazon");

            entity.Property(e => e.CMeldung)
                .HasMaxLength(2048)
                .HasColumnName("cMeldung");
            entity.Property(e => e.DZeitpunkt)
                .HasColumnType("datetime")
                .HasColumnName("dZeitpunkt");
            entity.Property(e => e.KAmazonabgleichLogsitzung).HasColumnName("kAmazonabgleichLogsitzung");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.KVcsselfInvoiceLogeintrag)
                .ValueGeneratedOnAdd()
                .HasColumnName("kVCSSelfInvoiceLogeintrag");
            entity.Property(e => e.NSchweregrad).HasColumnName("nSchweregrad");
            entity.Property(e => e.NVorgang).HasColumnName("nVorgang");
        });

        modelBuilder.Entity<LvWorkbenchResource>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvWorkbenchResources", "ResPl");

            entity.Property(e => e.BenutzerNameConnected).HasMaxLength(255);
            entity.Property(e => e.CHostName)
                .HasMaxLength(253)
                .HasColumnName("cHostName");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CNumber)
                .HasMaxLength(100)
                .HasColumnName("cNumber");
            entity.Property(e => e.CWarehouseName)
                .HasMaxLength(255)
                .HasColumnName("cWarehouseName");
            entity.Property(e => e.DConnected).HasColumnName("dConnected");
            entity.Property(e => e.DCreated).HasColumnName("dCreated");
            entity.Property(e => e.DLastModified).HasColumnName("dLastModified");
            entity.Property(e => e.FCost)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fCost");
            entity.Property(e => e.KBenutzerConnected).HasColumnName("kBenutzerConnected");
            entity.Property(e => e.KResource).HasColumnName("kResource");
            entity.Property(e => e.NAppoitmentRequestAutomatic).HasColumnName("nAppoitmentRequestAutomatic");
            entity.Property(e => e.NDivisible).HasColumnName("nDivisible");
            entity.Property(e => e.NInactive).HasColumnName("nInactive");
            entity.Property(e => e.NWarehouseAktiv).HasColumnName("nWarehouseAktiv");
            entity.Property(e => e.ResourceTypeName).HasMaxLength(255);
            entity.Property(e => e.USpecialType).HasColumnName("uSpecialType");
        });

        modelBuilder.Entity<LvZahlung>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvZahlung", "Zahlungsabgleich");

            entity.Property(e => e.CBenutzerName)
                .HasMaxLength(255)
                .HasColumnName("cBenutzerName");
            entity.Property(e => e.CBestellNr)
                .HasMaxLength(50)
                .HasColumnName("cBestellNr");
            entity.Property(e => e.CExterneTransaktionsid)
                .HasMaxLength(255)
                .HasColumnName("cExterneTransaktionsid");
            entity.Property(e => e.CHinweis)
                .HasMaxLength(2000)
                .HasColumnName("cHinweis");
            entity.Property(e => e.CKundenNr)
                .HasMaxLength(30)
                .HasColumnName("cKundenNr");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CRechnungsFirma)
                .HasMaxLength(128)
                .HasColumnName("cRechnungsFirma");
            entity.Property(e => e.CRechnungsName)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsName");
            entity.Property(e => e.CRechnungsNr)
                .HasMaxLength(50)
                .HasColumnName("cRechnungsNr");
            entity.Property(e => e.CRechnungsOrt)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsOrt");
            entity.Property(e => e.CRechnungsPlz)
                .HasMaxLength(24)
                .HasColumnName("cRechnungsPLZ");
            entity.Property(e => e.CRechnungsStrasse)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsStrasse");
            entity.Property(e => e.CRechnungsVorname)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsVorname");
            entity.Property(e => e.CSkrmanuell)
                .HasMaxLength(255)
                .HasColumnName("cSKRManuell");
            entity.Property(e => e.CUmsatzTransaktionsid)
                .HasMaxLength(100)
                .HasColumnName("cUmsatzTransaktionsid");
            entity.Property(e => e.CUmsatzVerwendungszweck)
                .HasMaxLength(1000)
                .HasColumnName("cUmsatzVerwendungszweck");
            entity.Property(e => e.CZahlungsartName)
                .HasMaxLength(255)
                .HasColumnName("cZahlungsartName");
            entity.Property(e => e.CZuweisungsinfo)
                .HasMaxLength(1000)
                .HasColumnName("cZuweisungsinfo");
            entity.Property(e => e.DDatum)
                .HasColumnType("datetime")
                .HasColumnName("dDatum");
            entity.Property(e => e.FBetrag)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBetrag");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.KZahlung).HasColumnName("kZahlung");
            entity.Property(e => e.KZahlungsabgleichUmsatz).HasColumnName("kZahlungsabgleichUmsatz");
            entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");
            entity.Property(e => e.NIstAnzahlung).HasColumnName("nIstAnzahlung");
            entity.Property(e => e.NIstKeinExport).HasColumnName("nIstKeinExport");
            entity.Property(e => e.NZahlungstyp).HasColumnName("nZahlungstyp");
            entity.Property(e => e.NZuweisungstyp).HasColumnName("nZuweisungstyp");
            entity.Property(e => e.NZuweisungswertung).HasColumnName("nZuweisungswertung");
        });

        modelBuilder.Entity<LvZahlungsabgleichLogeintrag>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvZahlungsabgleichLogeintrag", "Zahlungsabgleich");

            entity.Property(e => e.CKontoIdentifikation)
                .HasMaxLength(50)
                .HasColumnName("cKontoIdentifikation");
            entity.Property(e => e.CMeldung)
                .HasMaxLength(2048)
                .HasColumnName("cMeldung");
            entity.Property(e => e.DZeitpunkt)
                .HasColumnType("datetime")
                .HasColumnName("dZeitpunkt");
            entity.Property(e => e.KZahlungsabgleichLogeintrag)
                .ValueGeneratedOnAdd()
                .HasColumnName("kZahlungsabgleichLogeintrag");
            entity.Property(e => e.KZahlungsabgleichLogsitzung).HasColumnName("kZahlungsabgleichLogsitzung");
            entity.Property(e => e.KZahlungsabgleichModul).HasColumnName("kZahlungsabgleichModul");
            entity.Property(e => e.NSchweregrad).HasColumnName("nSchweregrad");
        });

        modelBuilder.Entity<LvZahlungsausgangLogeintrag>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvZahlungsausgangLogeintrag", "Zahlungsabgleich");

            entity.Property(e => e.CAnlagebenutzerName)
                .HasMaxLength(255)
                .HasColumnName("cAnlagebenutzerName");
            entity.Property(e => e.CBuchungsbenutzerName)
                .HasMaxLength(255)
                .HasColumnName("cBuchungsbenutzerName");
            entity.Property(e => e.CGutschriftNr)
                .HasMaxLength(50)
                .HasColumnName("cGutschriftNr");
            entity.Property(e => e.CKontoIdentifikation)
                .HasMaxLength(50)
                .HasColumnName("cKontoIdentifikation");
            entity.Property(e => e.CKundenNr)
                .HasMaxLength(30)
                .HasColumnName("cKundenNr");
            entity.Property(e => e.CMeldung)
                .HasMaxLength(2048)
                .HasColumnName("cMeldung");
            entity.Property(e => e.CVerwendungszweck)
                .HasMaxLength(1000)
                .HasColumnName("cVerwendungszweck");
            entity.Property(e => e.DAnlagedatum)
                .HasColumnType("datetime")
                .HasColumnName("dAnlagedatum");
            entity.Property(e => e.DBuchungsdatum)
                .HasColumnType("datetime")
                .HasColumnName("dBuchungsdatum");
            entity.Property(e => e.DZeitpunkt)
                .HasColumnType("datetime")
                .HasColumnName("dZeitpunkt");
            entity.Property(e => e.FBetrag)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBetrag");
            entity.Property(e => e.KAnlagebenutzer).HasColumnName("kAnlagebenutzer");
            entity.Property(e => e.KBuchungsbenutzer).HasColumnName("kBuchungsbenutzer");
            entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KZahlungsabgleichLogsitzung).HasColumnName("kZahlungsabgleichLogsitzung");
            entity.Property(e => e.KZahlungsabgleichModul).HasColumnName("kZahlungsabgleichModul");
            entity.Property(e => e.KZahlungsausgangLogeintrag).HasColumnName("kZahlungsausgangLogeintrag");
            entity.Property(e => e.NSchweregrad).HasColumnName("nSchweregrad");
        });

        modelBuilder.Entity<LvZahlungsausganguebersicht>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lvZahlungsausganguebersicht", "Zahlungsabgleich");

            entity.Property(e => e.CInternerKommentar)
                .HasMaxLength(1000)
                .HasColumnName("cInternerKommentar");
            entity.Property(e => e.CKonto)
                .HasMaxLength(500)
                .HasColumnName("cKonto");
            entity.Property(e => e.CKontoIdentifikation)
                .HasMaxLength(50)
                .HasColumnName("cKontoIdentifikation");
            entity.Property(e => e.CKontozusatz)
                .HasMaxLength(500)
                .HasColumnName("cKontozusatz");
            entity.Property(e => e.CName)
                .HasMaxLength(500)
                .HasColumnName("cName");
            entity.Property(e => e.CTransaktionId)
                .HasMaxLength(1000)
                .HasColumnName("cTransaktionID");
            entity.Property(e => e.CVerwendungszweck)
                .HasMaxLength(1000)
                .HasColumnName("cVerwendungszweck");
            entity.Property(e => e.CWaehrungIso)
                .HasMaxLength(3)
                .HasColumnName("cWaehrungISO");
            entity.Property(e => e.DAnlagedatum)
                .HasColumnType("datetime")
                .HasColumnName("dAnlagedatum");
            entity.Property(e => e.DBuchungsdatum)
                .HasColumnType("datetime")
                .HasColumnName("dBuchungsdatum");
            entity.Property(e => e.FBetrag)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBetrag");
            entity.Property(e => e.KAnlagebenutzer).HasColumnName("kAnlagebenutzer");
            entity.Property(e => e.KBuchungsbenutzer).HasColumnName("kBuchungsbenutzer");
            entity.Property(e => e.KEingangsrechnung).HasColumnName("kEingangsrechnung");
            entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KZahlungAusgang).HasColumnName("kZahlungAusgang");
            entity.Property(e => e.KZahlungEingang).HasColumnName("kZahlungEingang");
            entity.Property(e => e.KZahlungsabgleichAusgang)
                .ValueGeneratedOnAdd()
                .HasColumnName("kZahlungsabgleichAusgang");
            entity.Property(e => e.KZahlungsabgleichModul).HasColumnName("kZahlungsabgleichModul");
            entity.Property(e => e.KZahlungsabgleichUmsatzAusgang).HasColumnName("kZahlungsabgleichUmsatzAusgang");
            entity.Property(e => e.KZahlungsabgleichUmsatzEingang).HasColumnName("kZahlungsabgleichUmsatzEingang");
            entity.Property(e => e.NVollstaendigerReferenzbetrag).HasColumnName("nVollstaendigerReferenzbetrag");
        });

        modelBuilder.Entity<Manufacturer>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Manufacturer", "BI");

            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.ManufacturerId).HasColumnName("ManufacturerID");
            entity.Property(e => e.ManufacturerName).HasMaxLength(128);
        });

        modelBuilder.Entity<MovementType>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("MovementType", "BI");

            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.MovementTypeId).HasColumnName("MovementTypeID");
        });

        modelBuilder.Entity<MovementTypeName>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("MovementTypeName", "BI");

            entity.Property(e => e.LanguageIso)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.MovementTypeId).HasColumnName("MovementTypeID");
            entity.Property(e => e.Name).HasMaxLength(128);
        });

        modelBuilder.Entity<Parcel>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Parcel", "BI");

            entity.Property(e => e.ArrivedDate).HasColumnType("datetime");
            entity.Property(e => e.CreationDate).HasColumnType("datetime");
            entity.Property(e => e.DeliveryNoteId).HasColumnName("DeliveryNoteID");
            entity.Property(e => e.IdentCode).HasMaxLength(255);
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.ParcelId)
                .ValueGeneratedOnAdd()
                .HasColumnName("ParcelID");
            entity.Property(e => e.ParcelWeight).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingMethodId).HasColumnName("ShippingMethodID");
            entity.Property(e => e.SystemUserId).HasColumnName("SystemUserID");
        });

        modelBuilder.Entity<Parcel1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Parcels", "Report");

            entity.Property(e => e.CreationDate)
                .HasComment("Erstelldatum des Pakets")
                .HasColumnType("datetime");
            entity.Property(e => e.CustomerReference)
                .HasMaxLength(255)
                .HasComment("Kundenreferenz");
            entity.Property(e => e.DeliveryNoteInternalId).HasComment("Interne ID des Lieferscheins");
            entity.Property(e => e.IdentCode)
                .HasMaxLength(255)
                .HasComment("IdentCode des Pakets");
            entity.Property(e => e.InternalId).HasComment("Interne ID des Pakets");
            entity.Property(e => e.IsShippingParcel).HasComment("Gibt an, ob es sich um ein Shippingpaket handelt");
            entity.Property(e => e.Note)
                .HasMaxLength(255)
                .HasComment("Hinweis zum Paket");
            entity.Property(e => e.ShipmentReference)
                .HasMaxLength(50)
                .HasComment("Sendungsreferenz");
            entity.Property(e => e.ShippingDate)
                .HasComment("Datum des Versands des Pakets")
                .HasColumnType("datetime");
            entity.Property(e => e.ShippingMethodInternalId).HasComment("Interne ID der Versandart des Pakets");
            entity.Property(e => e.ShippingServiceProviderName)
                .HasMaxLength(50)
                .HasComment("Name des Logistikers");
            entity.Property(e => e.TrackingUrl)
                .HasMaxLength(4000)
                .HasComment("Tracking-URL")
                .HasColumnName("TrackingURL");
            entity.Property(e => e.Weight)
                .HasComment("Gewicht des Pakets")
                .HasColumnType("decimal(25, 13)");
        });

        modelBuilder.Entity<PaymentMethod>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PaymentMethod", "Report");

            entity.Property(e => e.Account).HasMaxLength(32);
            entity.Property(e => e.CashDiscount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.PaymentOption).HasMaxLength(255);
        });

        modelBuilder.Entity<PaymentType>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PaymentType", "BI");

            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.PaymentTypeId).HasColumnName("PaymentTypeID");
        });

        modelBuilder.Entity<PaymentTypeName>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PaymentTypeName", "BI");

            entity.Property(e => e.LanguageIso)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Name).HasMaxLength(128);
            entity.Property(e => e.PaymentTypeId).HasColumnName("PaymentTypeID");
        });

        modelBuilder.Entity<PfAmazonAngebot>(entity =>
        {
            entity.HasKey(e => new { e.CSellerSku, e.KUser, e.NPlattform }).HasName("PK_dbo_pf_amazon_angebot");

            entity.ToTable("pf_amazon_angebot");

            entity.HasIndex(e => e.CAsin1, "IX_pf_amazon_angebot_cASIN1");

            entity.HasIndex(e => e.CItemName, "IX_pf_amazon_angebot_cItemName");

            entity.HasIndex(e => e.KUser, "IX_pf_amazon_angebot_kUser");

            entity.Property(e => e.CSellerSku)
                .HasMaxLength(100)
                .HasColumnName("cSellerSKU");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.NPlattform).HasColumnName("nPlattform");
            entity.Property(e => e.CAsin1)
                .HasMaxLength(30)
                .HasColumnName("cASIN1");
            entity.Property(e => e.CAsin2)
                .HasMaxLength(30)
                .HasColumnName("cASIN2");
            entity.Property(e => e.CAsin3)
                .HasMaxLength(30)
                .HasColumnName("cASIN3");
            entity.Property(e => e.CExpeditedShipping)
                .HasMaxLength(5)
                .HasColumnName("cExpeditedShipping");
            entity.Property(e => e.CFulfillmentChannel)
                .HasMaxLength(20)
                .HasColumnName("cFulfillmentChannel");
            entity.Property(e => e.CItemIsMarketplace)
                .HasMaxLength(5)
                .HasColumnName("cItemIsMarketplace");
            entity.Property(e => e.CItemName)
                .HasMaxLength(255)
                .HasColumnName("cItemName");
            entity.Property(e => e.CListingId)
                .HasMaxLength(30)
                .HasColumnName("cListingId");
            entity.Property(e => e.CProductId)
                .HasMaxLength(30)
                .HasColumnName("cProductId");
            entity.Property(e => e.CShippingGroup).HasColumnName("cShippingGroup");
            entity.Property(e => e.DOpenDate)
                .HasColumnType("datetime")
                .HasColumnName("dOpenDate");
            entity.Property(e => e.FPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPrice");
            entity.Property(e => e.NChangedPrice).HasColumnName("nChangedPrice");
            entity.Property(e => e.NChangedQuantity).HasColumnName("nChangedQuantity");
            entity.Property(e => e.NItemCondition).HasColumnName("nItemCondition");
            entity.Property(e => e.NProductIdType).HasColumnName("nProductIdType");
            entity.Property(e => e.NQuantity).HasColumnName("nQuantity");
            entity.Property(e => e.NWillShipInternationally).HasColumnName("nWillShipInternationally");
        });

        modelBuilder.Entity<PfAmazonAngebotExt>(entity =>
        {
            entity.HasKey(e => new { e.CSellerSku, e.KUser, e.NPlattform }).HasName("PK_dbo_pf_amazon_angebot_ext");

            entity.ToTable("pf_amazon_angebot_ext");

            entity.HasIndex(e => e.CSellerSku, "IX_pf_amazon_angebot_ext_cSellerSKU");

            entity.HasIndex(e => e.KUser, "IX_pf_amazon_angebot_ext_kUser");

            entity.HasIndex(e => e.NPlattform, "IX_pf_amazon_angebot_ext_nPlattform");

            entity.Property(e => e.CSellerSku)
                .HasMaxLength(100)
                .HasColumnName("cSellerSKU");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.NPlattform).HasColumnName("nPlattform");
            entity.Property(e => e.CConditionNote)
                .HasMaxLength(2000)
                .HasColumnName("cConditionNote");
            entity.Property(e => e.CFulfillmentChannel)
                .HasMaxLength(20)
                .HasColumnName("cFulfillmentChannel");
            entity.Property(e => e.CNameSeller1)
                .HasMaxLength(255)
                .HasColumnName("cNameSeller1");
            entity.Property(e => e.DDeaktiviertUtc).HasColumnName("dDeaktiviertUtc");
            entity.Property(e => e.DLastSwitchFulfillmentTo)
                .HasColumnType("datetime")
                .HasColumnName("dLastSwitchFulfillmentTo");
            entity.Property(e => e.DLetzteBearbeitungszeitAenderung)
                .HasColumnType("datetime")
                .HasColumnName("dLetzteBearbeitungszeitAenderung");
            entity.Property(e => e.DLetzteBestandAenderung)
                .HasColumnType("datetime")
                .HasColumnName("dLetzteBestandAenderung");
            entity.Property(e => e.DLetztePreisAenderung)
                .HasColumnType("datetime")
                .HasColumnName("dLetztePreisAenderung");
            entity.Property(e => e.DLetzteTaxShippingAenderung)
                .HasColumnType("datetime")
                .HasColumnName("dLetzteTaxShippingAenderung");
            entity.Property(e => e.DLetzteVersandAenderung)
                .HasColumnType("datetime")
                .HasColumnName("dLetzteVersandAenderung");
            entity.Property(e => e.DLetztesApaupdate)
                .HasColumnType("datetime")
                .HasColumnName("dLetztesAPAUpdate");
            entity.Property(e => e.DRestockDate)
                .HasColumnType("datetime")
                .HasColumnName("dRestockDate");
            entity.Property(e => e.DSaleEnd)
                .HasColumnType("datetime")
                .HasColumnName("dSaleEnd");
            entity.Property(e => e.DSaleStart)
                .HasColumnType("datetime")
                .HasColumnName("dSaleStart");
            entity.Property(e => e.DSellerdaten)
                .HasColumnType("datetime")
                .HasColumnName("dSellerdaten");
            entity.Property(e => e.FApamaxPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAPAMaxPreis");
            entity.Property(e => e.FApaminPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAPAMinPreis");
            entity.Property(e => e.FApapreisabstand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAPAPreisabstand");
            entity.Property(e => e.FApapreisabstandFba)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAPAPreisabstandFBA");
            entity.Property(e => e.FPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPreis");
            entity.Property(e => e.FPreisSeller1)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPreisSeller1");
            entity.Property(e => e.FSalePrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fSalePrice");
            entity.Property(e => e.FVersandSeller1)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVersandSeller1");
            entity.Property(e => e.FVersandkosten)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVersandkosten");
            entity.Property(e => e.KAmazonVersandgruppe).HasColumnName("kAmazonVersandgruppe");
            entity.Property(e => e.KSteuercode).HasColumnName("kSteuercode");
            entity.Property(e => e.NApanutzen).HasColumnName("nAPANutzen");
            entity.Property(e => e.NApapruefIntervall).HasColumnName("nAPAPruefIntervall");
            entity.Property(e => e.NApasellerPositiveFeedbackRating).HasColumnName("nAPASellerPositiveFeedbackRating");
            entity.Property(e => e.NApashippingTime).HasColumnName("nAPAShippingTime");
            entity.Property(e => e.NApaupdate).HasColumnName("nAPAUpdate");
            entity.Property(e => e.NB2bpreiseSenden).HasColumnName("nB2BPreiseSenden");
            entity.Property(e => e.NBearbeitungsZeit).HasColumnName("nBearbeitungsZeit");
            entity.Property(e => e.NConditionNoteChanged).HasColumnName("nConditionNoteChanged");
            entity.Property(e => e.NDelete).HasColumnName("nDelete");
            entity.Property(e => e.NDeleteB2bpreis).HasColumnName("nDeleteB2BPreis");
            entity.Property(e => e.NIstApapreisabstandFbaprozentual).HasColumnName("nIstAPAPreisabstandFBAProzentual");
            entity.Property(e => e.NIstApapreisabstandProzentual).HasColumnName("nIstAPAPreisabstandProzentual");
            entity.Property(e => e.NLetzteBearbeitungsZeit).HasColumnName("nLetzteBearbeitungsZeit");
            entity.Property(e => e.NMaxBestand).HasColumnName("nMaxBestand");
            entity.Property(e => e.NPreisUndBestandsaenderungenAusschliessen).HasColumnName("nPreisUndBestandsaenderungenAusschliessen");
            entity.Property(e => e.NSendeBestand).HasColumnName("nSendeBestand");
            entity.Property(e => e.NSwitchFulfillmentTo).HasColumnName("nSwitchFulfillmentTo");
            entity.Property(e => e.NUseApaglobal).HasColumnName("nUseAPAGlobal");
            entity.Property(e => e.NVerkaufsrang).HasColumnName("nVerkaufsrang");
        });

        modelBuilder.Entity<PfAmazonAngebotFba>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("pf_amazon_angebot_fba");

            entity.HasIndex(e => new { e.CSellerSku, e.KUser, e.CWarehouseConditionType }, "IX_pf_amazon_angebot_fba_cSellerSKU_kUser_cWarehouseConditionType").IsClustered();

            entity.HasIndex(e => e.KUser, "IX_pf_amazon_angebot_fba_kUser");

            entity.Property(e => e.CConditionType)
                .HasMaxLength(25)
                .HasColumnName("cConditionType");
            entity.Property(e => e.CFnsku)
                .HasMaxLength(50)
                .HasColumnName("cFNSKU");
            entity.Property(e => e.CMarketplaceId)
                .HasMaxLength(50)
                .HasColumnName("cMarketplaceID");
            entity.Property(e => e.CRegion)
                .HasMaxLength(4)
                .HasColumnName("cRegion");
            entity.Property(e => e.CSellerSku)
                .HasMaxLength(100)
                .HasColumnName("cSellerSKU");
            entity.Property(e => e.CWarehouseConditionType)
                .HasMaxLength(25)
                .HasColumnName("cWarehouseConditionType");
            entity.Property(e => e.FVolume)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVolume");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.NPlattform).HasColumnName("nPlattform");
            entity.Property(e => e.NQtyInboundShipped).HasColumnName("nQtyInboundShipped");
            entity.Property(e => e.NQtyInboundWorking).HasColumnName("nQtyInboundWorking");
            entity.Property(e => e.NQtyReceiving).HasColumnName("nQtyReceiving");
            entity.Property(e => e.NQtyReserved).HasColumnName("nQtyReserved");
            entity.Property(e => e.NQtyTotal).HasColumnName("nQtyTotal");
            entity.Property(e => e.NQtyUnsellable).HasColumnName("nQtyUnsellable");
            entity.Property(e => e.NQtyWarehouse).HasColumnName("nQtyWarehouse");
            entity.Property(e => e.NQuantity).HasColumnName("nQuantity");
        });

        modelBuilder.Entity<PfAmazonAngebotMapping>(entity =>
        {
            entity.HasKey(e => new { e.CSellerSku, e.KUser }).HasName("PK_dbo_pf_amazon_angebot_mapping");

            entity.ToTable("pf_amazon_angebot_mapping", tb => tb.HasTrigger("tgr_pf_amazon_angebot_mapping_INSUPDEL"));

            entity.HasIndex(e => e.KArtikel, "pf_amazon_angebot_mapping_kArtikel");

            entity.Property(e => e.CSellerSku)
                .HasMaxLength(100)
                .HasColumnName("cSellerSKU");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
        });

        modelBuilder.Entity<PfAmazonAngebotNeu>(entity =>
        {
            entity.HasKey(e => new { e.CSellerSku, e.KUser, e.NPlattform }).HasName("PK_dbo_pf_amazon_angebot_neu");

            entity.ToTable("pf_amazon_angebot_neu");

            entity.Property(e => e.CSellerSku)
                .HasMaxLength(100)
                .HasColumnName("cSellerSKU");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.NPlattform).HasColumnName("nPlattform");
            entity.Property(e => e.CConditionNote)
                .HasMaxLength(2000)
                .HasColumnName("cConditionNote");
            entity.Property(e => e.CLetzterFehler).HasColumnName("cLetzterFehler");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CProductId)
                .HasMaxLength(100)
                .HasColumnName("cProductId");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DGesendet)
                .HasColumnType("datetime")
                .HasColumnName("dGesendet");
            entity.Property(e => e.FPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPrice");
            entity.Property(e => e.KAmazonVersandgruppe).HasColumnName("kAmazonVersandgruppe");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.NBearbeitungszeit).HasColumnName("nBearbeitungszeit");
            entity.Property(e => e.NCondition).HasColumnName("nCondition");
            entity.Property(e => e.NFulfillmentChannel).HasColumnName("nFulfillmentChannel");
            entity.Property(e => e.NMaxBestand).HasColumnName("nMaxBestand");
            entity.Property(e => e.NProductIdType).HasColumnName("nProductIdType");
            entity.Property(e => e.NQuantity).HasColumnName("nQuantity");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<PfAmazonAngebotNeuSetting>(entity =>
        {
            entity.HasKey(e => new { e.KUser, e.NPlattform }).HasName("PK_dbo_pf_amazon_angebot_neu_settings");

            entity.ToTable("pf_amazon_angebot_neu_settings");

            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.NPlattform).HasColumnName("nPlattform");
            entity.Property(e => e.CCondition1)
                .HasMaxLength(2000)
                .HasColumnName("cCondition1");
            entity.Property(e => e.CCondition10)
                .HasMaxLength(2000)
                .HasColumnName("cCondition10");
            entity.Property(e => e.CCondition11)
                .HasMaxLength(2000)
                .HasColumnName("cCondition11");
            entity.Property(e => e.CCondition2)
                .HasMaxLength(2000)
                .HasColumnName("cCondition2");
            entity.Property(e => e.CCondition3)
                .HasMaxLength(2000)
                .HasColumnName("cCondition3");
            entity.Property(e => e.CCondition4)
                .HasMaxLength(2000)
                .HasColumnName("cCondition4");
            entity.Property(e => e.CCondition5)
                .HasMaxLength(2000)
                .HasColumnName("cCondition5");
            entity.Property(e => e.CCondition6)
                .HasMaxLength(2000)
                .HasColumnName("cCondition6");
            entity.Property(e => e.CCondition7)
                .HasMaxLength(2000)
                .HasColumnName("cCondition7");
            entity.Property(e => e.CCondition8)
                .HasMaxLength(2000)
                .HasColumnName("cCondition8");
            entity.Property(e => e.CCondition9)
                .HasMaxLength(2000)
                .HasColumnName("cCondition9");
            entity.Property(e => e.NCondition).HasColumnName("nCondition");
            entity.Property(e => e.NStandard)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nStandard");
        });

        modelBuilder.Entity<PfAmazonAngebotSelbstErstellt>(entity =>
        {
            entity.HasKey(e => new { e.CSellerSku, e.KUser, e.NPlattform }).HasName("PK_dbo_pf_amazon_angebot_selbstErstellt");

            entity.ToTable("pf_amazon_angebot_selbstErstellt");

            entity.Property(e => e.CSellerSku)
                .HasMaxLength(255)
                .HasColumnName("cSellerSKU");
            entity.Property(e => e.KUser)
                .HasMaxLength(255)
                .HasColumnName("kUser");
            entity.Property(e => e.NPlattform).HasColumnName("nPlattform");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.KItem).HasColumnName("kItem");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<PfAmazonAngebotVater>(entity =>
        {
            entity.HasKey(e => new { e.CSellerSku, e.KUser, e.NPlattform }).HasName("PK_dbo_pf_amazon_angebot_vater");

            entity.ToTable("pf_amazon_angebot_vater");

            entity.HasIndex(e => e.CSellerSku, "IX_pf_amazon_angebot_vater_cSellerSKU");

            entity.HasIndex(e => e.CSellerSkuvater, "IX_pf_amazon_angebot_vater_cSellerSKUVater");

            entity.Property(e => e.CSellerSku)
                .HasMaxLength(100)
                .HasColumnName("cSellerSKU");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.NPlattform).HasColumnName("nPlattform");
            entity.Property(e => e.CSellerSkuvater)
                .HasMaxLength(100)
                .HasColumnName("cSellerSKUVater");
        });

        modelBuilder.Entity<PfAmazonApaPrei>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("pf_amazon_apa_preis");

            entity.HasIndex(e => e.CSellerSku, "IX_pf_amazon_apa_preis_cSellerSKU");

            entity.HasIndex(e => e.DErstellt, "IX_pf_amazon_apa_preis_dErstellt");

            entity.HasIndex(e => e.NPlattform, "IX_pf_amazon_apa_preis_nPlattform");

            entity.Property(e => e.CSellerSku)
                .HasMaxLength(255)
                .HasColumnName("cSellerSKU");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.FPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPreis");
            entity.Property(e => e.NPlattform).HasColumnName("nPlattform");
        });

        modelBuilder.Entity<PfAmazonApaUsersetting>(entity =>
        {
            entity.HasKey(e => new { e.KUser, e.NPlattform }).HasName("PK_dbo_pf_amazon_apa_usersettings");

            entity.ToTable("pf_amazon_apa_usersettings");

            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.NPlattform).HasColumnName("nPlattform");
            entity.Property(e => e.FApapreisabstand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAPAPreisabstand");
            entity.Property(e => e.FApapreisabstandFba)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAPAPreisabstandFBA");
            entity.Property(e => e.NApasellerPositiveFeedbackRating).HasColumnName("nAPASellerPositiveFeedbackRating");
            entity.Property(e => e.NApashippingTime).HasColumnName("nAPAShippingTime");
            entity.Property(e => e.NIstApapreisabstandFbaprozentual).HasColumnName("nIstAPAPreisabstandFBAProzentual");
            entity.Property(e => e.NIstApapreisabstandProzentual).HasColumnName("nIstAPAPreisabstandProzentual");
        });

        modelBuilder.Entity<PfAmazonBestandAnDatum>(entity =>
        {
            entity.HasKey(e => new { e.KUser, e.CSellerSku, e.DErstellt }).HasName("PK_dbo_pf_amazon_BestandAnDatum");

            entity.ToTable("pf_amazon_BestandAnDatum");

            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.CSellerSku)
                .HasMaxLength(100)
                .HasColumnName("cSellerSKU");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
        });

        modelBuilder.Entity<PfAmazonBestellung>(entity =>
        {
            entity.HasKey(e => e.KAmazonBestellung).HasName("PK_dbo_pf_amazon_bestellung");

            entity.ToTable("pf_amazon_bestellung", tb => tb.HasTrigger("tgr_pf_amazon_bestellung_UPDATE"));

            entity.HasIndex(e => e.CBuyerName, "IX_pf_amazon_bestellung_cBuyerName");

            entity.HasIndex(e => e.COrderId, "IX_pf_amazon_bestellung_cOrderId");

            entity.HasIndex(e => e.CRecipientName, "IX_pf_amazon_bestellung_cRecipientName");

            entity.HasIndex(e => e.KUser, "IX_pf_amazon_bestellung_kUser");

            entity.HasIndex(e => e.NStatus, "IX_pf_amazon_bestellung_nStatus");

            entity.HasIndex(e => e.KMessageId, "UQ_dbo_pf_amazon_bestellung_kMessageId").IsUnique();

            entity.Property(e => e.KAmazonBestellung).HasColumnName("kAmazonBestellung");
            entity.Property(e => e.CBillAddress1)
                .HasMaxLength(255)
                .HasColumnName("cBillAddress1");
            entity.Property(e => e.CBillAddress2)
                .HasMaxLength(255)
                .HasColumnName("cBillAddress2");
            entity.Property(e => e.CBillAddress3)
                .HasMaxLength(255)
                .HasColumnName("cBillAddress3");
            entity.Property(e => e.CBillCity)
                .HasMaxLength(100)
                .HasColumnName("cBillCity");
            entity.Property(e => e.CBillCountry)
                .HasMaxLength(5)
                .HasColumnName("cBillCountry");
            entity.Property(e => e.CBillPostalCode)
                .HasMaxLength(20)
                .HasColumnName("cBillPostalCode");
            entity.Property(e => e.CBillState)
                .HasMaxLength(100)
                .HasColumnName("cBillState");
            entity.Property(e => e.CBuyerCompanyName)
                .HasMaxLength(255)
                .HasColumnName("cBuyerCompanyName");
            entity.Property(e => e.CBuyerCstNumber)
                .HasMaxLength(50)
                .HasColumnName("cBuyerCstNumber");
            entity.Property(e => e.CBuyerEmail)
                .HasMaxLength(255)
                .HasColumnName("cBuyerEmail");
            entity.Property(e => e.CBuyerName)
                .HasMaxLength(255)
                .HasColumnName("cBuyerName");
            entity.Property(e => e.CBuyerPhoneNumber)
                .HasMaxLength(50)
                .HasColumnName("cBuyerPhoneNumber");
            entity.Property(e => e.CBuyerTaxRegistrationId)
                .HasMaxLength(50)
                .HasColumnName("cBuyerTaxRegistrationId");
            entity.Property(e => e.CCurrency)
                .HasMaxLength(5)
                .HasColumnName("cCurrency");
            entity.Property(e => e.CErrorMessage)
                .HasMaxLength(2000)
                .HasColumnName("cErrorMessage");
            entity.Property(e => e.CItemPromotionId)
                .HasMaxLength(255)
                .HasColumnName("cItemPromotionId");
            entity.Property(e => e.CKundenauftragsnummer)
                .HasMaxLength(250)
                .HasColumnName("cKundenauftragsnummer");
            entity.Property(e => e.CMarketplaceId)
                .HasMaxLength(25)
                .HasColumnName("cMarketplaceId");
            entity.Property(e => e.CMerchantOrderId)
                .HasMaxLength(50)
                .HasColumnName("cMerchantOrderId");
            entity.Property(e => e.COrderId)
                .HasMaxLength(30)
                .HasColumnName("cOrderId");
            entity.Property(e => e.COrderStatus)
                .HasMaxLength(30)
                .HasColumnName("cOrderStatus");
            entity.Property(e => e.COriginalOrderId)
                .HasMaxLength(19)
                .HasColumnName("cOriginalOrderId");
            entity.Property(e => e.CPaymentMethod)
                .HasMaxLength(255)
                .HasColumnName("cPaymentMethod");
            entity.Property(e => e.CRecipientName)
                .HasMaxLength(255)
                .HasColumnName("cRecipientName");
            entity.Property(e => e.CSalesChannel)
                .HasMaxLength(100)
                .HasColumnName("cSalesChannel");
            entity.Property(e => e.CShipAddress1)
                .HasMaxLength(255)
                .HasColumnName("cShipAddress1");
            entity.Property(e => e.CShipAddress2)
                .HasMaxLength(255)
                .HasColumnName("cShipAddress2");
            entity.Property(e => e.CShipAddress3)
                .HasMaxLength(255)
                .HasColumnName("cShipAddress3");
            entity.Property(e => e.CShipCity)
                .HasMaxLength(100)
                .HasColumnName("cShipCity");
            entity.Property(e => e.CShipCountry)
                .HasMaxLength(5)
                .HasColumnName("cShipCountry");
            entity.Property(e => e.CShipPhoneNumber)
                .HasMaxLength(100)
                .HasColumnName("cShipPhoneNumber");
            entity.Property(e => e.CShipPostalCode)
                .HasMaxLength(20)
                .HasColumnName("cShipPostalCode");
            entity.Property(e => e.CShipPromotionId)
                .HasMaxLength(50)
                .HasColumnName("cShipPromotionId");
            entity.Property(e => e.CShipServiceLevel)
                .HasMaxLength(30)
                .HasColumnName("cShipServiceLevel");
            entity.Property(e => e.CShipServiceName)
                .HasMaxLength(255)
                .HasColumnName("cShipServiceName");
            entity.Property(e => e.CShipState)
                .HasMaxLength(100)
                .HasColumnName("cShipState");
            entity.Property(e => e.CVersandlandIso)
                .HasMaxLength(3)
                .HasColumnName("cVersandlandISO");
            entity.Property(e => e.DEarliestDeliveryAt)
                .HasColumnType("datetime")
                .HasColumnName("dEarliestDeliveryAt");
            entity.Property(e => e.DEarliestShipAt)
                .HasColumnType("datetime")
                .HasColumnName("dEarliestShipAt");
            entity.Property(e => e.DErrorErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErrorErstellt");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DLatestDeliveryAt)
                .HasColumnType("datetime")
                .HasColumnName("dLatestDeliveryAt");
            entity.Property(e => e.DLatestShipAt)
                .HasColumnType("datetime")
                .HasColumnName("dLatestShipAt");
            entity.Property(e => e.DPaymentsDate)
                .HasColumnType("datetime")
                .HasColumnName("dPaymentsDate");
            entity.Property(e => e.DPurchaseDate)
                .HasColumnType("datetime")
                .HasColumnName("dPurchaseDate");
            entity.Property(e => e.DShipmentDate)
                .HasColumnType("datetime")
                .HasColumnName("dShipmentDate");
            entity.Property(e => e.FItemPromotionDiscount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fItemPromotionDiscount");
            entity.Property(e => e.FShipPromotionDiscount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fShipPromotionDiscount");
            entity.Property(e => e.FVersandkosten)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVersandkosten");
            entity.Property(e => e.KFulfillmentAuftrag).HasColumnName("kFulfillmentAuftrag");
            entity.Property(e => e.KMessageId).HasColumnName("kMessageId");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.NB2b).HasColumnName("nB2B");
            entity.Property(e => e.NDeleted).HasColumnName("nDeleted");
            entity.Property(e => e.NErrorCode).HasColumnName("nErrorCode");
            entity.Property(e => e.NFba).HasColumnName("nFBA");
            entity.Property(e => e.NIsAmazonInvoice).HasColumnName("nIsAmazonInvoice");
            entity.Property(e => e.NIsMultichannelOrder).HasColumnName("nIsMultichannelOrder");
            entity.Property(e => e.NPrime).HasColumnName("nPrime");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<PfAmazonBestellungStorno>(entity =>
        {
            entity.HasKey(e => e.KAmazonBestellungStorno).HasName("PK_dbo_pf_amazon_bestellung_storno");

            entity.ToTable("pf_amazon_bestellung_storno");

            entity.HasIndex(e => e.COrderId, "IX_pf_amazon_bestellung_storno_cOrderId");

            entity.Property(e => e.KAmazonBestellungStorno).HasColumnName("kAmazonBestellungStorno");
            entity.Property(e => e.COrderId)
                .HasMaxLength(30)
                .HasColumnName("cOrderId");
            entity.Property(e => e.DBearbeitet)
                .HasColumnType("datetime")
                .HasColumnName("dBearbeitet");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.NCancelReason).HasColumnName("nCancelReason");
        });

        modelBuilder.Entity<PfAmazonBestellungVersand>(entity =>
        {
            entity.HasKey(e => e.KAmazonBestellungVersand).HasName("PK_dbo_pf_amazon_bestellung_versand");

            entity.ToTable("pf_amazon_bestellung_versand", tb => tb.HasTrigger("tgr_pf_amazon_bestellung_versand_INSUP"));

            entity.HasIndex(e => e.DBearbeitet, "IX_pf_amazon_bestellung_versand_dBearbeitet");

            entity.HasIndex(e => e.KAmazonBestellungPos, "IX_pf_amazon_bestellung_versand_kAmazonBestellungPos");

            entity.HasIndex(e => e.KLieferschein, "IX_pf_amazon_bestellung_versand_kLieferschein");

            entity.Property(e => e.KAmazonBestellungVersand).HasColumnName("kAmazonBestellungVersand");
            entity.Property(e => e.CCarrierCode)
                .HasMaxLength(255)
                .HasColumnName("cCarrierCode");
            entity.Property(e => e.CCarrierName)
                .HasMaxLength(255)
                .HasColumnName("cCarrierName");
            entity.Property(e => e.CShipFromAddressCity)
                .HasMaxLength(255)
                .HasColumnName("cShipFromAddressCity");
            entity.Property(e => e.CShipFromAddressCounty)
                .HasMaxLength(255)
                .HasColumnName("cShipFromAddressCounty");
            entity.Property(e => e.CShipFromAddressLine1)
                .HasMaxLength(255)
                .HasColumnName("cShipFromAddressLine1");
            entity.Property(e => e.CShipFromAddressLine2)
                .HasMaxLength(255)
                .HasColumnName("cShipFromAddressLine2");
            entity.Property(e => e.CShipFromAddressLine3)
                .HasMaxLength(255)
                .HasColumnName("cShipFromAddressLine3");
            entity.Property(e => e.CShipFromAddressName)
                .HasMaxLength(255)
                .HasColumnName("cShipFromAddressName");
            entity.Property(e => e.CShipFromAddressStateOrRegion)
                .HasMaxLength(255)
                .HasColumnName("cShipFromAddressStateOrRegion");
            entity.Property(e => e.CShipFromCountrycode)
                .HasMaxLength(255)
                .HasColumnName("cShipFromCountrycode");
            entity.Property(e => e.CShipFromPostalcode)
                .HasMaxLength(255)
                .HasColumnName("cShipFromPostalcode");
            entity.Property(e => e.CShipMethod)
                .HasMaxLength(255)
                .HasColumnName("cShipMethod");
            entity.Property(e => e.CTrackingNumber)
                .HasMaxLength(255)
                .HasColumnName("cTrackingNumber");
            entity.Property(e => e.DBearbeitet)
                .HasColumnType("datetime")
                .HasColumnName("dBearbeitet");
            entity.Property(e => e.DShipDate)
                .HasColumnType("datetime")
                .HasColumnName("dShipDate");
            entity.Property(e => e.KAmazonBestellungPos).HasColumnName("kAmazonBestellungPos");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");
            entity.Property(e => e.NQuantity).HasColumnName("nQuantity");
        });

        modelBuilder.Entity<PfAmazonBestellungpo>(entity =>
        {
            entity.HasKey(e => e.KAmazonBestellungPos).HasName("PK_dbo_pf_amazon_bestellungpos");

            entity.ToTable("pf_amazon_bestellungpos", tb => tb.HasTrigger("tgr_pf_amazon_bestellungpos_INSUPDEL"));

            entity.HasIndex(e => e.CArtNr, "IX_pf_amazon_bestellungpos_cArtNr");

            entity.HasIndex(e => e.CName, "IX_pf_amazon_bestellungpos_cName");

            entity.HasIndex(e => e.KAmazonBestellung, "IX_pf_amazon_bestellungpos_kAmazonBestellung");

            entity.Property(e => e.KAmazonBestellungPos).HasColumnName("kAmazonBestellungPos");
            entity.Property(e => e.CArchiveUrl)
                .HasMaxLength(512)
                .HasColumnName("cArchiveUrl");
            entity.Property(e => e.CArtNr)
                .HasMaxLength(50)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CCarrier)
                .HasMaxLength(20)
                .HasColumnName("cCarrier");
            entity.Property(e => e.CCustomJson).HasColumnName("cCustomJson");
            entity.Property(e => e.CCustomUrl)
                .HasMaxLength(255)
                .HasColumnName("cCustomUrl");
            entity.Property(e => e.CErrorMessage)
                .HasMaxLength(2000)
                .HasColumnName("cErrorMessage");
            entity.Property(e => e.CFulfillmentCenterId)
                .HasMaxLength(20)
                .HasColumnName("cFulfillmentCenterId");
            entity.Property(e => e.CFulfillmentChannel)
                .HasMaxLength(20)
                .HasColumnName("cFulfillmentChannel");
            entity.Property(e => e.CGeschenkverpackungTyp)
                .HasMaxLength(50)
                .HasColumnName("cGeschenkverpackungTyp");
            entity.Property(e => e.CGrusstext)
                .HasMaxLength(255)
                .HasColumnName("cGrusstext");
            entity.Property(e => e.CMerchantOrderItemId)
                .HasMaxLength(50)
                .HasColumnName("cMerchantOrderItemId");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.COrderItemId)
                .HasMaxLength(30)
                .HasColumnName("cOrderItemId");
            entity.Property(e => e.CShipCountry)
                .HasMaxLength(5)
                .HasColumnName("cShipCountry");
            entity.Property(e => e.CTrackingNumber)
                .HasMaxLength(50)
                .HasColumnName("cTrackingNumber");
            entity.Property(e => e.DErrorErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErrorErstellt");
            entity.Property(e => e.DEstimatedArrivalDate)
                .HasColumnType("datetime")
                .HasColumnName("dEstimatedArrivalDate");
            entity.Property(e => e.FGeschenkverpackungKosten)
                .HasDefaultValueSql("((0.0))")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGeschenkverpackungKosten");
            entity.Property(e => e.FItemPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fItemPrice");
            entity.Property(e => e.FItemTax)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fItemTax");
            entity.Property(e => e.FPreisNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPreisNetto");
            entity.Property(e => e.FShippingPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fShippingPrice");
            entity.Property(e => e.FShippingTax)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fShippingTax");
            entity.Property(e => e.KAmazonBestellung).HasColumnName("kAmazonBestellung");
            entity.Property(e => e.KFulfillmentAuftragPos).HasColumnName("kFulfillmentAuftragPos");
            entity.Property(e => e.NCustom).HasColumnName("nCustom");
            entity.Property(e => e.NErrorCode).HasColumnName("nErrorCode");
            entity.Property(e => e.NGeschenk).HasColumnName("nGeschenk");
            entity.Property(e => e.NQuantityPurchased).HasColumnName("nQuantityPurchased");
            entity.Property(e => e.NVersandt).HasColumnName("nVersandt");
        });

        modelBuilder.Entity<PfAmazonBestellungstatus>(entity =>
        {
            entity.HasKey(e => new { e.KMessageId, e.KUser }).HasName("PK_dbo_pf_amazon_bestellungstatus");

            entity.ToTable("pf_amazon_bestellungstatus");

            entity.Property(e => e.KMessageId).HasColumnName("kMessageId");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.COrderId)
                .HasMaxLength(30)
                .HasColumnName("cOrderId");
            entity.Property(e => e.COrderStatus)
                .HasMaxLength(30)
                .HasColumnName("cOrderStatus");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
        });

        modelBuilder.Entity<PfAmazonComboboxImage>(entity =>
        {
            entity.HasKey(e => e.KImage).HasName("PK_dbo_pf_amazon_combobox_image");

            entity.ToTable("pf_amazon_combobox_image");

            entity.Property(e => e.KImage).HasColumnName("kImage");
            entity.Property(e => e.CEnumToString)
                .HasMaxLength(50)
                .HasColumnName("cEnumToString");
            entity.Property(e => e.CPk)
                .HasMaxLength(50)
                .HasColumnName("cPK");
            entity.Property(e => e.CText)
                .HasMaxLength(30)
                .HasColumnName("cText");
            entity.Property(e => e.OImage)
                .HasColumnType("image")
                .HasColumnName("oImage");
        });

        modelBuilder.Entity<PfAmazonDotLiquidMapping>(entity =>
        {
            entity.HasKey(e => e.KDotLiquidMapping).HasName("PK_dbo_pf_amazon_DotLiquidMapping");

            entity.ToTable("pf_amazon_DotLiquidMapping");

            entity.Property(e => e.KDotLiquidMapping).HasColumnName("kDotLiquidMapping");
            entity.Property(e => e.CKey)
                .HasMaxLength(255)
                .HasColumnName("cKey");
            entity.Property(e => e.CValue).HasColumnName("cValue");
            entity.Property(e => e.KGroup).HasColumnName("kGroup");
        });

        modelBuilder.Entity<PfAmazonFbaKommentar>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("pf_amazon_fba_kommentar");

            entity.Property(e => e.CFbakommentar)
                .HasMaxLength(1000)
                .HasColumnName("cFBAKommentar");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.KUser).HasColumnName("kUser");
        });

        modelBuilder.Entity<PfAmazonFeederror>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("pf_amazon_feederror");

            entity.HasIndex(e => e.CSku, "IX_pf_amazon_feederror_cSKU");

            entity.HasIndex(e => e.DErstellt, "IX_pf_amazon_feederror_dErstellt");

            entity.Property(e => e.CAbhilfe)
                .HasMaxLength(255)
                .HasColumnName("cAbhilfe");
            entity.Property(e => e.CErrorMessage).HasColumnName("cErrorMessage");
            entity.Property(e => e.CErrorType)
                .HasMaxLength(20)
                .HasColumnName("cErrorType");
            entity.Property(e => e.CFeedType)
                .HasMaxLength(100)
                .HasColumnName("cFeedType");
            entity.Property(e => e.CSku)
                .HasMaxLength(50)
                .HasColumnName("cSKU");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.NErrorCode).HasColumnName("nErrorCode");
            entity.Property(e => e.NPlattform).HasColumnName("nPlattform");
        });

        modelBuilder.Entity<PfAmazonGroup>(entity =>
        {
            entity.HasKey(e => e.KGroup).HasName("PK_dbo_pf_amazon_group");

            entity.ToTable("pf_amazon_group");

            entity.Property(e => e.KGroup).HasColumnName("kGroup");
            entity.Property(e => e.CName).HasColumnName("cName");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.NAktiv)
                .HasDefaultValueSql("((1))")
                .HasColumnName("nAktiv");
        });

        modelBuilder.Entity<PfAmazonItem>(entity =>
        {
            entity.HasKey(e => e.KItem).HasName("PK_dbo_pf_amazon_Item");

            entity.ToTable("pf_amazon_Item");

            entity.Property(e => e.KItem).HasColumnName("kItem");
            entity.Property(e => e.CErrorHilfeText)
                .HasMaxLength(2000)
                .HasColumnName("cErrorHilfeText");
            entity.Property(e => e.CErrorMessage).HasColumnName("cErrorMessage");
            entity.Property(e => e.CSku)
                .HasMaxLength(60)
                .HasColumnName("cSKU");
            entity.Property(e => e.DErrorErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErrorErstellt");
            entity.Property(e => e.DLastTransmission)
                .HasColumnType("datetime")
                .HasColumnName("dLastTransmission");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KGroup).HasColumnName("kGroup");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.NErrorCode).HasColumnName("nErrorCode");
            entity.Property(e => e.NRemoveBeschreibungsHtml).HasColumnName("nRemoveBeschreibungsHtml");
            entity.Property(e => e.NReplaceLineBreaks)
                .HasDefaultValueSql("((1))")
                .HasColumnName("nReplaceLineBreaks");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<PfAmazonItemMapping>(entity =>
        {
            entity.HasKey(e => e.KItemMapping).HasName("PK_dbo_pf_amazon_ItemMapping");

            entity.ToTable("pf_amazon_ItemMapping");

            entity.HasIndex(e => e.KItem, "JTL_IX_pf_amazon_itemmapping_cKey_external_product_id").HasFilter("([cKey]='external_product_id')");

            entity.HasIndex(e => e.KItem, "JTL_IX_pf_amazon_itemmapping_cKey_external_product_id_type").HasFilter("([cKey]='external_product_id_type')");

            entity.HasIndex(e => e.KItem, "JTL_IX_pf_amazon_itemmapping_cKey_item_sku").HasFilter("([cKey]='item_sku')");

            entity.HasIndex(e => e.KItem, "JTL_IX_pf_amazon_itemmapping_cKey_parent_child").HasFilter("([cKey]='parent_child')");

            entity.HasIndex(e => e.KItem, "JTL_IX_pf_amazon_itemmapping_cKey_parent_sku").HasFilter("([cKey]='parent_sku')");

            entity.HasIndex(e => e.KItem, "JTL_IX_pf_amazon_itemmapping_cKey_standard_price").HasFilter("([cKey]='standard_price')");

            entity.Property(e => e.KItemMapping).HasColumnName("kItemMapping");
            entity.Property(e => e.CKey)
                .HasMaxLength(255)
                .HasColumnName("cKey");
            entity.Property(e => e.CValue).HasColumnName("cValue");
            entity.Property(e => e.KItem).HasColumnName("kItem");
        });

        modelBuilder.Entity<PfAmazonLagerbewegung>(entity =>
        {
            entity.HasKey(e => e.KAmazonLagerbewegung).HasName("PK_dbo_pf_amazon_lagerbewegung");

            entity.ToTable("pf_amazon_lagerbewegung");

            entity.HasIndex(e => e.CFulfillmentCenter, "IX_pf_amazon_lagerbewegung_cFulfillmentCenter");

            entity.HasIndex(e => e.KUser, "IX_pf_amazon_lagerbewegung_kUser_kMessageId");

            entity.Property(e => e.KAmazonLagerbewegung).HasColumnName("kAmazonLagerbewegung");
            entity.Property(e => e.CFulfillmentCenter)
                .HasMaxLength(30)
                .HasColumnName("cFulfillmentCenter");
            entity.Property(e => e.CTransactionType)
                .HasMaxLength(100)
                .HasColumnName("cTransactionType");
            entity.Property(e => e.DSnapshot)
                .HasColumnType("datetime")
                .HasColumnName("dSnapshot");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KMessageId).HasColumnName("kMessageId");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.NMenge).HasColumnName("nMenge");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<PfAmazonLogZuordnen>(entity =>
        {
            entity.HasKey(e => e.DErstellt).HasName("PK_dbo_pf_amazon_log_zuordnen");

            entity.ToTable("pf_amazon_log_zuordnen");

            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.CNachricht)
                .HasMaxLength(255)
                .HasColumnName("cNachricht");
        });

        modelBuilder.Entity<PfAmazonMappingAmazonVariationen>(entity =>
        {
            entity.HasKey(e => e.KMappingAmazonVariationen).HasName("PK_dbo_pf_amazon_Mapping_AmazonVariationen");

            entity.ToTable("pf_amazon_Mapping_AmazonVariationen");

            entity.Property(e => e.KMappingAmazonVariationen).HasColumnName("kMapping_AmazonVariationen");
            entity.Property(e => e.CDisplayName50).HasColumnName("cDisplayName_50");
            entity.Property(e => e.CDisplayName51).HasColumnName("cDisplayName_51");
            entity.Property(e => e.CDisplayName52).HasColumnName("cDisplayName_52");
            entity.Property(e => e.CDisplayName53).HasColumnName("cDisplayName_53");
            entity.Property(e => e.CDisplayName54).HasColumnName("cDisplayName_54");
            entity.Property(e => e.CDisplayName55).HasColumnName("cDisplayName_55");
            entity.Property(e => e.CDisplayName56).HasColumnName("cDisplayName_56");
            entity.Property(e => e.CDisplayName57).HasColumnName("cDisplayName_57");
            entity.Property(e => e.CName).HasColumnName("cName");
        });

        modelBuilder.Entity<PfAmazonMappingItemsToVariationTheme>(entity =>
        {
            entity.HasKey(e => e.KMappingItemsToVariationTheme).HasName("PK_dbo_pf_amazon_Mapping_ItemsToVariationTheme");

            entity.ToTable("pf_amazon_Mapping_ItemsToVariationTheme");

            entity.Property(e => e.KMappingItemsToVariationTheme).HasColumnName("kMapping_ItemsToVariationTheme");
            entity.Property(e => e.KMappingAmazonVariationen).HasColumnName("kMapping_AmazonVariationen");
            entity.Property(e => e.KMappingVariationThemes).HasColumnName("kMapping_VariationThemes");
        });

        modelBuilder.Entity<PfAmazonMappingVariationTheme>(entity =>
        {
            entity.HasKey(e => e.KMappingVariationThemes).HasName("PK_dbo_pf_amazon_Mapping_VariationThemes");

            entity.ToTable("pf_amazon_Mapping_VariationThemes");

            entity.Property(e => e.KMappingVariationThemes).HasColumnName("kMapping_VariationThemes");
            entity.Property(e => e.CName).HasColumnName("cName");
        });

        modelBuilder.Entity<PfAmazonMappingVariationsnaman>(entity =>
        {
            entity.HasKey(e => e.KMappingVariationsnamen).HasName("PK_dbo_pf_amazon_Mapping_Variationsnamen");

            entity.ToTable("pf_amazon_Mapping_Variationsnamen");

            entity.Property(e => e.KMappingVariationsnamen).HasColumnName("kMapping_Variationsnamen");
            entity.Property(e => e.CWawiVariation).HasColumnName("cWawiVariation");
            entity.Property(e => e.KMappingAmazonVariationen).HasColumnName("kMapping_AmazonVariationen");
        });

        modelBuilder.Entity<PfAmazonMappingVariationswerte>(entity =>
        {
            entity.HasKey(e => e.KMappingVariationswerte).HasName("PK_dbo_pf_amazon_Mapping_Variationswerte");

            entity.ToTable("pf_amazon_Mapping_Variationswerte");

            entity.Property(e => e.KMappingVariationswerte).HasColumnName("kMapping_Variationswerte");
            entity.Property(e => e.CAmazonValue).HasColumnName("cAmazonValue");
            entity.Property(e => e.CValue).HasColumnName("cValue");
            entity.Property(e => e.KGroup).HasColumnName("kGroup");
        });

        modelBuilder.Entity<PfAmazonMappingVersandartVersanddienstleister>(entity =>
        {
            entity.HasKey(e => e.KVersandartDienstleisterMapping).HasName("PK_dbo_pf_amazon_mapping_versandart_versanddienstleister");

            entity.ToTable("pf_amazon_mapping_versandart_versanddienstleister");

            entity.Property(e => e.KVersandartDienstleisterMapping).HasColumnName("kVersandartDienstleisterMapping");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KVersandArt).HasColumnName("kVersandArt");
            entity.Property(e => e.KVersanddienstleister).HasColumnName("kVersanddienstleister");
            entity.Property(e => e.NIstAktiv).HasColumnName("nIstAktiv");

            entity.HasOne(d => d.KVersandArtNavigation).WithMany(p => p.PfAmazonMappingVersandartVersanddienstleisters)
                .HasForeignKey(d => d.KVersandArt)
                .HasConstraintName("FK_dbo_pf_amazon_mapping_versandart_versanddienstleister_kVersandArt");

            entity.HasOne(d => d.KVersanddienstleisterNavigation).WithMany(p => p.PfAmazonMappingVersandartVersanddienstleisters)
                .HasForeignKey(d => d.KVersanddienstleister)
                .HasConstraintName("FK_dbo_pf_amazon_mapping_versandart_versanddienstleister_kVersanddienstleister");
        });

        modelBuilder.Entity<PfAmazonPlattform>(entity =>
        {
            entity.HasKey(e => e.KPlattform).HasName("PK_dbo_pf_amazon_plattform");

            entity.ToTable("pf_amazon_plattform");

            entity.Property(e => e.KPlattform)
                .ValueGeneratedNever()
                .HasColumnName("kPlattform");
            entity.Property(e => e.CMarketPlaceId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cMarketPlaceId");
            entity.Property(e => e.NRegion).HasColumnName("nRegion");
        });

        modelBuilder.Entity<PfAmazonQueue>(entity =>
        {
            entity.HasKey(e => e.KAmazonQueue).HasName("PK_dbo_pf_amazon_queue");

            entity.ToTable("pf_amazon_queue");

            entity.HasIndex(e => e.KUser, "IX_pf_amazon_queue_kUser");

            entity.Property(e => e.KAmazonQueue).HasColumnName("kAmazonQueue");
            entity.Property(e => e.CFeed)
                .HasMaxLength(30)
                .HasColumnName("cFeed");
            entity.Property(e => e.CValue).HasColumnName("cValue");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DGesendet)
                .HasColumnType("datetime")
                .HasColumnName("dGesendet");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.NKey).HasColumnName("nKey");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<PfAmazonRepricehistory>(entity =>
        {
            entity.HasKey(e => e.KMessage).HasName("PK_dbo_pf_amazon_repricehistory");

            entity.ToTable("pf_amazon_repricehistory");

            entity.Property(e => e.KMessage)
                .ValueGeneratedNever()
                .HasColumnName("kMessage");
            entity.Property(e => e.CSellerSku)
                .HasMaxLength(255)
                .HasColumnName("cSellerSKU");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.FPreisAlt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPreisAlt");
            entity.Property(e => e.FPreisNeu)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPreisNeu");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.NPlattform).HasColumnName("nPlattform");
        });

        modelBuilder.Entity<PfAmazonRetourmeldung>(entity =>
        {
            entity.HasKey(e => e.KAmazonRetourMeldung).HasName("PK_dbo_pf_amazon_retourmeldung");

            entity.ToTable("pf_amazon_retourmeldung");

            entity.HasIndex(e => e.DBearbeitet, "IX_dBearbeitet");

            entity.Property(e => e.KAmazonRetourMeldung)
                .ValueGeneratedNever()
                .HasColumnName("kAmazonRetourMeldung");
            entity.Property(e => e.CAdjustmentReason)
                .HasMaxLength(100)
                .HasColumnName("cAdjustmentReason");
            entity.Property(e => e.CCancelReason)
                .HasMaxLength(100)
                .HasColumnName("cCancelReason");
            entity.Property(e => e.COrderId)
                .HasMaxLength(30)
                .HasColumnName("cOrderID");
            entity.Property(e => e.COrderItemId)
                .HasMaxLength(30)
                .HasColumnName("cOrderItemId");
            entity.Property(e => e.DBearbeitet)
                .HasColumnType("datetime")
                .HasColumnName("dBearbeitet");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
        });

        modelBuilder.Entity<PfAmazonRetourmeldungadjustment>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("pf_amazon_retourmeldungadjustment");

            entity.HasIndex(e => e.KAmazonRetourMeldung, "IX_kAmazonRetourMeldung");

            entity.Property(e => e.CCurrency)
                .HasMaxLength(3)
                .HasColumnName("cCurrency");
            entity.Property(e => e.CItemPriceAdjustmentType)
                .HasMaxLength(10)
                .HasColumnName("cItemPriceAdjustmentType");
            entity.Property(e => e.CPromotionClaimCode)
                .HasMaxLength(100)
                .HasColumnName("cPromotionClaimCode");
            entity.Property(e => e.FAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAmount");
            entity.Property(e => e.KAmazonRetourMeldung).HasColumnName("kAmazonRetourMeldung");
        });

        modelBuilder.Entity<PfAmazonRetourpo>(entity =>
        {
            entity.HasKey(e => e.KAmazonRetourPos).HasName("PK_dbo_pf_amazon_retourpos");

            entity.ToTable("pf_amazon_retourpos");

            entity.HasIndex(e => new { e.CSellerSku, e.COrderId }, "IX_pf_amazon_retourpos_cSellerSKU_cOrderID");

            entity.HasIndex(e => e.KUser, "IX_pf_amazon_retourpos_kUser_kMessageId");

            entity.Property(e => e.KAmazonRetourPos).HasColumnName("kAmazonRetourPos");
            entity.Property(e => e.CArtikelname)
                .HasMaxLength(255)
                .HasColumnName("cArtikelname");
            entity.Property(e => e.CArtikelzustand)
                .HasMaxLength(50)
                .HasColumnName("cArtikelzustand");
            entity.Property(e => e.CAsin)
                .HasMaxLength(30)
                .HasColumnName("cASIN");
            entity.Property(e => e.CFehler)
                .HasMaxLength(4000)
                .HasColumnName("cFehler");
            entity.Property(e => e.CFremdSku)
                .HasMaxLength(100)
                .HasColumnName("cFremdSKU");
            entity.Property(e => e.CFulfillmentCenter)
                .HasMaxLength(30)
                .HasColumnName("cFulfillmentCenter");
            entity.Property(e => e.CFulfillmentId)
                .HasMaxLength(20)
                .HasColumnName("cFulfillmentId");
            entity.Property(e => e.CKundenkommentar)
                .HasMaxLength(255)
                .HasColumnName("cKundenkommentar");
            entity.Property(e => e.CLicencePlateNumber)
                .HasMaxLength(50)
                .HasColumnName("cLicencePlateNumber");
            entity.Property(e => e.COrderId)
                .HasMaxLength(30)
                .HasColumnName("cOrderId");
            entity.Property(e => e.COrderItemCode)
                .HasMaxLength(30)
                .HasColumnName("cOrderItemCode");
            entity.Property(e => e.CRueckgabegrund)
                .HasMaxLength(50)
                .HasColumnName("cRueckgabegrund");
            entity.Property(e => e.CSellerSku)
                .HasMaxLength(100)
                .HasColumnName("cSellerSKU");
            entity.Property(e => e.DEingelesen)
                .HasColumnType("datetime")
                .HasColumnName("dEingelesen");
            entity.Property(e => e.DRetourzeit)
                .HasColumnType("datetime")
                .HasColumnName("dRetourzeit");
            entity.Property(e => e.FAmountPerItem)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAmountPerItem");
            entity.Property(e => e.KAmazonBestellung).HasColumnName("kAmazonBestellung");
            entity.Property(e => e.KMessageId).HasColumnName("kMessageId");
            entity.Property(e => e.KSettlementPos).HasColumnName("kSettlementPos");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.NGutschriftStatus).HasColumnName("nGutschriftStatus");
            entity.Property(e => e.NMenge).HasColumnName("nMenge");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<PfAmazonSettlement>(entity =>
        {
            entity.HasKey(e => e.KMessageId).HasName("PK_dbo_pf_amazon_settlement");

            entity.ToTable("pf_amazon_settlement");

            entity.HasIndex(e => e.SettlementId, "IX_pf_amazon_settlement_SettlementID");

            entity.Property(e => e.KMessageId)
                .ValueGeneratedNever()
                .HasColumnName("kMessageId");
            entity.Property(e => e.Currency).HasMaxLength(10);
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DepositDate).HasColumnType("datetime");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.ReportId).HasColumnName("ReportID");
            entity.Property(e => e.SettlementEndDate).HasColumnType("datetime");
            entity.Property(e => e.SettlementId).HasColumnName("SettlementID");
            entity.Property(e => e.SettlementStartDate).HasColumnType("datetime");
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(25, 13)");
        });

        modelBuilder.Entity<PfAmazonSettlementpo>(entity =>
        {
            entity.HasKey(e => e.KMessageId).HasName("PK_dbo_pf_amazon_settlementpos");

            entity.ToTable("pf_amazon_settlementpos");

            entity.HasIndex(e => e.OrderId, "IX_pf_amazon_settlementpos_OrderID");

            entity.HasIndex(e => e.OrderItemCode, "IX_pf_amazon_settlementpos_OrderItemCode");

            entity.HasIndex(e => e.Sku, "IX_pf_amazon_settlementpos_SKUD");

            entity.HasIndex(e => e.SettlementId, "IX_pf_amazon_settlementpos_SettlementID");

            entity.Property(e => e.KMessageId)
                .ValueGeneratedNever()
                .HasColumnName("kMessageId");
            entity.Property(e => e.AdjustmentId)
                .HasMaxLength(100)
                .HasColumnName("AdjustmentID");
            entity.Property(e => e.Amount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.AmountDescription).HasMaxLength(50);
            entity.Property(e => e.AmountType).HasMaxLength(30);
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.FulfillmentId)
                .HasMaxLength(20)
                .HasColumnName("FulfillmentID");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.MarketplaceName).HasMaxLength(20);
            entity.Property(e => e.MerchantOrderId)
                .HasMaxLength(50)
                .HasColumnName("MerchantOrderID");
            entity.Property(e => e.MerchantOrderItemId)
                .HasMaxLength(50)
                .HasColumnName("MerchantOrderItemID");
            entity.Property(e => e.OrderId)
                .HasMaxLength(30)
                .HasColumnName("OrderID");
            entity.Property(e => e.OrderItemCode).HasMaxLength(30);
            entity.Property(e => e.PostedDateTime).HasColumnType("datetime");
            entity.Property(e => e.PromotionId)
                .HasMaxLength(30)
                .HasColumnName("PromotionID");
            entity.Property(e => e.SettlementId).HasColumnName("SettlementID");
            entity.Property(e => e.ShipmentId)
                .HasMaxLength(20)
                .HasColumnName("ShipmentID");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.TransactionType).HasMaxLength(30);
        });

        modelBuilder.Entity<PfAmazonSteuercode>(entity =>
        {
            entity.HasKey(e => e.KSteuercode).HasName("PK_dbo_pf_amazon_Steuercodes");

            entity.ToTable("pf_amazon_Steuercodes");

            entity.Property(e => e.KSteuercode)
                .ValueGeneratedNever()
                .HasColumnName("kSteuercode");
            entity.Property(e => e.CName)
                .HasMaxLength(40)
                .HasColumnName("cName");
        });

        modelBuilder.Entity<PfAmazonUmlagerungVersendet>(entity =>
        {
            entity.HasKey(e => e.KAmazonUmlagerungVersendet).HasName("PK_dbo_pf_amazon_umlagerung_versendet");

            entity.ToTable("pf_amazon_umlagerung_versendet");

            entity.Property(e => e.KAmazonUmlagerungVersendet).HasColumnName("kAmazonUmlagerungVersendet");
            entity.Property(e => e.CCarrier)
                .HasMaxLength(250)
                .HasColumnName("cCarrier");
            entity.Property(e => e.CShipmentId)
                .HasMaxLength(250)
                .HasColumnName("cShipmentId");
            entity.Property(e => e.DBearbeitet)
                .HasColumnType("datetime")
                .HasColumnName("dBearbeitet");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.NIsPartnered).HasColumnName("nIsPartnered");

            entity.HasOne(d => d.KAuftragNavigation).WithMany(p => p.PfAmazonUmlagerungVersendets)
                .HasForeignKey(d => d.KAuftrag)
                .HasConstraintName("FK_dbo_pf_amazon_umlagerung_versendet_kBestellung");
        });

        modelBuilder.Entity<PfAmazonUmlagerungVersendetPo>(entity =>
        {
            entity.HasKey(e => e.KAmazonUmlagerungVersendetPos).HasName("PK_dbo_pf_amazon_umlagerung_versendet_pos");

            entity.ToTable("pf_amazon_umlagerung_versendet_pos");

            entity.Property(e => e.KAmazonUmlagerungVersendetPos).HasColumnName("kAmazonUmlagerungVersendetPos");
            entity.Property(e => e.CTrackingId)
                .HasMaxLength(250)
                .HasColumnName("cTrackingId");
            entity.Property(e => e.FHeight)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fHeight");
            entity.Property(e => e.FLength)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLength");
            entity.Property(e => e.FWeight)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWeight");
            entity.Property(e => e.FWidth)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWidth");
            entity.Property(e => e.KAmazonUmlagerungVersendet).HasColumnName("kAmazonUmlagerungVersendet");
            entity.Property(e => e.NDimensionUnit).HasColumnName("nDimensionUnit");
            entity.Property(e => e.NWeightUnit).HasColumnName("nWeightUnit");

            entity.HasOne(d => d.KAmazonUmlagerungVersendetNavigation).WithMany(p => p.PfAmazonUmlagerungVersendetPos)
                .HasForeignKey(d => d.KAmazonUmlagerungVersendet)
                .HasConstraintName("FK_dbo_pf_amazon_umlagerung_versendet_pos_kAmazonUmlagerungVersendetPos");
        });

        modelBuilder.Entity<PfAmazonValidation>(entity =>
        {
            entity.HasKey(e => e.CName).HasName("PK_dbo_pf_amazon_validation");

            entity.ToTable("pf_amazon_validation");

            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.ArraySize).HasColumnName("arraySize");
            entity.Property(e => e.CPattern)
                .HasMaxLength(255)
                .HasColumnName("cPattern");
            entity.Property(e => e.CType)
                .HasMaxLength(255)
                .HasColumnName("cType");
            entity.Property(e => e.MaxLength).HasColumnName("maxLength");
            entity.Property(e => e.MaxOccurs).HasColumnName("maxOccurs");
            entity.Property(e => e.MinLength).HasColumnName("minLength");
            entity.Property(e => e.MinOccurs).HasColumnName("minOccurs");
        });

        modelBuilder.Entity<PfAmazonVc>(entity =>
        {
            entity.HasKey(e => e.KMessageId).HasName("PK_dbo_pf_amazon_vcs");

            entity.ToTable("pf_amazon_vcs");

            entity.HasIndex(e => new { e.KUser, e.TransactionId, e.Asin, e.Sku, e.ShipmentId }, "IX_pf_amazon_vcs_kUser_TransactionID_ASIN_SKU_ShipmentID");

            entity.Property(e => e.KMessageId)
                .ValueGeneratedNever()
                .HasColumnName("kMessageId");
            entity.Property(e => e.Asin)
                .HasMaxLength(30)
                .HasColumnName("ASIN");
            entity.Property(e => e.BuyerEinvoiceAccountId)
                .HasMaxLength(30)
                .HasColumnName("BuyerEInvoiceAccountId");
            entity.Property(e => e.BuyerTaxRegistration).HasMaxLength(30);
            entity.Property(e => e.BuyerTaxRegistrationJurisdiction).HasMaxLength(20);
            entity.Property(e => e.BuyerTaxRegistrationType).HasMaxLength(30);
            entity.Property(e => e.ConvertedTaxAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Currency).HasMaxLength(10);
            entity.Property(e => e.DCreatedAtUtc)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("dCreatedAtUtc");
            entity.Property(e => e.DProcessedAtUtc)
                .HasColumnType("datetime")
                .HasColumnName("dProcessedAtUtc");
            entity.Property(e => e.DStatusUpdatedAtUtc)
                .HasColumnType("datetime")
                .HasColumnName("dStatusUpdatedAtUtc");
            entity.Property(e => e.DUpdatedAtUtc)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("dUpdatedAtUtc");
            entity.Property(e => e.EinvoiceUrl)
                .HasMaxLength(500)
                .HasColumnName("EInvoiceUrl");
            entity.Property(e => e.ExportOutsideEu)
                .HasMaxLength(20)
                .HasColumnName("ExportOutsideEU");
            entity.Property(e => e.GiftwraptaxAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("GIFTWRAPTaxAmount");
            entity.Property(e => e.GiftwraptaxAmountPromo)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("GIFTWRAPTaxAmountPromo");
            entity.Property(e => e.GiftwraptaxExclusivePromoAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("GIFTWRAPTaxExclusivePromoAmount");
            entity.Property(e => e.GiftwraptaxExclusiveSellingPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("GIFTWRAPTaxExclusiveSellingPrice");
            entity.Property(e => e.GiftwraptaxInclusivePromoAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("GIFTWRAPTaxInclusivePromoAmount");
            entity.Property(e => e.GiftwraptaxInclusiveSellingPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("GIFTWRAPTaxInclusiveSellingPrice");
            entity.Property(e => e.InvoiceLevelCurrencyCode).HasMaxLength(20);
            entity.Property(e => e.InvoiceLevelExchangeRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.InvoiceLevelExchangeRateDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceUrl).HasMaxLength(500);
            entity.Property(e => e.IsAmazonInvoiced)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.JurisdictionLevel).HasMaxLength(30);
            entity.Property(e => e.JurisdictionName).HasMaxLength(80);
            entity.Property(e => e.KAmazonBestellungPos).HasColumnName("kAmazonBestellungPos");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.MarketplaceId)
                .HasMaxLength(20)
                .HasColumnName("MarketplaceID");
            entity.Property(e => e.MerchantId)
                .HasMaxLength(50)
                .HasColumnName("MerchantID");
            entity.Property(e => e.NInProgress).HasColumnName("nInProgress");
            entity.Property(e => e.NProcessed).HasColumnName("nProcessed");
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.OrderId)
                .HasMaxLength(30)
                .HasColumnName("OrderID");
            entity.Property(e => e.OriginalVatinvoiceNumber)
                .HasMaxLength(100)
                .HasColumnName("OriginalVATInvoiceNumber");
            entity.Property(e => e.OurPricetaxAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("OUR_PRICETaxAmount");
            entity.Property(e => e.OurPricetaxAmountPromo)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("OUR_PRICETaxAmountPromo");
            entity.Property(e => e.OurPricetaxExclusivePromoAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("OUR_PRICETaxExclusivePromoAmount");
            entity.Property(e => e.OurPricetaxExclusiveSellingPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("OUR_PRICETaxExclusiveSellingPrice");
            entity.Property(e => e.OurPricetaxInclusivePromoAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("OUR_PRICETaxInclusivePromoAmount");
            entity.Property(e => e.OurPricetaxInclusiveSellingPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("OUR_PRICETaxInclusiveSellingPrice");
            entity.Property(e => e.ProductTaxCode).HasMaxLength(30);
            entity.Property(e => e.ReturnFcCountry).HasMaxLength(10);
            entity.Property(e => e.SdiinvoiceDeliveryStatus)
                .HasMaxLength(100)
                .HasColumnName("SDIInvoiceDeliveryStatus");
            entity.Property(e => e.SdiinvoiceErrorCode)
                .HasMaxLength(30)
                .HasColumnName("SDIInvoiceErrorCode");
            entity.Property(e => e.SdiinvoiceErrorDescription).HasColumnName("SDIInvoiceErrorDescription");
            entity.Property(e => e.SdiinvoiceStatusLastUpdatedDate)
                .HasColumnType("datetime")
                .HasColumnName("SDIInvoiceStatusLastUpdatedDate");
            entity.Property(e => e.SellerTaxRegistration).HasMaxLength(30);
            entity.Property(e => e.SellerTaxRegistrationJurisdiction).HasMaxLength(20);
            entity.Property(e => e.ShipFromCity).HasMaxLength(300);
            entity.Property(e => e.ShipFromCountry).HasMaxLength(10);
            entity.Property(e => e.ShipFromPostalCode).HasMaxLength(30);
            entity.Property(e => e.ShipFromState).HasMaxLength(100);
            entity.Property(e => e.ShipFromTaxLocationCode).HasMaxLength(30);
            entity.Property(e => e.ShipToCity).HasMaxLength(300);
            entity.Property(e => e.ShipToCountry).HasMaxLength(10);
            entity.Property(e => e.ShipToLocationCode).HasMaxLength(30);
            entity.Property(e => e.ShipToPostalCode).HasMaxLength(30);
            entity.Property(e => e.ShipToState).HasMaxLength(100);
            entity.Property(e => e.ShipmentDate).HasColumnType("datetime");
            entity.Property(e => e.ShipmentId)
                .HasMaxLength(30)
                .HasColumnName("ShipmentID");
            entity.Property(e => e.ShippingtaxAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SHIPPINGTaxAmount");
            entity.Property(e => e.ShippingtaxAmountPromo)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SHIPPINGTaxAmountPromo");
            entity.Property(e => e.ShippingtaxExclusivePromoAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SHIPPINGTaxExclusivePromoAmount");
            entity.Property(e => e.ShippingtaxExclusiveSellingPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SHIPPINGTaxExclusiveSellingPrice");
            entity.Property(e => e.ShippingtaxInclusivePromoAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SHIPPINGTaxInclusivePromoAmount");
            entity.Property(e => e.ShippingtaxInclusiveSellingPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SHIPPINGTaxInclusiveSellingPrice");
            entity.Property(e => e.Sku)
                .HasMaxLength(100)
                .HasColumnName("SKU");
            entity.Property(e => e.TaxAddressRole).HasMaxLength(30);
            entity.Property(e => e.TaxCalculationDate).HasColumnType("datetime");
            entity.Property(e => e.TaxCalculationReasonCode).HasMaxLength(30);
            entity.Property(e => e.TaxCollectionResponsibility).HasMaxLength(30);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.TaxReportingScheme).HasMaxLength(30);
            entity.Property(e => e.TaxType).HasMaxLength(30);
            entity.Property(e => e.TransactionId)
                .HasMaxLength(30)
                .HasColumnName("TransactionID");
            entity.Property(e => e.TransactionType).HasMaxLength(50);
            entity.Property(e => e.VatinvoiceNumber)
                .HasMaxLength(100)
                .HasColumnName("VATInvoiceNumber");
        });

        modelBuilder.Entity<PfAmazonVcsHistory>(entity =>
        {
            entity.HasKey(e => e.KMessageId).HasName("PK_dbo_pf_amazon_vcs_history");

            entity.ToTable("pf_amazon_vcs_history");

            entity.HasIndex(e => e.OrderId, "IX_pf_amazon_vcs_history_OrderId_INCL");

            entity.Property(e => e.KMessageId)
                .ValueGeneratedNever()
                .HasColumnName("kMessageId");
            entity.Property(e => e.Asin)
                .HasMaxLength(30)
                .HasColumnName("ASIN");
            entity.Property(e => e.BuyerEinvoiceAccountId)
                .HasMaxLength(30)
                .HasColumnName("BuyerEInvoiceAccountId");
            entity.Property(e => e.BuyerTaxRegistration).HasMaxLength(30);
            entity.Property(e => e.BuyerTaxRegistrationJurisdiction).HasMaxLength(20);
            entity.Property(e => e.BuyerTaxRegistrationType).HasMaxLength(30);
            entity.Property(e => e.ConvertedTaxAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Currency).HasMaxLength(10);
            entity.Property(e => e.DCreatedAtUtc)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("dCreatedAtUtc");
            entity.Property(e => e.DProcessedAtUtc)
                .HasColumnType("datetime")
                .HasColumnName("dProcessedAtUtc");
            entity.Property(e => e.DStatusUpdatedAtUtc)
                .HasColumnType("datetime")
                .HasColumnName("dStatusUpdatedAtUtc");
            entity.Property(e => e.DUpdatedAtUtc)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("dUpdatedAtUtc");
            entity.Property(e => e.EinvoiceUrl)
                .HasMaxLength(500)
                .HasColumnName("EInvoiceUrl");
            entity.Property(e => e.ExportOutsideEu)
                .HasMaxLength(20)
                .HasColumnName("ExportOutsideEU");
            entity.Property(e => e.GiftwraptaxAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("GIFTWRAPTaxAmount");
            entity.Property(e => e.GiftwraptaxAmountPromo)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("GIFTWRAPTaxAmountPromo");
            entity.Property(e => e.GiftwraptaxExclusivePromoAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("GIFTWRAPTaxExclusivePromoAmount");
            entity.Property(e => e.GiftwraptaxExclusiveSellingPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("GIFTWRAPTaxExclusiveSellingPrice");
            entity.Property(e => e.GiftwraptaxInclusivePromoAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("GIFTWRAPTaxInclusivePromoAmount");
            entity.Property(e => e.GiftwraptaxInclusiveSellingPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("GIFTWRAPTaxInclusiveSellingPrice");
            entity.Property(e => e.InvoiceLevelCurrencyCode).HasMaxLength(20);
            entity.Property(e => e.InvoiceLevelExchangeRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.InvoiceLevelExchangeRateDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceUrl).HasMaxLength(500);
            entity.Property(e => e.IsAmazonInvoiced)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.JurisdictionLevel).HasMaxLength(30);
            entity.Property(e => e.JurisdictionName).HasMaxLength(80);
            entity.Property(e => e.KAmazonBestellungPos).HasColumnName("kAmazonBestellungPos");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.MarketplaceId)
                .HasMaxLength(20)
                .HasColumnName("MarketplaceID");
            entity.Property(e => e.MerchantId)
                .HasMaxLength(50)
                .HasColumnName("MerchantID");
            entity.Property(e => e.NInProgress).HasColumnName("nInProgress");
            entity.Property(e => e.NProcessed)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("nProcessed");
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.OrderId)
                .HasMaxLength(30)
                .HasColumnName("OrderID");
            entity.Property(e => e.OriginalVatinvoiceNumber)
                .HasMaxLength(100)
                .HasColumnName("OriginalVATInvoiceNumber");
            entity.Property(e => e.OurPricetaxAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("OUR_PRICETaxAmount");
            entity.Property(e => e.OurPricetaxAmountPromo)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("OUR_PRICETaxAmountPromo");
            entity.Property(e => e.OurPricetaxExclusivePromoAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("OUR_PRICETaxExclusivePromoAmount");
            entity.Property(e => e.OurPricetaxExclusiveSellingPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("OUR_PRICETaxExclusiveSellingPrice");
            entity.Property(e => e.OurPricetaxInclusivePromoAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("OUR_PRICETaxInclusivePromoAmount");
            entity.Property(e => e.OurPricetaxInclusiveSellingPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("OUR_PRICETaxInclusiveSellingPrice");
            entity.Property(e => e.ProductTaxCode).HasMaxLength(30);
            entity.Property(e => e.ReturnFcCountry).HasMaxLength(10);
            entity.Property(e => e.SdiinvoiceDeliveryStatus)
                .HasMaxLength(100)
                .HasColumnName("SDIInvoiceDeliveryStatus");
            entity.Property(e => e.SdiinvoiceErrorCode)
                .HasMaxLength(30)
                .HasColumnName("SDIInvoiceErrorCode");
            entity.Property(e => e.SdiinvoiceErrorDescription).HasColumnName("SDIInvoiceErrorDescription");
            entity.Property(e => e.SdiinvoiceStatusLastUpdatedDate)
                .HasColumnType("datetime")
                .HasColumnName("SDIInvoiceStatusLastUpdatedDate");
            entity.Property(e => e.SellerTaxRegistration).HasMaxLength(30);
            entity.Property(e => e.SellerTaxRegistrationJurisdiction).HasMaxLength(20);
            entity.Property(e => e.ShipFromCity).HasMaxLength(300);
            entity.Property(e => e.ShipFromCountry).HasMaxLength(10);
            entity.Property(e => e.ShipFromPostalCode).HasMaxLength(30);
            entity.Property(e => e.ShipFromState).HasMaxLength(100);
            entity.Property(e => e.ShipFromTaxLocationCode).HasMaxLength(30);
            entity.Property(e => e.ShipToCity).HasMaxLength(300);
            entity.Property(e => e.ShipToCountry).HasMaxLength(10);
            entity.Property(e => e.ShipToLocationCode).HasMaxLength(30);
            entity.Property(e => e.ShipToPostalCode).HasMaxLength(30);
            entity.Property(e => e.ShipToState).HasMaxLength(100);
            entity.Property(e => e.ShipmentDate).HasColumnType("datetime");
            entity.Property(e => e.ShipmentId)
                .HasMaxLength(30)
                .HasColumnName("ShipmentID");
            entity.Property(e => e.ShippingtaxAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SHIPPINGTaxAmount");
            entity.Property(e => e.ShippingtaxAmountPromo)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SHIPPINGTaxAmountPromo");
            entity.Property(e => e.ShippingtaxExclusivePromoAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SHIPPINGTaxExclusivePromoAmount");
            entity.Property(e => e.ShippingtaxExclusiveSellingPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SHIPPINGTaxExclusiveSellingPrice");
            entity.Property(e => e.ShippingtaxInclusivePromoAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SHIPPINGTaxInclusivePromoAmount");
            entity.Property(e => e.ShippingtaxInclusiveSellingPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SHIPPINGTaxInclusiveSellingPrice");
            entity.Property(e => e.Sku)
                .HasMaxLength(100)
                .HasColumnName("SKU");
            entity.Property(e => e.TaxAddressRole).HasMaxLength(30);
            entity.Property(e => e.TaxCalculationDate).HasColumnType("datetime");
            entity.Property(e => e.TaxCalculationReasonCode).HasMaxLength(30);
            entity.Property(e => e.TaxCollectionResponsibility).HasMaxLength(30);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.TaxReportingScheme).HasMaxLength(30);
            entity.Property(e => e.TaxType).HasMaxLength(30);
            entity.Property(e => e.TransactionId)
                .HasMaxLength(30)
                .HasColumnName("TransactionID");
            entity.Property(e => e.TransactionType).HasMaxLength(50);
            entity.Property(e => e.VatinvoiceNumber)
                .HasMaxLength(100)
                .HasColumnName("VATInvoiceNumber");
        });

        modelBuilder.Entity<PfAmazonVersanddienstleister>(entity =>
        {
            entity.HasKey(e => e.KVersanddienstleister).HasName("PK_dbo_pf_amazon_versanddienstleister");

            entity.ToTable("pf_amazon_versanddienstleister");

            entity.Property(e => e.KVersanddienstleister).HasColumnName("kVersanddienstleister");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
        });

        modelBuilder.Entity<PfAmazonVersandgruppen>(entity =>
        {
            entity.HasKey(e => e.KAmazonVersandgruppe).HasName("PK_dbo_pf_amazon_versandgruppen");

            entity.ToTable("pf_amazon_versandgruppen");

            entity.Property(e => e.KAmazonVersandgruppe).HasColumnName("kAmazonVersandgruppe");
            entity.Property(e => e.CName)
                .HasMaxLength(50)
                .HasColumnName("cName");
            entity.Property(e => e.KUser).HasColumnName("kUser");
        });

        modelBuilder.Entity<PfAmazonXmlKat>(entity =>
        {
            entity.HasKey(e => e.KId).HasName("PK_dbo_pf_amazon_xml_kat");

            entity.ToTable("pf_amazon_xml_kat");

            entity.Property(e => e.KId)
                .ValueGeneratedNever()
                .HasColumnName("kID");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KBrowseNode)
                .HasMaxLength(255)
                .HasColumnName("kBrowseNode");
            entity.Property(e => e.KIdparent).HasColumnName("kIDParent");
            entity.Property(e => e.NEbene).HasColumnName("nEbene");
            entity.Property(e => e.NPlattform).HasColumnName("nPlattform");
        });

        modelBuilder.Entity<PfAmazonXmlTran>(entity =>
        {
            entity.HasKey(e => e.CName).HasName("PK_dbo_pf_amazon_xml_trans");

            entity.ToTable("pf_amazon_xml_trans");

            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CEnglish)
                .HasMaxLength(255)
                .HasColumnName("cEnglish");
            entity.Property(e => e.CFrench)
                .HasMaxLength(255)
                .HasColumnName("cFrench");
            entity.Property(e => e.CGerman)
                .HasMaxLength(255)
                .HasColumnName("cGerman");
            entity.Property(e => e.CItalian)
                .HasMaxLength(255)
                .HasColumnName("cItalian");
        });

        modelBuilder.Entity<PfAmazonXmlVersion>(entity =>
        {
            entity.HasKey(e => e.NVersion).HasName("PK_dbo_pf_amazon_xml_version");

            entity.ToTable("pf_amazon_xml_version");

            entity.Property(e => e.NVersion)
                .ValueGeneratedNever()
                .HasColumnName("nVersion");
            entity.Property(e => e.NSqlkorrekt).HasColumnName("nSQLKorrekt");
        });

        modelBuilder.Entity<PfBestellposVater>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("pf_bestellpos_vater");

            entity.HasIndex(e => e.KBestellPos, "IX_pf_bestellpos_vater_kBestellPos");

            entity.Property(e => e.CSellerSku)
                .HasMaxLength(100)
                .HasColumnName("cSellerSKU");
            entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");
        });

        modelBuilder.Entity<PfListviewColor>(entity =>
        {
            entity.HasKey(e => new { e.NColorId, e.NSubColorId, e.NListViewId }).HasName("PK_dbo_pf_listview_colors");

            entity.ToTable("pf_listview_colors");

            entity.Property(e => e.NColorId).HasColumnName("nColorId");
            entity.Property(e => e.NSubColorId).HasColumnName("nSubColorId");
            entity.Property(e => e.NListViewId).HasColumnName("nListViewId");
            entity.Property(e => e.CRgb)
                .HasMaxLength(255)
                .HasColumnName("cRGB");
        });

        modelBuilder.Entity<PfLogbuch>(entity =>
        {
            entity.HasKey(e => e.KLogbuch).HasName("PK_dbo_pf_logbuch");

            entity.ToTable("pf_logbuch");

            entity.HasIndex(e => new { e.KPlattform, e.CKategorie, e.DZeit }, "IX_pf_logbuch_kPlattform_cKategorie_dZeit");

            entity.Property(e => e.KLogbuch).HasColumnName("kLogbuch");
            entity.Property(e => e.CBetreff)
                .HasMaxLength(255)
                .HasColumnName("cBetreff");
            entity.Property(e => e.CKategorie)
                .HasMaxLength(30)
                .HasColumnName("cKategorie");
            entity.Property(e => e.CLog).HasColumnName("cLog");
            entity.Property(e => e.DZeit)
                .HasColumnType("datetime")
                .HasColumnName("dZeit");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KUser).HasColumnName("kUser");
        });

        modelBuilder.Entity<PfLveinstellungen>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("pf_LVEinstellungen");

            entity.HasIndex(e => new { e.NListViewId, e.KBenutzer }, "IX_pf_LVEinstellungen_nListViewID_kBenutzer");

            entity.Property(e => e.CCustomName)
                .HasMaxLength(255)
                .HasColumnName("cCustomName");
            entity.Property(e => e.COriginalName)
                .HasMaxLength(255)
                .HasColumnName("cOriginalName");
            entity.Property(e => e.CRechnername)
                .HasMaxLength(255)
                .HasColumnName("cRechnername");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBenutzerAdmin).HasColumnName("kBenutzerAdmin");
            entity.Property(e => e.NHeaderId).HasColumnName("nHeaderID");
            entity.Property(e => e.NListViewId).HasColumnName("nListViewID");
            entity.Property(e => e.NOrderBy).HasColumnName("nOrderBy");
            entity.Property(e => e.NSize).HasColumnName("nSize");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<PfLvsummary>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("pf_LVSummary");

            entity.Property(e => e.CRechnername)
                .HasMaxLength(255)
                .HasColumnName("cRechnername");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.NListViewId).HasColumnName("nListViewID");
            entity.Property(e => e.NSummaryId).HasColumnName("nSummaryID");
        });

        modelBuilder.Entity<PfSynccheckboxen>(entity =>
        {
            entity.HasKey(e => e.KSyncCheckbox).HasName("PK_dbo_pf_synccheckboxen");

            entity.ToTable("pf_synccheckboxen");

            entity.Property(e => e.KSyncCheckbox)
                .ValueGeneratedNever()
                .HasColumnName("kSyncCheckbox");
            entity.Property(e => e.CBeschreibung)
                .HasMaxLength(255)
                .HasColumnName("cBeschreibung");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
        });

        modelBuilder.Entity<PfUser>(entity =>
        {
            entity.HasKey(e => e.KUser).HasName("PK_dbo_pf_user");

            entity.ToTable("pf_user");

            entity.HasIndex(e => e.CId1, "UQ_dbo_pf_user_cId1").IsUnique();

            entity.Property(e => e.KUser)
                .ValueGeneratedNever()
                .HasColumnName("kUser");
            entity.Property(e => e.CAmazonAuthToken)
                .HasMaxLength(255)
                .HasColumnName("cAmazonAuthToken");
            entity.Property(e => e.CAmazonCustomDataPath)
                .HasMaxLength(255)
                .HasColumnName("cAmazonCustomDataPath");
            entity.Property(e => e.CAnmerkung)
                .HasMaxLength(255)
                .HasColumnName("cAnmerkung");
            entity.Property(e => e.CAuthToken)
                .HasMaxLength(255)
                .HasColumnName("cAuthToken");
            entity.Property(e => e.CFbakommentar)
                .HasMaxLength(1000)
                .HasColumnName("cFBAKommentar");
            entity.Property(e => e.CFbaversandmailKopie)
                .HasMaxLength(100)
                .HasColumnName("cFBAVersandmailKopie");
            entity.Property(e => e.CId1)
                .HasMaxLength(255)
                .HasColumnName("cId1");
            entity.Property(e => e.CId2)
                .HasMaxLength(255)
                .HasColumnName("cId2");
            entity.Property(e => e.CId3)
                .HasMaxLength(255)
                .HasColumnName("cId3");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CRegion)
                .HasMaxLength(2)
                .HasColumnName("cRegion");
            entity.Property(e => e.CVersandName)
                .HasMaxLength(255)
                .HasColumnName("cVersandName");
            entity.Property(e => e.DInventardaten)
                .HasColumnType("datetime")
                .HasColumnName("dInventardaten");
            entity.Property(e => e.DInventardatenFba)
                .HasColumnType("datetime")
                .HasColumnName("dInventardatenFBA");
            entity.Property(e => e.DRepricingFull)
                .HasColumnType("datetime")
                .HasColumnName("dRepricingFull");
            entity.Property(e => e.DStartVcs)
                .HasColumnType("datetime")
                .HasColumnName("dStartVCS");
            entity.Property(e => e.DTrailPeriodEndAt)
                .HasColumnType("datetime")
                .HasColumnName("dTrailPeriodEndAt");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KColorB2border).HasColumnName("kColorB2BOrder");
            entity.Property(e => e.KColorCustomOrder).HasColumnName("kColorCustomOrder");
            entity.Property(e => e.KColorFbaAndB2border).HasColumnName("kColorFbaAndB2BOrder");
            entity.Property(e => e.KColorFbaOrder).HasColumnName("kColorFbaOrder");
            entity.Property(e => e.KColorSellerFulfilledPrimeAndCustomOrder).HasColumnName("kColorSellerFulfilledPrimeAndCustomOrder");
            entity.Property(e => e.KColorSellerFulfilledPrimeOrder).HasColumnName("kColorSellerFulfilledPrimeOrder");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KKundengruppe).HasColumnName("kKundengruppe");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.KVersandartExpedited).HasColumnName("kVersandartExpedited");
            entity.Property(e => e.KVersandartNextDayNonPrime).HasColumnName("kVersandartNextDayNonPrime");
            entity.Property(e => e.KVersandartPrimeStandard).HasColumnName("kVersandartPrimeStandard");
            entity.Property(e => e.KVersandartSecondDayNonPrime).HasColumnName("kVersandartSecondDayNonPrime");
            entity.Property(e => e.KVersandartStandard).HasColumnName("kVersandartStandard");
            entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");
            entity.Property(e => e.NAktiv).HasColumnName("nAktiv");
            entity.Property(e => e.NAmazonCustomDataLaden).HasColumnName("nAmazonCustomDataLaden");
            entity.Property(e => e.NAmazonCustomDataType)
                .HasDefaultValueSql("((1))")
                .HasColumnName("nAmazonCustomDataType");
            entity.Property(e => e.NAnmerkung).HasColumnName("nAnmerkung");
            entity.Property(e => e.NBearbeitungszeitAnpassen).HasColumnName("nBearbeitungszeitAnpassen");
            entity.Property(e => e.NBearbeitungszeitAufschlag).HasColumnName("nBearbeitungszeitAufschlag");
            entity.Property(e => e.NBenutzePosName).HasColumnName("nBenutzePosName");
            entity.Property(e => e.NBestandInitialSetzen)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("nBestandInitialSetzen");
            entity.Property(e => e.NEu).HasColumnName("nEU");
            entity.Property(e => e.NFbalagerAbziehen).HasColumnName("nFBALagerAbziehen");
            entity.Property(e => e.NFbaversandmailAnKunde).HasColumnName("nFBAVersandmailAnKunde");
            entity.Property(e => e.NIgnorierePaymentsBestellungen).HasColumnName("nIgnorierePaymentsBestellungen");
            entity.Property(e => e.NInventardatenAnfordern)
                .HasDefaultValueSql("((1))")
                .HasColumnName("nInventardatenAnfordern");
            entity.Property(e => e.NIsTerminated).HasColumnName("nIsTerminated");
            entity.Property(e => e.NLagerSenden).HasColumnName("nLagerSenden");
            entity.Property(e => e.NLastVcsLiteId).HasColumnName("nLastVcsLiteId");
            entity.Property(e => e.NPlattform).HasColumnName("nPlattform");
            entity.Property(e => e.NRepricing).HasColumnName("nRepricing");
            entity.Property(e => e.NSendPriceAdjustment)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("nSendPriceAdjustment");
            entity.Property(e => e.NVcsLiteRequestForLastDays).HasColumnName("nVcsLiteRequestForLastDays");
            entity.Property(e => e.NVcsmodus).HasColumnName("nVCSModus");
            entity.Property(e => e.NVersandpos0).HasColumnName("nVersandpos0");
            entity.Property(e => e.NZahlung).HasColumnName("nZahlung");
        });

        modelBuilder.Entity<PickList>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PickList", "Report");

            entity.Property(e => e.Comment).HasMaxLength(255);
            entity.Property(e => e.OperationId)
                .HasMaxLength(265)
                .IsUnicode(false);
            entity.Property(e => e.PickListNumber)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PickListTemplateName).HasMaxLength(64);
            entity.Property(e => e.PrintingDate).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.StatusCreationDate).HasColumnType("datetime");
            entity.Property(e => e.StatusDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<PickListPositionOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PickListPositionOrder", "Report");

            entity.Property(e => e.Batchnumber).HasMaxLength(255);
            entity.Property(e => e.BinLocationName).HasMaxLength(512);
            entity.Property(e => e.Ean)
                .HasMaxLength(255)
                .HasColumnName("EAN");
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.Quantity).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.Serialnumber).HasMaxLength(128);
            entity.Property(e => e.Sku)
                .HasMaxLength(100)
                .HasColumnName("SKU");
            entity.Property(e => e.Sled)
                .HasColumnType("datetime")
                .HasColumnName("SLED");
            entity.Property(e => e.Status)
                .HasMaxLength(7)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PickListPositionOrderConfiguration>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PickListPositionOrderConfiguration", "Report");

            entity.Property(e => e.AdditionalNetPrice).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.ValueText).HasMaxLength(255);
        });

        modelBuilder.Entity<PickListPositionWarehouse>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PickListPositionWarehouse", "Report");

            entity.Property(e => e.AdditionalId).HasMaxLength(255);
            entity.Property(e => e.Batchnumber).HasMaxLength(255);
            entity.Property(e => e.BinLocationName).HasMaxLength(50);
            entity.Property(e => e.Ean)
                .HasMaxLength(255)
                .HasColumnName("EAN");
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.Quantity).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.Serialnumber).HasMaxLength(128);
            entity.Property(e => e.Sku)
                .HasMaxLength(100)
                .HasColumnName("SKU");
            entity.Property(e => e.Sled)
                .HasColumnType("datetime")
                .HasColumnName("SLED");
            entity.Property(e => e.Status)
                .HasMaxLength(7)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PickListPositionWarehouseConfiguration>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PickListPositionWarehouseConfiguration", "Report");

            entity.Property(e => e.AdditionalNetPrice).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.ValueText).HasMaxLength(255);
        });

        modelBuilder.Entity<PickListSalesOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PickListSalesOrder", "Report");

            entity.Property(e => e.CustomerSalesOrderNumber).HasMaxLength(250);
            entity.Property(e => e.ExternalSalesOrderNumber).HasMaxLength(50);
            entity.Property(e => e.SalesOrderNumber).HasMaxLength(50);
        });

        modelBuilder.Entity<PickListSalesOrderBillToAddress>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PickListSalesOrderBillToAddress", "Report");

            entity.Property(e => e.Address).HasMaxLength(255);
            entity.Property(e => e.AddressSupplement).HasMaxLength(255);
            entity.Property(e => e.City).HasMaxLength(255);
            entity.Property(e => e.Company).HasMaxLength(128);
            entity.Property(e => e.CompanySupplement).HasMaxLength(60);
            entity.Property(e => e.Country).HasMaxLength(255);
            entity.Property(e => e.CountryIso)
                .HasMaxLength(5)
                .HasColumnName("CountryISO");
            entity.Property(e => e.CustomerNumber).HasMaxLength(30);
            entity.Property(e => e.EmailAddress).HasMaxLength(255);
            entity.Property(e => e.Fax).HasMaxLength(30);
            entity.Property(e => e.FirstName).HasMaxLength(255);
            entity.Property(e => e.LastName).HasMaxLength(255);
            entity.Property(e => e.MobilePhone).HasMaxLength(30);
            entity.Property(e => e.Phone).HasMaxLength(30);
            entity.Property(e => e.PostalCode).HasMaxLength(24);
            entity.Property(e => e.Salutation).HasMaxLength(30);
            entity.Property(e => e.State).HasMaxLength(255);
            entity.Property(e => e.Title).HasMaxLength(64);
            entity.Property(e => e.ValueAddedTaxId).HasMaxLength(20);
        });

        modelBuilder.Entity<PickListSalesOrderShipToAddress>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PickListSalesOrderShipToAddress", "Report");

            entity.Property(e => e.Address).HasMaxLength(255);
            entity.Property(e => e.AddressSupplement).HasMaxLength(255);
            entity.Property(e => e.City).HasMaxLength(255);
            entity.Property(e => e.Company).HasMaxLength(128);
            entity.Property(e => e.CompanySupplement).HasMaxLength(60);
            entity.Property(e => e.Country).HasMaxLength(255);
            entity.Property(e => e.CountryIso)
                .HasMaxLength(5)
                .HasColumnName("CountryISO");
            entity.Property(e => e.CustomerNumber).HasMaxLength(30);
            entity.Property(e => e.EmailAddress).HasMaxLength(255);
            entity.Property(e => e.Fax).HasMaxLength(30);
            entity.Property(e => e.FirstName).HasMaxLength(255);
            entity.Property(e => e.LastName).HasMaxLength(255);
            entity.Property(e => e.MobilePhone).HasMaxLength(30);
            entity.Property(e => e.Phone).HasMaxLength(30);
            entity.Property(e => e.PostalCode).HasMaxLength(24);
            entity.Property(e => e.Salutation).HasMaxLength(30);
            entity.Property(e => e.State).HasMaxLength(255);
            entity.Property(e => e.Title).HasMaxLength(64);
            entity.Property(e => e.ValueAddedTaxId).HasMaxLength(20);
        });

        modelBuilder.Entity<Picture>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Picture", "BI");

            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.ObjectId).HasColumnName("ObjectID");
            entity.Property(e => e.ObjectType)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.PictureData).HasColumnType("image");
        });

        modelBuilder.Entity<Platform>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Platform", "BI");

            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.PlatformId).HasColumnName("PlatformID");
        });

        modelBuilder.Entity<Platform1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Platform", "Report");

            entity.Property(e => e.Name).HasMaxLength(255);
        });

        modelBuilder.Entity<PlatformName>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PlatformName", "BI");

            entity.Property(e => e.LanguageIso)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Name).HasMaxLength(30);
            entity.Property(e => e.PlatformId)
                .ValueGeneratedOnAdd()
                .HasColumnName("PlatformID");
        });

        modelBuilder.Entity<PosBonIcwarenLager>(entity =>
        {
            entity.HasKey(e => e.KBonIcwarenLager).HasName("PK_dbo_POS_BonICWarenLager");

            entity.ToTable("POS_BonICWarenLager");

            entity.Property(e => e.KBonIcwarenLager).HasColumnName("kBonICWarenLager");
            entity.Property(e => e.KBonIc).HasColumnName("kBonIC");
            entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Product", "BI");

            entity.Property(e => e.CreationDate).HasColumnType("datetime");
            entity.Property(e => e.Ean)
                .HasMaxLength(255)
                .HasColumnName("EAN");
            entity.Property(e => e.GroupOfProductsId).HasColumnName("GroupOfProductsID");
            entity.Property(e => e.Isbn)
                .HasMaxLength(255)
                .HasColumnName("ISBN");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.ManufacturerId).HasColumnName("ManufacturerID");
            entity.Property(e => e.MinimumAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.NetPurchasePrice).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.NetSalesPrice).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ProductDepth).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ProductHeight).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
            entity.Property(e => e.ProductNumber).HasMaxLength(100);
            entity.Property(e => e.ProductStateId).HasColumnName("ProductStateID");
            entity.Property(e => e.ProductWeight).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ProductWidth).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Rrp)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("RRP");
            entity.Property(e => e.ShippingClassId).HasColumnName("ShippingClassID");
            entity.Property(e => e.ShippingWeight).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.SpecialTypeId).HasColumnName("SpecialTypeID");
            entity.Property(e => e.Upc)
                .HasMaxLength(255)
                .HasColumnName("UPC");
            entity.Property(e => e.VariationParentId).HasColumnName("VariationParentID");
            entity.Property(e => e.VatclassId).HasColumnName("VATClassID");
        });

        modelBuilder.Entity<Product1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Product", "Report");

            entity.Property(e => e.AmazonFnsku)
                .HasMaxLength(50)
                .HasColumnName("AmazonFNSKU");
            entity.Property(e => e.AmazonSalesPrice).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Asin)
                .HasMaxLength(255)
                .HasColumnName("ASIN");
            entity.Property(e => e.AvailableStock).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BasePriceValue).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.CountryOfOrigin).HasMaxLength(64);
            entity.Property(e => e.CreationDate).HasColumnType("datetime");
            entity.Property(e => e.EBaySalesPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("eBaySalesPrice");
            entity.Property(e => e.Ean)
                .HasMaxLength(255)
                .HasColumnName("EAN");
            entity.Property(e => e.HazardIdnumber)
                .HasMaxLength(255)
                .HasColumnName("HazardIDNumber");
            entity.Property(e => e.Height).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.IsSleditem).HasColumnName("IsSLEDItem");
            entity.Property(e => e.Isbn)
                .HasMaxLength(255)
                .HasColumnName("ISBN");
            entity.Property(e => e.Jtlfpid)
                .HasMaxLength(255)
                .HasColumnName("JTLFPID");
            entity.Property(e => e.Length).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.MinimumOrderQuantity).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.MinimumStockLevel).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Mpn)
                .HasMaxLength(255)
                .HasColumnName("MPN");
            entity.Property(e => e.NetSalesPrice).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.OrderedStock).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.PackagingQuantity).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.PackagingUnit).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.PublicationDate).HasColumnType("datetime");
            entity.Property(e => e.PurchasePrice).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ReservedStock).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Rrp)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("RRP");
            entity.Property(e => e.SearchTerms).HasMaxLength(255);
            entity.Property(e => e.Series).HasMaxLength(255);
            entity.Property(e => e.ShippingClassName).HasMaxLength(255);
            entity.Property(e => e.ShippingWeight).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Sku)
                .HasMaxLength(100)
                .HasColumnName("SKU");
            entity.Property(e => e.Taric)
                .HasMaxLength(20)
                .HasColumnName("TARIC");
            entity.Property(e => e.TotalStock).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Unnumber)
                .HasMaxLength(255)
                .HasColumnName("UNNumber");
            entity.Property(e => e.UoMquantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("UoMQuantity");
            entity.Property(e => e.Upc)
                .HasMaxLength(255)
                .HasColumnName("UPC");
            entity.Property(e => e.Weight).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Width).HasColumnType("decimal(25, 13)");
        });

        modelBuilder.Entity<ProductCategory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ProductCategories", "BI");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
        });

        modelBuilder.Entity<ProductComponent>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ProductComponents", "BI");

            entity.Property(e => e.Amount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ComponentProductId).HasColumnName("ComponentProductID");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
        });

        modelBuilder.Entity<ProductName>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ProductName", "BI");

            entity.Property(e => e.LanguageIso)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Name).HasMaxLength(128);
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
        });

        modelBuilder.Entity<ProductProperty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ProductProperties", "BI");

            entity.Property(e => e.LanguageIso)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
            entity.Property(e => e.PropertyId).HasColumnName("PropertyID");
            entity.Property(e => e.PropertyNameType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.PropertyType)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ProductState>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ProductState", "BI");

            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.ProductStateId)
                .ValueGeneratedOnAdd()
                .HasColumnName("ProductStateID");
        });

        modelBuilder.Entity<ProductStateName>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ProductStateName", "BI");

            entity.Property(e => e.LanguageIso)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.ProductStateId).HasColumnName("ProductStateID");
        });

        modelBuilder.Entity<PurchaseOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PurchaseOrder", "Report");

            entity.Property(e => e.CompanyInternalId).HasComment("Interne ID der Firma");
            entity.Property(e => e.CreationDate)
                .HasComment("Datum der Erstellung der Lieferantenbestellung")
                .HasColumnType("datetime");
            entity.Property(e => e.CurrencyFactor)
                .HasComment("Faktor zur Umrechnung der Währung")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.CurrencyIso)
                .HasMaxLength(5)
                .HasComment("Währung angegeben in ISO")
                .HasColumnName("CurrencyISO");
            entity.Property(e => e.CustomerInternalId).HasComment("Interne ID des Kunden");
            entity.Property(e => e.DeliveryNoteInternalId).HasComment("ID des internen Lieferscheins");
            entity.Property(e => e.DifferentAddresses).HasComment("Gibt an, ob Liefer- und Rechnungsadresse unterschiedlich sind");
            entity.Property(e => e.ExportingDate)
                .HasComment("Exportierdatum der Lieferantenbestellung")
                .HasColumnType("datetime");
            entity.Property(e => e.FaxingDate)
                .HasComment("Faxdatum der Lieferantenbestellung")
                .HasColumnType("datetime");
            entity.Property(e => e.InternalId).HasComment("Interne ID der Lieferantenbestellung");
            entity.Property(e => e.MailingDate)
                .HasComment("Maildatum der Lieferantenbestellung")
                .HasColumnType("datetime");
            entity.Property(e => e.OperationId)
                .HasMaxLength(269)
                .HasComment("Auftrags-ID der Lieferantenbestellung");
            entity.Property(e => e.OwnPurchaseOrderId)
                .HasMaxLength(255)
                .HasComment("Eigene Bestellnummer der Lieferantenbestellung");
            entity.Property(e => e.PrintingDate)
                .HasComment("Druckdatum der Lieferantenbestellung")
                .HasColumnType("datetime");
            entity.Property(e => e.PrintingNote).HasComment("Drucktext");
            entity.Property(e => e.PurchaseOrderBillToAddressInternalId).HasComment("Interne Rechnungsadresse der Lieferantenbestellung");
            entity.Property(e => e.PurchaseOrderSupplierAddressInternalId).HasComment("Interne Lieferantenadresse der Lieferantenbestellung");
            entity.Property(e => e.PurchaseOrderSupplierInternalId).HasComment("Interne ID des Lieferanten für die Lieferantenbestellung");
            entity.Property(e => e.ReferenceSalesOrderId)
                .HasMaxLength(255)
                .HasComment("Auftragsnummer wenn Bezug zu einem Kundenauftrag besteht");
            entity.Property(e => e.Status)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasComment("Status der Lieferantenbestellung");
            entity.Property(e => e.SupplierInternalId).HasComment("Interne ID des Lieferanten");
            entity.Property(e => e.TotalGrossPrice)
                .HasComment("Gesamtbruttopreis der Lieferantenbestellung")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.TotalGrossPriceDiscount)
                .HasComment("Rabatt des Gesamtbruttopreises der Lieferantenbestellung")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.TotalNetPrice)
                .HasComment("Gesamtnettopreis der Lieferantenbestellung")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.TotalNetPriceDiscount)
                .HasComment("Rabatt des Gesamtnettopreises der Lieferantenbestellung")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.TotalVatprice)
                .HasComment("Zeigt an, wie hoch die MwSt der Lieferantenbestellung ist")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("TotalVATPrice");
            entity.Property(e => e.UserInternalId).HasComment("Interne ID des Benutzers");
            entity.Property(e => e.WarehouseInternalId).HasComment("Interne ID des Lagers");
        });

        modelBuilder.Entity<PurchaseOrderBillToAddress>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PurchaseOrderBillToAddress", "Report");

            entity.Property(e => e.Address)
                .HasMaxLength(255)
                .HasComment("Strasse des Empfängers");
            entity.Property(e => e.AddressSupplement)
                .HasMaxLength(255)
                .HasComment("Adresszusatz des Empfängers");
            entity.Property(e => e.City)
                .HasMaxLength(255)
                .HasComment("Ort des Empfängers");
            entity.Property(e => e.Company)
                .HasMaxLength(255)
                .HasComment("Firma der Adresse");
            entity.Property(e => e.CompanySupplement)
                .HasMaxLength(255)
                .HasComment("Firmenzusatz des Empfängers");
            entity.Property(e => e.CountryIso)
                .HasMaxLength(5)
                .HasComment("ISO-Code des Landes des Empfängers")
                .HasColumnName("CountryISO");
            entity.Property(e => e.EmailAddress)
                .HasMaxLength(255)
                .HasComment("E-Mail-Adresse des Empfängers");
            entity.Property(e => e.Fax)
                .HasMaxLength(255)
                .HasComment("Faxnummer des Empfängers");
            entity.Property(e => e.FirstName)
                .HasMaxLength(255)
                .HasComment("Vorname des Empfängers");
            entity.Property(e => e.InternalId)
                .ValueGeneratedOnAdd()
                .HasComment("Interne ID der Adresse");
            entity.Property(e => e.LastName)
                .HasMaxLength(255)
                .HasComment("Nachname des Empfängers");
            entity.Property(e => e.MobilePhone)
                .HasMaxLength(255)
                .HasComment("Mobilnummer des Empfängers");
            entity.Property(e => e.Phone)
                .HasMaxLength(255)
                .HasComment("Telefonnummer des Empfängers");
            entity.Property(e => e.PostalCode)
                .HasMaxLength(255)
                .HasComment("PLZ des Empfängers");
            entity.Property(e => e.Salutation)
                .HasMaxLength(255)
                .HasComment("Anrede des Empfängers");
            entity.Property(e => e.State)
                .HasMaxLength(255)
                .HasComment("Bundesland des Empfängers");
            entity.Property(e => e.Title)
                .HasMaxLength(255)
                .HasComment("Titel des Empfängers");
        });

        modelBuilder.Entity<PurchaseOrderPosition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PurchaseOrderPosition", "Report");

            entity.Property(e => e.DeliveredQuantity)
                .HasComment("Menge der gelieferten Artikel pro Position")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.DeliveryDays).HasComment("Anzahl der Liefertage");
            entity.Property(e => e.DeliveryNotePositionInternalId).HasComment("Interne Id der Lieferscheinposition");
            entity.Property(e => e.GrossPricePerUnit)
                .HasComment("Einzel-Bruttopreis des Artikels")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.InternalId).HasComment("Interne ID der Lieferantenbestellungsposition");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasComment("Bezeichnung der Position");
            entity.Property(e => e.NameOfSupplier)
                .HasMaxLength(255)
                .HasComment("Name des Lieferanten");
            entity.Property(e => e.Note)
                .HasMaxLength(2000)
                .HasComment("Hinweis zur Position");
            entity.Property(e => e.OpenQuantity)
                .HasComment("Anzahl noch ausstehender Artikel pro Position")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.PositionType)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasComment("Typ der Position");
            entity.Property(e => e.ProductInternalId).HasComment("Interne ID des Artikels in der Position");
            entity.Property(e => e.PurchaseOrderInternalId).HasComment("Interne ID der Lieferantenbestellung");
            entity.Property(e => e.PurchasePriceNetPerUnit)
                .HasComment("Einzel-Nettopreis des Artikels")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Quantity)
                .HasComment("Anzahl pro Position (Menge?)")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Sku)
                .HasMaxLength(255)
                .HasComment("Nummer des Artikels in der Position")
                .HasColumnName("SKU");
            entity.Property(e => e.Skusupplier)
                .HasMaxLength(255)
                .HasComment("Artikelnummer des Lieferanten in der Position")
                .HasColumnName("SKUSupplier");
            entity.Property(e => e.SupplierName)
                .HasMaxLength(255)
                .HasComment("Bezeichnung des Lieferanten");
            entity.Property(e => e.TotalGrossPrice)
                .HasComment("Gesamt-Bruttopreis des Artikel über die Anzahl in der Position")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.TotalNetPrice)
                .HasComment("Gesamt-Nettopreis des Artikel über die Anzahl in der Position")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Vatrate)
                .HasComment("MwSt in Prozent")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("VATRate");
            entity.Property(e => e.Vatvalue)
                .HasComment("MwSt.-Betrag")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("VATValue");
        });

        modelBuilder.Entity<PurchaseOrderShipToAddress>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PurchaseOrderShipToAddress", "Report");

            entity.Property(e => e.Address).HasMaxLength(255);
            entity.Property(e => e.AddressSupplement).HasMaxLength(255);
            entity.Property(e => e.City).HasMaxLength(255);
            entity.Property(e => e.Company).HasMaxLength(255);
            entity.Property(e => e.CompanySupplement).HasMaxLength(255);
            entity.Property(e => e.CountryIso)
                .HasMaxLength(5)
                .HasColumnName("CountryISO");
            entity.Property(e => e.EmailAddress).HasMaxLength(255);
            entity.Property(e => e.Fax).HasMaxLength(255);
            entity.Property(e => e.FirstName).HasMaxLength(255);
            entity.Property(e => e.InternalId).ValueGeneratedOnAdd();
            entity.Property(e => e.LastName).HasMaxLength(255);
            entity.Property(e => e.MobilePhone).HasMaxLength(255);
            entity.Property(e => e.Phone).HasMaxLength(255);
            entity.Property(e => e.PostalCode).HasMaxLength(255);
            entity.Property(e => e.Salutation).HasMaxLength(255);
            entity.Property(e => e.State).HasMaxLength(255);
            entity.Property(e => e.Title).HasMaxLength(255);
        });

        modelBuilder.Entity<PurchaseOrderSupplier>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PurchaseOrderSupplier", "Report");

            entity.Property(e => e.Address)
                .HasMaxLength(255)
                .HasComment("Strasse des Lieferanten");
            entity.Property(e => e.AddressSupplement)
                .HasMaxLength(255)
                .HasComment("Adresszusatz des Lieferanten");
            entity.Property(e => e.City)
                .HasMaxLength(255)
                .HasComment("Ort des Lieferanten");
            entity.Property(e => e.Company)
                .HasMaxLength(255)
                .HasComment("Firmenname");
            entity.Property(e => e.ContactFirstName)
                .HasMaxLength(255)
                .HasComment("Vorname des Ansprechpartners beim Lieferanten");
            entity.Property(e => e.ContactLastName)
                .HasMaxLength(255)
                .HasComment("Nachname des Ansprechpartners beim Lieferanten");
            entity.Property(e => e.ContactSalutation)
                .HasMaxLength(255)
                .HasComment("Anrede des Ansprechpartners beim Lieferanten");
            entity.Property(e => e.CountryIso)
                .HasMaxLength(5)
                .HasComment("ISO-Code des Landes")
                .HasColumnName("CountryISO");
            entity.Property(e => e.EmailAddress)
                .HasMaxLength(255)
                .HasComment("Emailadresse des Lieferanten");
            entity.Property(e => e.Fax)
                .HasMaxLength(255)
                .HasComment("Faxnummer des Lieferanten");
            entity.Property(e => e.FirmenSupplement)
                .HasMaxLength(255)
                .HasComment("Firmenzusatz des Lieferanten");
            entity.Property(e => e.InternalId)
                .ValueGeneratedOnAdd()
                .HasComment("Interne ID des Lieferanten der Lieferantenbestellung");
            entity.Property(e => e.MobilePhone)
                .HasMaxLength(255)
                .HasComment("Mobilnumme des Lieferanten");
            entity.Property(e => e.Phone)
                .HasMaxLength(255)
                .HasComment("Telefonnummer des Lieferanten");
            entity.Property(e => e.PostalCode)
                .HasMaxLength(255)
                .HasComment("PLZ des Lieferanten");
            entity.Property(e => e.State)
                .HasMaxLength(255)
                .HasComment("Bundesland des Lieferanten");
            entity.Property(e => e.SupplierInternalId).HasComment("Interne ID des Lieferanten");
        });

        modelBuilder.Entity<ReceiptOfPayment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ReceiptOfPayment", "Report");

            entity.Property(e => e.CashDiscount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.CashDiscountValue).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.CreationDate).HasColumnType("datetime");
            entity.Property(e => e.CurrencyIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CurrencyISO");
            entity.Property(e => e.CustomerSalesOrderNumber).HasMaxLength(250);
            entity.Property(e => e.DeliveryNoteAsPdfpath).HasColumnName("DeliveryNoteAsPDFPath");
            entity.Property(e => e.ExemptFromVat)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("ExemptFromVAT");
            entity.Property(e => e.ExternalSalesOrderNumber).HasMaxLength(50);
            entity.Property(e => e.ExtraWeight).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.InvoiceAsPdfpath).HasColumnName("InvoiceAsPDFPath");
            entity.Property(e => e.IsShippingMethodCod).HasColumnName("IsShippingMethodCOD");
            entity.Property(e => e.MailingDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentMethodName).HasMaxLength(255);
            entity.Property(e => e.PaymentNotificationDateByEmail).HasColumnType("datetime");
            entity.Property(e => e.PaymentReference).HasMaxLength(1000);
            entity.Property(e => e.Platform)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.PrintingDate).HasColumnType("datetime");
            entity.Property(e => e.ReasonForRetention).HasMaxLength(30);
            entity.Property(e => e.SalesOrderNumber).HasMaxLength(50);
            entity.Property(e => e.ShipFromCountryCurrencyFactor).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShipFromCountryCurrencyIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ShipFromCountryCurrencyISO");
            entity.Property(e => e.ShippingBox).HasMaxLength(30);
            entity.Property(e => e.Status).HasMaxLength(255);
            entity.Property(e => e.TotalGrossPrice).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.TotalNetPrice).HasColumnType("decimal(25, 13)");
        });

        modelBuilder.Entity<ReturnReason>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ReturnReason", "BI");

            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.ReturnReasonId)
                .ValueGeneratedOnAdd()
                .HasColumnName("ReturnReasonID");
        });

        modelBuilder.Entity<ReturnReasonName>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ReturnReasonName", "BI");

            entity.Property(e => e.LanguageIso)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.ReturnReasonId).HasColumnName("ReturnReasonID");
        });

        modelBuilder.Entity<SalesOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SalesOrder", "Report");

            entity.Property(e => e.CashDiscount)
                .HasComment("Skonto in Prozent")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.CashDiscountValidity).HasComment("Gültigkeit des Skonto in Tagen");
            entity.Property(e => e.CashDiscountValue)
                .HasComment("Wert des Skontos")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Comment).HasComment("Anmerkung zum Auftrag");
            entity.Property(e => e.CompanyInternalId).HasComment("Interne Id der Firma");
            entity.Property(e => e.CountryIso)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasComment("ISO-Code des Ziellandes des Auftrags")
                .HasColumnName("CountryISO");
            entity.Property(e => e.CreationDate)
                .HasComment("Erstelldatum des Auftrags")
                .HasColumnType("datetime");
            entity.Property(e => e.CurrencyFactor)
                .HasComment("Faktor zur Umrechnung der Währung")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.CurrencyIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("ISO-Code der Währung ")
                .HasColumnName("CurrencyISO");
            entity.Property(e => e.CustomerInternalId).HasComment("Interne ID des Kunden");
            entity.Property(e => e.CustomerSalesOrderNumber)
                .HasMaxLength(250)
                .HasComment("Kundenauftragsnummer");
            entity.Property(e => e.CustomerText).HasComment("Kundendrucktext des Auftrags");
            entity.Property(e => e.DeliveryNoteAsPdfpath)
                .HasComment("PDF-Pfad des Lieferscheins des Händlers im Auftrag")
                .HasColumnName("DeliveryNoteAsPDFPath");
            entity.Property(e => e.DifferentAddresses).HasComment("Gibt an, ob Rechnungs- und Lieferadresse unterschiedlich sind");
            entity.Property(e => e.ExemptFromVat)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasComment("Art der Steuerbefreiung Typfeld")
                .HasColumnName("ExemptFromVAT");
            entity.Property(e => e.ExternalSalesOrderNumber)
                .HasMaxLength(50)
                .HasComment("Externe Nummer des Auftrags");
            entity.Property(e => e.ExtraWeight)
                .HasComment("Zustäztliches Gewicht des Auftrags")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.FinancingCosts)
                .HasComment("Finanzierungskosten")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.HasDeliveryNoteAsPdf)
                .HasComment("Versandanmerkung als PDF vorhanden")
                .HasColumnName("HasDeliveryNoteAsPDF");
            entity.Property(e => e.HasInvoiceAsPdf)
                .HasComment("Rechnung als PDF vorhanden")
                .HasColumnName("HasInvoiceAsPDF");
            entity.Property(e => e.InternalId).HasComment("Interne ID des Auftrags");
            entity.Property(e => e.InvoiceAsPdfpath)
                .HasComment("PDF-Pfad der Rechnung des Händlers im Auftrag")
                .HasColumnName("InvoiceAsPDFPath");
            entity.Property(e => e.IsCancelled).HasComment("Gibt an, ob der Auftrag storniert ist");
            entity.Property(e => e.IsPaid).HasComment("Gibt an, ob der Auftrag bezahlt ist");
            entity.Property(e => e.IsShippingMethodCod)
                .HasComment("Gibt an, ob die Zahlungsart des Auftrags Nachnahme ist")
                .HasColumnName("IsShippingMethodCOD");
            entity.Property(e => e.IstExterneRechnung).HasComment("Externe Rechnung des Auftrags");
            entity.Property(e => e.LanguageInternalId).HasComment("Interne ID der verwendeten Sprache");
            entity.Property(e => e.LanguageIso)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("ISO der Sprache")
                .HasColumnName("LanguageISO");
            entity.Property(e => e.MailingDate)
                .HasComment("Datum an dem die Email zum Auftrag gesendet wurde")
                .HasColumnType("datetime");
            entity.Property(e => e.OpenGrossPrice)
                .HasComment("Noch zu zahlender Betrag")
                .HasColumnType("decimal(27, 13)");
            entity.Property(e => e.OperationId)
                .HasMaxLength(61)
                .HasComment("Auftrags-ID des Vorgangs");
            entity.Property(e => e.PaymentDate)
                .HasComment("Datum, an dem die Zahlung zum Auftrag gesetzt wurde")
                .HasColumnType("datetime");
            entity.Property(e => e.PaymentMethodName)
                .HasMaxLength(255)
                .HasComment("Name der Zahlungsart des Auftrags");
            entity.Property(e => e.PaymentNotificationDateByEmail)
                .HasComment("Datum der Zahlungsbenachrichtigung per Mail")
                .HasColumnType("datetime");
            entity.Property(e => e.PaymentReference)
                .HasMaxLength(1000)
                .HasComment("Verwendungszweck des Auftrags");
            entity.Property(e => e.Platform)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasComment("Plattform, aus der der Auftrag kommt");
            entity.Property(e => e.PlatformInternalId).HasComment("Interne ID der Plattform aus der der Auftrag kommt");
            entity.Property(e => e.PrintingDate)
                .HasComment("Datum an dem der Auftag gedruckt wurde")
                .HasColumnType("datetime");
            entity.Property(e => e.Priority).HasComment("Mit Expressversand");
            entity.Property(e => e.ReasonForRetention)
                .HasMaxLength(30)
                .HasComment("Name des Rückhaltegrundes");
            entity.Property(e => e.SalesOrderNote).HasComment("Anmerkung zum Auftrag");
            entity.Property(e => e.SalesOrderNumber)
                .HasMaxLength(50)
                .HasComment("Nummer des Auftrags");
            entity.Property(e => e.SalesQuotationNumber).HasMaxLength(50);
            entity.Property(e => e.ServiceDate)
                .HasComment("Datum der Lieferung")
                .HasColumnType("datetime");
            entity.Property(e => e.ShipFromCountryCurrencyFactor)
                .HasComment("Faktor zur Umrechnung der Versandlandwährung")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShipFromCountryCurrencyIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("ISO-Code der Versandlandwährung")
                .HasColumnName("ShipFromCountryCurrencyISO");
            entity.Property(e => e.ShipFromCountryIso)
                .HasMaxLength(5)
                .HasComment("ISO-Code des Versandland des Auftrags")
                .HasColumnName("ShipFromCountryISO");
            entity.Property(e => e.ShippingBox)
                .HasMaxLength(30)
                .HasComment("Versandbox für WMS-Auftrag");
            entity.Property(e => e.ShippingMethodInternalId).HasComment("Interne ID der Versandart");
            entity.Property(e => e.Status)
                .HasMaxLength(255)
                .HasComment("Status des Auftrags");
            entity.Property(e => e.TaxCountryCurrencyFactor)
                .HasComment("ISO-Code des Währungfaktors des Steuerlandes im Auftrag")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.TaxCountryCurrencyIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("ISO-Code der Währung des Steuerlandes im Auftrag")
                .HasColumnName("TaxCountryCurrencyISO");
            entity.Property(e => e.TaxCountryIso)
                .HasMaxLength(5)
                .HasComment("ISO-Code des Steuerlandes des Auftrags")
                .HasColumnName("TaxCountryISO");
            entity.Property(e => e.TermOfPayment).HasComment("Zahlungsziel des Auftrags in Tagen");
            entity.Property(e => e.TotalGrossPrice)
                .HasComment("Gesamtbruttopreis des Auftrags")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.TotalNetPrice)
                .HasComment("Nettopreis Gesamt des Auftrags")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.UseNetPrice).HasComment("Es werden Nettopreise angezeigt");
            entity.Property(e => e.UserInternalId).HasComment("Interne Benutzer-ID");
            entity.Property(e => e.ValueAddedTaxId)
                .HasMaxLength(25)
                .HasComment("Umsatzsteuer-ID des Auftrags");
        });

        modelBuilder.Entity<SalesOrderAttribute>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SalesOrderAttribute", "Report");

            entity.Property(e => e.AttributeName).HasMaxLength(255);
        });

        modelBuilder.Entity<SalesOrderBillToAddress>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SalesOrderBillToAddress", "Report");

            entity.Property(e => e.Address).HasMaxLength(255);
            entity.Property(e => e.AddressSupplement).HasMaxLength(255);
            entity.Property(e => e.City).HasMaxLength(255);
            entity.Property(e => e.Company).HasMaxLength(128);
            entity.Property(e => e.CompanySupplement).HasMaxLength(60);
            entity.Property(e => e.Country).HasMaxLength(255);
            entity.Property(e => e.CountryIso)
                .HasMaxLength(5)
                .HasColumnName("CountryISO");
            entity.Property(e => e.CustomerNumber).HasMaxLength(30);
            entity.Property(e => e.EmailAddress).HasMaxLength(255);
            entity.Property(e => e.Fax).HasMaxLength(30);
            entity.Property(e => e.FirstName).HasMaxLength(255);
            entity.Property(e => e.LastName).HasMaxLength(255);
            entity.Property(e => e.MobilePhone).HasMaxLength(30);
            entity.Property(e => e.Phone).HasMaxLength(30);
            entity.Property(e => e.PostalCode).HasMaxLength(24);
            entity.Property(e => e.Salutation).HasMaxLength(30);
            entity.Property(e => e.State).HasMaxLength(255);
            entity.Property(e => e.Title).HasMaxLength(64);
            entity.Property(e => e.ValueAddedTaxId).HasMaxLength(20);
        });

        modelBuilder.Entity<SalesOrderPayment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SalesOrderPayments", "Report");

            entity.Property(e => e.ExternalTransactionId)
                .HasMaxLength(255)
                .HasComment("Transaktions-ID");
            entity.Property(e => e.InternalId).HasComment("Interne ID der Zahlung");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasComment("Name der Zahlung");
            entity.Property(e => e.Note)
                .HasMaxLength(2000)
                .HasComment("Hinweis zur Zahlung");
            entity.Property(e => e.PaymentDate)
                .HasComment("Zahlungsdatum")
                .HasColumnType("datetime");
            entity.Property(e => e.PaymentMethod)
                .HasMaxLength(255)
                .HasComment("Name der Zahlungsart");
            entity.Property(e => e.PaymentType)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasComment("Gibt den Typ der Zahlung an");
            entity.Property(e => e.SalesOrderInternalId).HasComment("Interne ID des Auftrags");
            entity.Property(e => e.StandardChartOfAccountsManual)
                .HasMaxLength(255)
                .HasComment("Standardkontenrahmen DATEV-Kontenrahmen");
            entity.Property(e => e.Value)
                .HasComment("Betrag der Zahlung")
                .HasColumnType("decimal(25, 13)");
        });

        modelBuilder.Entity<SalesOrderPaymentInformation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SalesOrderPaymentInformation", "Report");

            entity.Property(e => e.DebitAccountHolder).HasMaxLength(255);
            entity.Property(e => e.DebitBank).HasMaxLength(255);
            entity.Property(e => e.DebitBic)
                .HasMaxLength(32)
                .HasColumnName("DebitBIC");
            entity.Property(e => e.DebitCreditorId).HasMaxLength(35);
            entity.Property(e => e.DebitDueDate).HasColumnType("datetime");
            entity.Property(e => e.DebitEndToEndId).HasMaxLength(50);
            entity.Property(e => e.DebitIban)
                .HasMaxLength(34)
                .HasColumnName("DebitIBAN");
            entity.Property(e => e.DebitMandateReference).HasMaxLength(30);
            entity.Property(e => e.DebitSubject).HasMaxLength(61);
            entity.Property(e => e.FinancingCosts).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.PayPalId).HasMaxLength(250);
            entity.Property(e => e.PayeeAccountHolder).HasMaxLength(255);
            entity.Property(e => e.PayeeBank).HasMaxLength(255);
            entity.Property(e => e.PayeeBic)
                .HasMaxLength(32)
                .HasColumnName("PayeeBIC");
            entity.Property(e => e.PayeeDueDate).HasColumnType("datetime");
            entity.Property(e => e.PayeeEndToEndId).HasMaxLength(50);
            entity.Property(e => e.PayeeIban)
                .HasMaxLength(34)
                .HasColumnName("PayeeIBAN");
            entity.Property(e => e.PayeeSubject).HasMaxLength(61);
            entity.Property(e => e.PaymentMethodType)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.TransferAccountHolder).HasMaxLength(255);
            entity.Property(e => e.TransferBank).HasMaxLength(50);
            entity.Property(e => e.TransferBic)
                .HasMaxLength(64)
                .HasColumnName("TransferBIC");
            entity.Property(e => e.TransferDueDate).HasColumnType("datetime");
            entity.Property(e => e.TransferEndToEndId).HasMaxLength(50);
            entity.Property(e => e.TransferIban)
                .HasMaxLength(64)
                .HasColumnName("TransferIBAN");
            entity.Property(e => e.TransferSubject).HasMaxLength(61);
        });

        modelBuilder.Entity<SalesOrderPosition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SalesOrderPosition", "Report");

            entity.Property(e => e.AmazonCustomJson)
                .HasComment("Amazon Custom JSON-Datei")
                .HasColumnName("AmazonCustomJSON");
            entity.Property(e => e.BillOfMaterialsPosition)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasComment("Komponente der Stückliste");
            entity.Property(e => e.BillOfMaterialsPositionParentId).HasComment("Vaterartikel-ID der Stücklistenposition");
            entity.Property(e => e.ConfigurationItemInternalId).HasComment("Interne ID des Konfigurationsartikels");
            entity.Property(e => e.ConfiguratorPosition)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasComment("Gibt den Typ der Konfiguratorposition an");
            entity.Property(e => e.ConfiguratorPositionParentId).HasComment("Position des Vaterartikels des Konfigurationsartikels");
            entity.Property(e => e.DiscountRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.DiscountValue)
                .HasComment("Rabattbetrag")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Ean)
                .HasMaxLength(255)
                .HasComment("Internationale Artikelnummer")
                .HasColumnName("EAN");
            entity.Property(e => e.GrossPricePerUnit)
                .HasComment("Einzelbruttopreis des Artikels")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.IndividualShippingWeight)
                .HasComment("Einzelversandgewicht des Artikels")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.IndividualWeight)
                .HasComment("Einzelgewicht des Artikels")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.InternalId).HasComment("Interne ID der Auftragsposition");
            entity.Property(e => e.IsAmazonCustomPosition).HasComment("Amazon Custom-Position");
            entity.Property(e => e.ItemDescriptionBrief).HasComment("Kurze Artikelbeschreibung");
            entity.Property(e => e.ItemDescriptionDetailed).HasComment("Lange Artikelbeschreibung");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasComment("Bezeichnung für den Druck, Speichern oder E-Mail senden");
            entity.Property(e => e.NetPricePerUnit)
                .HasComment("Einzelnettopreis des Artikels")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Note)
                .HasMaxLength(2000)
                .HasComment("Hinweis zur Position");
            entity.Property(e => e.PositionType)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Typ der Position");
            entity.Property(e => e.ProductInternalId).HasComment("Interne ID des Artikels in der Position");
            entity.Property(e => e.PurchasePriceNet)
                .HasComment("Netto Einkaufspreis des Artikels")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Quantity)
                .HasComment("Anzahl des Artikels in einer Position")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.SalesOrderInternalId).HasComment("Interne ID des Auftrags");
            entity.Property(e => e.Sku)
                .HasMaxLength(100)
                .HasComment("Artikelnummer")
                .HasColumnName("SKU");
            entity.Property(e => e.Sorting).HasComment("Wert zu Sortierung der Position innerhalb des Auftrags");
            entity.Property(e => e.TotalGrossPrice)
                .HasComment("Gesamtbruttopreis über die Anzahl des Artikels in der Position")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.TotalNetPrice)
                .HasComment("Gesamtnettopreis über die Anzahl des Artikels in der Position")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.TotalShippingWeight)
                .HasComment("Gesamtversandgewicht der Position")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.TotalWeight)
                .HasComment("Gesamtgewicht der Position")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Unit)
                .HasMaxLength(255)
                .HasComment("Einheit des Artikels");
            entity.Property(e => e.Vatrate)
                .HasComment("MwSt. in Prozent")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("VATRate");
            entity.Property(e => e.Vatvalue)
                .HasComment("Betrag der MwSt.")
                .HasColumnType("decimal(26, 13)")
                .HasColumnName("VATValue");
        });

        modelBuilder.Entity<SalesOrderPositionConfiguration>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SalesOrderPositionConfiguration", "Report");

            entity.Property(e => e.AdditionalNetPrice).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.ValueText).HasMaxLength(255);
        });

        modelBuilder.Entity<SalesOrderPositionDeliveryDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SalesOrderPositionDeliveryDetails", "Report");

            entity.Property(e => e.BatchNumber).HasMaxLength(255);
            entity.Property(e => e.BestBeforeDate).HasColumnType("datetime");
            entity.Property(e => e.Quantity).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.SerialNumber).HasMaxLength(128);
        });

        modelBuilder.Entity<SalesOrderShipToAddress>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SalesOrderShipToAddress", "Report");

            entity.Property(e => e.Address).HasMaxLength(255);
            entity.Property(e => e.AddressSupplement).HasMaxLength(255);
            entity.Property(e => e.City).HasMaxLength(255);
            entity.Property(e => e.Company).HasMaxLength(128);
            entity.Property(e => e.CompanySupplement).HasMaxLength(60);
            entity.Property(e => e.Country).HasMaxLength(255);
            entity.Property(e => e.CountryIso)
                .HasMaxLength(5)
                .HasColumnName("CountryISO");
            entity.Property(e => e.CustomerNumber).HasMaxLength(30);
            entity.Property(e => e.EmailAddress).HasMaxLength(255);
            entity.Property(e => e.Fax).HasMaxLength(30);
            entity.Property(e => e.FirstName).HasMaxLength(255);
            entity.Property(e => e.LastName).HasMaxLength(255);
            entity.Property(e => e.MobilePhone).HasMaxLength(30);
            entity.Property(e => e.Phone).HasMaxLength(30);
            entity.Property(e => e.PostalCode).HasMaxLength(24);
            entity.Property(e => e.Salutation).HasMaxLength(30);
            entity.Property(e => e.State).HasMaxLength(255);
            entity.Property(e => e.Title).HasMaxLength(64);
            entity.Property(e => e.ValueAddedTaxId).HasMaxLength(20);
        });

        modelBuilder.Entity<SalesQuotation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SalesQuotation", "Report");

            entity.Property(e => e.CashDiscount)
                .HasComment("Skonto des Angebots")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.CashDiscountValidity).HasComment("Skontogültigkeitszeitraum in Tagen");
            entity.Property(e => e.CashDiscountValue)
                .HasComment("Skontowert des Angebots")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Comment).HasComment("Anmerkung zum Angebot");
            entity.Property(e => e.CompanyInternalId).HasComment("Interne ID der Firma");
            entity.Property(e => e.CountryIso)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CountryISO");
            entity.Property(e => e.CreationDate)
                .HasComment("Erstelldatum des Angebots")
                .HasColumnType("datetime");
            entity.Property(e => e.CurrencyFactor)
                .HasComment("Faktor zur Umrechnung der Währung")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.CurrencyIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("ISO-Code der Währungsangabe")
                .HasColumnName("CurrencyISO");
            entity.Property(e => e.CustomerInternalId).HasComment("Interne ID des Kunden im Angebot");
            entity.Property(e => e.CustomerNumber)
                .HasMaxLength(30)
                .HasComment("Kundennummer im Angebot");
            entity.Property(e => e.CustomerSalesQuotationNumber)
                .HasMaxLength(250)
                .HasComment("Kundenangebotsnummer");
            entity.Property(e => e.CustomerText).HasComment("Kundentext");
            entity.Property(e => e.DifferentAddresses).HasComment("Gibt an, ob Rechnungs- und Lieferadresse unterschiedlich sind");
            entity.Property(e => e.ExemptFromVat)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasComment("Umsatzsteuerfrei")
                .HasColumnName("ExemptFromVAT");
            entity.Property(e => e.ExtraWeight)
                .HasComment("Zusatzgewicht des Angebots")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.FinancingCosts)
                .HasComment("Finanzierungskosten")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.InternalId).HasComment("Interne ID des Angebots");
            entity.Property(e => e.IsShippingMethodCod)
                .HasComment("Gibt an, ob Nachnahme als Versandart angegeben ist")
                .HasColumnName("IsShippingMethodCOD");
            entity.Property(e => e.LanguageInternalId).HasComment("Interne ID der verwendeten Sprache");
            entity.Property(e => e.LanguageIso)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("ISO-Code der Sprache des Angebots")
                .HasColumnName("LanguageISO");
            entity.Property(e => e.MailingDate)
                .HasComment("Datum des Mailversands")
                .HasColumnType("datetime");
            entity.Property(e => e.OperationId)
                .HasMaxLength(65)
                .HasComment("Art des Vorgangs (hier Angebot)");
            entity.Property(e => e.PaymentInfo).HasComment("Drucktext für Rechnungskauf");
            entity.Property(e => e.PaymentMethodName)
                .HasMaxLength(255)
                .HasComment("Name der Zahlungsart");
            entity.Property(e => e.PaymentReference)
                .HasMaxLength(1000)
                .HasComment("Verwendungszweck des Angebots");
            entity.Property(e => e.Platform)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasComment("Gibt die Plattform an, von der das Angebot kommt");
            entity.Property(e => e.PrintingDate)
                .HasComment("Datum des Drucks des Angebots")
                .HasColumnType("datetime");
            entity.Property(e => e.SalesQuotationNumber)
                .HasMaxLength(50)
                .HasComment("Nummer des Angebots");
            entity.Property(e => e.ServiceDate)
                .HasComment("Datum der Lieferung ")
                .HasColumnType("datetime");
            entity.Property(e => e.ShipFromCountryCurrencyFactor)
                .HasComment("Faktor zur Umrechnung der Versandlandwährung")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShipFromCountryCurrencyIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("ISO-Code der Versandlandwährungsangabe")
                .HasColumnName("ShipFromCountryCurrencyISO");
            entity.Property(e => e.ShipFromCountryIso)
                .HasMaxLength(5)
                .HasComment("ISO-Code des Versandlandes im Angebot")
                .HasColumnName("ShipFromCountryISO");
            entity.Property(e => e.Status)
                .HasMaxLength(255)
                .HasComment("Status des Angebots");
            entity.Property(e => e.TaxCountryCurrencyFactor)
                .HasComment("Währungsfaktor des Steuerlandes im Angebot")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.TaxCountryCurrencyIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TaxCountryCurrencyISO");
            entity.Property(e => e.TaxCountryIso)
                .HasMaxLength(5)
                .HasComment("ISO-Code des Steuerlandes im Angebot")
                .HasColumnName("TaxCountryISO");
            entity.Property(e => e.TermOfPayment).HasComment("Zahlungsziel in Tagen");
            entity.Property(e => e.TotalGrossPrice)
                .HasComment("Gesamtbruttopreis des Angebots")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.TotalNetPrice)
                .HasComment("Gesamtnettopreis des Angebots")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.UseNetPrice).HasComment("Nettopreise benutzen");
            entity.Property(e => e.UserInternalId).HasComment("Interne ID des Benutzers im Angebot");
            entity.Property(e => e.ValueAddedTaxId)
                .HasMaxLength(25)
                .HasComment("USt-IdNr. des Angebots");
        });

        modelBuilder.Entity<SalesQuotationBillToAddress>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SalesQuotationBillToAddress", "Report");

            entity.Property(e => e.Address).HasMaxLength(255);
            entity.Property(e => e.AddressSupplement).HasMaxLength(255);
            entity.Property(e => e.City).HasMaxLength(255);
            entity.Property(e => e.Company).HasMaxLength(128);
            entity.Property(e => e.CompanySupplement).HasMaxLength(60);
            entity.Property(e => e.Country).HasMaxLength(255);
            entity.Property(e => e.CountryIso)
                .HasMaxLength(5)
                .HasColumnName("CountryISO");
            entity.Property(e => e.CustomerNumber).HasMaxLength(30);
            entity.Property(e => e.EmailAddress).HasMaxLength(255);
            entity.Property(e => e.Fax).HasMaxLength(30);
            entity.Property(e => e.FirstName).HasMaxLength(255);
            entity.Property(e => e.LastName).HasMaxLength(255);
            entity.Property(e => e.MobilePhone).HasMaxLength(30);
            entity.Property(e => e.Phone).HasMaxLength(30);
            entity.Property(e => e.PostalCode).HasMaxLength(24);
            entity.Property(e => e.Salutation).HasMaxLength(30);
            entity.Property(e => e.State).HasMaxLength(255);
            entity.Property(e => e.Title).HasMaxLength(64);
            entity.Property(e => e.ValueAddedTaxId).HasMaxLength(20);
        });

        modelBuilder.Entity<SalesQuotationPosition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SalesQuotationPosition", "Report");

            entity.Property(e => e.BillOfMaterialsPosition)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasComment("Typ des Stücklistenangebots");
            entity.Property(e => e.BillOfMaterialsPositionParentId).HasComment("Typ der Vaterartikel-ID des Stücklistenangebots der Angebotsposition");
            entity.Property(e => e.ConfigurationItemInternalId).HasComment("Interne ID des Konfigurationsartikels im Angebot");
            entity.Property(e => e.ConfiguratorPosition)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasComment("Gibt den Typ der Konfiguratorposition an");
            entity.Property(e => e.ConfiguratorPositionParentId).HasComment("Typ der Vaterartikel-ID des Konfigurationsangebots der Angebotsposition");
            entity.Property(e => e.DiscountRate)
                .HasComment("Rabatt in Prozent")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.DiscountValue)
                .HasComment("Rabattbetrag")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Ean)
                .HasMaxLength(255)
                .HasComment("Internationale Artikelnummer")
                .HasColumnName("EAN");
            entity.Property(e => e.GrossPricePerUnit)
                .HasComment("Bruttopreis Einzel des Artikels")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.IndividualShippingWeight)
                .HasComment("Einzel-Versandgewicht des Artikels")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.IndividualWeight)
                .HasComment("Einzelgewicht des Artikels")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.InternalId).HasComment("Interne ID des Angebots");
            entity.Property(e => e.ItemDescriptionBrief).HasComment("Kurze Artikelbeschreibung");
            entity.Property(e => e.ItemDescriptionDetailed).HasComment("Lange Artikelbeschreibung");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasComment("Drucktext");
            entity.Property(e => e.NetPricePerUnit)
                .HasComment("Nettopreis Einzel des Artikels")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Note)
                .HasMaxLength(2000)
                .HasComment("Hinweis zur Angebotsposition");
            entity.Property(e => e.PositionType)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Typ der Position");
            entity.Property(e => e.ProductInternalId).HasComment("Interne ID des Artikels in der Position");
            entity.Property(e => e.PurchasePriceNet)
                .HasComment("Nettoeinkaufspreis des Artikels")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Quantity)
                .HasComment("Anzahl des Artikels in der Position")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.SalesQuotationInternalId).HasComment("Interne Angebots-ID der Angebotsposition");
            entity.Property(e => e.Sku)
                .HasMaxLength(100)
                .HasComment("Nummer des Artikels in der Position")
                .HasColumnName("SKU");
            entity.Property(e => e.Sorting).HasComment("Sortierung der Positionen innerhalb eines Angebots");
            entity.Property(e => e.TotalGrossPrice)
                .HasComment("Bruttpreis Gesamt über die Anzahl des Artikels in der Position")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.TotalNetPrice)
                .HasComment("Nettopreis Gesamt über die Anzahl des Artikels in der Position")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.TotalShippingWeight)
                .HasComment("Gesamt-Versandgewicht des Artikels über die Anzahl in der Position")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.TotalWeight)
                .HasComment("Gesamtgewicht des Artikels über die Anzahl in der Position")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Unit)
                .HasMaxLength(255)
                .HasComment("Einheit des Artikels");
            entity.Property(e => e.Vatrate)
                .HasComment("MwSt in Prozent")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("VATRate");
            entity.Property(e => e.Vatvalue)
                .HasComment("Betrag der MwSt")
                .HasColumnType("decimal(26, 13)")
                .HasColumnName("VATValue");
        });

        modelBuilder.Entity<SalesQuotationPositionConfiguration>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SalesQuotationPositionConfiguration", "Report");

            entity.Property(e => e.AdditionalNetPrice).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.ValueText).HasMaxLength(255);
        });

        modelBuilder.Entity<SalesQuotationPositionDeliveryDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SalesQuotationPositionDeliveryDetails", "Report");

            entity.Property(e => e.BatchNumber).HasMaxLength(255);
            entity.Property(e => e.BestBeforeDate).HasColumnType("datetime");
            entity.Property(e => e.Quantity).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.SerialNumber).HasMaxLength(128);
        });

        modelBuilder.Entity<SalesQuotationShipToAddress>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SalesQuotationShipToAddress", "Report");

            entity.Property(e => e.Address).HasMaxLength(255);
            entity.Property(e => e.AddressSupplement).HasMaxLength(255);
            entity.Property(e => e.City).HasMaxLength(255);
            entity.Property(e => e.Company).HasMaxLength(128);
            entity.Property(e => e.CompanySupplement).HasMaxLength(60);
            entity.Property(e => e.Country).HasMaxLength(255);
            entity.Property(e => e.CountryIso)
                .HasMaxLength(5)
                .HasColumnName("CountryISO");
            entity.Property(e => e.CustomerNumber).HasMaxLength(30);
            entity.Property(e => e.EmailAddress).HasMaxLength(255);
            entity.Property(e => e.Fax).HasMaxLength(30);
            entity.Property(e => e.FirstName).HasMaxLength(255);
            entity.Property(e => e.LastName).HasMaxLength(255);
            entity.Property(e => e.MobilePhone).HasMaxLength(30);
            entity.Property(e => e.Phone).HasMaxLength(30);
            entity.Property(e => e.PostalCode).HasMaxLength(24);
            entity.Property(e => e.Salutation).HasMaxLength(30);
            entity.Property(e => e.State).HasMaxLength(255);
            entity.Property(e => e.Title).HasMaxLength(64);
            entity.Property(e => e.ValueAddedTaxId).HasMaxLength(20);
        });

        modelBuilder.Entity<ShippingClass>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ShippingClass", "BI");

            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.ShippingClassId)
                .ValueGeneratedOnAdd()
                .HasColumnName("ShippingClassID");
        });

        modelBuilder.Entity<ShippingClassName>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ShippingClassName", "BI");

            entity.Property(e => e.LanguageIso)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Name).HasMaxLength(128);
            entity.Property(e => e.ShippingClassId).HasColumnName("ShippingClassID");
        });

        modelBuilder.Entity<ShippingMethod>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ShippingMethod", "BI");

            entity.Property(e => e.CarrierId).HasColumnName("CarrierID");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.PackageInsuranceSum).HasColumnType("numeric(1, 1)");
            entity.Property(e => e.PackagingCost).HasColumnType("numeric(1, 1)");
            entity.Property(e => e.ShippingCost).HasColumnType("numeric(1, 1)");
            entity.Property(e => e.ShippingMethodId).HasColumnName("ShippingMethodID");
        });

        modelBuilder.Entity<ShippingMethod1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ShippingMethod", "Report");

            entity.Property(e => e.AdditionalWeight).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.AmazonCarrierCode).HasMaxLength(255);
            entity.Property(e => e.CTrackingUrlTemplate)
                .HasMaxLength(255)
                .HasColumnName("cTrackingUrlTemplate");
            entity.Property(e => e.EbayCarrierCode).HasMaxLength(255);
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.Price).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingCostsFree).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Vatrate)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("VATRate");
            entity.Property(e => e.WeighingMandatory)
                .HasMaxLength(32)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ShippingMethodName>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ShippingMethodName", "BI");

            entity.Property(e => e.LanguageIso)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Name).HasMaxLength(128);
            entity.Property(e => e.ShippingMethodId).HasColumnName("ShippingMethodID");
        });

        modelBuilder.Entity<ShippingNotification>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ShippingNotification", "Report");

            entity.Property(e => e.CustomerNumber).HasMaxLength(30);
            entity.Property(e => e.DeliveryNoteNumber).HasMaxLength(50);
            entity.Property(e => e.MailingDate).HasColumnType("datetime");
            entity.Property(e => e.Note).HasMaxLength(255);
            entity.Property(e => e.SalesOrderNumber).HasMaxLength(50);
        });

        modelBuilder.Entity<SqlServerVersion>(entity =>
        {
            entity.HasKey(e => new { e.MajorVersionNumber, e.MinorVersionNumber, e.ReleaseDate });

            entity.Property(e => e.ReleaseDate).HasColumnType("date");
            entity.Property(e => e.Branch)
                .HasMaxLength(34)
                .IsUnicode(false);
            entity.Property(e => e.ExtendedSupportEndDate).HasColumnType("date");
            entity.Property(e => e.MainstreamSupportEndDate).HasColumnType("date");
            entity.Property(e => e.MajorVersionName)
                .HasMaxLength(19)
                .IsUnicode(false);
            entity.Property(e => e.MinorVersionName)
                .HasMaxLength(67)
                .IsUnicode(false);
            entity.Property(e => e.Url)
                .HasMaxLength(99)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Stocktaking>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Stocktaking", "BI");

            entity.Property(e => e.BatchName).HasMaxLength(128);
            entity.Property(e => e.BestBeforeDate).HasColumnType("datetime");
            entity.Property(e => e.BinLocationId).HasColumnName("BinLocationID");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
            entity.Property(e => e.SerialNumber).HasMaxLength(128);
            entity.Property(e => e.StockAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.StocktakingId)
                .ValueGeneratedOnAdd()
                .HasColumnName("StocktakingID");
        });

        modelBuilder.Entity<Supplier>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Supplier", "BI");

            entity.Property(e => e.City).HasMaxLength(64);
            entity.Property(e => e.Country).HasMaxLength(64);
            entity.Property(e => e.CountryIso)
                .HasMaxLength(2)
                .HasColumnName("CountryISO");
            entity.Property(e => e.DeliveryCost).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.MinimumOrderValue).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.MinimumQuantitySurcharge).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Postalcode).HasMaxLength(10);
            entity.Property(e => e.SupplierId)
                .ValueGeneratedOnAdd()
                .HasColumnName("SupplierID");
            entity.Property(e => e.SupplierName).HasMaxLength(128);
            entity.Property(e => e.SupplierNumber).HasMaxLength(64);
        });

        modelBuilder.Entity<Supplier1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Supplier", "Report");

            entity.Property(e => e.Address).HasMaxLength(255);
            entity.Property(e => e.AddressSupplement).HasMaxLength(255);
            entity.Property(e => e.City).HasMaxLength(255);
            entity.Property(e => e.Company).HasMaxLength(255);
            entity.Property(e => e.CompanySupplement).HasMaxLength(255);
            entity.Property(e => e.Contact).HasMaxLength(255);
            entity.Property(e => e.Country).HasMaxLength(255);
            entity.Property(e => e.CountryIso)
                .HasMaxLength(5)
                .HasColumnName("CountryISO");
            entity.Property(e => e.CreationDate).HasColumnType("datetime");
            entity.Property(e => e.EmailAddress).HasMaxLength(255);
            entity.Property(e => e.Fax).HasMaxLength(30);
            entity.Property(e => e.FirstName).HasMaxLength(126);
            entity.Property(e => e.InternalId).ValueGeneratedOnAdd();
            entity.Property(e => e.LastName).HasMaxLength(126);
            entity.Property(e => e.OwnCustomerNumber).HasMaxLength(64);
            entity.Property(e => e.PhoneDirectDialing).HasMaxLength(30);
            entity.Property(e => e.PhoneOffice).HasMaxLength(30);
            entity.Property(e => e.PostalCode).HasMaxLength(10);
            entity.Property(e => e.Salutation).HasMaxLength(30);
            entity.Property(e => e.State).HasMaxLength(255);
            entity.Property(e => e.SupplierId).HasMaxLength(64);
            entity.Property(e => e.ValueAddedTaxId).HasMaxLength(30);
            entity.Property(e => e.WebsiteUrl)
                .HasMaxLength(255)
                .HasColumnName("WebsiteURL");
        });

        modelBuilder.Entity<SupplierInvoice>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SupplierInvoice", "BI");

            entity.Property(e => e.CreationDate).HasColumnType("datetime");
            entity.Property(e => e.CurrencyFactor).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.CurrencyIso)
                .HasMaxLength(20)
                .HasColumnName("CurrencyISO");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.SupplierId).HasColumnName("SupplierID");
            entity.Property(e => e.SupplierInvoiceId).HasColumnName("SupplierInvoiceID");
        });

        modelBuilder.Entity<SupplierInvoicePo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SupplierInvoicePos", "BI");

            entity.Property(e => e.Amount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.NetPurchasePrice).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
            entity.Property(e => e.SupplierInvoiceId).HasColumnName("SupplierInvoiceID");
            entity.Property(e => e.SupplierInvoicePosId)
                .ValueGeneratedOnAdd()
                .HasColumnName("SupplierInvoicePosID");
            entity.Property(e => e.SupplierOrderId).HasColumnName("SupplierOrderID");
            entity.Property(e => e.Vatpercent)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("VATPercent");
        });

        modelBuilder.Entity<SupplierInvoicePosExtraCharge>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SupplierInvoicePosExtraCharge", "BI");

            entity.Property(e => e.ChargeValue).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.CurrencyFactor).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.CurrencyIso)
                .HasMaxLength(20)
                .HasColumnName("CurrencyISO");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.SupplierInvoicePosExtraChargesId).HasColumnName("SupplierInvoicePosExtraChargesID");
            entity.Property(e => e.SupplierInvoicePosId).HasColumnName("SupplierInvoicePosID");
            entity.Property(e => e.Vatpercent)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("VATPercent");
        });

        modelBuilder.Entity<SupplierOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SupplierOrder", "BI");

            entity.Property(e => e.CompanyId).HasColumnName("CompanyID");
            entity.Property(e => e.CreationDate).HasColumnType("datetime");
            entity.Property(e => e.CurrencyFactor).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.CurrencyIso)
                .HasMaxLength(5)
                .HasColumnName("CurrencyISO");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeliveryNoteId).HasColumnName("DeliveryNoteID");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.SupplierId).HasColumnName("SupplierID");
            entity.Property(e => e.SupplierOrderId)
                .ValueGeneratedOnAdd()
                .HasColumnName("SupplierOrderID");
            entity.Property(e => e.SupplierOrderNo).HasMaxLength(128);
            entity.Property(e => e.WarehouseId).HasColumnName("WarehouseID");
        });

        modelBuilder.Entity<SupplierOrderPo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SupplierOrderPos", "BI");

            entity.Property(e => e.AmountDelivered).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.AmountOrdered).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeliveryNotePosId).HasColumnName("DeliveryNotePosID");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.NetPurchasePrice).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
            entity.Property(e => e.ProductName).HasMaxLength(128);
            entity.Property(e => e.ProductNo).HasMaxLength(50);
            entity.Property(e => e.SupplierOrderId).HasColumnName("SupplierOrderID");
            entity.Property(e => e.SupplierOrderPosId)
                .ValueGeneratedOnAdd()
                .HasColumnName("SupplierOrderPosID");
            entity.Property(e => e.Vatpercent)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("VATPercent");
        });

        modelBuilder.Entity<SupplierOrderReminder>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SupplierOrderReminder", "BI");

            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.ReminderDate).HasColumnType("datetime");
            entity.Property(e => e.SupplierOrderId).HasColumnName("SupplierOrderID");
            entity.Property(e => e.SupplierOrderReminderId)
                .ValueGeneratedOnAdd()
                .HasColumnName("SupplierOrderReminderID");
            entity.Property(e => e.SystemUserId).HasColumnName("SystemUserID");
        });

        modelBuilder.Entity<SupplierOrderReminderPo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SupplierOrderReminderPos", "BI");

            entity.Property(e => e.Amount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.SupplierOrderPosId).HasColumnName("SupplierOrderPosID");
            entity.Property(e => e.SupplierOrderReminderId).HasColumnName("SupplierOrderReminderID");
            entity.Property(e => e.SupplierOrderReminderPosId)
                .HasMaxLength(50)
                .HasColumnName("SupplierOrderReminderPosID");
        });

        modelBuilder.Entity<SupplierProduct>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SupplierProduct", "BI");

            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.NetPurchasePrice).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.OrderInterval).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.PackingAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.PackingUnit).HasMaxLength(255);
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
            entity.Property(e => e.SupplierId).HasColumnName("SupplierID");
            entity.Property(e => e.SupplierProductId)
                .ValueGeneratedOnAdd()
                .HasColumnName("SupplierProductID");
            entity.Property(e => e.SupplierProductName).HasMaxLength(255);
            entity.Property(e => e.SupplierProductNumber).HasMaxLength(255);
            entity.Property(e => e.Vatpercent)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("VATPercent");
        });

        modelBuilder.Entity<SystemUser>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SystemUser", "BI");

            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.SystemUserId).HasColumnName("SystemUserID");
            entity.Property(e => e.SystemUserName).HasMaxLength(128);
        });

        modelBuilder.Entity<TAbgerufeneEmailsImap>(entity =>
        {
            entity.HasKey(e => e.KAbgerufeneEmailsImap).HasName("PK_Ticketsystem_tAbgerufeneEmailsImap");

            entity.ToTable("tAbgerufeneEmailsImap", "Ticketsystem");

            entity.HasIndex(e => e.KEingangskanalEmail, "IX_Ticketsystem_tAbgerufeneEmailsImap_kEingangskanalEmail_INCL");

            entity.HasIndex(e => e.KNachricht, "IX_Ticketsystem_tAbgerufeneEmailsImap_kNachricht");

            entity.HasIndex(e => e.KNachricht, "UQ_Ticketsystem_tAbgerufeneEmailsImap_kNachricht")
                .IsUnique()
                .HasFilter("([kNachricht] IS NOT NULL)");

            entity.Property(e => e.KAbgerufeneEmailsImap).HasColumnName("kAbgerufeneEmailsImap");
            entity.Property(e => e.KEingangskanalEmail).HasColumnName("kEingangskanalEmail");
            entity.Property(e => e.KNachricht).HasColumnName("kNachricht");
            entity.Property(e => e.NUniqueId).HasColumnName("nUniqueId");

            entity.HasOne(d => d.KEingangskanalEmailNavigation).WithMany(p => p.TAbgerufeneEmailsImaps)
                .HasForeignKey(d => d.KEingangskanalEmail)
                .HasConstraintName("FK_Ticketsystem_tAbgerufeneEmailsImap_kEingangskanalEmail");

            entity.HasOne(d => d.KNachrichtNavigation).WithOne(p => p.TAbgerufeneEmailsImap)
                .HasForeignKey<TAbgerufeneEmailsImap>(d => d.KNachricht)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Ticketsystem_tAbgerufeneEmailsImap_kNachricht");
        });

        modelBuilder.Entity<TAbgerufeneEmailsPop3>(entity =>
        {
            entity.HasKey(e => e.KAbgerufeneEmailsPop3).HasName("PK_Ticketsystem_tAbgerufeneEmailsPop3");

            entity.ToTable("tAbgerufeneEmailsPop3", "Ticketsystem");

            entity.HasIndex(e => e.KEingangskanalEmail, "IX_Ticketsystem_tAbgerufeneEmailsPop3_kEingangskanalEmail_INCL");

            entity.HasIndex(e => e.KNachricht, "IX_Ticketsystem_tAbgerufeneEmailsPop3_kNachricht");

            entity.HasIndex(e => new { e.KEingangskanalEmail, e.CUniqueId }, "UQ_Ticketsystem_tAbgerufeneEmailsPop3_kEingangskanalEmail_cUniqueId").IsUnique();

            entity.HasIndex(e => e.KNachricht, "UQ_Ticketsystem_tAbgerufeneEmailsPop3_kNachricht")
                .IsUnique()
                .HasFilter("([kNachricht] IS NOT NULL)");

            entity.Property(e => e.KAbgerufeneEmailsPop3).HasColumnName("kAbgerufeneEmailsPop3");
            entity.Property(e => e.CUniqueId)
                .HasMaxLength(255)
                .HasColumnName("cUniqueId");
            entity.Property(e => e.KEingangskanalEmail).HasColumnName("kEingangskanalEmail");
            entity.Property(e => e.KNachricht).HasColumnName("kNachricht");

            entity.HasOne(d => d.KEingangskanalEmailNavigation).WithMany(p => p.TAbgerufeneEmailsPop3s)
                .HasForeignKey(d => d.KEingangskanalEmail)
                .HasConstraintName("FK_Ticketsystem_tAbgerufeneEmailsPop3_kEingangskanalEmail");

            entity.HasOne(d => d.KNachrichtNavigation).WithOne(p => p.TAbgerufeneEmailsPop3)
                .HasForeignKey<TAbgerufeneEmailsPop3>(d => d.KNachricht)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Ticketsystem_tAbgerufeneEmailsPop3_kNachricht");
        });

        modelBuilder.Entity<TAbgleichConfig>(entity =>
        {
            entity.HasKey(e => e.KAbgleichConfig).HasName("PK_bi_kAbgleichConfig");

            entity.ToTable("tAbgleichConfig", "BI");

            entity.Property(e => e.KAbgleichConfig).HasColumnName("kAbgleichConfig");
            entity.Property(e => e.CAbgleichName)
                .HasMaxLength(50)
                .HasColumnName("cAbgleichName");
            entity.Property(e => e.NAbgleichGroesse).HasColumnName("nAbgleichGroesse");
        });

        modelBuilder.Entity<TAbgleichEventQueue>(entity =>
        {
            entity.HasKey(e => e.KAbgleichEventQueue).HasName("PK_Amazon_tAbgleichEventQueue");

            entity.ToTable("tAbgleichEventQueue", "Amazon");

            entity.HasIndex(e => new { e.NType, e.CMarketplaceId }, "UQ_Amazon_tAbgleichEventQueue_nType_cMarketplaceId").IsUnique();

            entity.Property(e => e.KAbgleichEventQueue).HasColumnName("kAbgleichEventQueue");
            entity.Property(e => e.CMarketplaceId)
                .HasMaxLength(50)
                .HasColumnName("cMarketplaceId");
            entity.Property(e => e.NType).HasColumnName("nType");
        });

        modelBuilder.Entity<TAbgleichOption>(entity =>
        {
            entity.HasKey(e => e.CKey).HasName("PK_bi_tAbgleichOption");

            entity.ToTable("tAbgleichOption", "BI");

            entity.Property(e => e.CKey)
                .HasMaxLength(256)
                .HasColumnName("cKey");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CValue)
                .HasMaxLength(500)
                .HasColumnName("cValue");
        });

        modelBuilder.Entity<TAbgleichSync>(entity =>
        {
            entity.HasKey(e => e.KAbgleichSync).HasName("PK_bi_kAbgleichHist");

            entity.ToTable("tAbgleichSync", "BI");

            entity.Property(e => e.KAbgleichSync).HasColumnName("kAbgleichSync");
            entity.Property(e => e.BLastChange)
                .HasMaxLength(8)
                .HasColumnName("bLastChange");
            entity.Property(e => e.CAbgleichName)
                .HasMaxLength(50)
                .HasColumnName("cAbgleichName");
            entity.Property(e => e.NKomplettAbgleich).HasColumnName("nKomplettAbgleich");
        });

        modelBuilder.Entity<TAbgleichToken>(entity =>
        {
            entity.HasKey(e => e.KAbgleichToken).HasName("PK_BI_kAbgleichToken");

            entity.ToTable("tAbgleichToken", "BI");

            entity.Property(e => e.KAbgleichToken).HasColumnName("kAbgleichToken");
            entity.Property(e => e.CAbgleichToken).HasColumnName("cAbgleichToken");
            entity.Property(e => e.DAenderung)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dAenderung");
            entity.Property(e => e.DErstellt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
        });

        modelBuilder.Entity<TAbrechnung>(entity =>
        {
            entity.HasKey(e => e.KAbrechnung).HasName("PK_FulfillmentNetwork_tAbrechnung");

            entity.ToTable("tAbrechnung", "FulfillmentNetwork");

            entity.Property(e => e.KAbrechnung).HasColumnName("kAbrechnung");
            entity.Property(e => e.CAbrechnungsNummer)
                .HasMaxLength(50)
                .HasColumnName("cAbrechnungsNummer");
            entity.Property(e => e.CAnmerkung).HasColumnName("cAnmerkung");
            entity.Property(e => e.DAbrechnungBis)
                .HasColumnType("datetime")
                .HasColumnName("dAbrechnungBis");
            entity.Property(e => e.DAbrechnungVon)
                .HasColumnType("datetime")
                .HasColumnName("dAbrechnungVon");
            entity.Property(e => e.DAuftragErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dAuftragErstellt");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KFulfillmentLieferant).HasColumnName("kFulfillmentLieferant");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.NStorno).HasColumnName("nStorno");
        });

        modelBuilder.Entity<TAbrechnungEinzelnachwei>(entity =>
        {
            entity.HasKey(e => e.KAbrechnungEinzelnachweis).HasName("PK_FulfillmentNetwork_tAbrechnungEinzelnachweis");

            entity.ToTable("tAbrechnungEinzelnachweis", "FulfillmentNetwork");

            entity.Property(e => e.KAbrechnungEinzelnachweis).HasColumnName("kAbrechnungEinzelnachweis");
            entity.Property(e => e.CHinweis)
                .HasMaxLength(4000)
                .HasColumnName("cHinweis");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.KAbrechnung).HasColumnName("kAbrechnung");
            entity.Property(e => e.KAbrechnungPos).HasColumnName("kAbrechnungPos");
            entity.Property(e => e.KObjektPk).HasColumnName("kObjektPk");
            entity.Property(e => e.NObjekt).HasColumnName("nObjekt");
        });

        modelBuilder.Entity<TAbrechnungLagerplatz>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tAbrechnungLagerplatz", "FulfillmentNetwork");

            entity.Property(e => e.KAbrechnungLagerplatz)
                .ValueGeneratedOnAdd()
                .HasColumnName("kAbrechnungLagerplatz");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");
            entity.Property(e => e.KWarenLagerPlatzTyp).HasColumnName("kWarenLagerPlatzTyp");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.KWmslagerBereich).HasColumnName("kWMSLagerBereich");
            entity.Property(e => e.NLagerkostenBerechnung).HasColumnName("nLagerkostenBerechnung");
            entity.Property(e => e.NModus).HasColumnName("nModus");
        });

        modelBuilder.Entity<TAbrechnungLagerplatzPreview>(entity =>
        {
            entity.HasKey(e => e.KAbrechnungLagerplatz).HasName("PK_FulfillmentNetwork_tAbrechnungLagerplatzPreview");

            entity.ToTable("tAbrechnungLagerplatzPreview", "FulfillmentNetwork");

            entity.Property(e => e.KAbrechnungLagerplatz).HasColumnName("kAbrechnungLagerplatz");
            entity.Property(e => e.CSessionId)
                .HasMaxLength(255)
                .HasColumnName("cSessionId");
            entity.Property(e => e.DZeitstempel)
                .HasColumnType("datetime")
                .HasColumnName("dZeitstempel");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");
            entity.Property(e => e.KWarenLagerPlatzTyp).HasColumnName("kWarenLagerPlatzTyp");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.KWmslagerBereich).HasColumnName("kWMSLagerBereich");
            entity.Property(e => e.NLagerkostenBerechnung).HasColumnName("nLagerkostenBerechnung");
            entity.Property(e => e.NModus).HasColumnName("nModus");
        });

        modelBuilder.Entity<TAbrechnungPo>(entity =>
        {
            entity.HasKey(e => e.KAbrechnungPos).HasName("PK_FulfillmentNetwork_tAbrechnungPos");

            entity.ToTable("tAbrechnungPos", "FulfillmentNetwork");

            entity.Property(e => e.KAbrechnungPos).HasColumnName("kAbrechnungPos");
            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CBezeichnung)
                .HasMaxLength(255)
                .HasColumnName("cBezeichnung");
            entity.Property(e => e.CEinheit)
                .HasMaxLength(255)
                .HasColumnName("cEinheit");
            entity.Property(e => e.CHinweis)
                .HasMaxLength(4000)
                .HasColumnName("cHinweis");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.FMwSt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwSt");
            entity.Property(e => e.FRabatt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabatt");
            entity.Property(e => e.FVknetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVKNetto");
            entity.Property(e => e.FVkpreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVKPreis");
            entity.Property(e => e.KAbrechnung).HasColumnName("kAbrechnung");
            entity.Property(e => e.KAbrechnungStueckliste).HasColumnName("kAbrechnungStueckliste");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NType).HasColumnName("nType");
        });

        modelBuilder.Entity<TAbsenteeismType>(entity =>
        {
            entity.HasKey(e => e.KAbsenteeismType).HasName("PK_ResPl_tAbsenteeismType");

            entity.ToTable("tAbsenteeismType", "ResPl");

            entity.Property(e => e.KAbsenteeismType).HasColumnName("kAbsenteeismType");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.DCreated).HasColumnName("dCreated");
            entity.Property(e => e.DLastModified).HasColumnName("dLastModified");
        });

        modelBuilder.Entity<TAbverkauf>(entity =>
        {
            entity.HasKey(e => e.KAbverkauf).HasName("PK_Repricer_tAbverkauf");

            entity.ToTable("tAbverkauf", "Repricer");

            entity.Property(e => e.KAbverkauf).HasColumnName("kAbverkauf");
            entity.Property(e => e.FAenderungMaxPreis)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fAenderungMaxPreis");
            entity.Property(e => e.FAenderungMinPreis)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fAenderungMinPreis");
            entity.Property(e => e.NAenderungMaxPreisTyp).HasColumnName("nAenderungMaxPreisTyp");
            entity.Property(e => e.NAenderungMinPreisTyp).HasColumnName("nAenderungMinPreisTyp");
            entity.Property(e => e.NAktiv).HasColumnName("nAktiv");
            entity.Property(e => e.NBestandBis).HasColumnName("nBestandBis");
        });

        modelBuilder.Entity<TAdditionalResult>(entity =>
        {
            entity.HasKey(e => e.KAdditionalResult).HasName("PK_pps_tAdditionalResult");

            entity.ToTable("tAdditionalResult", "pps");

            entity.HasIndex(e => e.KArtikel, "IX_pps_tAdditionalResult_kArtikel");

            entity.HasIndex(e => e.KArtikelComponent, "IX_pps_tAdditionalResult_kArtikelComponent");

            entity.Property(e => e.KAdditionalResult).HasColumnName("kAdditionalResult");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.FQuantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fQuantity");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KArtikelComponent).HasColumnName("kArtikelComponent");
            entity.Property(e => e.NQuantityFixed).HasColumnName("nQuantityFixed");

            entity.HasOne(d => d.KArtikelNavigation).WithMany(p => p.TAdditionalResults)
                .HasForeignKey(d => d.KArtikel)
                .HasConstraintName("FK_pps_tAdditionalResult_kArtikel");
        });

        modelBuilder.Entity<TAdressExportFelder>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tAdressExportFelder");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CPrefix)
                .HasMaxLength(255)
                .HasColumnName("cPrefix");
            entity.Property(e => e.CStandardWert)
                .HasMaxLength(255)
                .HasColumnName("cStandardWert");
            entity.Property(e => e.CSuffix)
                .HasMaxLength(255)
                .HasColumnName("cSuffix");
            entity.Property(e => e.CWert)
                .HasMaxLength(255)
                .HasColumnName("cWert");
            entity.Property(e => e.CZusatzzeile)
                .HasMaxLength(255)
                .HasColumnName("cZusatzzeile");
            entity.Property(e => e.KAdressExportVorlage).HasColumnName("kAdressExportVorlage");
            entity.Property(e => e.NFeldNr).HasColumnName("nFeldNr");
            entity.Property(e => e.NMaxlen).HasColumnName("nMaxlen");
        });

        modelBuilder.Entity<TAdressExportFelderErweitert>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tAdressExportFelderErweitert");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CWert)
                .HasMaxLength(255)
                .HasColumnName("cWert");
            entity.Property(e => e.CZone)
                .HasMaxLength(255)
                .HasColumnName("cZone");
            entity.Property(e => e.KAdressExportVorlage).HasColumnName("kAdressExportVorlage");
            entity.Property(e => e.NFeldNr).HasColumnName("nFeldNr");
        });

        modelBuilder.Entity<TAdressExportVorlage>(entity =>
        {
            entity.HasKey(e => e.KAdressExportVorlage).HasName("PK_dbo_tAdressExportVorlage");

            entity.ToTable("tAdressExportVorlage");

            entity.Property(e => e.KAdressExportVorlage)
                .ValueGeneratedNever()
                .HasColumnName("kAdressExportVorlage");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBeschreibung)
                .HasMaxLength(255)
                .HasColumnName("cBeschreibung");
            entity.Property(e => e.CKomma)
                .HasMaxLength(2)
                .HasDefaultValueSql("('.')")
                .HasColumnName("cKomma");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CPfad)
                .HasMaxLength(512)
                .HasColumnName("cPfad");
            entity.Property(e => e.CTrennzeichen)
                .HasMaxLength(4)
                .HasColumnName("cTrennzeichen");
            entity.Property(e => e.DErstellt)
                .HasMaxLength(24)
                .HasColumnName("dErstellt");
            entity.Property(e => e.NKopfzeile)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nKopfzeile");
            entity.Property(e => e.NStandard).HasColumnName("nStandard");
            entity.Property(e => e.NZusatzzeile).HasColumnName("nZusatzzeile");
        });

        modelBuilder.Entity<TAdresse>(entity =>
        {
            entity.HasKey(e => e.KAdresse).HasName("PK_dbo_tAdresse");

            entity.ToTable("tAdresse", tb =>
                {
                    tb.HasTrigger("tgr_tAdresse_INSUP");
                    tb.HasTrigger("tgr_tAdresse_INSUPDEL");
                });

            entity.HasIndex(e => new { e.KKunde, e.NTyp, e.NStandard }, "IX_tAdresse_kKunde_nTyp_nStandard");

            entity.Property(e => e.KAdresse).HasColumnName("kAdresse");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAdressZusatz)
                .HasMaxLength(255)
                .HasColumnName("cAdressZusatz");
            entity.Property(e => e.CAnrede)
                .HasMaxLength(30)
                .HasColumnName("cAnrede");
            entity.Property(e => e.CBundesland)
                .HasMaxLength(255)
                .HasColumnName("cBundesland");
            entity.Property(e => e.CFax)
                .HasMaxLength(30)
                .HasColumnName("cFax");
            entity.Property(e => e.CFirma)
                .HasMaxLength(128)
                .HasColumnName("cFirma");
            entity.Property(e => e.CIso)
                .HasMaxLength(5)
                .HasColumnName("cISO");
            entity.Property(e => e.CLand)
                .HasMaxLength(255)
                .HasColumnName("cLand");
            entity.Property(e => e.CMail)
                .HasMaxLength(255)
                .HasColumnName("cMail");
            entity.Property(e => e.CMobil)
                .HasMaxLength(30)
                .HasColumnName("cMobil");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPlz)
                .HasMaxLength(24)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CPostId)
                .HasMaxLength(255)
                .HasColumnName("cPostID");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTel)
                .HasMaxLength(30)
                .HasColumnName("cTel");
            entity.Property(e => e.CTitel)
                .HasMaxLength(64)
                .HasColumnName("cTitel");
            entity.Property(e => e.CUstid)
                .HasMaxLength(20)
                .HasColumnName("cUSTID");
            entity.Property(e => e.CVorname)
                .HasMaxLength(255)
                .HasColumnName("cVorname");
            entity.Property(e => e.CZusatz)
                .HasMaxLength(60)
                .HasColumnName("cZusatz");
            entity.Property(e => e.KInetAdresse).HasColumnName("kInetAdresse");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.NStandard).HasColumnName("nStandard");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<TAgentAngeseheneTicket>(entity =>
        {
            entity.HasKey(e => e.KAgentAngeseheneTickets).HasName("PK_Ticketsystem_tAgentAngeseheneTickets");

            entity.ToTable("tAgentAngeseheneTickets", "Ticketsystem");

            entity.HasIndex(e => e.KBenutzer, "IX_Ticketsystem_tAgentAngeseheneTickets_kBenutzer");

            entity.HasIndex(e => e.KNachricht, "IX_Ticketsystem_tAgentAngeseheneTickets_kNachricht");

            entity.HasIndex(e => e.KNotiz, "IX_Ticketsystem_tAgentAngeseheneTickets_kNotiz");

            entity.HasIndex(e => e.KTelefonat, "IX_Ticketsystem_tAgentAngeseheneTickets_kTelefonat");

            entity.HasIndex(e => e.KTicket, "IX_Ticketsystem_tAgentAngeseheneTickets_kTicket");

            entity.HasIndex(e => new { e.KBenutzer, e.KTicket }, "UQ_Ticketsystem_tAgentAngeseheneTickets_kBenutzer_kTicket").IsUnique();

            entity.Property(e => e.KAgentAngeseheneTickets).HasColumnName("kAgentAngeseheneTickets");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KNachricht).HasColumnName("kNachricht");
            entity.Property(e => e.KNotiz).HasColumnName("kNotiz");
            entity.Property(e => e.KTelefonat).HasColumnName("kTelefonat");
            entity.Property(e => e.KTicket).HasColumnName("kTicket");

            entity.HasOne(d => d.KNachrichtNavigation).WithMany(p => p.TAgentAngeseheneTickets)
                .HasForeignKey(d => d.KNachricht)
                .HasConstraintName("FK_Ticketsystem_tAgentAngeseheneTickets_kNachricht");

            entity.HasOne(d => d.KNotizNavigation).WithMany(p => p.TAgentAngeseheneTickets)
                .HasForeignKey(d => d.KNotiz)
                .HasConstraintName("FK_Ticketsystem_tAgentAngeseheneTickets_kNotiz");

            entity.HasOne(d => d.KTelefonatNavigation).WithMany(p => p.TAgentAngeseheneTickets)
                .HasForeignKey(d => d.KTelefonat)
                .HasConstraintName("FK_Ticketsystem_tAgentAngeseheneTickets_kTelefonat");

            entity.HasOne(d => d.KTicketNavigation).WithMany(p => p.TAgentAngeseheneTickets)
                .HasForeignKey(d => d.KTicket)
                .HasConstraintName("FK_Ticketsystem_tAgentAngeseheneTickets_kTicket");
        });

        modelBuilder.Entity<TAgentLiestTicket>(entity =>
        {
            entity.HasKey(e => e.KAgentLiestTicket).HasName("PK_Ticketsystem_tAgentLiestTicket");

            entity.ToTable("tAgentLiestTicket", "Ticketsystem");

            entity.HasIndex(e => e.KBenutzer, "IX_Ticketsystem_tAgentLiestTicket_kBenutzer");

            entity.HasIndex(e => e.KTicket, "IX_Ticketsystem_tAgentLiestTicket_kTicket");

            entity.Property(e => e.KAgentLiestTicket).HasColumnName("kAgentLiestTicket");
            entity.Property(e => e.DZeitpunkt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dZeitpunkt");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KTicket).HasColumnName("kTicket");

            entity.HasOne(d => d.KTicketNavigation).WithMany(p => p.TAgentLiestTickets)
                .HasForeignKey(d => d.KTicket)
                .HasConstraintName("FK_Ticketsystem_tAgentLiestTicket_kTicket");
        });

        modelBuilder.Entity<TAktiverAbgleich>(entity =>
        {
            entity.HasKey(e => e.KAktiverEmailAbgleich).HasName("PK_Ticketsystem_tAktiverAbgleich");

            entity.ToTable("tAktiverAbgleich", "Ticketsystem");

            entity.Property(e => e.KAktiverEmailAbgleich).HasColumnName("kAktiverEmailAbgleich");
            entity.Property(e => e.CHostname)
                .HasMaxLength(50)
                .HasColumnName("cHostname");
            entity.Property(e => e.DLock)
                .HasColumnType("datetime")
                .HasColumnName("dLock");
            entity.Property(e => e.NProcessId).HasColumnName("nProcessId");
        });

        modelBuilder.Entity<TAllowedDatatype>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tAllowedDatatypes", "CustomWorkflows");

            entity.Property(e => e.TypeName)
                .HasMaxLength(255)
                .HasColumnName("typeName");
        });

        modelBuilder.Entity<TAmazonAngebotFehler>(entity =>
        {
            entity.HasKey(e => e.KAmazonAngebotFehler).HasName("PK_Amazon_tAmazonAngebotFehler");

            entity.ToTable("tAmazonAngebotFehler", "Amazon");

            entity.HasIndex(e => new { e.KUser, e.NPlattform, e.CSku }, "IX_Amazon_tAmazonAngebotFehler_kUser_nPlattform_cSku");

            entity.Property(e => e.KAmazonAngebotFehler).HasColumnName("kAmazonAngebotFehler");
            entity.Property(e => e.CFehlerCode)
                .HasMaxLength(30)
                .HasColumnName("cFehlerCode");
            entity.Property(e => e.CFehlerText).HasColumnName("cFehlerText");
            entity.Property(e => e.CFehlerTyp).HasColumnName("cFehlerTyp");
            entity.Property(e => e.CSku)
                .HasMaxLength(100)
                .HasColumnName("cSku");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.NPlattform).HasColumnName("nPlattform");

            entity.HasOne(d => d.KUserNavigation).WithMany(p => p.TAmazonAngebotFehlers)
                .HasForeignKey(d => d.KUser)
                .HasConstraintName("FK_Amazon_tAmazonAngebotFehler_kUser");
        });

        modelBuilder.Entity<TAmazonBuyBoxStrategy>(entity =>
        {
            entity.HasKey(e => e.KAmazonBuyBoxStrategy).HasName("PK_Repricer_tAmazonBuyBoxStrategy");

            entity.ToTable("tAmazonBuyBoxStrategy", "Repricer");

            entity.Property(e => e.KAmazonBuyBoxStrategy).HasColumnName("kAmazonBuyBoxStrategy");
            entity.Property(e => e.CMaxPreisFormel)
                .HasDefaultValueSql("('')")
                .HasColumnName("cMaxPreisFormel");
            entity.Property(e => e.CMinPreisFormel)
                .HasDefaultValueSql("('')")
                .HasColumnName("cMinPreisFormel");
            entity.Property(e => e.FMaxPreis)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fMaxPreis");
            entity.Property(e => e.FMaxPreisAufschlagProzent)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fMaxPreisAufschlagProzent");
            entity.Property(e => e.FMinPreis)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fMinPreis");
            entity.Property(e => e.FMinPreisAufschlagProzent)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fMinPreisAufschlagProzent");
            entity.Property(e => e.FPreisabstand)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fPreisabstand");
            entity.Property(e => e.NAufschlagKalkulation)
                .HasDefaultValueSql("((1))")
                .HasColumnName("nAufschlagKalkulation");
            entity.Property(e => e.NAufschlagProzentNutzen).HasColumnName("nAufschlagProzentNutzen");
            entity.Property(e => e.NPreisabstandNutzen).HasColumnName("nPreisabstandNutzen");
        });

        modelBuilder.Entity<TAmazonCompetitor>(entity =>
        {
            entity.HasKey(e => e.KAmazonCompetitor).HasName("PK_Repricer_tAmazonCompetitor");

            entity.ToTable("tAmazonCompetitor", "Repricer");

            entity.HasIndex(e => new { e.KAmazonCompetitorAsinStrategy, e.CAsin }, "UQ_Repricer_tAmazonCompetitor_kAmazonCompetitorAsinStrategy_cAsin").IsUnique();

            entity.Property(e => e.KAmazonCompetitor).HasColumnName("kAmazonCompetitor");
            entity.Property(e => e.CAsin)
                .HasMaxLength(30)
                .HasColumnName("cAsin");
            entity.Property(e => e.CBewertungAfn)
                .HasMaxLength(100)
                .HasColumnName("cBewertungAfn");
            entity.Property(e => e.CBewertungMfn)
                .HasMaxLength(100)
                .HasColumnName("cBewertungMfn");
            entity.Property(e => e.CLieferzeitAfn)
                .HasMaxLength(100)
                .HasColumnName("cLieferzeitAfn");
            entity.Property(e => e.CLieferzeitMfn)
                .HasMaxLength(100)
                .HasColumnName("cLieferzeitMfn");
            entity.Property(e => e.DLetztePreisAktualisierung)
                .HasColumnType("datetime")
                .HasColumnName("dLetztePreisAktualisierung");
            entity.Property(e => e.KAmazonCompetitorAsinStrategy).HasColumnName("kAmazonCompetitorAsinStrategy");
            entity.Property(e => e.NAnzahlBewertungenAfn).HasColumnName("nAnzahlBewertungenAfn");
            entity.Property(e => e.NAnzahlBewertungenMfn).HasColumnName("nAnzahlBewertungenMfn");
            entity.Property(e => e.NMinPreisAfn)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("nMinPreisAfn");
            entity.Property(e => e.NMinPreisMfn)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("nMinPreisMfn");

            entity.HasOne(d => d.KAmazonCompetitorAsinStrategyNavigation).WithMany(p => p.TAmazonCompetitors)
                .HasForeignKey(d => d.KAmazonCompetitorAsinStrategy)
                .HasConstraintName("FK_Repricer_tAmazonCompetitor_kAmazonCompetitorAsinStrategy");
        });

        modelBuilder.Entity<TAmazonCompetitorAsinStrategy>(entity =>
        {
            entity.HasKey(e => e.KAmazonCompetitorAsinStrategy).HasName("PK_Repricer_tAmazonCompetitorAsinStrategy");

            entity.ToTable("tAmazonCompetitorAsinStrategy", "Repricer");

            entity.Property(e => e.KAmazonCompetitorAsinStrategy).HasColumnName("kAmazonCompetitorAsinStrategy");
            entity.Property(e => e.CMaxPreisFormel)
                .HasDefaultValueSql("('')")
                .HasColumnName("cMaxPreisFormel");
            entity.Property(e => e.CMinPreisFormel)
                .HasDefaultValueSql("('')")
                .HasColumnName("cMinPreisFormel");
            entity.Property(e => e.FMaxPreis)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fMaxPreis");
            entity.Property(e => e.FMaxPreisAufschlagProzent)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fMaxPreisAufschlagProzent");
            entity.Property(e => e.FMinPreis)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fMinPreis");
            entity.Property(e => e.FMinPreisAufschlagProzent)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fMinPreisAufschlagProzent");
            entity.Property(e => e.FPreisabstand)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fPreisabstand");
            entity.Property(e => e.NAufschlagKalkulation)
                .HasDefaultValueSql("((1))")
                .HasColumnName("nAufschlagKalkulation");
            entity.Property(e => e.NAufschlagProzentNutzen).HasColumnName("nAufschlagProzentNutzen");
            entity.Property(e => e.NDeliveryTimeMax).HasColumnName("nDeliveryTimeMax");
            entity.Property(e => e.NDeliveryTimeMin).HasColumnName("nDeliveryTimeMin");
            entity.Property(e => e.NFulfillment).HasColumnName("nFulfillment");
            entity.Property(e => e.NRating).HasColumnName("nRating");
            entity.Property(e => e.NRatingCount).HasColumnName("nRatingCount");
        });

        modelBuilder.Entity<TAmazonShippingDruckereinstellungen>(entity =>
        {
            entity.HasKey(e => e.KAmazonShippingDruckereinstellungen).HasName("PK_dbo_tAmazonShippingDruckereinstellungen");

            entity.ToTable("tAmazonShippingDruckereinstellungen");

            entity.Property(e => e.KAmazonShippingDruckereinstellungen).HasColumnName("kAmazonShippingDruckereinstellungen");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CDruckername)
                .HasMaxLength(255)
                .HasColumnName("cDruckername");
            entity.Property(e => e.CRechnername)
                .HasMaxLength(255)
                .HasColumnName("cRechnername");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KVersandart).HasColumnName("kVersandart");
            entity.Property(e => e.NPageScaling).HasColumnName("nPageScaling");
        });

        modelBuilder.Entity<TAmazonStrategieAuswahl>(entity =>
        {
            entity.HasKey(e => e.KAmazonStrategieAuswahl).HasName("PK_Repricer_tAmazonStrategieAuswahl");

            entity.ToTable("tAmazonStrategieAuswahl", "Repricer");

            entity.Property(e => e.KAmazonStrategieAuswahl).HasColumnName("kAmazonStrategieAuswahl");
            entity.Property(e => e.KAbverkauf).HasColumnName("kAbverkauf");
            entity.Property(e => e.KAmazonBuyBoxStrategy).HasColumnName("kAmazonBuyBoxStrategy");
            entity.Property(e => e.KAmazonCompetitorAsinStrategy).HasColumnName("kAmazonCompetitorAsinStrategy");
            entity.Property(e => e.KMargensteigerung).HasColumnName("kMargensteigerung");
            entity.Property(e => e.NAktiveStrategie).HasColumnName("nAktiveStrategie");

            entity.HasOne(d => d.KAbverkaufNavigation).WithMany(p => p.TAmazonStrategieAuswahls)
                .HasForeignKey(d => d.KAbverkauf)
                .HasConstraintName("FK_Repricer_tAmazonStrategieAuswahl_kAbverkauf");

            entity.HasOne(d => d.KAmazonBuyBoxStrategyNavigation).WithMany(p => p.TAmazonStrategieAuswahls)
                .HasForeignKey(d => d.KAmazonBuyBoxStrategy)
                .HasConstraintName("FK_Repricer_tAmazonStrategieAuswahl_kAmazonBuyBoxStrategy");

            entity.HasOne(d => d.KAmazonCompetitorAsinStrategyNavigation).WithMany(p => p.TAmazonStrategieAuswahls)
                .HasForeignKey(d => d.KAmazonCompetitorAsinStrategy)
                .HasConstraintName("FK_Repricer_tAmazonStrategieAuswahl_kAmazonCompetitorAsinStrategy");

            entity.HasOne(d => d.KMargensteigerungNavigation).WithMany(p => p.TAmazonStrategieAuswahls)
                .HasForeignKey(d => d.KMargensteigerung)
                .HasConstraintName("FK_Repricer_tAmazonStrategieAuswahl_kMargensteigerung");
        });

        modelBuilder.Entity<TAmazonTask>(entity =>
        {
            entity.HasKey(e => e.KAmazonTask).HasName("PK_Repricer_tAmazonTask");

            entity.ToTable("tAmazonTask", "Repricer");

            entity.Property(e => e.KAmazonTask).HasColumnName("kAmazonTask");
            entity.Property(e => e.CSku)
                .HasMaxLength(100)
                .HasColumnName("cSku");
            entity.Property(e => e.DZuletztGesendet)
                .HasColumnType("datetime")
                .HasColumnName("dZuletztGesendet");
            entity.Property(e => e.KAmazonStrategieAuswahl).HasColumnName("kAmazonStrategieAuswahl");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.KVorlage).HasColumnName("kVorlage");
            entity.Property(e => e.NDeaktiviertDurchBestand).HasColumnName("nDeaktiviertDurchBestand");
            entity.Property(e => e.NGeaendert).HasColumnName("nGeaendert");
            entity.Property(e => e.NPlattform).HasColumnName("nPlattform");
            entity.Property(e => e.NRepricingAktiv).HasColumnName("nRepricingAktiv");

            entity.HasOne(d => d.KAmazonStrategieAuswahlNavigation).WithMany(p => p.TAmazonTasks)
                .HasForeignKey(d => d.KAmazonStrategieAuswahl)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Repricer_tAmazonTask_kAmazonStrategieAuswahl");

            entity.HasOne(d => d.KUserNavigation).WithMany(p => p.TAmazonTasks)
                .HasForeignKey(d => d.KUser)
                .HasConstraintName("FK_Repricer_tAmazonTask_kUser");

            entity.HasOne(d => d.KVorlageNavigation).WithMany(p => p.TAmazonTasks)
                .HasForeignKey(d => d.KVorlage)
                .HasConstraintName("FK_Repricer_tAmazonTask_kVorlage");
        });

        modelBuilder.Entity<TAmazonVersandschnittstellenkonfiguration>(entity =>
        {
            entity.HasKey(e => e.KAmazonVersandschnittstellenkonfiguration).HasName("PK_dbo_tAmazonVersandschnittstellenkonfiguration");

            entity.ToTable("tAmazonVersandschnittstellenkonfiguration");

            entity.Property(e => e.KAmazonVersandschnittstellenkonfiguration).HasColumnName("kAmazonVersandschnittstellenkonfiguration");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CVersandartName)
                .HasMaxLength(255)
                .HasColumnName("cVersandartName");
            entity.Property(e => e.DHeight)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dHeight");
            entity.Property(e => e.DLength)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dLength");
            entity.Property(e => e.DWeight)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dWeight");
            entity.Property(e => e.DWidth)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dWidth");
            entity.Property(e => e.FMinWeight)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMinWeight");
            entity.Property(e => e.KVersandart).HasColumnName("kVersandart");
            entity.Property(e => e.NAdditionalInsurance).HasColumnName("nAdditionalInsurance");
            entity.Property(e => e.NAutoCalcWeight).HasColumnName("nAutoCalcWeight");
            entity.Property(e => e.NCarrierWillPickUp).HasColumnName("nCarrierWillPickUp");
            entity.Property(e => e.NUseWarenlagerAdresse).HasColumnName("nUseWarenlagerAdresse");
        });

        modelBuilder.Entity<TAmazonabgleichLogsitzung>(entity =>
        {
            entity.HasKey(e => e.KAmazonabgleichLogsitzung).HasName("PK_Amazon_tAmazonabgleichLogsitzung");

            entity.ToTable("tAmazonabgleichLogsitzung", "Amazon");

            entity.Property(e => e.KAmazonabgleichLogsitzung).HasColumnName("kAmazonabgleichLogsitzung");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CRechnername)
                .HasMaxLength(64)
                .HasColumnName("cRechnername");
            entity.Property(e => e.CStatusMeldung)
                .HasMaxLength(2048)
                .HasColumnName("cStatusMeldung");
            entity.Property(e => e.DEnde)
                .HasColumnType("datetime")
                .HasColumnName("dEnde");
            entity.Property(e => e.DStart)
                .HasColumnType("datetime")
                .HasColumnName("dStart");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<TAmazonbestellpositionVcszuordnung>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tAmazonbestellpositionVCSZuordnung", "Amazon");

            entity.Property(e => e.KAmazonBestellungPos).HasColumnName("kAmazonBestellungPos");
            entity.Property(e => e.KMessageId).HasColumnName("kMessageId");
            entity.Property(e => e.KRechnungPosition).HasColumnName("kRechnungPosition");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<TAnfangsNr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tAnfangsNr", tb => tb.HasTrigger("tgr_tAnfangsNr_INSUPDEL"));

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.SAnPost)
                .HasMaxLength(10)
                .HasColumnName("sAnPost");
            entity.Property(e => e.SAnPre)
                .HasMaxLength(10)
                .HasColumnName("sAnPre");
            entity.Property(e => e.SApost)
                .HasMaxLength(10)
                .HasColumnName("sAPost");
            entity.Property(e => e.SApre)
                .HasMaxLength(10)
                .HasColumnName("sAPre");
            entity.Property(e => e.SArtPost)
                .HasMaxLength(10)
                .HasColumnName("sArtPost");
            entity.Property(e => e.SArtPre)
                .HasMaxLength(10)
                .HasColumnName("sArtPre");
            entity.Property(e => e.SBpost)
                .HasMaxLength(10)
                .HasColumnName("sBPost");
            entity.Property(e => e.SBpre)
                .HasMaxLength(10)
                .HasColumnName("sBPre");
            entity.Property(e => e.SGpost)
                .HasMaxLength(10)
                .HasColumnName("sGPost");
            entity.Property(e => e.SGpre)
                .HasMaxLength(10)
                .HasColumnName("sGPre");
            entity.Property(e => e.SKpost)
                .HasMaxLength(10)
                .HasColumnName("sKPost");
            entity.Property(e => e.SKpre)
                .HasMaxLength(10)
                .HasColumnName("sKPre");
            entity.Property(e => e.SPpost)
                .HasMaxLength(10)
                .HasColumnName("sPPost");
            entity.Property(e => e.SPpre)
                .HasMaxLength(10)
                .HasColumnName("sPPre");
            entity.Property(e => e.SRpost)
                .HasMaxLength(10)
                .HasColumnName("sRPost");
            entity.Property(e => e.SRpre)
                .HasMaxLength(10)
                .HasColumnName("sRPre");
        });

        modelBuilder.Entity<TAntwortkanal>(entity =>
        {
            entity.HasKey(e => e.KAntwortkanal).HasName("PK_Ticketsystem_tAntwortkanal");

            entity.ToTable("tAntwortkanal", "Ticketsystem");

            entity.HasIndex(e => new { e.CAdresse, e.NTyp }, "IX_Ticketsystem_tAntwortkanal_cAdresse_nTyp").IsUnique();

            entity.Property(e => e.KAntwortkanal).HasColumnName("kAntwortkanal");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAdresse)
                .HasMaxLength(255)
                .HasColumnName("cAdresse");
            entity.Property(e => e.DDeaktivierung)
                .HasColumnType("datetime")
                .HasColumnName("dDeaktivierung");
            entity.Property(e => e.DErstellung)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dErstellung");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<TArtikel>(entity =>
        {
            entity.HasKey(e => e.KArtikel).HasName("PK_dbo_tArtikel");

            entity.ToTable("tArtikel", tb =>
                {
                    tb.HasTrigger("jtlActionValidator_tartikel");
                    tb.HasTrigger("tgr_dbo_tArtikel_Repricer");
                    tb.HasTrigger("tgr_tArtikel_Sync_DEL");
                    tb.HasTrigger("tgr_tArtikel_Sync_INSUP");
                    tb.HasTrigger("tgr_tartikel_INSUP");
                });

            entity.HasIndex(e => new { e.NIstVater, e.KStueckliste }, "IX_dbo_tArtikel_nIstVater_kStueckliste_INCL");

            entity.HasIndex(e => e.NSonderTyp, "IX_dbo_tArtikel_nSonderTyp");

            entity.HasIndex(e => e.CAsin, "IX_tArtikel_cASIN");

            entity.HasIndex(e => new { e.CAktiv, e.CLagerAktiv, e.CLagerVariation, e.NIstVater, e.KStueckliste }, "IX_tArtikel_cAktiv_cLagerAktiv_cLagerVariation_nIstVater_kStueckliste");

            entity.HasIndex(e => e.CBarcode, "IX_tArtikel_cBarcode");

            entity.HasIndex(e => e.CHan, "IX_tArtikel_cHAN");

            entity.HasIndex(e => e.CIsbn, "IX_tArtikel_cISBN");

            entity.HasIndex(e => new { e.CLagerAktiv, e.CLagerVariation, e.NIstTeilmengenArtikel, e.NIstVater }, "IX_tArtikel_cLagerAktiv_cLagerVariation_nIstTeilmengenArtikel_nIstVater_FILTER").HasFilter("([nIstVater]=(0))");

            entity.HasIndex(e => e.CSerie, "IX_tArtikel_cSerie");

            entity.HasIndex(e => e.CSuchbegriffe, "IX_tArtikel_cSuchbegriffe");

            entity.HasIndex(e => e.FEknetto, "IX_tArtikel_fEKNetto");

            entity.HasIndex(e => e.KArtikel, "IX_tArtikel_kArtikel_INCL2");

            entity.HasIndex(e => e.KEigenschaftKombi, "IX_tArtikel_kEigenschaftKombi");

            entity.HasIndex(e => e.KHersteller, "IX_tArtikel_kHersteller");

            entity.HasIndex(e => e.KStueckliste, "IX_tArtikel_kStueckliste_INCL");

            entity.HasIndex(e => new { e.KVaterArtikel, e.CAktiv, e.NIstMindestbestand }, "IX_tArtikel_kVaterArtikel_cAktiv_nIstMindestbestand");

            entity.HasIndex(e => new { e.KVaterArtikel, e.NIstVater }, "IX_tArtikel_kVaterArtikel_nIstVater");

            entity.HasIndex(e => e.KWarengruppe, "IX_tArtikel_kWarengruppe");

            entity.HasIndex(e => new { e.CLagerAktiv, e.NIstVater, e.KStueckliste, e.CLagerVariation }, "IX_tartikel_cLagerAktiv_nIstVater_kStueckliste_cLagerVariation");

            entity.HasIndex(e => e.CArtNr, "UQ_dbo_tArtikel_cArtNr").IsUnique();

            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAktiv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("cAktiv");
            entity.Property(e => e.CAmazonFnsku)
                .HasMaxLength(50)
                .HasColumnName("cAmazonFNSKU");
            entity.Property(e => e.CAnmerkung).HasColumnName("cAnmerkung");
            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CAsin)
                .HasMaxLength(255)
                .HasDefaultValueSql("('')")
                .HasColumnName("cASIN");
            entity.Property(e => e.CBarcode)
                .HasMaxLength(255)
                .HasColumnName("cBarcode");
            entity.Property(e => e.CDelInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cDelInet");
            entity.Property(e => e.CEpid)
                .HasMaxLength(255)
                .HasColumnName("cEPID");
            entity.Property(e => e.CGefahrnr)
                .HasMaxLength(255)
                .HasDefaultValueSql("('')")
                .HasColumnName("cGefahrnr");
            entity.Property(e => e.CHan)
                .HasMaxLength(255)
                .HasColumnName("cHAN");
            entity.Property(e => e.CHerkunftsland)
                .HasMaxLength(64)
                .HasColumnName("cHerkunftsland");
            entity.Property(e => e.CInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("cInet");
            entity.Property(e => e.CIsbn)
                .HasMaxLength(255)
                .HasDefaultValueSql("('')")
                .HasColumnName("cISBN");
            entity.Property(e => e.CJfsku)
                .HasMaxLength(50)
                .HasColumnName("cJfsku");
            entity.Property(e => e.CLabelNamen).HasColumnName("cLabelNamen");
            entity.Property(e => e.CLagerAktiv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("cLagerAktiv");
            entity.Property(e => e.CLagerArtikel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("cLagerArtikel");
            entity.Property(e => e.CLagerKleinerNull)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("cLagerKleinerNull");
            entity.Property(e => e.CLagerVariation)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLagerVariation");
            entity.Property(e => e.CNeu)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("cNeu");
            entity.Property(e => e.CPreisliste)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("cPreisliste");
            entity.Property(e => e.CSerie)
                .HasMaxLength(255)
                .HasColumnName("cSerie");
            entity.Property(e => e.CSuchbegriffe)
                .HasMaxLength(255)
                .HasColumnName("cSuchbegriffe");
            entity.Property(e => e.CTaric)
                .HasMaxLength(20)
                .HasColumnName("cTaric");
            entity.Property(e => e.CTeilbar)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("cTeilbar");
            entity.Property(e => e.CTopArtikel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("cTopArtikel");
            entity.Property(e => e.CUnnummer)
                .HasMaxLength(255)
                .HasDefaultValueSql("('')")
                .HasColumnName("cUNNummer");
            entity.Property(e => e.CUpc)
                .HasMaxLength(255)
                .HasColumnName("cUPC");
            entity.Property(e => e.DErscheinungsdatum)
                .HasColumnType("datetime")
                .HasColumnName("dErscheinungsdatum");
            entity.Property(e => e.DErstelldatum)
                .HasColumnType("datetime")
                .HasColumnName("dErstelldatum");
            entity.Property(e => e.DLetzterEk)
                .HasColumnType("datetime")
                .HasColumnName("dLetzterEK");
            entity.Property(e => e.DMod)
                .HasColumnType("datetime")
                .HasColumnName("dMod");
            entity.Property(e => e.DNeuImSortiment)
                .HasColumnType("datetime")
                .HasColumnName("dNeuImSortiment");
            entity.Property(e => e.DZulaufVerfuegbarAm)
                .HasColumnType("datetime")
                .HasColumnName("dZulaufVerfuegbarAm");
            entity.Property(e => e.FAbnahmeintervall)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAbnahmeintervall");
            entity.Property(e => e.FAmazonVk)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAmazonVK");
            entity.Property(e => e.FArtGewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fArtGewicht");
            entity.Property(e => e.FBreite)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBreite");
            entity.Property(e => e.FEbayPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEbayPreis");
            entity.Property(e => e.FEknetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEKNetto");
            entity.Property(e => e.FGewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGewicht");
            entity.Property(e => e.FGrundpreisMenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGrundpreisMenge");
            entity.Property(e => e.FHoehe)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fHoehe");
            entity.Property(e => e.FLaenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLaenge");
            entity.Property(e => e.FLetzterEk)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLetzterEK");
            entity.Property(e => e.FMassMenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMassMenge");
            entity.Property(e => e.FPackeinheit)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPackeinheit");
            entity.Property(e => e.FUvp)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fUVP");
            entity.Property(e => e.FVknetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVKNetto");
            entity.Property(e => e.FVpewert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVPEWert");
            entity.Property(e => e.KBenutzerLetzteAenderung).HasColumnName("kBenutzerLetzteAenderung");
            entity.Property(e => e.KDefinition).HasColumnName("kDefinition");
            entity.Property(e => e.KEigenschaftKombi).HasColumnName("kEigenschaftKombi");
            entity.Property(e => e.KGrundPreisEinheit).HasColumnName("kGrundPreisEinheit");
            entity.Property(e => e.KHersteller).HasColumnName("kHersteller");
            entity.Property(e => e.KLieferStatus).HasColumnName("kLieferStatus");
            entity.Property(e => e.KMassEinheit).HasColumnName("kMassEinheit");
            entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");
            entity.Property(e => e.KStueckliste).HasColumnName("kStueckliste");
            entity.Property(e => e.KVaterArtikel).HasColumnName("kVaterArtikel");
            entity.Property(e => e.KVerkaufsEinheit).HasColumnName("kVerkaufsEinheit");
            entity.Property(e => e.KVersandklasse).HasColumnName("kVersandklasse");
            entity.Property(e => e.KVpeeinheit).HasColumnName("kVPEEinheit");
            entity.Property(e => e.KWarengruppe).HasColumnName("kWarengruppe");
            entity.Property(e => e.KZustand)
                .HasDefaultValueSql("((1))")
                .HasColumnName("kZustand");
            entity.Property(e => e.NAutomatischeLiefertageberechnung)
                .HasDefaultValueSql("((1))")
                .HasColumnName("nAutomatischeLiefertageberechnung");
            entity.Property(e => e.NBearbeitungszeit).HasColumnName("nBearbeitungszeit");
            entity.Property(e => e.NCharge).HasColumnName("nCharge");
            entity.Property(e => e.NDelete)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nDelete");
            entity.Property(e => e.NEbayAbgleich).HasColumnName("nEbayAbgleich");
            entity.Property(e => e.NIstMindestbestand).HasColumnName("nIstMindestbestand");
            entity.Property(e => e.NIstTeilmengenArtikel).HasColumnName("nIstTeilmengenArtikel");
            entity.Property(e => e.NIstVater).HasColumnName("nIstVater");
            entity.Property(e => e.NLagerbestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nLagerbestand");
            entity.Property(e => e.NLiefertageWennAusverkauft)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nLiefertageWennAusverkauft");
            entity.Property(e => e.NMhd).HasColumnName("nMHD");
            entity.Property(e => e.NMidestbestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nMidestbestand");
            entity.Property(e => e.NMindestbestellmaenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nMindestbestellmaenge");
            entity.Property(e => e.NNichtBestellbar).HasColumnName("nNichtBestellbar");
            entity.Property(e => e.NNichtRabattfaehig).HasColumnName("nNichtRabattfaehig");
            entity.Property(e => e.NProzentualePreisStaffelAktiv).HasColumnName("nProzentualePreisStaffelAktiv");
            entity.Property(e => e.NPuffer).HasColumnName("nPuffer");
            entity.Property(e => e.NPufferTyp).HasColumnName("nPufferTyp");
            entity.Property(e => e.NSeriennummernVerfolgung).HasColumnName("nSeriennummernVerfolgung");
            entity.Property(e => e.NSonderTyp).HasColumnName("nSonderTyp");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NVpe).HasColumnName("nVPE");
            entity.Property(e => e.NZulaufVerfuegbarMenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nZulaufVerfuegbarMenge");
        });

        modelBuilder.Entity<TArtikelAbnahme>(entity =>
        {
            entity.HasKey(e => new { e.KArtikel, e.KKundengruppe }).HasName("PK_dbo_tArtikelAbnahme");

            entity.ToTable("tArtikelAbnahme", tb => tb.HasTrigger("tgr_tArtikelAbnahme_Connector"));

            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KKundengruppe).HasColumnName("kKundengruppe");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.FIntervall)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fIntervall");
            entity.Property(e => e.FMindestabnahme)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMindestabnahme");
        });

        modelBuilder.Entity<TArtikelAsin>(entity =>
        {
            entity.HasKey(e => e.KArtikelAsin).HasName("PK_Artikel_tArtikelAsin");

            entity.ToTable("tArtikelAsin", "Artikel", tb =>
                {
                    tb.HasTrigger("jtlActionValidator_Artikel_tArtikelAsin");
                    tb.HasTrigger("tgr_Artikel_tArtikelAsin_DEL");
                    tb.HasTrigger("tgr_Artikel_tArtikelAsin_INSUP");
                });

            entity.HasIndex(e => e.KArtikel, "IX_Artikel_tArtikelAsin_kArtikel_INCL");

            entity.HasIndex(e => new { e.CAsin, e.KArtikel }, "UQ_Artikel_tArtikelAsin_cAsin_kArtikel").IsUnique();

            entity.Property(e => e.KArtikelAsin).HasColumnName("kArtikelAsin");
            entity.Property(e => e.CAsin)
                .HasMaxLength(30)
                .HasColumnName("cAsin");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

            entity.HasOne(d => d.KArtikelNavigation).WithMany(p => p.TArtikelAsins)
                .HasForeignKey(d => d.KArtikel)
                .HasConstraintName("FK_Artikel_tArtikelAsin_kArtikel");
        });

        modelBuilder.Entity<TArtikelAttribut>(entity =>
        {
            entity.HasKey(e => e.KArtikelAttribut).HasName("PK_dbo_tArtikelAttribut");

            entity.ToTable("tArtikelAttribut", tb =>
                {
                    tb.HasTrigger("jtlActionValidator_tArtikelAttribut");
                    tb.HasTrigger("tgr_tArtikelAttribut_Connector_DELETE");
                    tb.HasTrigger("tgr_tArtikelAttribut_DEL");
                    tb.HasTrigger("tgr_tArtikelAttribut_INSUP");
                });

            entity.HasIndex(e => e.KAttribut, "IX_dbo_tArtikelAttribut_kAttribut_INCL");

            entity.HasIndex(e => new { e.KArtikel, e.KAttribut, e.KShop }, "UQ_dbo_tArtikelAttribut_kArtikel_kAttribut_kShop").IsUnique();

            entity.Property(e => e.KArtikelAttribut).HasColumnName("kArtikelAttribut");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KAttribut).HasColumnName("kAttribut");
            entity.Property(e => e.KShop).HasColumnName("kShop");
        });

        modelBuilder.Entity<TArtikelAttributSprache>(entity =>
        {
            entity.HasKey(e => new { e.KArtikelAttribut, e.KSprache }).HasName("PK_dbo_tArtikelAttributSprache");

            entity.ToTable("tArtikelAttributSprache", tb =>
                {
                    tb.HasTrigger("tgr_tArtikelAttributSprache_DEL");
                    tb.HasTrigger("tgr_tArtikelAttributSprache_INSUP");
                });

            entity.Property(e => e.KArtikelAttribut).HasColumnName("kArtikelAttribut");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CWertVarchar).HasColumnName("cWertVarchar");
            entity.Property(e => e.DWertDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dWertDateTime");
            entity.Property(e => e.FWertDecimal)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertDecimal");
            entity.Property(e => e.NWertInt).HasColumnName("nWertInt");
        });

        modelBuilder.Entity<TArtikelBeschreibung>(entity =>
        {
            entity.HasKey(e => new { e.KArtikel, e.KSprache, e.KPlattform, e.KShop }).HasName("PK_dbo_tArtikelBeschreibung");

            entity.ToTable("tArtikelBeschreibung", tb =>
                {
                    tb.HasTrigger("tgr_tArtikelBeschreibung_DEL");
                    tb.HasTrigger("tgr_tArtikelBeschreibung_INSUP");
                });

            entity.HasIndex(e => new { e.KArtikel, e.KPlattform, e.KSprache }, "IX_tArtikelBeschreibung_kArtikel_kPlattform_kSprache_INCL");

            entity.HasIndex(e => e.KPlattform, "IX_tArtikelBeschreibung_kPlattform_INCL_kArtikel_kSprache");

            entity.HasIndex(e => new { e.KSprache, e.KPlattform }, "IX_tArtikelBeschreibung_kSprache_kPlattform");

            entity.HasIndex(e => new { e.KArtikel, e.KSprache, e.KPlattform }, "IX_tArtikelbeschreibung_kArtikel_kSprache_kPlattform");

            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBeschreibung).HasColumnName("cBeschreibung");
            entity.Property(e => e.CKurzBeschreibung).HasColumnName("cKurzBeschreibung");
            entity.Property(e => e.CMetaDescription).HasColumnName("cMetaDescription");
            entity.Property(e => e.CMetaKeywords)
                .HasMaxLength(4000)
                .HasColumnName("cMetaKeywords");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CTitleTag)
                .HasMaxLength(4000)
                .HasColumnName("cTitleTag");
            entity.Property(e => e.CUrlPfad)
                .HasMaxLength(255)
                .HasColumnName("cUrlPfad");
        });

        modelBuilder.Entity<TArtikelDimension>(entity =>
        {
            entity.HasKey(e => e.KArtikelDimension).HasName("PK_Artikel_tArtikelDimension");

            entity.ToTable("tArtikelDimension", "Artikel");

            entity.Property(e => e.KArtikelDimension).HasColumnName("kArtikelDimension");
            entity.Property(e => e.FMaxWert)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fMaxWert");
            entity.Property(e => e.FMinWert)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fMinWert");
            entity.Property(e => e.FWert)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fWert");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KDimension).HasColumnName("kDimension");
            entity.Property(e => e.KMasseinheit).HasColumnName("kMasseinheit");

            entity.HasOne(d => d.KArtikelNavigation).WithMany(p => p.TArtikelDimensions)
                .HasForeignKey(d => d.KArtikel)
                .HasConstraintName("FK_Artikel_tArtikelDimension_kArtikel");

            entity.HasOne(d => d.KDimensionNavigation).WithMany(p => p.TArtikelDimensions)
                .HasForeignKey(d => d.KDimension)
                .HasConstraintName("FK_Artikel_tArtikelDimension_kDimension");

            entity.HasOne(d => d.KMasseinheitNavigation).WithMany(p => p.TArtikelDimensions)
                .HasForeignKey(d => d.KMasseinheit)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Artikel_tArtikelDimension_kMassEinheit");
        });

        modelBuilder.Entity<TArtikelEinkaufsliste>(entity =>
        {
            entity.HasKey(e => e.KArtikelEinkaufsliste).HasName("PK_dbo_tArtikelEinkaufsliste");

            entity.ToTable("tArtikelEinkaufsliste", tb => tb.HasTrigger("tgr_tArtikelEinkaufsliste_INSUPDEL"));

            entity.HasIndex(e => e.KArtikel, "IX_dbo_tArtikelEinkaufsliste_kArtikel_INCL");

            entity.HasIndex(e => new { e.KArtikel, e.KLieferant }, "IX_dbo_tArtikelEinkaufsliste_kArtikel_kLieferant");

            entity.Property(e => e.KArtikelEinkaufsliste).HasColumnName("kArtikelEinkaufsliste");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBestellmodus)
                .HasMaxLength(255)
                .HasColumnName("cBestellmodus");
            entity.Property(e => e.CHinweis).HasColumnName("cHinweis");
            entity.Property(e => e.CStatus)
                .HasMaxLength(255)
                .HasColumnName("cStatus");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.FEknettoLieferant)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEKNettoLieferant");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
        });

        modelBuilder.Entity<TArtikelEpid>(entity =>
        {
            entity.HasKey(e => e.KArtikelEpid).HasName("PK_dbo_tArtikelEpid");

            entity.ToTable("tArtikelEpid");

            entity.HasIndex(e => e.KArtikel, "IDX_tArtikelEpid_kArtikel");

            entity.HasIndex(e => new { e.KArtikel, e.KSiteId }, "UQ_dbo_tArtikelEpid_kArtikel_kSiteId").IsUnique();

            entity.Property(e => e.KArtikelEpid).HasColumnName("kArtikelEpid");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CEpid)
                .HasMaxLength(255)
                .HasColumnName("cEpid");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KSiteId).HasColumnName("kSiteId");

            entity.HasOne(d => d.KArtikelNavigation).WithMany(p => p.TArtikelEpids)
                .HasForeignKey(d => d.KArtikel)
                .HasConstraintName("FK_dbo_tArtikelEpid_kArtikel");

            entity.HasOne(d => d.KSite).WithMany(p => p.TArtikelEpids)
                .HasForeignKey(d => d.KSiteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo_tArtikelEpid_kSiteId");
        });

        modelBuilder.Entity<TArtikelHistory>(entity =>
        {
            entity.HasKey(e => e.KArtikelHistory).HasName("PK_dbo_tArtikelHistory");

            entity.ToTable("tArtikelHistory");

            entity.HasIndex(e => new { e.KArtikel, e.KBuchungsart, e.DGebucht }, "IX_tArtikelHistory_kArtikel");

            entity.HasIndex(e => new { e.KBuchungsart, e.KWarenLagerPlatz }, "IX_tArtikelHistory_kWarenLagerPlatz_kBuchungsart_kWarenLagerPlatz_fAnzahl_dGebucht_kBenutzer_kWarenEingang_cKommentar");

            entity.Property(e => e.KArtikelHistory).HasColumnName("kArtikelHistory");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CChargenNr)
                .HasMaxLength(255)
                .HasColumnName("cChargenNr");
            entity.Property(e => e.CDimensionen)
                .HasMaxLength(255)
                .HasColumnName("cDimensionen");
            entity.Property(e => e.CKommentar)
                .HasMaxLength(255)
                .HasColumnName("cKommentar");
            entity.Property(e => e.CLieferscheinNr)
                .HasMaxLength(255)
                .HasColumnName("cLieferscheinNr");
            entity.Property(e => e.CSubsetNumber)
                .HasMaxLength(100)
                .HasColumnName("cSubsetNumber");
            entity.Property(e => e.DGebucht)
                .HasColumnType("datetime")
                .HasColumnName("dGebucht");
            entity.Property(e => e.DMhd)
                .HasColumnType("datetime")
                .HasColumnName("dMHD");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.FEknetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEKNetto");
            entity.Property(e => e.FLagerBestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLagerBestand");
            entity.Property(e => e.FLagerBestandGesamt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLagerBestandGesamt");
            entity.Property(e => e.FLagerBestandInLager)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLagerBestandInLager");
            entity.Property(e => e.FReserviert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fReserviert");
            entity.Property(e => e.FVerfuegbar)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVerfuegbar");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");
            entity.Property(e => e.KBuchungsart).HasColumnName("kBuchungsart");
            entity.Property(e => e.KGutschriftPos).HasColumnName("kGutschriftPos");
            entity.Property(e => e.KLhm).HasColumnName("kLHM");
            entity.Property(e => e.KLieferantenBestellungPos).HasColumnName("kLieferantenBestellungPos");
            entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KWarenEingang).HasColumnName("kWarenEingang");
            entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");
        });

        modelBuilder.Entity<TArtikelLabel>(entity =>
        {
            entity.HasKey(e => new { e.KArtikel, e.KLabel }).HasName("PK_dbo_tArtikelLabel");

            entity.ToTable("tArtikelLabel", tb =>
                {
                    tb.HasTrigger("tgr_tArtikelLabel_DEL");
                    tb.HasTrigger("tgr_tArtikelLabel_INSUP");
                });

            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KLabel).HasColumnName("kLabel");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");

            entity.HasOne(d => d.KArtikelNavigation).WithMany(p => p.TArtikelLabels)
                .HasForeignKey(d => d.KArtikel)
                .HasConstraintName("FK_dbo_tArtikelLabel_kArtikel");

            entity.HasOne(d => d.KLabelNavigation).WithMany(p => p.TArtikelLabels)
                .HasForeignKey(d => d.KLabel)
                .HasConstraintName("FK_dbo_tArtikelLabel_kLabel");
        });

        modelBuilder.Entity<TArtikelLagerOrt>(entity =>
        {
            entity.HasKey(e => e.KArtikelLagerOrt).HasName("PK_dbo_tArtikelLagerOrt");

            entity.ToTable("tArtikelLagerOrt");

            entity.Property(e => e.KArtikelLagerOrt)
                .ValueGeneratedNever()
                .HasColumnName("kArtikelLagerOrt");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CKommentar)
                .HasMaxLength(255)
                .HasColumnName("cKommentar");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KLager).HasColumnName("kLager");
            entity.Property(e => e.KLagerOrt).HasColumnName("kLagerOrt");
        });

        modelBuilder.Entity<TArtikelMehrzweckGutschein>(entity =>
        {
            entity.HasKey(e => e.KArtikel).HasName("PK_Artikel_tArtikelMehrzweckGutschein");

            entity.ToTable("tArtikelMehrzweckGutschein", "Artikel", tb =>
                {
                    tb.HasTrigger("tgr_tArtikelMehrzweckGutschein_DEL");
                    tb.HasTrigger("tgr_tArtikelMehrzweckGutschein_INSUP");
                });

            entity.Property(e => e.KArtikel)
                .ValueGeneratedNever()
                .HasColumnName("kArtikel");
            entity.Property(e => e.CIso)
                .HasMaxLength(5)
                .HasColumnName("cISO");
            entity.Property(e => e.CKampagne)
                .HasMaxLength(255)
                .HasColumnName("cKampagne");
            entity.Property(e => e.KGutscheinDruckVorlage).HasColumnName("kGutscheinDruckVorlage");
            entity.Property(e => e.NBetrag)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("nBetrag");
            entity.Property(e => e.NGutscheinArt).HasColumnName("nGutscheinArt");
            entity.Property(e => e.NGutscheinTyp).HasColumnName("nGutscheinTyp");
            entity.Property(e => e.NGutscheinVersandArt).HasColumnName("nGutscheinVersandArt");
            entity.Property(e => e.NHatFestenBetrag).HasColumnName("nHatFestenBetrag");
            entity.Property(e => e.NIsMehrzweckGutschein).HasColumnName("nIsMehrzweckGutschein");

            entity.HasOne(d => d.KArtikelNavigation).WithOne(p => p.TArtikelMehrzweckGutschein)
                .HasForeignKey<TArtikelMehrzweckGutschein>(d => d.KArtikel)
                .HasConstraintName("FK_Artikel_tArtikelMehrzweckGutschein_kArtikel");

            entity.HasOne(d => d.KGutscheinDruckVorlageNavigation).WithMany(p => p.TArtikelMehrzweckGutscheins)
                .HasForeignKey(d => d.KGutscheinDruckVorlage)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Artikel_tArtikelMehrzweckGutschein_kGutscheinDruckVorlage");
        });

        modelBuilder.Entity<TArtikelMerkmal>(entity =>
        {
            entity.HasKey(e => new { e.KMerkmalWert, e.KArtikel }).HasName("PK_dbo_tArtikelMerkmal");

            entity.ToTable("tArtikelMerkmal", tb =>
                {
                    tb.HasTrigger("tgr_tArtikelMerkmal_Connector");
                    tb.HasTrigger("tgr_tArtikelMerkmal_INSERT");
                    tb.HasTrigger("tgr_tArtikelMerkmal_INSUPDDEL");
                });

            entity.HasIndex(e => e.KArtikel, "IX_tArtikelMerkmal_kArtikel");

            entity.Property(e => e.KMerkmalWert).HasColumnName("kMerkmalWert");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KMerkmal).HasColumnName("kMerkmal");
        });

        modelBuilder.Entity<TArtikelMindestLagerbestandProLager>(entity =>
        {
            entity.HasKey(e => e.KArtikelMindestLagerbestandProLager).HasName("PK_Artikel_tArtikelMindestLagerbestandProLager");

            entity.ToTable("tArtikelMindestLagerbestandProLager", "Artikel");

            entity.HasIndex(e => new { e.KArtikel, e.KWarenlager }, "UQ_Artikel_tArtikelMindestLagerbestandProLager_kArtikel_kWarenlager").IsUnique();

            entity.Property(e => e.KArtikelMindestLagerbestandProLager).HasColumnName("kArtikelMindestLagerbestandProLager");
            entity.Property(e => e.FMaximalbestand)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fMaximalbestand");
            entity.Property(e => e.FMindestbestand)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fMindestbestand");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");

            entity.HasOne(d => d.KArtikelNavigation).WithMany(p => p.TArtikelMindestLagerbestandProLagers)
                .HasForeignKey(d => d.KArtikel)
                .HasConstraintName("FK_Artikel_tArtikelMindestLagerbestandProLager_kArtikel");

            entity.HasOne(d => d.KWarenlagerNavigation).WithMany(p => p.TArtikelMindestLagerbestandProLagers)
                .HasForeignKey(d => d.KWarenlager)
                .HasConstraintName("FK_Artikel_tArtikelMindestLagerbestandProLager_kWarenlager");
        });

        modelBuilder.Entity<TArtikelRankingGlobal>(entity =>
        {
            entity.HasKey(e => new { e.KArtikel, e.NType, e.KShop, e.NPlattform }).HasName("PK_dbo_tArtikelRankingGlobal");

            entity.ToTable("tArtikelRankingGlobal");

            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.NType).HasColumnName("nType");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NPlattform).HasColumnName("nPlattform");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DStand)
                .HasColumnType("datetime")
                .HasColumnName("dStand");
            entity.Property(e => e.DVon)
                .HasColumnType("datetime")
                .HasColumnName("dVon");
            entity.Property(e => e.NAnteilProzent)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nAnteilProzent");
            entity.Property(e => e.NPauschal)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nPauschal");
            entity.Property(e => e.NRang).HasColumnName("nRang");
            entity.Property(e => e.NRangMax).HasColumnName("nRangMax");
        });

        modelBuilder.Entity<TArtikelRankingZeitraum>(entity =>
        {
            entity.HasKey(e => new { e.KArtikel, e.NZeitraum, e.DVon, e.NType, e.KShop, e.NPlattform }).HasName("PK_dbo_tArtikelRankingZeitraum");

            entity.ToTable("tArtikelRankingZeitraum");

            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.NZeitraum).HasColumnName("nZeitraum");
            entity.Property(e => e.DVon)
                .HasColumnType("datetime")
                .HasColumnName("dVon");
            entity.Property(e => e.NType).HasColumnName("nType");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NPlattform).HasColumnName("nPlattform");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DStand)
                .HasColumnType("datetime")
                .HasColumnName("dStand");
            entity.Property(e => e.NAnteilProzent)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nAnteilProzent");
            entity.Property(e => e.NPauschal)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nPauschal");
            entity.Property(e => e.NRang).HasColumnName("nRang");
            entity.Property(e => e.NRangMax).HasColumnName("nRangMax");
        });

        modelBuilder.Entity<TArtikelShop>(entity =>
        {
            entity.HasKey(e => new { e.KArtikel, e.KShop }).HasName("PK_dbo_tArtikelShop");

            entity.ToTable("tArtikelShop", tb =>
                {
                    tb.HasTrigger("tgr_tArtikelShop_DEL");
                    tb.HasTrigger("tgr_tArtikelShop_INSUP");
                });

            entity.HasIndex(e => new { e.KShop, e.KArtikel }, "IX_dbo_tArtikelShop_kShop_kArtikel");

            entity.HasIndex(e => e.NAktion, "IX_dbo_tArtikelShop_nAktion_FILTER").HasFilter("([cInet]='N' AND [nInBearbeitung]=(1))");

            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CDelInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cDelInet");
            entity.Property(e => e.CInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cInet");
            entity.Property(e => e.NAktion)
                .HasDefaultValueSql("((1))")
                .HasColumnName("nAktion");
            entity.Property(e => e.NInBearbeitung)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nInBearbeitung");
        });

        modelBuilder.Entity<TArtikelSichtbarkeit>(entity =>
        {
            entity.HasKey(e => new { e.KArtikel, e.KKundenGruppe, e.KShop }).HasName("PK_dbo_tArtikelSichtbarkeit");

            entity.ToTable("tArtikelSichtbarkeit", tb => tb.HasTrigger("tgr_tArtikelSichtbarkeit_Connector"));

            entity.HasIndex(e => new { e.KArtikel, e.KShop }, "IX_tArtikelSichtbarkeit_kArtikel_kShop");

            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
        });

        modelBuilder.Entity<TArtikelSonderprei>(entity =>
        {
            entity.HasKey(e => e.KArtikelSonderpreis).HasName("PK_dbo_tArtikelSonderpreis");

            entity.ToTable("tArtikelSonderpreis", tb =>
                {
                    tb.HasTrigger("tgr_tArtikelSonderpreis_DEL");
                    tb.HasTrigger("tgr_tArtikelSonderpreis_INSUP");
                });

            entity.HasIndex(e => e.KArtikel, "IX_tArtikelSonderpreis_kArtikel_INCL");

            entity.Property(e => e.KArtikelSonderpreis).HasColumnName("kArtikelSonderpreis");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DEnde)
                .HasColumnType("datetime")
                .HasColumnName("dEnde");
            entity.Property(e => e.DStart)
                .HasColumnType("datetime")
                .HasColumnName("dStart");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.NAktiv).HasColumnName("nAktiv");
            entity.Property(e => e.NAnzahl).HasColumnName("nAnzahl");
            entity.Property(e => e.NIstAnzahl).HasColumnName("nIstAnzahl");
            entity.Property(e => e.NIstDatum).HasColumnName("nIstDatum");
        });

        modelBuilder.Entity<TArtikelSpeicher>(entity =>
        {
            entity.HasKey(e => new { e.KArtikel, e.CNummer, e.NId }).HasName("PK_dbo_tArtikelSpeicher");

            entity.ToTable("tArtikelSpeicher");

            entity.HasIndex(e => new { e.NId, e.KArtikel }, "IX_tArtikelSpeicher_nID_kArtikel");

            entity.HasIndex(e => new { e.CNummer, e.NAktiv, e.KArtikel }, "IX_tartikelspeicher_cNummer_nAktiv_kArtikel");

            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.CNummer)
                .HasMaxLength(255)
                .HasColumnName("cNummer");
            entity.Property(e => e.NId).HasColumnName("nID");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.NAktiv).HasColumnName("nAktiv");
        });

        modelBuilder.Entity<TArtikelSperre>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tArtikelSperre");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
        });

        modelBuilder.Entity<TArtikelStateNotification>(entity =>
        {
            entity.HasKey(e => new { e.KArtikel, e.UObserverId }).HasName("PK_Artikel_tArtikelStateNotification");

            entity.ToTable("tArtikelStateNotification", "Artikel");

            entity.HasIndex(e => new { e.UObserverId, e.KArtikel }, "IX_Artikel_tArtikelStateNotification_uObserverId_kArtikel").IsUnique();

            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.UObserverId).HasColumnName("uObserverId");

            entity.HasOne(d => d.KArtikelNavigation).WithMany(p => p.TArtikelStateNotifications)
                .HasForeignKey(d => d.KArtikel)
                .HasConstraintName("FK_tArtikelStateNotification_kArtikel");
        });

        modelBuilder.Entity<TArtikelTeilmengen>(entity =>
        {
            entity.HasKey(e => e.KArtikel).HasName("PK_Artikel_tArtikelTeilmengen");

            entity.ToTable("tArtikelTeilmengen", "Artikel");

            entity.Property(e => e.KArtikel)
                .ValueGeneratedNever()
                .HasColumnName("kArtikel");
            entity.Property(e => e.NReservierungsModus).HasColumnName("nReservierungsModus");
            entity.Property(e => e.NTeilmengenPuffer).HasColumnName("nTeilmengenPuffer");

            entity.HasOne(d => d.KArtikelNavigation).WithOne(p => p.TArtikelTeilmengen)
                .HasForeignKey<TArtikelTeilmengen>(d => d.KArtikel)
                .HasConstraintName("FK_Artikel_tArtikelTeilmengen_kArtikel");
        });

        modelBuilder.Entity<TArtikelType>(entity =>
        {
            entity.HasKey(e => new { e.KArtikel, e.UArtikelType }).HasName("PK_Artikel_tArtikelType");

            entity.ToTable("tArtikelType", "Artikel");

            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.UArtikelType).HasColumnName("uArtikelType");

            entity.HasOne(d => d.KArtikelNavigation).WithMany(p => p.TArtikelTypes)
                .HasForeignKey(d => d.KArtikel)
                .HasConstraintName("FK_Artikel_tArtikelType_kArtikel");
        });

        modelBuilder.Entity<TArtikelUpload>(entity =>
        {
            entity.HasKey(e => e.KArtikelUpload).HasName("PK_dbo_tArtikelUpload");

            entity.ToTable("tArtikelUpload", tb => tb.HasTrigger("tgr_tArtikelUpload_Connector"));

            entity.Property(e => e.KArtikelUpload).HasColumnName("kArtikelUpload");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CDateiTyp)
                .HasMaxLength(255)
                .HasColumnName("cDateiTyp");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.NPflicht).HasColumnName("nPflicht");
        });

        modelBuilder.Entity<TArtikelUploadSprache>(entity =>
        {
            entity.HasKey(e => new { e.KArtikelUpload, e.KSprache }).HasName("PK_dbo_tArtikelUploadSprache");

            entity.ToTable("tArtikelUploadSprache", tb => tb.HasTrigger("tgr_tArtikelUploadSprache_Connector"));

            entity.Property(e => e.KArtikelUpload).HasColumnName("kArtikelUpload");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBeschreibung).HasColumnName("cBeschreibung");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
        });

        modelBuilder.Entity<TArtikelVerkaufskanalFeldWert>(entity =>
        {
            entity.HasKey(e => e.KArtikelVerkaufskanalFeldWert).HasName("PK_SCX_tArtikelVerkaufskanalFeldWert");

            entity.ToTable("tArtikelVerkaufskanalFeldWert", "SCX", tb => tb.HasTrigger("tgr_tArtikelVerkaufskanalFeldWert_INSUP"));

            entity.Property(e => e.KArtikelVerkaufskanalFeldWert).HasColumnName("kArtikelVerkaufskanalFeldWert");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAttributeId)
                .HasMaxLength(512)
                .HasColumnName("cAttributeId");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CWert).HasColumnName("cWert");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KShopScx).HasColumnName("kShopScx");
            entity.Property(e => e.Kfile).HasColumnName("kfile");
            entity.Property(e => e.NIsDotLiquidValue).HasColumnName("nIsDotLiquidValue");
            entity.Property(e => e.NReferenzGruppe).HasColumnName("nReferenzGruppe");

            entity.HasOne(d => d.KArtikelNavigation).WithMany(p => p.TArtikelVerkaufskanalFeldWerts)
                .HasForeignKey(d => d.KArtikel)
                .HasConstraintName("FK_SCX_tArtikelVerkaufskanalFeldWert_kArtikel");

            entity.HasOne(d => d.KShopScxNavigation).WithMany(p => p.TArtikelVerkaufskanalFeldWerts)
                .HasForeignKey(d => d.KShopScx)
                .HasConstraintName("FK_SCX_tArtikelVerkaufskanalFeldWert_kShopScx");

            entity.HasOne(d => d.KfileNavigation).WithMany(p => p.TArtikelVerkaufskanalFeldWerts)
                .HasForeignKey(d => d.Kfile)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SCX_tArtikelVerkaufskanalFeldWert_kfile");
        });

        modelBuilder.Entity<TArtikelZustand>(entity =>
        {
            entity.HasKey(e => e.KArtikelZustand).HasName("PK_dbo_tArtikelZustand");

            entity.ToTable("tArtikelZustand");

            entity.Property(e => e.KArtikelZustand).HasColumnName("kArtikelZustand");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KHauptartikel).HasColumnName("kHauptartikel");
            entity.Property(e => e.KZustandArtikel).HasColumnName("kZustandArtikel");
        });

        modelBuilder.Entity<TArtikelbildPlattform>(entity =>
        {
            entity.HasKey(e => e.KArtikelbildPlattform).HasName("PK_dbo_tArtikelbildPlattform");

            entity.ToTable("tArtikelbildPlattform", tb =>
                {
                    tb.HasTrigger("tgr_tArtikelbildPlattform_DEL");
                    tb.HasTrigger("tgr_tArtikelbildPlattform_INSUP");
                });

            entity.HasIndex(e => new { e.KArtikel, e.KBild }, "IX_dbo_tArtikelbildPlattform_kArtikel_kBild");

            entity.HasIndex(e => e.KBild, "IX_dbo_tArtikelbildPlattform_kBild");

            entity.HasIndex(e => new { e.KPlattform, e.NNr }, "IX_dbo_tArtikelbildPlattform_kPlattform_nNr");

            entity.HasIndex(e => e.NNr, "IX_dbo_tArtikelbildPlattform_nNr_INCL");

            entity.HasIndex(e => new { e.KArtikel, e.KPlattform, e.KShop, e.KEbayUser, e.NNr }, "UQ_dbo_tArtikelbildPlattform_kArtikel_kPlattform_kShop_kEbayUser_nNr").IsUnique();

            entity.Property(e => e.KArtikelbildPlattform).HasColumnName("kArtikelbildPlattform");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBildname)
                .HasMaxLength(255)
                .HasColumnName("cBildname");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBild).HasColumnName("kBild");
            entity.Property(e => e.KEbayUser).HasColumnName("kEbayUser");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NInet)
                .HasDefaultValueSql("((1))")
                .HasColumnName("nInet");
            entity.Property(e => e.NNr).HasColumnName("nNr");
        });

        modelBuilder.Entity<TArtikelbildPlattformSeo>(entity =>
        {
            entity.HasKey(e => e.KArtikelbildPlattformSeo).HasName("PK_dbo_tArtikelbildPlattformSeo");

            entity.ToTable("tArtikelbildPlattformSeo");

            entity.HasIndex(e => new { e.KArtikelbildPlattform, e.KSprache }, "UQ_dbo_tArtikelbildPlattformSeo_kArtikelbildPlattform_kSprache").IsUnique();

            entity.Property(e => e.KArtikelbildPlattformSeo).HasColumnName("kArtikelbildPlattformSeo");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAlternativtext)
                .HasMaxLength(255)
                .HasColumnName("cAlternativtext");
            entity.Property(e => e.KArtikelbildPlattform).HasColumnName("kArtikelbildPlattform");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
        });

        modelBuilder.Entity<TArtikelkosten>(entity =>
        {
            entity.HasKey(e => e.KArtikelkosten).HasName("PK_Artikel_tArtikelkosten");

            entity.ToTable("tArtikelkosten", "Artikel");

            entity.HasIndex(e => e.KArtikel, "UQ_Artikel_tArtikelkosten_kArtikel").IsUnique();

            entity.Property(e => e.KArtikelkosten).HasColumnName("kArtikelkosten");
            entity.Property(e => e.FArtikelkosten)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fArtikelkosten");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

            entity.HasOne(d => d.KArtikelNavigation).WithOne(p => p.TArtikelkosten)
                .HasForeignKey<TArtikelkosten>(d => d.KArtikel)
                .HasConstraintName("FK_Artikel_tArtikelkosten_kArtikel");
        });

        modelBuilder.Entity<TAttribut>(entity =>
        {
            entity.HasKey(e => e.KAttribut).HasName("PK_dbo_tAttribut");

            entity.ToTable("tAttribut", tb =>
                {
                    tb.HasTrigger("jtlActionValidator_tAttribut");
                    tb.HasTrigger("tgr_tAttribut_DEL");
                    tb.HasTrigger("tgr_tAttribut_INSUP");
                });

            entity.Property(e => e.KAttribut).HasColumnName("kAttribut");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAttributId)
                .HasMaxLength(255)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("cAttributId");
            entity.Property(e => e.CBeschreibung)
                .HasMaxLength(1000)
                .HasColumnName("cBeschreibung");
            entity.Property(e => e.CGruppeName)
                .HasMaxLength(150)
                .HasColumnName("cGruppeName");
            entity.Property(e => e.CRegEx).HasColumnName("cRegEx");
            entity.Property(e => e.KFeldTyp).HasColumnName("kFeldTyp");
            entity.Property(e => e.NAktivFuerArtikelOhneWarengruppe)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("nAktivFuerArtikelOhneWarengruppe");
            entity.Property(e => e.NAusgabeweg).HasColumnName("nAusgabeweg");
            entity.Property(e => e.NBezugstyp).HasColumnName("nBezugstyp");
            entity.Property(e => e.NIstFreifeld).HasColumnName("nIstFreifeld");
            entity.Property(e => e.NIstMehrsprachig).HasColumnName("nIstMehrsprachig");
            entity.Property(e => e.NIstPflichtfeld)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nIstPflichtfeld");
            entity.Property(e => e.NIstStandard).HasColumnName("nIstStandard");
            entity.Property(e => e.NReadOnly).HasColumnName("nReadOnly");
            entity.Property(e => e.NSortierung).HasColumnName("nSortierung");
        });

        modelBuilder.Entity<TAttributShop>(entity =>
        {
            entity.HasKey(e => new { e.KAttribut, e.KShop }).HasName("PK_dbo_tAttributShop");

            entity.ToTable("tAttributShop", tb =>
                {
                    tb.HasTrigger("jtlActionValidator_tAttributShop_DELETE");
                    tb.HasTrigger("tgr_tAttributShop_Connector_INSUPDEL");
                });

            entity.Property(e => e.KAttribut).HasColumnName("kAttribut");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
        });

        modelBuilder.Entity<TAttributSprache>(entity =>
        {
            entity.HasKey(e => new { e.KAttribut, e.KSprache }).HasName("PK_dbo_tAttributSprache");

            entity.ToTable("tAttributSprache", tb =>
                {
                    tb.HasTrigger("tgr_tAttributSprache_DEL");
                    tb.HasTrigger("tgr_tAttributSprache_INSUP");
                });

            entity.Property(e => e.KAttribut).HasColumnName("kAttribut");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CWertListe).HasColumnName("cWertListe");
        });

        modelBuilder.Entity<TAttributWarengruppe>(entity =>
        {
            entity.HasKey(e => e.KAttributWarengruppe).HasName("PK_dbo_tAttributWarengruppe");

            entity.ToTable("tAttributWarengruppe");

            entity.HasIndex(e => e.KAttribut, "IX_dbo_tAttributWarengruppe_kAttribut");

            entity.HasIndex(e => e.KWarengruppe, "IX_dbo_tAttributWarengruppe_kWarengruppe");

            entity.HasIndex(e => new { e.KAttribut, e.KWarengruppe }, "UQ_dbo_tAttributWarengruppe_kAttribut_kWarengruppe").IsUnique();

            entity.Property(e => e.KAttributWarengruppe).HasColumnName("kAttributWarengruppe");
            entity.Property(e => e.KAttribut).HasColumnName("kAttribut");
            entity.Property(e => e.KWarengruppe).HasColumnName("kWarengruppe");

            entity.HasOne(d => d.KAttributNavigation).WithMany(p => p.TAttributWarengruppes)
                .HasForeignKey(d => d.KAttribut)
                .HasConstraintName("FK_dbo_tAttributWarengruppe_kAttribut");

            entity.HasOne(d => d.KWarengruppeNavigation).WithMany(p => p.TAttributWarengruppes)
                .HasForeignKey(d => d.KWarengruppe)
                .HasConstraintName("FK_dbo_tAttributWarengruppe_kWarengruppe");
        });

        modelBuilder.Entity<TAuftrag>(entity =>
        {
            entity.HasKey(e => e.KAuftrag).HasName("PK_Verkauf_tAuftrag");

            entity.ToTable("tAuftrag", "Verkauf", tb =>
                {
                    tb.HasTrigger("tgr_Verkauf_tAuftrag_DELETE");
                    tb.HasTrigger("tgr_Verkauf_tAuftrag_INSERT");
                    tb.HasTrigger("tgr_Verkauf_tAuftrag_UPDATE");
                });

            entity.HasIndex(e => e.CExterneAuftragsnummer, "IX_Verkauf_tAuftrag_cExterneAuftragsnummer");

            entity.HasIndex(e => e.KFarbe, "IX_Verkauf_tAuftrag_kFarbe");

            entity.HasIndex(e => e.KFirmaHistory, "IX_Verkauf_tAuftrag_kFirmaHistory");

            entity.HasIndex(e => e.KKunde, "IX_Verkauf_tAuftrag_kKunde");

            entity.HasIndex(e => e.KPlattform, "IX_Verkauf_tAuftrag_kPlattform");

            entity.HasIndex(e => e.KSprache, "IX_Verkauf_tAuftrag_kSprache");

            entity.HasIndex(e => e.NAuftragStatus, "IX_Verkauf_tAuftrag_nAuftragStatus");

            entity.HasIndex(e => new { e.NIstExterneRechnung, e.DErstellt }, "IX_Verkauf_tAuftrag_nIstExterneRechnung_dErstellt");

            entity.HasIndex(e => new { e.NKomplettAusgeliefert, e.NType, e.NStorno }, "IX_Verkauf_tAuftrag_nKomplettAusgeliefert_nType_nStorno");

            entity.HasIndex(e => new { e.NType, e.DErstellt }, "IX_Verkauf_tAuftrag_nType_dErstellt").IsDescending(false, true);

            entity.HasIndex(e => new { e.CAuftragsNr, e.NType }, "UQ_Verkauf_tAuftrag_cAuftragsNr_nType").IsUnique();

            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAmazonServiceLevel)
                .HasMaxLength(100)
                .HasColumnName("cAmazonServiceLevel");
            entity.Property(e => e.CAuftragsNr)
                .HasMaxLength(50)
                .HasColumnName("cAuftragsNr");
            entity.Property(e => e.CEbayUsername)
                .HasMaxLength(255)
                .HasColumnName("cEbayUsername");
            entity.Property(e => e.CExterneAuftragsnummer)
                .HasMaxLength(50)
                .HasColumnName("cExterneAuftragsnummer");
            entity.Property(e => e.CInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cInet");
            entity.Property(e => e.CKundeUstId)
                .HasMaxLength(20)
                .HasColumnName("cKundeUstId");
            entity.Property(e => e.CKundenAuftragsnummer)
                .HasMaxLength(250)
                .HasColumnName("cKundenAuftragsnummer");
            entity.Property(e => e.CKundenNr)
                .HasMaxLength(30)
                .HasColumnName("cKundenNr");
            entity.Property(e => e.COutboundId)
                .HasMaxLength(255)
                .HasColumnName("cOutboundId");
            entity.Property(e => e.CShopZahlungsmodul)
                .HasMaxLength(255)
                .HasColumnName("cShopZahlungsmodul");
            entity.Property(e => e.CUstId)
                .HasMaxLength(25)
                .HasColumnName("cUstId");
            entity.Property(e => e.CVersandlandBundeslandKuerzel)
                .HasMaxLength(5)
                .HasColumnName("cVersandlandBundeslandKuerzel");
            entity.Property(e => e.CVersandlandIso)
                .HasMaxLength(5)
                .HasColumnName("cVersandlandISO");
            entity.Property(e => e.CVersandlandWaehrung)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cVersandlandWaehrung");
            entity.Property(e => e.CWaehrung)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWaehrung");
            entity.Property(e => e.DAuslieferdatum)
                .HasColumnType("datetime")
                .HasColumnName("dAuslieferdatum");
            entity.Property(e => e.DAuslieferungAb)
                .HasColumnType("datetime")
                .HasColumnName("dAuslieferungAb");
            entity.Property(e => e.DErstellt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DErstelltWawi)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dErstelltWawi");
            entity.Property(e => e.DExternesErstelldatum)
                .HasColumnType("datetime")
                .HasColumnName("dExternesErstelldatum");
            entity.Property(e => e.DVoraussichtlichesLieferdatum)
                .HasColumnType("datetime")
                .HasColumnName("dVoraussichtlichesLieferdatum");
            entity.Property(e => e.FFaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fFaktor");
            entity.Property(e => e.FFinanzierungskosten)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fFinanzierungskosten");
            entity.Property(e => e.FSkonto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fSkonto");
            entity.Property(e => e.FVersandlandWaehrungFaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVersandlandWaehrungFaktor");
            entity.Property(e => e.FZusatzGewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZusatzGewicht");
            entity.Property(e => e.KAmazonUser).HasColumnName("kAmazonUser");
            entity.Property(e => e.KArtikelKarton).HasColumnName("kArtikelKarton");
            entity.Property(e => e.KAuftragQuelle).HasColumnName("kAuftragQuelle");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KFarbe).HasColumnName("kFarbe");
            entity.Property(e => e.KFirmaHistory).HasColumnName("kFirmaHistory");
            entity.Property(e => e.KFulfillmentLieferant).HasColumnName("kFulfillmentLieferant");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KKundengruppe).HasColumnName("kKundengruppe");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KRueckhaltegrund).HasColumnName("kRueckhaltegrund");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KShopauftrag).HasColumnName("kShopauftrag");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.KVersandArt).HasColumnName("kVersandArt");
            entity.Property(e => e.KVorgangsstatus).HasColumnName("kVorgangsstatus");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");
            entity.Property(e => e.NArchiv).HasColumnName("nArchiv");
            entity.Property(e => e.NAuftragQuelleAktion).HasColumnName("nAuftragQuelleAktion");
            entity.Property(e => e.NAuftragStatus).HasColumnName("nAuftragStatus");
            entity.Property(e => e.NBeschreibung).HasColumnName("nBeschreibung");
            entity.Property(e => e.NDebitorennr).HasColumnName("nDebitorennr");
            entity.Property(e => e.NHatUpload).HasColumnName("nHatUpload");
            entity.Property(e => e.NIstExterneRechnung).HasColumnName("nIstExterneRechnung");
            entity.Property(e => e.NIstReadOnly).HasColumnName("nIstReadOnly");
            entity.Property(e => e.NKomplettAusgeliefert).HasColumnName("nKomplettAusgeliefert");
            entity.Property(e => e.NLieferPrioritaet).HasColumnName("nLieferPrioritaet");
            entity.Property(e => e.NMaxLiefertage).HasColumnName("nMaxLiefertage");
            entity.Property(e => e.NPending).HasColumnName("nPending");
            entity.Property(e => e.NPremiumVersand).HasColumnName("nPremiumVersand");
            entity.Property(e => e.NReserviert).HasColumnName("nReserviert");
            entity.Property(e => e.NSkontoTage).HasColumnName("nSkontoTage");
            entity.Property(e => e.NSteuereinstellung)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nSteuereinstellung");
            entity.Property(e => e.NStorno).HasColumnName("nStorno");
            entity.Property(e => e.NType).HasColumnName("nType");
            entity.Property(e => e.NZahlungszielTage).HasColumnName("nZahlungszielTage");

            entity.HasOne(d => d.KAmazonUserNavigation).WithMany(p => p.TAuftrags)
                .HasForeignKey(d => d.KAmazonUser)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Verkauf_tAuftrag_kAmazonUser");

            entity.HasOne(d => d.KFarbeNavigation).WithMany(p => p.TAuftrags)
                .HasForeignKey(d => d.KFarbe)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Verkauf_tAuftrag_kFarbe");

            entity.HasOne(d => d.KFirmaHistoryNavigation).WithMany(p => p.TAuftrags)
                .HasForeignKey(d => d.KFirmaHistory)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Verkauf_tAuftrag_kFirmaHistory");

            entity.HasOne(d => d.KKundeNavigation).WithMany(p => p.TAuftrags)
                .HasForeignKey(d => d.KKunde)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Verkauf_tAuftrag_kKunde");

            entity.HasOne(d => d.KPlattformNavigation).WithMany(p => p.TAuftrags)
                .HasForeignKey(d => d.KPlattform)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Verkauf_tAuftrag_kPlattform");

            entity.HasOne(d => d.KSpracheNavigation).WithMany(p => p.TAuftrags)
                .HasForeignKey(d => d.KSprache)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Verkauf_tAuftrag_kSprache");

            entity.HasMany(d => d.KRechnungs).WithMany(p => p.KAuftrags)
                .UsingEntity<Dictionary<string, object>>(
                    "TAuftragRechnung",
                    r => r.HasOne<TRechnung1>().WithMany()
                        .HasForeignKey("KRechnung")
                        .HasConstraintName("FK_Verkauf_tAuftragRechnung_kRechnung"),
                    l => l.HasOne<TAuftrag>().WithMany()
                        .HasForeignKey("KAuftrag")
                        .HasConstraintName("FK_Verkauf_tAuftragRechnung_kAuftrag"),
                    j =>
                    {
                        j.HasKey("KAuftrag", "KRechnung").HasName("PK_Verkauf_tAuftragRechnung");
                        j.ToTable("tAuftragRechnung", "Verkauf", tb => tb.HasTrigger("tgr_Verkauf_tAuftragRechnung_INSUP"));
                        j.HasIndex(new[] { "KRechnung", "KAuftrag" }, "IX_Verkauf_tAuftragRechnung_kRechnung_kAuftrag");
                        j.IndexerProperty<int>("KAuftrag").HasColumnName("kAuftrag");
                        j.IndexerProperty<int>("KRechnung").HasColumnName("kRechnung");
                    });
        });

        modelBuilder.Entity<TAuftragAdresse>(entity =>
        {
            entity.HasKey(e => new { e.KAuftrag, e.NTyp }).HasName("PK_Verkauf_tAuftragAdresse");

            entity.ToTable("tAuftragAdresse", "Verkauf", tb =>
                {
                    tb.HasTrigger("tgr_Verkauf_tAuftragAdresse_DELETE");
                    tb.HasTrigger("tgr_Verkauf_tAuftragAdresse_INSERT");
                    tb.HasTrigger("tgr_Verkauf_tAuftragAdresse_UPDATE");
                });

            entity.HasIndex(e => e.KAuftrag, "IX_Verkauf_tAuftragAdresse_kAuftrag");

            entity.HasIndex(e => e.KKunde, "IX_Verkauf_tAuftragAdresse_kKunde");

            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAdressZusatz)
                .HasMaxLength(255)
                .HasColumnName("cAdressZusatz");
            entity.Property(e => e.CAnrede)
                .HasMaxLength(30)
                .HasColumnName("cAnrede");
            entity.Property(e => e.CBundesland)
                .HasMaxLength(255)
                .HasColumnName("cBundesland");
            entity.Property(e => e.CFax)
                .HasMaxLength(30)
                .HasColumnName("cFax");
            entity.Property(e => e.CFirma)
                .HasMaxLength(128)
                .HasColumnName("cFirma");
            entity.Property(e => e.CIso)
                .HasMaxLength(5)
                .HasColumnName("cISO");
            entity.Property(e => e.CLand)
                .HasMaxLength(255)
                .HasColumnName("cLand");
            entity.Property(e => e.CMail)
                .HasMaxLength(255)
                .HasColumnName("cMail");
            entity.Property(e => e.CMobil)
                .HasMaxLength(30)
                .HasColumnName("cMobil");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPlz)
                .HasMaxLength(24)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CPostId)
                .HasMaxLength(255)
                .HasColumnName("cPostID");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTel)
                .HasMaxLength(30)
                .HasColumnName("cTel");
            entity.Property(e => e.CTitel)
                .HasMaxLength(64)
                .HasColumnName("cTitel");
            entity.Property(e => e.CVorname)
                .HasMaxLength(255)
                .HasColumnName("cVorname");
            entity.Property(e => e.CZusatz)
                .HasMaxLength(60)
                .HasColumnName("cZusatz");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.NZolldokumenteErforderlich).HasColumnName("nZolldokumenteErforderlich");

            entity.HasOne(d => d.KAuftragNavigation).WithMany(p => p.TAuftragAdresses)
                .HasForeignKey(d => d.KAuftrag)
                .HasConstraintName("FK_Verkauf_tAuftragAdresse_kAuftrag");

            entity.HasOne(d => d.KKundeNavigation).WithMany(p => p.TAuftragAdresses)
                .HasForeignKey(d => d.KKunde)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Verkauf_tAuftragAdresse_kKunde");
        });

        modelBuilder.Entity<TAuftragAdresseLog>(entity =>
        {
            entity.HasKey(e => e.KAuftragAdresseLog).HasName("PK_Verkauf_tAuftragAdresse_Log");

            entity.ToTable("tAuftragAdresse_Log", "Verkauf");

            entity.Property(e => e.KAuftragAdresseLog).HasColumnName("kAuftragAdresseLog");
            entity.Property(e => e.BRowversion)
                .HasMaxLength(8)
                .IsFixedLength()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAdressZusatz)
                .HasMaxLength(255)
                .HasColumnName("cAdressZusatz");
            entity.Property(e => e.CAnrede)
                .HasMaxLength(30)
                .HasColumnName("cAnrede");
            entity.Property(e => e.CBundesland)
                .HasMaxLength(255)
                .HasColumnName("cBundesland");
            entity.Property(e => e.CFax)
                .HasMaxLength(30)
                .HasColumnName("cFax");
            entity.Property(e => e.CFirma)
                .HasMaxLength(128)
                .HasColumnName("cFirma");
            entity.Property(e => e.CIso)
                .HasMaxLength(5)
                .HasColumnName("cISO");
            entity.Property(e => e.CLand)
                .HasMaxLength(255)
                .HasColumnName("cLand");
            entity.Property(e => e.CMail)
                .HasMaxLength(255)
                .HasColumnName("cMail");
            entity.Property(e => e.CMobil)
                .HasMaxLength(30)
                .HasColumnName("cMobil");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPlz)
                .HasMaxLength(24)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CPostId)
                .HasMaxLength(255)
                .HasColumnName("cPostID");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTel)
                .HasMaxLength(30)
                .HasColumnName("cTel");
            entity.Property(e => e.CTitel)
                .HasMaxLength(64)
                .HasColumnName("cTitel");
            entity.Property(e => e.CVorname)
                .HasMaxLength(255)
                .HasColumnName("cVorname");
            entity.Property(e => e.CZusatz)
                .HasMaxLength(60)
                .HasColumnName("cZusatz");
            entity.Property(e => e.DLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dLog");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KBenutzerLog).HasColumnName("kBenutzerLog");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.NActionLog).HasColumnName("nActionLog");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
            entity.Property(e => e.NZolldokumenteErforderlich).HasColumnName("nZolldokumenteErforderlich");
        });

        modelBuilder.Entity<TAuftragAttribut>(entity =>
        {
            entity.HasKey(e => e.KAuftragAttribut).HasName("PK_Verkauf_tAuftragAttribut");

            entity.ToTable("tAuftragAttribut", "Verkauf");

            entity.HasIndex(e => new { e.KAuftrag, e.KAttribut }, "UQ_Verkauf_tAuftragAttribut_kAuftrag_kAttribut").IsUnique();

            entity.Property(e => e.KAuftragAttribut).HasColumnName("kAuftragAttribut");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KAttribut).HasColumnName("kAttribut");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");

            entity.HasOne(d => d.KAuftragNavigation).WithMany(p => p.TAuftragAttributs)
                .HasForeignKey(d => d.KAuftrag)
                .HasConstraintName("FK_Verkauf_tAuftragAttribut_kAuftrag");
        });

        modelBuilder.Entity<TAuftragAttributSprache>(entity =>
        {
            entity.HasKey(e => new { e.KAuftragAttribut, e.KSprache }).HasName("PK_Verkauf_tAuftragAttributSprache");

            entity.ToTable("tAuftragAttributSprache", "Verkauf");

            entity.Property(e => e.KAuftragAttribut).HasColumnName("kAuftragAttribut");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CWertVarchar).HasColumnName("cWertVarchar");
            entity.Property(e => e.DWertDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dWertDateTime");
            entity.Property(e => e.FWertDecimal)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertDecimal");
            entity.Property(e => e.NWertInt).HasColumnName("nWertInt");

            entity.HasOne(d => d.KAuftragAttributNavigation).WithMany(p => p.TAuftragAttributSpraches)
                .HasForeignKey(d => d.KAuftragAttribut)
                .HasConstraintName("FK_Verkauf_tAuftragAttributSprache_kAuftragAttribut");
        });

        modelBuilder.Entity<TAuftragAusgabeDateien>(entity =>
        {
            entity.HasKey(e => e.KAuftragAusgabeDateien).HasName("PK_Verkauf_tAuftragAusgabeDateien_kAuftragAusgabeDateien");

            entity.ToTable("tAuftragAusgabeDateien", "Verkauf");

            entity.Property(e => e.KAuftragAusgabeDateien).HasColumnName("kAuftragAusgabeDateien");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CErrorCode)
                .HasMaxLength(2000)
                .HasColumnName("cErrorCode");
            entity.Property(e => e.DAusgabeDatum)
                .HasColumnType("datetime")
                .HasColumnName("dAusgabeDatum");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KVorlage).HasColumnName("kVorlage");
            entity.Property(e => e.NAusgabeArt).HasColumnName("nAusgabeArt");

            entity.HasOne(d => d.KAuftragNavigation).WithMany(p => p.TAuftragAusgabeDateiens)
                .HasForeignKey(d => d.KAuftrag)
                .HasConstraintName("FK_Verkauf_tAuftragAusgabeDateien_kAuftrag");
        });

        modelBuilder.Entity<TAuftragEckdaten>(entity =>
        {
            entity.HasKey(e => e.KAuftrag).HasName("PK_Verkauf_tAuftragEckdaten");

            entity.ToTable("tAuftragEckdaten", "Verkauf");

            entity.Property(e => e.KAuftrag)
                .ValueGeneratedNever()
                .HasColumnName("kAuftrag");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CRechnungsnummern)
                .HasMaxLength(200)
                .HasColumnName("cRechnungsnummern");
            entity.Property(e => e.DBezahlt)
                .HasColumnType("datetime")
                .HasColumnName("dBezahlt");
            entity.Property(e => e.DGedruckt)
                .HasColumnType("datetime")
                .HasColumnName("dGedruckt");
            entity.Property(e => e.DGemailt)
                .HasColumnType("datetime")
                .HasColumnName("dGemailt");
            entity.Property(e => e.DLetzterVersand)
                .HasColumnType("datetime")
                .HasColumnName("dLetzterVersand");
            entity.Property(e => e.DVersandMail)
                .HasColumnType("datetime")
                .HasColumnName("dVersandMail");
            entity.Property(e => e.DZahlungsMail)
                .HasColumnType("datetime")
                .HasColumnName("dZahlungsMail");
            entity.Property(e => e.FGutschrift)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGutschrift");
            entity.Property(e => e.FOffenerWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fOffenerWert");
            entity.Property(e => e.FOffenerWertOhneStorno)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fOffenerWertOhneStorno");
            entity.Property(e => e.FWertBrutto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertBrutto");
            entity.Property(e => e.FWertNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertNetto");
            entity.Property(e => e.FWertRechnungBrutto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertRechnungBrutto");
            entity.Property(e => e.FWertRechnungNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertRechnungNetto");
            entity.Property(e => e.FZahlung)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZahlung");
            entity.Property(e => e.NAnzahlPakete).HasColumnName("nAnzahlPakete");
            entity.Property(e => e.NAnzahlVersendetePakete).HasColumnName("nAnzahlVersendetePakete");
            entity.Property(e => e.NIstFuerAuslieferungGesperrt).HasColumnName("nIstFuerAuslieferungGesperrt");
            entity.Property(e => e.NIstKomplettRetourniert).HasColumnName("nIstKomplettRetourniert");
            entity.Property(e => e.NIstNachnahme).HasColumnName("nIstNachnahme");
            entity.Property(e => e.NRechnungStatus).HasColumnName("nRechnungStatus");
            entity.Property(e => e.NZahlungStatus).HasColumnName("nZahlungStatus");

            entity.HasOne(d => d.KAuftragNavigation).WithOne(p => p.TAuftragEckdaten)
                .HasForeignKey<TAuftragEckdaten>(d => d.KAuftrag)
                .HasConstraintName("FK_Verkauf_tAuftragEckdaten_kAuftrag");
        });

        modelBuilder.Entity<TAuftragFile>(entity =>
        {
            entity.HasKey(e => e.KAuftragFile).HasName("PK_Verkauf_tAuftragFile");

            entity.ToTable("tAuftragFile", "Verkauf");

            entity.HasIndex(e => e.KAuftrag, "IX_Verkauf_tAuftragFile_kAuftrag");

            entity.HasIndex(e => e.KFile, "IX_Verkauf_tAuftragFile_kFile");

            entity.Property(e => e.KAuftragFile).HasColumnName("kAuftragFile");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CFilename)
                .HasMaxLength(255)
                .HasColumnName("cFilename");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KFile).HasColumnName("kFile");
            entity.Property(e => e.NDokumentTyp).HasColumnName("nDokumentTyp");

            entity.HasOne(d => d.KAuftragNavigation).WithMany(p => p.TAuftragFiles)
                .HasForeignKey(d => d.KAuftrag)
                .HasConstraintName("FK_Verkauf_tAuftragFile_kAuftrag");

            entity.HasOne(d => d.KFileNavigation).WithMany(p => p.TAuftragFiles)
                .HasForeignKey(d => d.KFile)
                .HasConstraintName("FK_Verkauf_tAuftragFile_kFile");
        });

        modelBuilder.Entity<TAuftragKampagne>(entity =>
        {
            entity.HasKey(e => e.KAuftrag).HasName("PK_Verkauf_tAuftragKampagne");

            entity.ToTable("tAuftragKampagne", "Verkauf");

            entity.HasIndex(e => e.KAuftrag, "IX_Verkauf_tAuftragKampagne_kAuftrag");

            entity.Property(e => e.KAuftrag)
                .ValueGeneratedNever()
                .HasColumnName("kAuftrag");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CKampagne)
                .HasMaxLength(255)
                .HasColumnName("cKampagne");
            entity.Property(e => e.CKampagneDetail)
                .HasMaxLength(255)
                .HasColumnName("cKampagneDetail");
            entity.Property(e => e.CKampagneName)
                .HasMaxLength(255)
                .HasColumnName("cKampagneName");
            entity.Property(e => e.CReferrer)
                .HasMaxLength(255)
                .HasColumnName("cReferrer");
            entity.Property(e => e.CUserAgent)
                .HasMaxLength(512)
                .HasColumnName("cUserAgent");

            entity.HasOne(d => d.KAuftragNavigation).WithOne(p => p.TAuftragKampagne)
                .HasForeignKey<TAuftragKampagne>(d => d.KAuftrag)
                .HasConstraintName("FK_Verkauf_tAuftragKampagne_kAuftrag");
        });

        modelBuilder.Entity<TAuftragLabel>(entity =>
        {
            entity.HasKey(e => e.KAuftrag).HasName("PK_Verkauf_tAuftragLabel");

            entity.ToTable("tAuftragLabel", "Verkauf");

            entity.HasIndex(e => e.KAuftrag, "IX_Verkauf_tAuftragLabel_kAuftrag");

            entity.Property(e => e.KAuftrag)
                .ValueGeneratedNever()
                .HasColumnName("kAuftrag");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KLabel).HasColumnName("kLabel");

            entity.HasOne(d => d.KAuftragNavigation).WithOne(p => p.TAuftragLabel)
                .HasForeignKey<TAuftragLabel>(d => d.KAuftrag)
                .HasConstraintName("FK_Verkauf_tAuftragLabel_kAuftrag");
        });

        modelBuilder.Entity<TAuftragLog>(entity =>
        {
            entity.HasKey(e => e.KAuftragLog)
                .HasName("PK_Logging_tAuftragLog")
                .IsClustered(false);

            entity.ToTable("tAuftragLog", "Logging", tb =>
                {
                    tb.HasTrigger("tgr_Logging_tAuftragLog_INS");
                    tb.HasTrigger("tgr_Logging_tAuftragLog_UPDEL");
                });

            entity.HasIndex(e => e.KAuftrag, "IX_Logging_tAuftragLog_kAuftrag");

            entity.HasIndex(e => new { e.DErstelltUtc, e.KAuftragLog }, "UCX_Logging_tAuftragLog_dErstelltUtc_kAuftragLog").IsUnique();

            entity.Property(e => e.KAuftragLog).HasColumnName("kAuftragLog");
            entity.Property(e => e.BLastRowVersion)
                .HasMaxLength(8)
                .IsFixedLength()
                .HasColumnName("bLastRowVersion");
            entity.Property(e => e.BRowVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowVersion");
            entity.Property(e => e.BXml).HasColumnName("bXML");
            entity.Property(e => e.CAppName)
                .HasMaxLength(128)
                .HasColumnName("cAppName");
            entity.Property(e => e.CAuftragsNr)
                .HasMaxLength(50)
                .HasColumnName("cAuftragsNr");
            entity.Property(e => e.DErstelltUtc).HasColumnName("dErstelltUtc");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.NAuftragType).HasColumnName("nAuftragType");
            entity.Property(e => e.NLogTyp).HasColumnName("nLogTyp");
        });

        modelBuilder.Entity<TAuftragLog1>(entity =>
        {
            entity.HasKey(e => e.KAuftragLog).HasName("PK_Verkauf_tAuftrag_Log");

            entity.ToTable("tAuftrag_Log", "Verkauf");

            entity.Property(e => e.KAuftragLog).HasColumnName("kAuftragLog");
            entity.Property(e => e.BRowversion)
                .HasMaxLength(8)
                .IsFixedLength()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAmazonServiceLevel)
                .HasMaxLength(100)
                .HasColumnName("cAmazonServiceLevel");
            entity.Property(e => e.CAuftragsNr)
                .HasMaxLength(50)
                .HasColumnName("cAuftragsNr");
            entity.Property(e => e.CEbayUsername)
                .HasMaxLength(255)
                .HasColumnName("cEbayUsername");
            entity.Property(e => e.CExterneAuftragsnummer)
                .HasMaxLength(50)
                .HasColumnName("cExterneAuftragsnummer");
            entity.Property(e => e.CInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cInet");
            entity.Property(e => e.CKundeUstId)
                .HasMaxLength(20)
                .HasColumnName("cKundeUstId");
            entity.Property(e => e.CKundenAuftragsnummer)
                .HasMaxLength(250)
                .HasColumnName("cKundenAuftragsnummer");
            entity.Property(e => e.CKundenNr)
                .HasMaxLength(30)
                .HasColumnName("cKundenNr");
            entity.Property(e => e.COutboundId)
                .HasMaxLength(255)
                .HasColumnName("cOutboundId");
            entity.Property(e => e.CShopZahlungsmodul)
                .HasMaxLength(255)
                .HasColumnName("cShopZahlungsmodul");
            entity.Property(e => e.CUstId)
                .HasMaxLength(25)
                .HasColumnName("cUstId");
            entity.Property(e => e.CVersandlandBundeslandKuerzel)
                .HasMaxLength(5)
                .HasColumnName("cVersandlandBundeslandKuerzel");
            entity.Property(e => e.CVersandlandIso)
                .HasMaxLength(5)
                .HasColumnName("cVersandlandISO");
            entity.Property(e => e.CVersandlandWaehrung)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cVersandlandWaehrung");
            entity.Property(e => e.CWaehrung)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWaehrung");
            entity.Property(e => e.DAuslieferdatum)
                .HasColumnType("datetime")
                .HasColumnName("dAuslieferdatum");
            entity.Property(e => e.DAuslieferungAb)
                .HasColumnType("datetime")
                .HasColumnName("dAuslieferungAb");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DExternesErstelldatum)
                .HasColumnType("datetime")
                .HasColumnName("dExternesErstelldatum");
            entity.Property(e => e.DLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dLog");
            entity.Property(e => e.DVoraussichtlichesLieferdatum)
                .HasColumnType("datetime")
                .HasColumnName("dVoraussichtlichesLieferdatum");
            entity.Property(e => e.FFaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fFaktor");
            entity.Property(e => e.FFinanzierungskosten)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fFinanzierungskosten");
            entity.Property(e => e.FSkonto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fSkonto");
            entity.Property(e => e.FVersandlandWaehrungFaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVersandlandWaehrungFaktor");
            entity.Property(e => e.FZusatzGewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZusatzGewicht");
            entity.Property(e => e.KAmazonUser).HasColumnName("kAmazonUser");
            entity.Property(e => e.KArtikelKarton).HasColumnName("kArtikelKarton");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KAuftragQuelle).HasColumnName("kAuftragQuelle");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBenutzerLog).HasColumnName("kBenutzerLog");
            entity.Property(e => e.KFarbe).HasColumnName("kFarbe");
            entity.Property(e => e.KFirmaHistory).HasColumnName("kFirmaHistory");
            entity.Property(e => e.KFulfillmentLieferant).HasColumnName("kFulfillmentLieferant");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KKundengruppe).HasColumnName("kKundengruppe");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KRueckhaltegrund).HasColumnName("kRueckhaltegrund");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KShopauftrag).HasColumnName("kShopauftrag");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.KVersandArt).HasColumnName("kVersandArt");
            entity.Property(e => e.KVorgangsstatus).HasColumnName("kVorgangsstatus");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");
            entity.Property(e => e.NActionLog).HasColumnName("nActionLog");
            entity.Property(e => e.NArchiv).HasColumnName("nArchiv");
            entity.Property(e => e.NAuftragQuelleAktion).HasColumnName("nAuftragQuelleAktion");
            entity.Property(e => e.NAuftragStatus).HasColumnName("nAuftragStatus");
            entity.Property(e => e.NBeschreibung).HasColumnName("nBeschreibung");
            entity.Property(e => e.NDebitorennr).HasColumnName("nDebitorennr");
            entity.Property(e => e.NHatUpload).HasColumnName("nHatUpload");
            entity.Property(e => e.NIstExterneRechnung).HasColumnName("nIstExterneRechnung");
            entity.Property(e => e.NIstReadOnly).HasColumnName("nIstReadOnly");
            entity.Property(e => e.NKomplettAusgeliefert).HasColumnName("nKomplettAusgeliefert");
            entity.Property(e => e.NLieferPrioritaet).HasColumnName("nLieferPrioritaet");
            entity.Property(e => e.NMaxLiefertage).HasColumnName("nMaxLiefertage");
            entity.Property(e => e.NPending).HasColumnName("nPending");
            entity.Property(e => e.NPremiumVersand).HasColumnName("nPremiumVersand");
            entity.Property(e => e.NReserviert).HasColumnName("nReserviert");
            entity.Property(e => e.NSkontoTage).HasColumnName("nSkontoTage");
            entity.Property(e => e.NSteuereinstellung)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nSteuereinstellung");
            entity.Property(e => e.NStorno).HasColumnName("nStorno");
            entity.Property(e => e.NType).HasColumnName("nType");
            entity.Property(e => e.NZahlungszielTage).HasColumnName("nZahlungszielTage");
        });

        modelBuilder.Entity<TAuftragMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tAuftragMapping", "Pos");

            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KPosAuftrag).HasColumnName("kPosAuftrag");
            entity.Property(e => e.KShopSubShop).HasColumnName("kShopSubShop");
        });

        modelBuilder.Entity<TAuftragMergeLog>(entity =>
        {
            entity.HasKey(e => new { e.KAuftrag, e.KAuftragAlt }).HasName("PK_Verkauf_tAuftragMerge_Log");

            entity.ToTable("tAuftragMerge_Log", "Verkauf");

            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KAuftragAlt).HasColumnName("kAuftragAlt");
            entity.Property(e => e.DMerge)
                .HasColumnType("datetime")
                .HasColumnName("dMerge");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
        });

        modelBuilder.Entity<TAuftragPosition>(entity =>
        {
            entity.HasKey(e => e.KAuftragPosition).HasName("PK_Verkauf_tAuftragPosition");

            entity.ToTable("tAuftragPosition", "Verkauf", tb =>
                {
                    tb.HasTrigger("tgr_Verkauf_tAuftragPosition_DELETE");
                    tb.HasTrigger("tgr_Verkauf_tAuftragPosition_INSERT");
                    tb.HasTrigger("tgr_Verkauf_tAuftragPosition_UPDATE");
                });

            entity.HasIndex(e => e.KAuftragPosition, "IX_Verkauf_tAuftragPositionAttribut_kAuftragPosition");

            entity.HasIndex(e => e.KAmazonBestellungPos, "IX_Verkauf_tAuftragPosition_kAmazonBestellungPos_INCL");

            entity.HasIndex(e => new { e.KArtikel, e.KAuftrag }, "IX_Verkauf_tAuftragPosition_kArtikel_kAuftrag");

            entity.HasIndex(e => new { e.KArtikel, e.NReserviert }, "IX_Verkauf_tAuftragPosition_kArtikel_nReserviert").HasFilter("([nReserviert]=(1))");

            entity.HasIndex(e => e.KAuftrag, "IX_Verkauf_tAuftragPosition_kAuftrag");

            entity.HasIndex(e => new { e.KAuftragStueckliste, e.KArtikel }, "IX_Verkauf_tAuftragPosition_kAuftragStueckliste_kArtikel");

            entity.HasIndex(e => new { e.KAuftrag, e.KAuftragPosition, e.KArtikel }, "IX_Verkauf_tAuftragPosition_kAuftrag_kAuftragPosition_kArtikel");

            entity.HasIndex(e => e.KKonfigItem, "IX_Verkauf_tAuftragPosition_kKonfigItem");

            entity.HasIndex(e => e.KKonfigVater, "IX_Verkauf_tAuftragPosition_kKonfigVater");

            entity.HasIndex(e => e.KSteuerklasse, "IX_Verkauf_tAuftragPosition_kSteuerklasse");

            entity.HasIndex(e => e.NType, "IX_Verkauf_tAuftragPosition_nType");

            entity.Property(e => e.KAuftragPosition).HasColumnName("kAuftragPosition");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CEinheit)
                .HasMaxLength(255)
                .HasColumnName("cEinheit");
            entity.Property(e => e.CFnsku)
                .HasMaxLength(255)
                .HasColumnName("cFNSKU");
            entity.Property(e => e.CHinweis)
                .HasMaxLength(2000)
                .HasColumnName("cHinweis");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CNameStandard)
                .HasMaxLength(255)
                .HasColumnName("cNameStandard");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.FEkNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEkNetto");
            entity.Property(e => e.FFaktor)
                .HasDefaultValueSql("((1.0))")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fFaktor");
            entity.Property(e => e.FMwSt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwSt");
            entity.Property(e => e.FRabatt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabatt");
            entity.Property(e => e.FVkNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVkNetto");
            entity.Property(e => e.FWertBruttoGesamtFixiert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertBruttoGesamtFixiert");
            entity.Property(e => e.FWertNettoGesamtFixiert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertNettoGesamtFixiert");
            entity.Property(e => e.KAmazonBestellungPos).HasColumnName("kAmazonBestellungPos");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KAuftragStueckliste).HasColumnName("kAuftragStueckliste");
            entity.Property(e => e.KEbayTransaction).HasColumnName("kEbayTransaction");
            entity.Property(e => e.KKonfigItem).HasColumnName("kKonfigItem");
            entity.Property(e => e.KKonfigVater).HasColumnName("kKonfigVater");
            entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");
            entity.Property(e => e.KSteuerschluessel).HasColumnName("kSteuerschluessel");
            entity.Property(e => e.NHatUpload).HasColumnName("nHatUpload");
            entity.Property(e => e.NReserviert).HasColumnName("nReserviert");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NType).HasColumnName("nType");

            entity.HasOne(d => d.KAmazonBestellungPosNavigation).WithMany(p => p.TAuftragPositions)
                .HasForeignKey(d => d.KAmazonBestellungPos)
                .HasConstraintName("FK_Verkauf_tAuftragPosition_kAmazonBestellungPos");

            entity.HasOne(d => d.KAuftragNavigation).WithMany(p => p.TAuftragPositions)
                .HasForeignKey(d => d.KAuftrag)
                .HasConstraintName("FK_Verkauf_tAuftragPosition_kAuftrag");

            entity.HasOne(d => d.KEbayTransactionNavigation).WithMany(p => p.TAuftragPositions)
                .HasForeignKey(d => d.KEbayTransaction)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Verkauf_tAuftragPosition_kEbayTransaction");

            entity.HasOne(d => d.KKonfigItemNavigation).WithMany(p => p.TAuftragPositions)
                .HasForeignKey(d => d.KKonfigItem)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Verkauf_tAuftragPosition_kKonfigItem");

            entity.HasOne(d => d.KSteuerklasseNavigation).WithMany(p => p.TAuftragPositions)
                .HasForeignKey(d => d.KSteuerklasse)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Verkauf_tAuftragPosition_kSteuerklasse");

            entity.HasOne(d => d.KSteuerschluesselNavigation).WithMany(p => p.TAuftragPositions)
                .HasForeignKey(d => d.KSteuerschluessel)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Verkauf_tAuftragPosition_kSteuerschluessel");
        });

        modelBuilder.Entity<TAuftragPositionEckdaten>(entity =>
        {
            entity.HasKey(e => e.KAuftragPosition).HasName("PK_Verkauf_tAuftragPositionEckdaten");

            entity.ToTable("tAuftragPositionEckdaten", "Verkauf", tb => tb.HasTrigger("tgr_Verkauf_tAuftragPositionEckdaten_INSUPD"));

            entity.HasIndex(e => e.KAuftrag, "IX_Verkauf_tAuftragPositionEckdaten_fAnzahlOffen_INCL").HasFilter("([nIstStuecklistenvater]=(0) AND [fAnzahlOffen]>(0.0))");

            entity.HasIndex(e => new { e.FAnzahlOffen, e.KArtikel }, "IX_Verkauf_tAuftragPositionEckdaten_fAnzahlOffen_kArtikel").HasFilter("([fAnzahlOffen]>(0.0))");

            entity.Property(e => e.KAuftragPosition)
                .ValueGeneratedNever()
                .HasColumnName("kAuftragPosition");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.FAnzahlAufRechnung)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahlAufRechnung");
            entity.Property(e => e.FAnzahlGeliefert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahlGeliefert");
            entity.Property(e => e.FAnzahlGutgeschrieben)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahlGutgeschrieben");
            entity.Property(e => e.FAnzahlOffen)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahlOffen");
            entity.Property(e => e.FTeilmengenfaktorLager)
                .HasDefaultValueSql("((1.0))")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fTeilmengenfaktorLager");
            entity.Property(e => e.FWertBrutto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertBrutto");
            entity.Property(e => e.FWertNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertNetto");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.NArtikelTyp).HasColumnName("nArtikelTyp");
            entity.Property(e => e.NAuftragStatus).HasColumnName("nAuftragStatus");
            entity.Property(e => e.NIstDropshippingLieferbar).HasColumnName("nIstDropshippingLieferbar");
            entity.Property(e => e.NIstKomplettRetourniert).HasColumnName("nIstKomplettRetourniert");
            entity.Property(e => e.NIstStuecklistenvater).HasColumnName("nIstStuecklistenvater");
            entity.Property(e => e.NIstUmlagerung).HasColumnName("nIstUmlagerung");
            entity.Property(e => e.NPrio).HasColumnName("nPrio");
            entity.Property(e => e.NPrioDatum).HasColumnName("nPrioDatum");
            entity.Property(e => e.NVersandSperre).HasColumnName("nVersandSperre");

            entity.HasOne(d => d.KAuftragPositionNavigation).WithOne(p => p.TAuftragPositionEckdaten)
                .HasForeignKey<TAuftragPositionEckdaten>(d => d.KAuftragPosition)
                .HasConstraintName("FK_Verkauf_tAuftragPositionEckdaten_kAuftragPosition");
        });

        modelBuilder.Entity<TAuftragPositionEigenschaft>(entity =>
        {
            entity.HasKey(e => e.KAuftragPositionEigenschaft).HasName("PK_Verkauf_tAuftragPositionEigenschaft");

            entity.ToTable("tAuftragPositionEigenschaft", "Verkauf", tb =>
                {
                    tb.HasTrigger("tgr_Verkauf_tAuftragPositionEigenschaft_DELETE");
                    tb.HasTrigger("tgr_Verkauf_tAuftragPositionEigenschaft_UPDATE");
                });

            entity.Property(e => e.KAuftragPositionEigenschaft).HasColumnName("kAuftragPositionEigenschaft");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CWert)
                .HasMaxLength(255)
                .HasColumnName("cWert");
            entity.Property(e => e.FAufpreisNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAufpreisNetto");
            entity.Property(e => e.FZusatzgewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZusatzgewicht");
            entity.Property(e => e.KAuftragPosition).HasColumnName("kAuftragPosition");
            entity.Property(e => e.KEigenschaft).HasColumnName("kEigenschaft");
            entity.Property(e => e.KEigenschaftWert).HasColumnName("kEigenschaftWert");

            entity.HasOne(d => d.KAuftragPositionNavigation).WithMany(p => p.TAuftragPositionEigenschafts)
                .HasForeignKey(d => d.KAuftragPosition)
                .HasConstraintName("FK_Verkauf_tAuftragPositionEigenschaft_kAuftragPosition");
        });

        modelBuilder.Entity<TAuftragPositionEigenschaftLog>(entity =>
        {
            entity.HasKey(e => e.KAuftragPositionEigenschaftLog).HasName("PK_Verkauf_tAuftragPositionEigenschaft_Log");

            entity.ToTable("tAuftragPositionEigenschaft_Log", "Verkauf");

            entity.Property(e => e.KAuftragPositionEigenschaftLog).HasColumnName("kAuftragPositionEigenschaftLog");
            entity.Property(e => e.BRowversion)
                .HasMaxLength(8)
                .IsFixedLength()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CWert)
                .HasMaxLength(255)
                .HasColumnName("cWert");
            entity.Property(e => e.DLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dLog");
            entity.Property(e => e.FAufpreisNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAufpreisNetto");
            entity.Property(e => e.FZusatzgewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZusatzgewicht");
            entity.Property(e => e.KAuftragPosition).HasColumnName("kAuftragPosition");
            entity.Property(e => e.KAuftragPositionEigenschaft).HasColumnName("kAuftragPositionEigenschaft");
            entity.Property(e => e.KBenutzerLog).HasColumnName("kBenutzerLog");
            entity.Property(e => e.KEigenschaft).HasColumnName("kEigenschaft");
            entity.Property(e => e.KEigenschaftWert).HasColumnName("kEigenschaftWert");
            entity.Property(e => e.NActionLog).HasColumnName("nActionLog");
        });

        modelBuilder.Entity<TAuftragPositionFile>(entity =>
        {
            entity.HasKey(e => e.KAuftragPositionFile).HasName("PK_Verkauf_tAuftragPositionFile");

            entity.ToTable("tAuftragPositionFile", "Verkauf");

            entity.HasIndex(e => e.KAuftrag, "IX_Verkauf_tAuftragPositionFile_kAuftrag");

            entity.HasIndex(e => e.KAuftragPosition, "IX_Verkauf_tAuftragPositionFile_kAuftragPosition");

            entity.HasIndex(e => e.KFile, "IX_Verkauf_tAuftragPositionFile_kFile");

            entity.Property(e => e.KAuftragPositionFile).HasColumnName("kAuftragPositionFile");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CFilename)
                .HasMaxLength(255)
                .HasColumnName("cFilename");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KAuftragPosition).HasColumnName("kAuftragPosition");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KFile).HasColumnName("kFile");

            entity.HasOne(d => d.KAuftragPositionNavigation).WithMany(p => p.TAuftragPositionFiles)
                .HasForeignKey(d => d.KAuftragPosition)
                .HasConstraintName("FK_Verkauf_tAuftragPositionFile_kAuftragPosition");

            entity.HasOne(d => d.KFileNavigation).WithMany(p => p.TAuftragPositionFiles)
                .HasForeignKey(d => d.KFile)
                .HasConstraintName("FK_Verkauf_tAuftragPositionFile_kFile");
        });

        modelBuilder.Entity<TAuftragPositionIntervall>(entity =>
        {
            entity.HasKey(e => e.KAuftragPosition).HasName("PK_Verkauf_tAuftragPositionIntervall");

            entity.ToTable("tAuftragPositionIntervall", "Verkauf", tb =>
                {
                    tb.HasTrigger("tgr_Verkauf_tAuftragPositionIntervall_DELETE");
                    tb.HasTrigger("tgr_Verkauf_tAuftragPositionIntervall_UPDATE");
                });

            entity.Property(e => e.KAuftragPosition)
                .ValueGeneratedNever()
                .HasColumnName("kAuftragPosition");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DEnddatum)
                .HasColumnType("datetime")
                .HasColumnName("dEnddatum");
            entity.Property(e => e.DNextFaelligkeit)
                .HasColumnType("datetime")
                .HasColumnName("dNextFaelligkeit");
            entity.Property(e => e.DStartdatum)
                .HasColumnType("datetime")
                .HasColumnName("dStartdatum");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.NIntervall).HasColumnName("nIntervall");
            entity.Property(e => e.NIntervallTyp).HasColumnName("nIntervallTyp");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");

            entity.HasOne(d => d.KAuftragPositionNavigation).WithOne(p => p.TAuftragPositionIntervall)
                .HasForeignKey<TAuftragPositionIntervall>(d => d.KAuftragPosition)
                .HasConstraintName("FK_Verkauf_tAuftragPositionIntervall_kAuftragPosition");
        });

        modelBuilder.Entity<TAuftragPositionIntervallLog>(entity =>
        {
            entity.HasKey(e => e.KAuftragPositionIntervallLog).HasName("PK_Verkauf_tAuftragPositionIntervall_Log");

            entity.ToTable("tAuftragPositionIntervall_Log", "Verkauf");

            entity.Property(e => e.KAuftragPositionIntervallLog).HasColumnName("kAuftragPositionIntervallLog");
            entity.Property(e => e.BRowversion)
                .HasMaxLength(8)
                .IsFixedLength()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DEnddatum)
                .HasColumnType("datetime")
                .HasColumnName("dEnddatum");
            entity.Property(e => e.DLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dLog");
            entity.Property(e => e.DNextFaelligkeit)
                .HasColumnType("datetime")
                .HasColumnName("dNextFaelligkeit");
            entity.Property(e => e.DStartdatum)
                .HasColumnType("datetime")
                .HasColumnName("dStartdatum");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KAuftragPosition).HasColumnName("kAuftragPosition");
            entity.Property(e => e.KBenutzerLog).HasColumnName("kBenutzerLog");
            entity.Property(e => e.NActionLog).HasColumnName("nActionLog");
            entity.Property(e => e.NIntervall).HasColumnName("nIntervall");
            entity.Property(e => e.NIntervallTyp).HasColumnName("nIntervallTyp");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<TAuftragPositionLog>(entity =>
        {
            entity.HasKey(e => e.KAuftragPositionLog).HasName("PK_Verkauf_tAuftragPosition_Log");

            entity.ToTable("tAuftragPosition_Log", "Verkauf");

            entity.Property(e => e.KAuftragPositionLog).HasColumnName("kAuftragPositionLog");
            entity.Property(e => e.BRowversion)
                .HasMaxLength(8)
                .IsFixedLength()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CEinheit)
                .HasMaxLength(255)
                .HasColumnName("cEinheit");
            entity.Property(e => e.CFnsku)
                .HasMaxLength(255)
                .HasColumnName("cFNSKU");
            entity.Property(e => e.CHinweis)
                .HasMaxLength(2000)
                .HasColumnName("cHinweis");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CNameStandard)
                .HasMaxLength(255)
                .HasColumnName("cNameStandard");
            entity.Property(e => e.DLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dLog");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.FEkNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEkNetto");
            entity.Property(e => e.FFaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fFaktor");
            entity.Property(e => e.FMwSt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwSt");
            entity.Property(e => e.FRabatt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabatt");
            entity.Property(e => e.FVkNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVkNetto");
            entity.Property(e => e.FWertBruttoGesamtFixiert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertBruttoGesamtFixiert");
            entity.Property(e => e.FWertNettoGesamtFixiert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertNettoGesamtFixiert");
            entity.Property(e => e.KAmazonBestellungPos).HasColumnName("kAmazonBestellungPos");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KAuftragPosition).HasColumnName("kAuftragPosition");
            entity.Property(e => e.KAuftragStueckliste).HasColumnName("kAuftragStueckliste");
            entity.Property(e => e.KBenutzerLog).HasColumnName("kBenutzerLog");
            entity.Property(e => e.KEbayTransaction).HasColumnName("kEbayTransaction");
            entity.Property(e => e.KKonfigItem).HasColumnName("kKonfigItem");
            entity.Property(e => e.KKonfigVater).HasColumnName("kKonfigVater");
            entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");
            entity.Property(e => e.KSteuerschluessel).HasColumnName("kSteuerschluessel");
            entity.Property(e => e.NActionLog).HasColumnName("nActionLog");
            entity.Property(e => e.NHatUpload).HasColumnName("nHatUpload");
            entity.Property(e => e.NReserviert).HasColumnName("nReserviert");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NType).HasColumnName("nType");
        });

        modelBuilder.Entity<TAuftragPositionMapping>(entity =>
        {
            entity.HasKey(e => new { e.KAuftragPosition, e.KPosAuftragPosition, e.KShopSubShop }).HasName("PK_Pos_tAuftragPositionMapping");

            entity.ToTable("tAuftragPositionMapping", "Pos");

            entity.Property(e => e.KAuftragPosition).HasColumnName("kAuftragPosition");
            entity.Property(e => e.KPosAuftragPosition).HasColumnName("kPosAuftragPosition");
            entity.Property(e => e.KShopSubShop).HasColumnName("kShopSubShop");
        });

        modelBuilder.Entity<TAuftragPositionTeilmengen>(entity =>
        {
            entity.HasKey(e => e.KAuftragPosition).HasName("PK_Verkauf_tAuftragPositionTeilmengen");

            entity.ToTable("tAuftragPositionTeilmengen", "Verkauf", tb =>
                {
                    tb.HasTrigger("tgr_Verkauf_tAuftragPositionTeilmengen_INSERT");
                    tb.HasTrigger("tgr_Verkauf_tAuftragPositionTeilmengen_UPDATE");
                });

            entity.Property(e => e.KAuftragPosition)
                .ValueGeneratedNever()
                .HasColumnName("kAuftragPosition");
            entity.Property(e => e.FLagerFactor)
                .HasDefaultValueSql("((1.0))")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLagerFactor");
            entity.Property(e => e.FPreisFactor)
                .HasDefaultValueSql("((1.0))")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPreisFactor");
            entity.Property(e => e.KDefinition).HasColumnName("kDefinition");

            entity.HasOne(d => d.KAuftragPositionNavigation).WithOne(p => p.TAuftragPositionTeilmengen)
                .HasForeignKey<TAuftragPositionTeilmengen>(d => d.KAuftragPosition)
                .HasConstraintName("FK_Verkauf_tAuftragPositionTeilmengen_kAuftragPosition");
        });

        modelBuilder.Entity<TAuftragPositionTeilmengenKonfiguration>(entity =>
        {
            entity.HasKey(e => new { e.KAuftragPosition, e.KDimension }).HasName("PK_Verkauf_tAuftragPositionTeilmengenKonfiguration");

            entity.ToTable("tAuftragPositionTeilmengenKonfiguration", "Verkauf");

            entity.Property(e => e.KAuftragPosition).HasColumnName("kAuftragPosition");
            entity.Property(e => e.KDimension).HasColumnName("kDimension");
            entity.Property(e => e.FGroundValue)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGroundValue");
            entity.Property(e => e.FValue)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fValue");
            entity.Property(e => e.KMassEinheit).HasColumnName("kMassEinheit");

            entity.HasOne(d => d.KAuftragPositionNavigation).WithMany(p => p.TAuftragPositionTeilmengenKonfigurations)
                .HasForeignKey(d => d.KAuftragPosition)
                .HasConstraintName("FK_Verkauf_tAuftragPositionTeilmengenKonfiguration_kAuftragPosition");

            entity.HasOne(d => d.KDimensionNavigation).WithMany(p => p.TAuftragPositionTeilmengenKonfigurations)
                .HasForeignKey(d => d.KDimension)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Verkauf_tAuftragPositionTeilmengenKonfiguration_kDimension");

            entity.HasOne(d => d.KMassEinheitNavigation).WithMany(p => p.TAuftragPositionTeilmengenKonfigurations)
                .HasForeignKey(d => d.KMassEinheit)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Verkauf_tAuftragPositionTeilmengenKonfiguration_kMassEinheit");
        });

        modelBuilder.Entity<TAuftragStorno>(entity =>
        {
            entity.HasKey(e => e.KAuftrag).HasName("PK_Verkauf_tAuftragStorno");

            entity.ToTable("tAuftragStorno", "Verkauf");

            entity.Property(e => e.KAuftrag)
                .ValueGeneratedNever()
                .HasColumnName("kAuftrag");
            entity.Property(e => e.CKommentar)
                .HasMaxLength(100)
                .HasColumnName("cKommentar");
            entity.Property(e => e.DStorniert)
                .HasColumnType("datetime")
                .HasColumnName("dStorniert");
            entity.Property(e => e.KAuftragStornogrund).HasColumnName("kAuftragStornogrund");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

            entity.HasOne(d => d.KAuftragStornogrundNavigation).WithMany(p => p.TAuftragStornos)
                .HasForeignKey(d => d.KAuftragStornogrund)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Verkauf_tAuftragStorno_kAuftragStornogrund");
        });

        modelBuilder.Entity<TAuftragStornoSperre>(entity =>
        {
            entity.HasKey(e => e.KAuftragStornoSperre).HasName("PK_Verkauf_tAuftragStornoSperre");

            entity.ToTable("tAuftragStornoSperre", "Verkauf");

            entity.Property(e => e.KAuftragStornoSperre).HasColumnName("kAuftragStornoSperre");
            entity.Property(e => e.BGrund).HasColumnName("bGrund");
            entity.Property(e => e.CReferenz)
                .HasMaxLength(50)
                .HasColumnName("cReferenz");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
        });

        modelBuilder.Entity<TAuftragStornogrund>(entity =>
        {
            entity.HasKey(e => e.KAuftragStornogrund).HasName("PK_Verkauf_tAuftragStornogrund");

            entity.ToTable("tAuftragStornogrund", "Verkauf");

            entity.Property(e => e.KAuftragStornogrund).HasColumnName("kAuftragStornogrund");
            entity.Property(e => e.CScxMapping)
                .HasMaxLength(50)
                .HasColumnName("cScxMapping");
            entity.Property(e => e.CStornogrund)
                .HasMaxLength(50)
                .HasColumnName("cStornogrund");
            entity.Property(e => e.NAmazonMapping).HasColumnName("nAmazonMapping");
        });

        modelBuilder.Entity<TAuftragText>(entity =>
        {
            entity.HasKey(e => e.KAuftrag).HasName("PK_Verkauf_tAuftragText");

            entity.ToTable("tAuftragText", "Verkauf");

            entity.Property(e => e.KAuftrag)
                .ValueGeneratedNever()
                .HasColumnName("kAuftrag");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAnmerkung).HasColumnName("cAnmerkung");
            entity.Property(e => e.CDrucktext).HasColumnName("cDrucktext");
            entity.Property(e => e.CHinweis).HasColumnName("cHinweis");
            entity.Property(e => e.CVorgangsstatus)
                .HasMaxLength(255)
                .HasColumnName("cVorgangsstatus");

            entity.HasOne(d => d.KAuftragNavigation).WithOne(p => p.TAuftragText)
                .HasForeignKey<TAuftragText>(d => d.KAuftrag)
                .HasConstraintName("FK_Verkauf_tAuftragText_kAuftrag");
        });

        modelBuilder.Entity<TAuftragZahlungsinfo>(entity =>
        {
            entity.HasKey(e => e.KAuftrag).HasName("PK_Verkauf_tAuftragZahlungsinfo");

            entity.ToTable("tAuftragZahlungsinfo", "Verkauf", tb =>
                {
                    tb.HasTrigger("tgr_Verkauf_tAuftragZahlungsinfo_DELETE");
                    tb.HasTrigger("tgr_Verkauf_tAuftragZahlungsinfo_UPDATE");
                });

            entity.Property(e => e.KAuftrag)
                .ValueGeneratedNever()
                .HasColumnName("kAuftrag");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBankname)
                .HasMaxLength(255)
                .HasColumnName("cBankname");
            entity.Property(e => e.CBic)
                .HasMaxLength(32)
                .HasColumnName("cBIC");
            entity.Property(e => e.CEndToEndId)
                .HasMaxLength(35)
                .HasColumnName("cEndToEndID");
            entity.Property(e => e.CGlaeubigerId)
                .HasMaxLength(35)
                .HasColumnName("cGlaeubigerID");
            entity.Property(e => e.CIban)
                .HasMaxLength(34)
                .HasColumnName("cIBAN");
            entity.Property(e => e.CKontoInhaber)
                .HasMaxLength(255)
                .HasColumnName("cKontoInhaber");
            entity.Property(e => e.CMandatsReferenz)
                .HasMaxLength(100)
                .HasColumnName("cMandatsReferenz");
            entity.Property(e => e.CPuiZahlungsinfo).HasColumnName("cPuiZahlungsinfo");
            entity.Property(e => e.CReferenzEmail)
                .HasMaxLength(255)
                .HasColumnName("cReferenzEmail");
            entity.Property(e => e.CVerwendungszweck)
                .HasMaxLength(1000)
                .HasColumnName("cVerwendungszweck");
            entity.Property(e => e.DFaelligkeitsdatum)
                .HasColumnType("datetime")
                .HasColumnName("dFaelligkeitsdatum");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");

            entity.HasOne(d => d.KAuftragNavigation).WithOne(p => p.TAuftragZahlungsinfo)
                .HasForeignKey<TAuftragZahlungsinfo>(d => d.KAuftrag)
                .HasConstraintName("FK_Verkauf_tAuftragZahlungsinfo_kAuftrag");
        });

        modelBuilder.Entity<TAuftragZahlungsinfoLog>(entity =>
        {
            entity.HasKey(e => e.KAuftragZahlungsinfoLog).HasName("PK_Verkauf_tAuftragZahlungsinfo_Log");

            entity.ToTable("tAuftragZahlungsinfo_Log", "Verkauf");

            entity.Property(e => e.KAuftragZahlungsinfoLog).HasColumnName("kAuftragZahlungsinfoLog");
            entity.Property(e => e.BRowversion)
                .HasMaxLength(8)
                .IsFixedLength()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBankname)
                .HasMaxLength(255)
                .HasColumnName("cBankname");
            entity.Property(e => e.CBic)
                .HasMaxLength(32)
                .HasColumnName("cBIC");
            entity.Property(e => e.CEndToEndId)
                .HasMaxLength(35)
                .HasColumnName("cEndToEndID");
            entity.Property(e => e.CGlaeubigerId)
                .HasMaxLength(35)
                .HasColumnName("cGlaeubigerID");
            entity.Property(e => e.CIban)
                .HasMaxLength(32)
                .HasColumnName("cIBAN");
            entity.Property(e => e.CKontoInhaber)
                .HasMaxLength(255)
                .HasColumnName("cKontoInhaber");
            entity.Property(e => e.CMandatsReferenz)
                .HasMaxLength(100)
                .HasColumnName("cMandatsReferenz");
            entity.Property(e => e.CPuiZahlungsinfo).HasColumnName("cPuiZahlungsinfo");
            entity.Property(e => e.CReferenzEmail)
                .HasMaxLength(255)
                .HasColumnName("cReferenzEmail");
            entity.Property(e => e.CVerwendungszweck)
                .HasMaxLength(1000)
                .HasColumnName("cVerwendungszweck");
            entity.Property(e => e.DFaelligkeitsdatum)
                .HasColumnType("datetime")
                .HasColumnName("dFaelligkeitsdatum");
            entity.Property(e => e.DLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dLog");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KBenutzerLog).HasColumnName("kBenutzerLog");
            entity.Property(e => e.NActionLog).HasColumnName("nActionLog");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<TAuftragkosten>(entity =>
        {
            entity.HasKey(e => e.KAuftragkosten).HasName("PK_Verkauf_tAuftragkosten");

            entity.ToTable("tAuftragkosten", "Verkauf");

            entity.HasIndex(e => e.KAuftrag, "IX_Verkauf_tAuftragkosten_kAuftrag");

            entity.Property(e => e.KAuftragkosten).HasColumnName("kAuftragkosten");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBeschreibung)
                .HasMaxLength(100)
                .HasColumnName("cBeschreibung");
            entity.Property(e => e.CSku)
                .HasMaxLength(50)
                .HasColumnName("cSKU");
            entity.Property(e => e.DBerechnungsdatumUtc).HasColumnName("dBerechnungsdatumUtc");
            entity.Property(e => e.DErstelltUtc).HasColumnName("dErstelltUtc");
            entity.Property(e => e.FSumme)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fSumme");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KAuftragPosition).HasColumnName("kAuftragPosition");
            entity.Property(e => e.KSettlementPos).HasColumnName("kSettlementPos");
            entity.Property(e => e.NKostentyp).HasColumnName("nKostentyp");

            entity.HasOne(d => d.KAuftragPositionNavigation).WithMany(p => p.TAuftragkostens)
                .HasForeignKey(d => d.KAuftragPosition)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Verkauf_tAuftragkosten_kAuftragPosition");

            entity.HasOne(d => d.KSettlementPosNavigation).WithMany(p => p.TAuftragkostens)
                .HasForeignKey(d => d.KSettlementPos)
                .HasConstraintName("FK_Verkauf_tAuftragkosten_kSettlementPos");
        });

        modelBuilder.Entity<TAusgangskanalEmail>(entity =>
        {
            entity.HasKey(e => e.KAusgangskanalEmail).HasName("PK_Ticketsystem_tAusgangskanalEmail");

            entity.ToTable("tAusgangskanalEmail", "Ticketsystem");

            entity.Property(e => e.KAusgangskanalEmail).HasColumnName("kAusgangskanalEmail");
            entity.Property(e => e.CBenutzername)
                .HasMaxLength(255)
                .HasColumnName("cBenutzername");
            entity.Property(e => e.CEmailAdresse)
                .HasMaxLength(255)
                .HasColumnName("cEmailAdresse");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CPasswort)
                .HasMaxLength(255)
                .HasColumnName("cPasswort");
            entity.Property(e => e.CServeradresse)
                .HasMaxLength(255)
                .HasColumnName("cServeradresse");
            entity.Property(e => e.CServerport)
                .HasMaxLength(255)
                .HasColumnName("cServerport");
            entity.Property(e => e.CVerschluesselung).HasColumnName("cVerschluesselung");
            entity.Property(e => e.KStatusAntwortGeschrieben).HasColumnName("kStatus_AntwortGeschrieben");
            entity.Property(e => e.NProtokoll).HasColumnName("nProtokoll");
            entity.Property(e => e.NStandard).HasColumnName("nStandard");

            entity.HasOne(d => d.KStatusAntwortGeschriebenNavigation).WithMany(p => p.TAusgangskanalEmails)
                .HasForeignKey(d => d.KStatusAntwortGeschrieben)
                .HasConstraintName("FK_Ticketsystem_tAusgangskanalEmail_kStatus_AntwortGeschrieben");
        });

        modelBuilder.Entity<TAusgangskanalEmailBenutzerSignatur>(entity =>
        {
            entity.HasKey(e => e.KAusgangskanalEmailBenutzerSignatur).HasName("PK_Ticketsystem_tAusgangskanalEmailBenutzerSignatur");

            entity.ToTable("tAusgangskanalEmailBenutzerSignatur", "Ticketsystem");

            entity.Property(e => e.KAusgangskanalEmailBenutzerSignatur).HasColumnName("kAusgangskanalEmailBenutzerSignatur");
            entity.Property(e => e.KAusgangskanalEmail).HasColumnName("kAusgangskanalEmail");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KFileHtmlInhalt).HasColumnName("kFile_HtmlInhalt");

            entity.HasOne(d => d.KAusgangskanalEmailNavigation).WithMany(p => p.TAusgangskanalEmailBenutzerSignaturs)
                .HasForeignKey(d => d.KAusgangskanalEmail)
                .HasConstraintName("FK_Ticketsystem_tAusgangskanalEmailBenutzerSignatur_kAusgangskanalEmail");

            entity.HasOne(d => d.KFileHtmlInhaltNavigation).WithMany(p => p.TAusgangskanalEmailBenutzerSignaturs)
                .HasForeignKey(d => d.KFileHtmlInhalt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Ticketsystem_tAusgangskanalEmailBenutzerSignatur_kFile_HtmlInhalt");
        });

        modelBuilder.Entity<TAusgangskanalEmailOauth>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tAusgangskanalEmailOauth", "Ticketsystem");

            entity.Property(e => e.KAusgangskanalEmail).HasColumnName("kAusgangskanalEmail");
            entity.Property(e => e.KOauthToken).HasColumnName("kOauthToken");
            entity.Property(e => e.NProvider).HasColumnName("nProvider");

            entity.HasOne(d => d.KAusgangskanalEmailNavigation).WithMany()
                .HasForeignKey(d => d.KAusgangskanalEmail)
                .HasConstraintName("FK_Ticketsystem_tAusgangskanalEmailOauth_kAusgangskanalEmail");

            entity.HasOne(d => d.KOauthTokenNavigation).WithMany()
                .HasForeignKey(d => d.KOauthToken)
                .HasConstraintName("FK_Ticketsystem_tAusgangskanalEmailOauth_kOauthToken");
        });

        modelBuilder.Entity<TAuth>(entity =>
        {
            entity.HasKey(e => e.KAuthCode).HasName("PK_restapi_tAuth");

            entity.ToTable("tAuth", "RestApi");

            entity.Property(e => e.KAuthCode)
                .ValueGeneratedNever()
                .HasColumnName("kAuthCode");
        });

        modelBuilder.Entity<TAuthCode>(entity =>
        {
            entity.HasKey(e => e.KAuthCode).HasName("PK_Sync_tAuthCode");

            entity.ToTable("tAuthCode", "Sync");

            entity.Property(e => e.KAuthCode)
                .ValueGeneratedNever()
                .HasColumnName("kAuthCode");
            entity.Property(e => e.CAuthToken)
                .HasMaxLength(255)
                .HasColumnName("cAuthToken");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KMandant).HasColumnName("kMandant");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<TAutomatikLagerConfig>(entity =>
        {
            entity.HasKey(e => e.KAutomatikLagerConfig).HasName("PK_wms_tAutomatikLagerConfig");

            entity.ToTable("tAutomatikLagerConfig", "WMS");

            entity.Property(e => e.KAutomatikLagerConfig).HasColumnName("kAutomatikLagerConfig");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CUrl)
                .HasMaxLength(255)
                .HasColumnName("cUrl");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.NAutostoreContentValuation).HasColumnName("nAutostoreContentValuation");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<TB2bartikel>(entity =>
        {
            entity.HasKey(e => e.KB2bartikel).HasName("PK_dbo_tB2BArtikel");

            entity.ToTable("tB2BArtikel");

            entity.Property(e => e.KB2bartikel).HasColumnName("kB2BArtikel");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CJpid)
                .HasMaxLength(10)
                .HasColumnName("cJpid");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
        });

        modelBuilder.Entity<TBackup>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tBackup");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DDatum)
                .HasMaxLength(255)
                .HasColumnName("dDatum");
            entity.Property(e => e.KBackup)
                .HasDefaultValueSql("((0))")
                .HasColumnName("kBackup");
        });

        modelBuilder.Entity<TBedarfsgrundlage>(entity =>
        {
            entity.HasKey(e => e.KBedarfsgrundlage).HasName("PK_dbo_tBedarfsgrundlage");

            entity.ToTable("tBedarfsgrundlage");

            entity.Property(e => e.KBedarfsgrundlage).HasColumnName("kBedarfsgrundlage");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.NAktiv).HasColumnName("nAktiv");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<TBedarfsgrundlagePosition>(entity =>
        {
            entity.HasKey(e => e.KBedarfsgrundlagePos).HasName("PK_dbo_tBedarfsgrundlagePosition");

            entity.ToTable("tBedarfsgrundlagePosition");

            entity.HasIndex(e => new { e.KWmslagerbereich, e.KBedarfsgrundlage }, "IX_dbo_tBedarfsgrundlagePosition_kWMSLagerbereich_kBedarfsgrundlage");

            entity.HasIndex(e => new { e.KWarenlager, e.KBedarfsgrundlage }, "IX_dbo_tBedarfsgrundlagePosition_kWarenlager_kBedarfsgrundlage");

            entity.HasIndex(e => new { e.KWarenlagerplatz, e.KBedarfsgrundlage }, "IX_dbo_tBedarfsgrundlagePosition_kWarenlagerplatz_kBedarfsgrundlage");

            entity.Property(e => e.KBedarfsgrundlagePos).HasColumnName("kBedarfsgrundlagePos");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KBedarfsgrundlage).HasColumnName("kBedarfsgrundlage");
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.KWarenlagerplatz).HasColumnName("kWarenlagerplatz");
            entity.Property(e => e.KWmslagerbereich).HasColumnName("kWMSLagerbereich");
            entity.Property(e => e.NPrio).HasColumnName("nPrio");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<TBemerkungen>(entity =>
        {
            entity.HasKey(e => e.KBemerkungen).HasName("PK_dbo_tBemerkungen");

            entity.ToTable("tBemerkungen");

            entity.Property(e => e.KBemerkungen)
                .ValueGeneratedNever()
                .HasColumnName("kBemerkungen");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CString)
                .HasMaxLength(255)
                .HasColumnName("cString");
        });

        modelBuilder.Entity<TBenutzerAktiv>(entity =>
        {
            entity.HasKey(e => e.KBenutzerAktiv).HasName("PK_dbo_tBenutzerAktiv");

            entity.ToTable("tBenutzerAktiv");

            entity.Property(e => e.KBenutzerAktiv).HasColumnName("kBenutzerAktiv");
            entity.Property(e => e.BAbmelden).HasColumnName("bAbmelden");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CCustom)
                .HasMaxLength(255)
                .HasColumnName("cCustom");
            entity.Property(e => e.CRechnername)
                .HasMaxLength(255)
                .HasColumnName("cRechnername");
            entity.Property(e => e.CUniqueId)
                .HasMaxLength(255)
                .HasColumnName("cUniqueId");
            entity.Property(e => e.DLetzteAktion)
                .HasColumnType("datetime")
                .HasColumnName("dLetzteAktion");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KMandant).HasColumnName("kMandant");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.NApplikation).HasColumnName("nApplikation");
        });

        modelBuilder.Entity<TBenutzerFeature>(entity =>
        {
            entity.HasKey(e => e.KBenutzerFeature).HasName("PK_dbo_tBenutzerFeature");

            entity.ToTable("tBenutzerFeature");

            entity.Property(e => e.KBenutzerFeature).HasColumnName("kBenutzerFeature");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CFromVersion)
                .HasMaxLength(100)
                .HasColumnName("cFromVersion");
            entity.Property(e => e.CToVersion)
                .HasMaxLength(100)
                .HasColumnName("cToVersion");
            entity.Property(e => e.DSeen).HasColumnName("dSeen");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
        });

        modelBuilder.Entity<TBenutzerFirma>(entity =>
        {
            entity.HasKey(e => new { e.KBenutzer, e.KFirma, e.KMandant }).HasName("PK_dbo_tBenutzerFirma");

            entity.ToTable("tBenutzerFirma");

            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KMandant).HasColumnName("kMandant");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
        });

        modelBuilder.Entity<TBenutzerLog>(entity =>
        {
            entity.HasKey(e => e.KBenutzerLog).HasName("PK_dbo_tBenutzerLog");

            entity.ToTable("tBenutzerLog");

            entity.Property(e => e.KBenutzerLog).HasColumnName("kBenutzerLog");
            entity.Property(e => e.CAktion).HasColumnName("cAktion");
            entity.Property(e => e.DZeitstempel)
                .HasColumnType("datetime")
                .HasColumnName("dZeitstempel");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.NAktionsTyp).HasColumnName("nAktionsTyp");
            entity.Property(e => e.NApplikation).HasColumnName("nApplikation");
        });

        modelBuilder.Entity<TBenutzerLogin>(entity =>
        {
            entity.HasKey(e => e.KBenutzerLogin).HasName("PK_dbo_tBenutzerLogin");

            entity.ToTable("tBenutzerLogin");

            entity.HasIndex(e => new { e.KBenutzer, e.UProvider, e.CKey }, "UQ_dbo_tBenutzerLogin_kBenutzer_uProvider_cKey").IsUnique();

            entity.HasIndex(e => new { e.UProvider, e.CKey, e.CToken }, "UQ_dbo_tBenutzerLogin_uProvider_cKey_cToken").IsUnique();

            entity.Property(e => e.KBenutzerLogin).HasColumnName("kBenutzerLogin");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CKey)
                .HasMaxLength(50)
                .HasColumnName("cKey");
            entity.Property(e => e.CToken)
                .HasMaxLength(150)
                .HasColumnName("cToken");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.UProvider).HasColumnName("uProvider");
        });

        modelBuilder.Entity<TBenutzerSearchFilter>(entity =>
        {
            entity.HasKey(e => e.KBenutzerSearchFilter).HasName("PK_dbo_BenutzerSearchFilter");

            entity.ToTable("tBenutzerSearchFilter");

            entity.Property(e => e.KBenutzerSearchFilter).HasColumnName("kBenutzerSearchFilter");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CFilterType)
                .HasMaxLength(512)
                .HasColumnName("cFilterType");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CValue).HasColumnName("cValue");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.NShared).HasColumnName("nShared");
        });

        modelBuilder.Entity<TBenutzerSuchfilter>(entity =>
        {
            entity.HasKey(e => e.KBenutzerSuchfilter).HasName("PK_dbo_tBenutzerSuchfilter");

            entity.ToTable("tBenutzerSuchfilter");

            entity.HasIndex(e => e.KBenutzer, "IX_tBenutzerSuchfilter_kBenutzer");

            entity.Property(e => e.KBenutzerSuchfilter).HasColumnName("kBenutzerSuchfilter");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CValue).HasColumnName("cValue");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.NFilterTyp).HasColumnName("nFilterTyp");
            entity.Property(e => e.NModus).HasColumnName("nModus");
        });

        modelBuilder.Entity<TBestelldatumLand>(entity =>
        {
            entity.HasKey(e => e.KBestelldatumLand).HasName("PK_Amazon_tBestelldatumLand");

            entity.ToTable("tBestelldatumLand", "Amazon");

            entity.Property(e => e.KBestelldatumLand).HasColumnName("kBestelldatumLand");
            entity.Property(e => e.CShipFromCountry)
                .HasMaxLength(5)
                .HasColumnName("cShipFromCountry");
            entity.Property(e => e.DBestellDatum)
                .HasColumnType("datetime")
                .HasColumnName("dBestellDatum");
            entity.Property(e => e.DVcsDatum)
                .HasColumnType("datetime")
                .HasColumnName("dVcsDatum");
            entity.Property(e => e.KUser).HasColumnName("kUser");

            entity.HasOne(d => d.KUserNavigation).WithMany(p => p.TBestelldatumLands)
                .HasForeignKey(d => d.KUser)
                .HasConstraintName("FK_Amazon_tBestelldatumLand_kUser");
        });

        modelBuilder.Entity<TBestellpo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("tBestellpos");

            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CEinheit)
                .HasMaxLength(255)
                .HasColumnName("cEinheit");
            entity.Property(e => e.CHinweis)
                .HasMaxLength(2000)
                .HasColumnName("cHinweis");
            entity.Property(e => e.CItemId)
                .HasMaxLength(255)
                .HasColumnName("cItemID");
            entity.Property(e => e.COrderItemId)
                .HasMaxLength(255)
                .HasColumnName("cOrderItemId");
            entity.Property(e => e.CString)
                .HasMaxLength(255)
                .HasColumnName("cString");
            entity.Property(e => e.CStringStandard)
                .HasMaxLength(255)
                .HasColumnName("cStringStandard");
            entity.Property(e => e.CTransactionId)
                .HasMaxLength(255)
                .HasColumnName("cTransactionID");
            entity.Property(e => e.CUnique)
                .HasMaxLength(30)
                .HasColumnName("cUnique");
            entity.Property(e => e.FEkNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEkNetto");
            entity.Property(e => e.FMwSt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwSt");
            entity.Property(e => e.FRabatt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabatt");
            entity.Property(e => e.FVkNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVkNetto");
            entity.Property(e => e.FVkpreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVKPreis");
            entity.Property(e => e.KAmazonBestellungPos).HasColumnName("kAmazonBestellungPos");
            entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");
            entity.Property(e => e.KBestellStueckliste).HasColumnName("kBestellStueckliste");
            entity.Property(e => e.KKonfigItem).HasColumnName("kKonfigItem");
            entity.Property(e => e.NAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nAnzahl");
            entity.Property(e => e.NDropshipping).HasColumnName("nDropshipping");
            entity.Property(e => e.NHatUpload).HasColumnName("nHatUpload");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NType).HasColumnName("nType");
            entity.Property(e => e.TArtikelKArtikel).HasColumnName("tArtikel_kArtikel");
            entity.Property(e => e.TBestellungKBestellung).HasColumnName("tBestellung_kBestellung");
        });

        modelBuilder.Entity<TBestellung>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("tBestellung");

            entity.Property(e => e.CAmazonServiceLevel)
                .HasMaxLength(100)
                .HasColumnName("cAmazonServiceLevel");
            entity.Property(e => e.CAnmerkung)
                .HasMaxLength(4500)
                .IsUnicode(false)
                .HasColumnName("cAnmerkung");
            entity.Property(e => e.CBeschreibung)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cBeschreibung");
            entity.Property(e => e.CBestellNr)
                .HasMaxLength(50)
                .HasColumnName("cBestellNr");
            entity.Property(e => e.CErloeskonto)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("cErloeskonto");
            entity.Property(e => e.CIdentCode)
                .HasMaxLength(255)
                .HasColumnName("cIdentCode");
            entity.Property(e => e.CInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cInet");
            entity.Property(e => e.CInetBestellNr)
                .HasMaxLength(50)
                .HasColumnName("cInetBestellNr");
            entity.Property(e => e.CKampagne)
                .HasMaxLength(255)
                .HasColumnName("cKampagne");
            entity.Property(e => e.CKampagneName)
                .HasMaxLength(255)
                .HasColumnName("cKampagneName");
            entity.Property(e => e.CKampagneParam)
                .HasMaxLength(255)
                .HasColumnName("cKampagneParam");
            entity.Property(e => e.CKundenauftragsnummer)
                .HasMaxLength(250)
                .HasColumnName("cKundenauftragsnummer");
            entity.Property(e => e.CModulId)
                .HasMaxLength(255)
                .HasColumnName("cModulID");
            entity.Property(e => e.COutboundId)
                .HasMaxLength(100)
                .HasColumnName("cOutboundId");
            entity.Property(e => e.CPuiZahlungsdaten).HasColumnName("cPuiZahlungsdaten");
            entity.Property(e => e.CReferrer)
                .HasMaxLength(255)
                .HasColumnName("cReferrer");
            entity.Property(e => e.CStatus)
                .HasMaxLength(255)
                .HasColumnName("cStatus");
            entity.Property(e => e.CType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cType");
            entity.Property(e => e.CUserAgent)
                .HasMaxLength(512)
                .HasColumnName("cUserAgent");
            entity.Property(e => e.CUserName)
                .HasMaxLength(255)
                .HasColumnName("cUserName");
            entity.Property(e => e.CUstId)
                .HasMaxLength(25)
                .HasColumnName("cUstId");
            entity.Property(e => e.CVersandInfo)
                .HasMaxLength(255)
                .HasColumnName("cVersandInfo");
            entity.Property(e => e.CVersandlandIso)
                .HasMaxLength(5)
                .HasColumnName("cVersandlandISO");
            entity.Property(e => e.CVersandlandWaehrung)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cVersandlandWaehrung");
            entity.Property(e => e.CVerwendungszweck)
                .HasMaxLength(1000)
                .HasColumnName("cVerwendungszweck");
            entity.Property(e => e.CWaehrung)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWaehrung");
            entity.Property(e => e.DBezahlt)
                .HasColumnType("datetime")
                .HasColumnName("dBezahlt");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DGedruckt)
                .HasColumnType("datetime")
                .HasColumnName("dGedruckt");
            entity.Property(e => e.DLieferdatum)
                .HasColumnType("datetime")
                .HasColumnName("dLieferdatum");
            entity.Property(e => e.DMailVersandt)
                .HasColumnType("datetime")
                .HasColumnName("dMailVersandt");
            entity.Property(e => e.DVersandMail)
                .HasColumnType("datetime")
                .HasColumnName("dVersandMail");
            entity.Property(e => e.DVersandt)
                .HasColumnType("datetime")
                .HasColumnName("dVersandt");
            entity.Property(e => e.DZahlungsMail)
                .HasColumnType("datetime")
                .HasColumnName("dZahlungsMail");
            entity.Property(e => e.FFaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fFaktor");
            entity.Property(e => e.FGutschein)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGutschein");
            entity.Property(e => e.FRabatt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabatt");
            entity.Property(e => e.FSkonto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fSkonto");
            entity.Property(e => e.FVersandBruttoPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVersandBruttoPreis");
            entity.Property(e => e.FVersandlandWaehrungFaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVersandlandWaehrungFaktor");
            entity.Property(e => e.FZusatzGewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZusatzGewicht");
            entity.Property(e => e.KAmazonUser).HasColumnName("kAmazonUser");
            entity.Property(e => e.KBestellHinweis).HasColumnName("kBestellHinweis");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KColor).HasColumnName("kColor");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KFulfillmentLieferant).HasColumnName("kFulfillmentLieferant");
            entity.Property(e => e.KInetBestellung).HasColumnName("kInetBestellung");
            entity.Property(e => e.KLieferadresse).HasColumnName("kLieferadresse");
            entity.Property(e => e.KLogistik).HasColumnName("kLogistik");
            entity.Property(e => e.KRechnungsadresse).HasColumnName("kRechnungsadresse");
            entity.Property(e => e.KRueckhaltegrund).HasColumnName("kRueckhaltegrund");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KSplitBestellung).HasColumnName("kSplitBestellung");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");
            entity.Property(e => e.NHatUpload).HasColumnName("nHatUpload");
            entity.Property(e => e.NIgl).HasColumnName("nIGL");
            entity.Property(e => e.NIstExterneRechnung).HasColumnName("nIstExterneRechnung");
            entity.Property(e => e.NIstReadOnly).HasColumnName("nIstReadOnly");
            entity.Property(e => e.NKomplettAusgeliefert).HasColumnName("nKomplettAusgeliefert");
            entity.Property(e => e.NMaxLiefertage).HasColumnName("nMaxLiefertage");
            entity.Property(e => e.NPlatform).HasColumnName("nPlatform");
            entity.Property(e => e.NPremium).HasColumnName("nPremium");
            entity.Property(e => e.NPrio).HasColumnName("nPrio");
            entity.Property(e => e.NStorno).HasColumnName("nStorno");
            entity.Property(e => e.NUstFrei).HasColumnName("nUstFrei");
            entity.Property(e => e.NZahlungsZiel).HasColumnName("nZahlungsZiel");
            entity.Property(e => e.NZahlungstyp).HasColumnName("nZahlungstyp");
            entity.Property(e => e.TAdresseKAdresse).HasColumnName("tAdresse_kAdresse");
            entity.Property(e => e.TBenutzerKBenutzer).HasColumnName("tBenutzer_kBenutzer");
            entity.Property(e => e.TKundeKKunde).HasColumnName("tKunde_kKunde");
            entity.Property(e => e.TRechnungKRechnung).HasColumnName("tRechnung_kRechnung");
            entity.Property(e => e.TTextKText).HasColumnName("tText_kText");
            entity.Property(e => e.TVersandArtKVersandArt).HasColumnName("tVersandArt_kVersandArt");
        });

        modelBuilder.Entity<TBestellungAttribute>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("tBestellungAttribute");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CValue)
                .HasMaxLength(4000)
                .HasColumnName("cValue");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KBestellungAttribute).HasColumnName("kBestellungAttribute");
        });

        modelBuilder.Entity<TBestellungAttributeKey>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("tBestellungAttributeKey");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KBestellungAttributeKey).HasColumnName("kBestellungAttributeKey");
        });

        modelBuilder.Entity<TBestellungPicklisteLock>(entity =>
        {
            entity.HasKey(e => e.KBestellung).HasName("PK_dbo_tBestellungPicklisteLock");

            entity.ToTable("tBestellungPicklisteLock");

            entity.Property(e => e.KBestellung)
                .ValueGeneratedNever()
                .HasColumnName("kBestellung");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DZeitstempel)
                .HasColumnType("datetime")
                .HasColumnName("dZeitstempel");
            entity.Property(e => e.KPickliste).HasColumnName("kPickliste");
        });

        modelBuilder.Entity<TBestellungSperre>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tBestellungSperre");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
        });

        modelBuilder.Entity<TBestellungWmsfreigabe>(entity =>
        {
            entity.HasKey(e => e.KBestellungWmsfreigabe).HasName("PK_dbo_tBestellungWMSFreigabe");

            entity.ToTable("tBestellungWMSFreigabe", tb => tb.HasTrigger("tgr_tBestellungWMSFreigabe_INSERT"));

            entity.HasIndex(e => new { e.KBestellung, e.NAktiv }, "IX_tBestellungWMSFreigabe_kBestellung_nAktiv");

            entity.Property(e => e.KBestellungWmsfreigabe).HasColumnName("kBestellungWMSFreigabe");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DZeitstempel)
                .HasColumnType("datetime")
                .HasColumnName("dZeitstempel");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.NAktiv).HasColumnName("nAktiv");
            entity.Property(e => e.NSperre).HasColumnName("nSperre");
            entity.Property(e => e.NTeillieferungErlaubt).HasColumnName("nTeillieferungErlaubt");
            entity.Property(e => e.NVorkommissionieren).HasColumnName("nVorkommissionieren");
        });

        modelBuilder.Entity<TBestellvorschlagEinstellungsSpeicher>(entity =>
        {
            entity.HasKey(e => e.KBenutzer).HasName("PK_DBO_tBestellvorschlagEinstellungsSpeicher");

            entity.ToTable("tBestellvorschlagEinstellungsSpeicher");

            entity.Property(e => e.KBenutzer)
                .ValueGeneratedNever()
                .HasColumnName("kBenutzer");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.XKonfiguration)
                .HasColumnType("xml")
                .HasColumnName("xKonfiguration");
        });

        modelBuilder.Entity<TBestellvorschlagVorlage>(entity =>
        {
            entity.HasKey(e => e.KBestellvorschlagVorlage).HasName("PK_Beschaffung_tBestellvorschlagVorlage");

            entity.ToTable("tBestellvorschlagVorlage", "Beschaffung");

            entity.Property(e => e.KBestellvorschlagVorlage).HasColumnName("kBestellvorschlagVorlage");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.NAktiv).HasColumnName("nAktiv");
            entity.Property(e => e.XKonfiguration)
                .HasColumnType("xml")
                .HasColumnName("xKonfiguration");
        });

        modelBuilder.Entity<TBild>(entity =>
        {
            entity.HasKey(e => e.KBild).HasName("PK_dbo_tBild");

            entity.ToTable("tBild", tb =>
                {
                    tb.HasTrigger("tgr_tBild_DEL");
                    tb.HasTrigger("tgr_tBild_INSUP");
                });

            entity.HasIndex(e => e.CHash, "IX_tBild_cHash");

            entity.Property(e => e.KBild).HasColumnName("kBild");
            entity.Property(e => e.BBild)
                .HasColumnType("image")
                .HasColumnName("bBild");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.BVorschauBild)
                .HasColumnType("image")
                .HasColumnName("bVorschauBild");
            entity.Property(e => e.CChecksum)
                .HasMaxLength(255)
                .HasColumnName("cChecksum");
            entity.Property(e => e.CHash)
                .HasMaxLength(255)
                .HasColumnName("cHash");
            entity.Property(e => e.CQuelle)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("cQuelle");
            entity.Property(e => e.DAenderung)
                .HasColumnType("datetime")
                .HasColumnName("dAenderung");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.NBreite).HasColumnName("nBreite");
            entity.Property(e => e.NDateigroesse).HasColumnName("nDateigroesse");
            entity.Property(e => e.NHoehe).HasColumnName("nHoehe");
            entity.Property(e => e.NVorschauBreite).HasColumnName("nVorschauBreite");
            entity.Property(e => e.NVorschauDateigroesse).HasColumnName("nVorschauDateigroesse");
            entity.Property(e => e.NVorschauHoehe).HasColumnName("nVorschauHoehe");
        });

        modelBuilder.Entity<TBillOfMaterial>(entity =>
        {
            entity.HasKey(e => e.KBillOfMaterial).HasName("PK_pps_tBillOfMaterial");

            entity.ToTable("tBillOfMaterial", "pps");

            entity.Property(e => e.KBillOfMaterial).HasColumnName("kBillOfMaterial");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CComment)
                .HasMaxLength(3000)
                .HasDefaultValueSql("('')")
                .HasColumnName("cComment");
            entity.Property(e => e.CHash)
                .HasMaxLength(255)
                .HasColumnName("cHash");
            entity.Property(e => e.CName)
                .HasMaxLength(100)
                .HasColumnName("cName");
            entity.Property(e => e.DActive).HasColumnName("dActive");
            entity.Property(e => e.DCalculatedStockTimeStamp).HasColumnName("dCalculatedStockTimeStamp");
            entity.Property(e => e.DCreated)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("dCreated");
            entity.Property(e => e.DLastChanged).HasColumnName("dLastChanged");
            entity.Property(e => e.FCalculatedStock)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fCalculatedStock");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBenutzerLastChanged).HasColumnName("kBenutzerLastChanged");
            entity.Property(e => e.KParentBillOfMaterial).HasColumnName("kParentBillOfMaterial");
            entity.Property(e => e.NAdditionalShelfLifeEndDateTime).HasColumnName("nAdditionalShelfLifeEndDateTime");
            entity.Property(e => e.NComponentPostingsBatchNumberRequirements).HasColumnName("nComponentPostingsBatchNumberRequirements");
            entity.Property(e => e.NComponentPostingsShelfLifeEndDateRequirements).HasColumnName("nComponentPostingsShelfLifeEndDateRequirements");
            entity.Property(e => e.NShelfLifeEndDateGenerationMode).HasColumnName("nShelfLifeEndDateGenerationMode");
            entity.Property(e => e.NState).HasColumnName("nState");
            entity.Property(e => e.NType).HasColumnName("nType");
            entity.Property(e => e.NVersion).HasColumnName("nVersion");

            entity.HasOne(d => d.KArtikelNavigation).WithMany(p => p.TBillOfMaterials)
                .HasForeignKey(d => d.KArtikel)
                .HasConstraintName("FK_pps_tBillOfMaterial_kArtikel");
        });

        modelBuilder.Entity<TBillOfMaterialComponent>(entity =>
        {
            entity.HasKey(e => e.KBillOfMaterialComponent).HasName("PK_pps_tBillOfMaterialComponents");

            entity.ToTable("tBillOfMaterialComponents", "pps");

            entity.HasIndex(e => e.KSubsetDefinition, "IX_pps_tBillOfMaterialComponents_kSubsetDefinition");

            entity.Property(e => e.KBillOfMaterialComponent).HasColumnName("kBillOfMaterialComponent");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.FRestFactor)
                .HasDefaultValueSql("((1))")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRestFactor");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBillOfMaterial).HasColumnName("kBillOfMaterial");
            entity.Property(e => e.KMassEinheit).HasColumnName("kMassEinheit");
            entity.Property(e => e.KOperation).HasColumnName("kOperation");
            entity.Property(e => e.KOperationStep).HasColumnName("kOperationStep");
            entity.Property(e => e.KParentBillOfMaterialComponent).HasColumnName("kParentBillOfMaterialComponent");
            entity.Property(e => e.KSubsetDefinition).HasColumnName("kSubsetDefinition");
            entity.Property(e => e.NComponentPostingsBatchNumberRequirements).HasColumnName("nComponentPostingsBatchNumberRequirements");
            entity.Property(e => e.NComponentPostingsShelfLifeEndDateRequirements).HasColumnName("nComponentPostingsShelfLifeEndDateRequirements");
            entity.Property(e => e.NDestroyable).HasColumnName("nDestroyable");
            entity.Property(e => e.NQuantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nQuantity");
            entity.Property(e => e.NSharedPart).HasColumnName("nSharedPart");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NVariable).HasColumnName("nVariable");

            entity.HasOne(d => d.KArtikelNavigation).WithMany(p => p.TBillOfMaterialComponents)
                .HasForeignKey(d => d.KArtikel)
                .HasConstraintName("FK_pps_tBillOfMaterialComponents_tArtikel");

            entity.HasOne(d => d.KBillOfMaterialNavigation).WithMany(p => p.TBillOfMaterialComponents)
                .HasForeignKey(d => d.KBillOfMaterial)
                .HasConstraintName("FK_pps_tBillOfMaterialComponents_kBillOfMaterial");

            entity.HasOne(d => d.KOperationStepNavigation).WithMany(p => p.TBillOfMaterialComponents)
                .HasForeignKey(d => d.KOperationStep)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_pps_tBillOfMaterialComponents_kOperationStep");

            entity.HasOne(d => d.KParentBillOfMaterialComponentNavigation).WithMany(p => p.InverseKParentBillOfMaterialComponentNavigation)
                .HasForeignKey(d => d.KParentBillOfMaterialComponent)
                .HasConstraintName("FK_pps_tBillOfMaterialComponents_tBillOfMaterialComponents");

            entity.HasOne(d => d.KSubsetDefinitionNavigation).WithMany(p => p.TBillOfMaterialComponents)
                .HasForeignKey(d => d.KSubsetDefinition)
                .HasConstraintName("FK_pps_tBillOfMaterialComponents_kSubsetDefinition");
        });

        modelBuilder.Entity<TBillOfMaterialComponentsSubset>(entity =>
        {
            entity.HasKey(e => new { e.KBillOfMaterialComponent, e.KDimension }).HasName("PK_pps_tBillOfMaterialComponentsSubsets");

            entity.ToTable("tBillOfMaterialComponentsSubsets", "pps");

            entity.Property(e => e.KBillOfMaterialComponent).HasColumnName("kBillOfMaterialComponent");
            entity.Property(e => e.KDimension).HasColumnName("kDimension");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.FGroundValue)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGroundValue");
            entity.Property(e => e.FValue)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fValue");
            entity.Property(e => e.KMassEinheit).HasColumnName("kMassEinheit");

            entity.HasOne(d => d.KBillOfMaterialComponentNavigation).WithMany(p => p.TBillOfMaterialComponentsSubsets)
                .HasForeignKey(d => d.KBillOfMaterialComponent)
                .HasConstraintName("FK_pps_tBillOfMaterialComponentsSubsets_kBillOfMaterialComponent");

            entity.HasOne(d => d.KDimensionNavigation).WithMany(p => p.TBillOfMaterialComponentsSubsets)
                .HasForeignKey(d => d.KDimension)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pps_tBillOfMaterialComponentsSubsets_kDimension");

            entity.HasOne(d => d.KMassEinheitNavigation).WithMany(p => p.TBillOfMaterialComponentsSubsets)
                .HasForeignKey(d => d.KMassEinheit)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_pps_tBillOfMaterialComponentsSubsets_kMassEinheit");
        });

        modelBuilder.Entity<TBroken>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tBroken");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBroken)
                .HasMaxLength(1024)
                .HasColumnName("cBroken");
            entity.Property(e => e.CKey)
                .HasMaxLength(255)
                .HasColumnName("cKey");
            entity.Property(e => e.DDatum)
                .HasColumnType("datetime")
                .HasColumnName("dDatum");
        });

        modelBuilder.Entity<TBuchungsArt>(entity =>
        {
            entity.HasKey(e => e.KBuchungsart).HasName("PK_dbo_tBuchungsArt");

            entity.ToTable("tBuchungsArt");

            entity.Property(e => e.KBuchungsart)
                .ValueGeneratedNever()
                .HasColumnName("kBuchungsart");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
        });

        modelBuilder.Entity<TBundesland>(entity =>
        {
            entity.HasKey(e => new { e.CIsoland, e.CBundesland }).HasName("PK_dbo_tBundesland");

            entity.ToTable("tBundesland");

            entity.Property(e => e.CIsoland)
                .HasMaxLength(5)
                .HasColumnName("cISOLand");
            entity.Property(e => e.CBundesland)
                .HasMaxLength(255)
                .HasColumnName("cBundesland");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CKuerzelBundesland)
                .HasMaxLength(5)
                .HasColumnName("cKuerzelBundesland");
        });

        modelBuilder.Entity<TCategory>(entity =>
        {
            entity.HasKey(e => e.KCategory).HasName("PK_SCX_tCategory");

            entity.ToTable("tCategory", "SCX");

            entity.HasIndex(e => new { e.KChannel, e.CCategoryId }, "IX_SCX_tCategory_kChannel_cCategoryId");

            entity.Property(e => e.KCategory).HasColumnName("kCategory");
            entity.Property(e => e.CCategoryId)
                .HasMaxLength(512)
                .HasColumnName("cCategoryId");
            entity.Property(e => e.CDisplayName)
                .HasMaxLength(250)
                .HasColumnName("cDisplayName");
            entity.Property(e => e.CParentCategory)
                .HasMaxLength(32)
                .HasColumnName("cParentCategory");
            entity.Property(e => e.DKategorieAttributeAktualisierungUtc).HasColumnName("dKategorieAttributeAktualisierungUtc");
            entity.Property(e => e.KChannel).HasColumnName("kChannel");
            entity.Property(e => e.KParentCategory).HasColumnName("kParentCategory");
            entity.Property(e => e.NDeprecated).HasColumnName("nDeprecated");
            entity.Property(e => e.NListingAllowed).HasColumnName("nListingAllowed");

            entity.HasOne(d => d.KChannelNavigation).WithMany(p => p.TCategories)
                .HasForeignKey(d => d.KChannel)
                .HasConstraintName("FK_SCX_tCategory_kChannel");
        });

        modelBuilder.Entity<TCategoryAttribute>(entity =>
        {
            entity.HasKey(e => e.KCategoryAttribute).HasName("PK_SCX_tCategoryAttribute");

            entity.ToTable("tCategoryAttribute", "SCX");

            entity.Property(e => e.KCategoryAttribute).HasColumnName("kCategoryAttribute");
            entity.Property(e => e.CAttributeId)
                .HasMaxLength(512)
                .HasColumnName("cAttributeId");
            entity.Property(e => e.CAttributeValueValidation)
                .HasMaxLength(1024)
                .HasColumnName("cAttributeValueValidation");
            entity.Property(e => e.CDescription).HasColumnName("cDescription");
            entity.Property(e => e.CDisplayName)
                .HasMaxLength(150)
                .HasColumnName("cDisplayName");
            entity.Property(e => e.CSection)
                .HasMaxLength(150)
                .HasColumnName("cSection");
            entity.Property(e => e.CSubSection)
                .HasMaxLength(150)
                .HasColumnName("cSubSection");
            entity.Property(e => e.CType)
                .HasMaxLength(9)
                .HasColumnName("cType");
            entity.Property(e => e.KCategory).HasColumnName("kCategory");
            entity.Property(e => e.KChannel).HasColumnName("kChannel");
            entity.Property(e => e.NIsMultipleAllowed).HasColumnName("nIsMultipleAllowed");
            entity.Property(e => e.NIsRepeatableSubSection).HasColumnName("nIsRepeatableSubSection");
            entity.Property(e => e.NIsVariationDimension).HasColumnName("nIsVariationDimension");
            entity.Property(e => e.NRecommended).HasColumnName("nRecommended");
            entity.Property(e => e.NRequired).HasColumnName("nRequired");
            entity.Property(e => e.NSectionPosition).HasColumnName("nSectionPosition");
            entity.Property(e => e.NSubSectionPosition).HasColumnName("nSubSectionPosition");

            entity.HasOne(d => d.KCategoryNavigation).WithMany(p => p.TCategoryAttributes)
                .HasForeignKey(d => d.KCategory)
                .HasConstraintName("FK_SCX_tCategoryAttribute_kCategory");

            entity.HasOne(d => d.KChannelNavigation).WithMany(p => p.TCategoryAttributes)
                .HasForeignKey(d => d.KChannel)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SCX_tCategoryAttribute_kChannel");
        });

        modelBuilder.Entity<TCategoryAttributeConditionalMandatory>(entity =>
        {
            entity.HasKey(e => e.KCategoryAttributeConditionalMandatory).HasName("PK_SCX_tCategoryAttributeConditionalMandatory");

            entity.ToTable("tCategoryAttributeConditionalMandatory", "SCX");

            entity.Property(e => e.KCategoryAttributeConditionalMandatory).HasColumnName("kCategoryAttributeConditionalMandatory");
            entity.Property(e => e.CValue)
                .HasMaxLength(32)
                .HasColumnName("cValue");
            entity.Property(e => e.KCategoryAttribute).HasColumnName("kCategoryAttribute");

            entity.HasOne(d => d.KCategoryAttributeNavigation).WithMany(p => p.TCategoryAttributeConditionalMandatories)
                .HasForeignKey(d => d.KCategoryAttribute)
                .HasConstraintName("FK_SCX_tCategoryAttributeConditionalMandatory_kCategoryAttribute");
        });

        modelBuilder.Entity<TCategoryAttributeConditionalOptional>(entity =>
        {
            entity.HasKey(e => e.KCategoryAttributeConditionalOptional).HasName("PK_SCX_tCategoryAttributeConditionalOptional");

            entity.ToTable("tCategoryAttributeConditionalOptional", "SCX");

            entity.Property(e => e.KCategoryAttributeConditionalOptional).HasColumnName("kCategoryAttributeConditionalOptional");
            entity.Property(e => e.CValue)
                .HasMaxLength(32)
                .HasColumnName("cValue");
            entity.Property(e => e.KCategoryAttribute).HasColumnName("kCategoryAttribute");

            entity.HasOne(d => d.KCategoryAttributeNavigation).WithMany(p => p.TCategoryAttributeConditionalOptionals)
                .HasForeignKey(d => d.KCategoryAttribute)
                .HasConstraintName("FK_SCX_tCategoryAttributeConditionalOptional_kCategoryAttribute");
        });

        modelBuilder.Entity<TCategoryAttributeListVersion>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tCategoryAttributeListVersion", "SCX");

            entity.Property(e => e.CAttributeListVersion)
                .HasMaxLength(14)
                .HasColumnName("cAttributeListVersion");
            entity.Property(e => e.CCategoryId)
                .HasMaxLength(512)
                .HasColumnName("cCategoryId");
            entity.Property(e => e.CChannelId)
                .HasMaxLength(32)
                .HasColumnName("cChannelId");
        });

        modelBuilder.Entity<TCategoryAttributeValue>(entity =>
        {
            entity.HasKey(e => e.KCategoryAttributeValue).HasName("PK_SCX_tCategoryAttributeValue");

            entity.ToTable("tCategoryAttributeValue", "SCX");

            entity.Property(e => e.KCategoryAttributeValue).HasColumnName("kCategoryAttributeValue");
            entity.Property(e => e.CDisplayName).HasColumnName("cDisplayName");
            entity.Property(e => e.CValue).HasColumnName("cValue");
            entity.Property(e => e.KCategoryAttribute).HasColumnName("kCategoryAttribute");
            entity.Property(e => e.NSort).HasColumnName("nSort");

            entity.HasOne(d => d.KCategoryAttributeNavigation).WithMany(p => p.TCategoryAttributeValues)
                .HasForeignKey(d => d.KCategoryAttribute)
                .HasConstraintName("FK_SCX_tCategoryAttributeValue_kCategoryAttribute");
        });

        modelBuilder.Entity<TCategoryRef>(entity =>
        {
            entity.HasKey(e => e.KCategoryRef).HasName("PK_FulfillmentNetwork_tCategoryRef");

            entity.ToTable("tCategoryRef", "FulfillmentNetwork");

            entity.HasIndex(e => new { e.CMerchantId, e.CProductGroup }, "UQ_FulfillmentNetwork_tCategoryRef_cMerchantId_cProductGroup")
                .IsUnique()
                .IsDescending();

            entity.Property(e => e.KCategoryRef).HasColumnName("kCategoryRef");
            entity.Property(e => e.CMerchantId)
                .HasMaxLength(10)
                .HasColumnName("cMerchantId");
            entity.Property(e => e.CProductGroup)
                .HasMaxLength(255)
                .HasColumnName("cProductGroup");
            entity.Property(e => e.KKategorie).HasColumnName("kKategorie");

            entity.HasOne(d => d.KKategorieNavigation).WithMany(p => p.TCategoryRefs)
                .HasForeignKey(d => d.KKategorie)
                .HasConstraintName("FK_FulfillmentNetwork_tCategoryRef_kKategorie");
        });

        modelBuilder.Entity<TCategoryVersion>(entity =>
        {
            entity.HasKey(e => e.KCategoryVersion);

            entity.ToTable("tCategoryVersion", "SCX");

            entity.HasIndex(e => e.CChannel, "UQ_tCategoryVersion_cChannel").IsUnique();

            entity.Property(e => e.KCategoryVersion).HasColumnName("kCategoryVersion");
            entity.Property(e => e.CCategoryTreeVersion)
                .HasMaxLength(255)
                .HasColumnName("cCategoryTreeVersion");
            entity.Property(e => e.CChannel)
                .HasMaxLength(15)
                .HasColumnName("cChannel");
            entity.Property(e => e.NVersionChanged).HasColumnName("nVersionChanged");
        });

        modelBuilder.Entity<TChannel>(entity =>
        {
            entity.HasKey(e => e.KChannel).HasName("PK_SCX_tChannel");

            entity.ToTable("tChannel", "SCX");

            entity.Property(e => e.KChannel).HasColumnName("kChannel");
            entity.Property(e => e.CChannel)
                .HasMaxLength(255)
                .HasColumnName("cChannel");
            entity.Property(e => e.CCurrency)
                .HasMaxLength(3)
                .HasColumnName("cCurrency");
            entity.Property(e => e.CDisplayName)
                .HasMaxLength(255)
                .HasColumnName("cDisplayName");
            entity.Property(e => e.CJson).HasColumnName("cJson");
            entity.Property(e => e.DChannelAttributeAktualisierungUtc).HasColumnName("dChannelAttributeAktualisierungUtc");
            entity.Property(e => e.DKategorieAktualisierungUtc).HasColumnName("dKategorieAktualisierungUtc");
            entity.Property(e => e.NAllowCombineOrders).HasColumnName("nAllowCombineOrders");
            entity.Property(e => e.NInvoiceDocumentTransfer).HasColumnName("nInvoiceDocumentTransfer");
            entity.Property(e => e.NPriceUpdatesSupported).HasColumnName("nPriceUpdatesSupported");
            entity.Property(e => e.NQuantityPriceSupported).HasColumnName("nQuantityPriceSupported");
            entity.Property(e => e.NRemainingQuantitySupported).HasColumnName("nRemainingQuantitySupported");
            entity.Property(e => e.NReturnTrackingRequired).HasColumnName("nReturnTrackingRequired");
            entity.Property(e => e.NVariationsSupported).HasColumnName("nVariationsSupported");
        });

        modelBuilder.Entity<TChannelAttribute>(entity =>
        {
            entity.HasKey(e => e.KChannelAttribute).HasName("PK_SCX_tChannelAttribute");

            entity.ToTable("tChannelAttribute", "SCX");

            entity.Property(e => e.KChannelAttribute).HasColumnName("kChannelAttribute");
            entity.Property(e => e.CAttributeId)
                .HasMaxLength(512)
                .HasColumnName("cAttributeId");
            entity.Property(e => e.CAttributeValueValidation)
                .HasMaxLength(1024)
                .HasColumnName("cAttributeValueValidation");
            entity.Property(e => e.CDescription).HasColumnName("cDescription");
            entity.Property(e => e.CDisplayName)
                .HasMaxLength(150)
                .HasColumnName("cDisplayName");
            entity.Property(e => e.CSection)
                .HasMaxLength(150)
                .HasColumnName("cSection");
            entity.Property(e => e.CSubSection)
                .HasMaxLength(150)
                .HasColumnName("cSubSection");
            entity.Property(e => e.CType)
                .HasMaxLength(9)
                .HasColumnName("cType");
            entity.Property(e => e.KChannel).HasColumnName("kChannel");
            entity.Property(e => e.NIsMultipleAllowed).HasColumnName("nIsMultipleAllowed");
            entity.Property(e => e.NIsRepeatableSubSection).HasColumnName("nIsRepeatableSubSection");
            entity.Property(e => e.NIsVariationDimension).HasColumnName("nIsVariationDimension");
            entity.Property(e => e.NRecommended).HasColumnName("nRecommended");
            entity.Property(e => e.NRequired).HasColumnName("nRequired");
            entity.Property(e => e.NSectionPosition).HasColumnName("nSectionPosition");
            entity.Property(e => e.NSubSectionPosition).HasColumnName("nSubSectionPosition");

            entity.HasOne(d => d.KChannelNavigation).WithMany(p => p.TChannelAttributes)
                .HasForeignKey(d => d.KChannel)
                .HasConstraintName("FK_SCX_tChannelAttribute_kChannel");
        });

        modelBuilder.Entity<TChannelAttributeConditionalMandatory>(entity =>
        {
            entity.HasKey(e => e.KChannelAttributeConditionalMandatory).HasName("PK_SCX_tChannelAttributeConditionalMandatory");

            entity.ToTable("tChannelAttributeConditionalMandatory", "SCX");

            entity.Property(e => e.KChannelAttributeConditionalMandatory).HasColumnName("kChannelAttributeConditionalMandatory");
            entity.Property(e => e.CValue)
                .HasMaxLength(32)
                .HasColumnName("cValue");
            entity.Property(e => e.KChannelAttribute).HasColumnName("kChannelAttribute");

            entity.HasOne(d => d.KChannelAttributeNavigation).WithMany(p => p.TChannelAttributeConditionalMandatories)
                .HasForeignKey(d => d.KChannelAttribute)
                .HasConstraintName("FK_SCX_tChannelAttributeConditionalMandatory_kChannelAttribute");
        });

        modelBuilder.Entity<TChannelAttributeConditionalOptional>(entity =>
        {
            entity.HasKey(e => e.KChannelAttributeConditionalOptional).HasName("PK_SCX_tChannelAttributeConditionalOptional");

            entity.ToTable("tChannelAttributeConditionalOptional", "SCX");

            entity.Property(e => e.KChannelAttributeConditionalOptional).HasColumnName("kChannelAttributeConditionalOptional");
            entity.Property(e => e.CValue)
                .HasMaxLength(32)
                .HasColumnName("cValue");
            entity.Property(e => e.KChannelAttribute).HasColumnName("kChannelAttribute");

            entity.HasOne(d => d.KChannelAttributeNavigation).WithMany(p => p.TChannelAttributeConditionalOptionals)
                .HasForeignKey(d => d.KChannelAttribute)
                .HasConstraintName("FK_SCX_tChannelAttributeConditionalOptional_kChannelAttribute");
        });

        modelBuilder.Entity<TChannelAttributeListVersion>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tChannelAttributeListVersion", "SCX");

            entity.Property(e => e.CAttributeListVersion)
                .HasMaxLength(14)
                .HasColumnName("cAttributeListVersion");
            entity.Property(e => e.CChannelId)
                .HasMaxLength(32)
                .HasColumnName("cChannelId");
        });

        modelBuilder.Entity<TChannelAttributeValue>(entity =>
        {
            entity.HasKey(e => e.KChannelAttributeValue).HasName("PK_SCX_tChannelAttributeValue");

            entity.ToTable("tChannelAttributeValue", "SCX");

            entity.Property(e => e.KChannelAttributeValue).HasColumnName("kChannelAttributeValue");
            entity.Property(e => e.CDisplayName).HasColumnName("cDisplayName");
            entity.Property(e => e.CValue).HasColumnName("cValue");
            entity.Property(e => e.KChannelAttribute).HasColumnName("kChannelAttribute");
            entity.Property(e => e.NSort).HasColumnName("nSort");

            entity.HasOne(d => d.KChannelAttributeNavigation).WithMany(p => p.TChannelAttributeValues)
                .HasForeignKey(d => d.KChannelAttribute)
                .HasConstraintName("FK_SCX_tChannelAttributeValue_kChannelAttribute");
        });

        modelBuilder.Entity<TChannelPriceType>(entity =>
        {
            entity.HasKey(e => e.KChannelPriceType).HasName("PK_SCX_tChannelPriceType");

            entity.ToTable("tChannelPriceType", "SCX", tb => tb.HasTrigger("tgr_tChannelPriceType_SCX_INSUPDEL"));

            entity.Property(e => e.KChannelPriceType).HasColumnName("kChannelPriceType");
            entity.Property(e => e.CDescription).HasColumnName("cDescription");
            entity.Property(e => e.CDisplayName).HasColumnName("cDisplayName");
            entity.Property(e => e.CPriceTypeId)
                .HasMaxLength(100)
                .HasColumnName("cPriceTypeId");
            entity.Property(e => e.KChannel).HasColumnName("kChannel");
            entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");
            entity.Property(e => e.KShop).HasColumnName("kShop");

            entity.HasOne(d => d.KChannelNavigation).WithMany(p => p.TChannelPriceTypes)
                .HasForeignKey(d => d.KChannel)
                .HasConstraintName("FK_SCX_tChannelPriceType_kChannel");

            entity.HasOne(d => d.KShopNavigation).WithMany(p => p.TChannelPriceTypes)
                .HasForeignKey(d => d.KShop)
                .HasConstraintName("FK_SCX_tChannelPriceType_kShop");
        });

        modelBuilder.Entity<TCondition>(entity =>
        {
            entity.HasKey(e => e.KCondition).HasName("PK_SCX_tCondition");

            entity.ToTable("tCondition", "SCX");

            entity.Property(e => e.KCondition).HasColumnName("kCondition");
            entity.Property(e => e.CCondition)
                .HasMaxLength(255)
                .HasColumnName("cCondition");
        });

        modelBuilder.Entity<TConfig>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tConfig", "Worker");

            entity.Property(e => e.CEmailSchedule)
                .HasMaxLength(100)
                .HasColumnName("cEmailSchedule");
            entity.Property(e => e.NRequestSource).HasColumnName("nRequestSource");
            entity.Property(e => e.NRequestStatus).HasColumnName("nRequestStatus");
        });

        modelBuilder.Entity<TConfiguration>(entity =>
        {
            entity.HasKey(e => e.KConfig).HasName("PK_dbo_tConfiguration");

            entity.ToTable("tConfiguration");

            entity.Property(e => e.KConfig).HasColumnName("kConfig");
            entity.Property(e => e.Arbeitsplatz).HasMaxLength(200);
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.ElementId).HasColumnName("ElementID");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
        });

        modelBuilder.Entity<TConnectorKategorieTemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tConnectorKategorieTemp");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CVaterEndpointId)
                .HasMaxLength(500)
                .HasColumnName("cVaterEndpointID");
            entity.Property(e => e.KKindKategorie).HasColumnName("kKindKategorie");
        });

        modelBuilder.Entity<TConnectorLogeintrag>(entity =>
        {
            entity.HasKey(e => e.KConnectorLogeintrag).HasName("PK_Sync_tConnectorLogeintrag");

            entity.ToTable("tConnectorLogeintrag", "Sync");

            entity.Property(e => e.KConnectorLogeintrag).HasColumnName("kConnectorLogeintrag");
            entity.Property(e => e.CExtendedMessage).HasColumnName("cExtendedMessage");
            entity.Property(e => e.CMeldung)
                .HasMaxLength(2048)
                .HasColumnName("cMeldung");
            entity.Property(e => e.DZeitpunkt)
                .HasColumnType("datetime")
                .HasColumnName("dZeitpunkt");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KSyncLogsitzung).HasColumnName("kSyncLogsitzung");
            entity.Property(e => e.NCallType).HasColumnName("nCallType");
            entity.Property(e => e.NSchweregrad).HasColumnName("nSchweregrad");

            entity.HasOne(d => d.KSyncLogsitzungNavigation).WithMany(p => p.TConnectorLogeintrags)
                .HasForeignKey(d => d.KSyncLogsitzung)
                .HasConstraintName("FK_Sync_tConnectorLogeintrag_kSyncLogsitzung");
        });

        modelBuilder.Entity<TConnectorStuecklisteTemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tConnectorStuecklisteTemp");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CVaterId)
                .HasMaxLength(500)
                .HasColumnName("cVaterID");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.KArtikelKind).HasColumnName("kArtikelKind");
            entity.Property(e => e.KStueckliste).HasColumnName("kStueckliste");
        });

        modelBuilder.Entity<TCryptoSlot>(entity =>
        {
            entity.HasKey(e => e.KCryptoSlot).HasName("PK_dbo_tCryptoSlot");

            entity.ToTable("tCryptoSlot");

            entity.HasIndex(e => new { e.KBenutzer, e.NSlotId }, "UQ_dbo_tCryptoSlot_kBenutzer_nSlotId").IsUnique();

            entity.Property(e => e.KCryptoSlot).HasColumnName("kCryptoSlot");
            entity.Property(e => e.BCryptedSlotkey).HasColumnName("bCryptedSlotkey");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBenutzerZugewiesenDurch).HasColumnName("kBenutzerZugewiesenDurch");
            entity.Property(e => e.NSlotId).HasColumnName("nSlotId");
        });

        modelBuilder.Entity<TCryptoVault>(entity =>
        {
            entity.HasKey(e => e.KCryptoVault).HasName("PK_dbo_tCryptoVault");

            entity.ToTable("tCryptoVault");

            entity.HasIndex(e => e.NSlotId, "UQ_dbo_tCryptoVault_nSlotId").IsUnique();

            entity.Property(e => e.KCryptoVault).HasColumnName("kCryptoVault");
            entity.Property(e => e.BDaten).HasColumnName("bDaten");
            entity.Property(e => e.BIv)
                .HasMaxLength(16)
                .IsFixedLength()
                .HasColumnName("bIv");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.NSlotId).HasColumnName("nSlotId");
        });

        modelBuilder.Entity<TCsvSetting>(entity =>
        {
            entity.HasKey(e => e.CKey).HasName("PK_dbo_tCsvSettings");

            entity.ToTable("tCsvSettings");

            entity.HasIndex(e => e.CKey, "UQ_dbo_tCsvSettings_cKey").IsUnique();

            entity.Property(e => e.CKey)
                .HasMaxLength(50)
                .HasColumnName("cKey");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CComment)
                .HasMaxLength(1)
                .HasColumnName("cComment");
            entity.Property(e => e.CDelmiter)
                .HasMaxLength(1)
                .HasColumnName("cDelmiter");
            entity.Property(e => e.CEscape)
                .HasMaxLength(1)
                .HasColumnName("cEscape");
            entity.Property(e => e.CQuote)
                .HasMaxLength(1)
                .HasColumnName("cQuote");
        });

        modelBuilder.Entity<TCustomerQuery>(entity =>
        {
            entity.HasKey(e => e.KCustomerQuery).HasName("PK_dbo_tCustomerQuery");

            entity.ToTable("tCustomerQuery");

            entity.Property(e => e.KCustomerQuery).HasColumnName("kCustomerQuery");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CQueryText)
                .HasColumnType("text")
                .HasColumnName("cQueryText");
            entity.Property(e => e.KKontext).HasColumnName("kKontext");
        });

        modelBuilder.Entity<TCustomerQueryColumn>(entity =>
        {
            entity.HasKey(e => e.KCustomerQueryColumn).HasName("PK_dbo_tCustomerQueryColumn");

            entity.ToTable("tCustomerQueryColumn");

            entity.Property(e => e.KCustomerQueryColumn).HasColumnName("kCustomerQueryColumn");
            entity.Property(e => e.KCustomerQueryUser).HasColumnName("kCustomerQueryUser");
            entity.Property(e => e.NGridIndex).HasColumnName("nGridIndex");
            entity.Property(e => e.NSqlIndex).HasColumnName("nSqlIndex");
            entity.Property(e => e.NWidth).HasColumnName("nWidth");

            entity.HasOne(d => d.KCustomerQueryUserNavigation).WithMany(p => p.TCustomerQueryColumns)
                .HasForeignKey(d => d.KCustomerQueryUser)
                .HasConstraintName("FK_dbo_tCustomerQueryColumn_kCustomerQueryUser");
        });

        modelBuilder.Entity<TCustomerQueryOverview>(entity =>
        {
            entity.HasKey(e => e.KCustomerQueryOverview).HasName("PK_dbo_tCustomerQueryOverview");

            entity.ToTable("tCustomerQueryOverview");

            entity.Property(e => e.KCustomerQueryOverview).HasColumnName("kCustomerQueryOverview");
            entity.Property(e => e.BIcon).HasColumnName("bIcon");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CQueryText).HasColumnName("cQueryText");
            entity.Property(e => e.KParent).HasColumnName("kParent");
            entity.Property(e => e.NBereich).HasColumnName("nBereich");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<TCustomerQueryOverviewColumn>(entity =>
        {
            entity.HasKey(e => new { e.KCustomerQueryOverview, e.KUser, e.NSqlIndex }).HasName("PK_dbo_tCustomerQueryOverviewColumn");

            entity.ToTable("tCustomerQueryOverviewColumn");

            entity.Property(e => e.KCustomerQueryOverview).HasColumnName("kCustomerQueryOverview");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.NSqlIndex).HasColumnName("nSqlIndex");
            entity.Property(e => e.NGridIndex).HasColumnName("nGridIndex");
            entity.Property(e => e.NWidth).HasColumnName("nWidth");

            entity.HasOne(d => d.KCustomerQueryOverviewNavigation).WithMany(p => p.TCustomerQueryOverviewColumns)
                .HasForeignKey(d => d.KCustomerQueryOverview)
                .HasConstraintName("FK_dbo_tCustomerQueryOverviewColumn_kCustomerQueryOverview");
        });

        modelBuilder.Entity<TCustomerQueryOverviewRecht>(entity =>
        {
            entity.HasKey(e => new { e.KCustomerQueryOverview, e.KRechtBenutzerGruppe }).HasName("PK_dbo_tCustomerQueryOverviewRecht");

            entity.ToTable("tCustomerQueryOverviewRecht");

            entity.Property(e => e.KCustomerQueryOverview).HasColumnName("kCustomerQueryOverview");
            entity.Property(e => e.KRechtBenutzerGruppe).HasColumnName("kRechtBenutzerGruppe");

            entity.HasOne(d => d.KCustomerQueryOverviewNavigation).WithMany(p => p.TCustomerQueryOverviewRechts)
                .HasForeignKey(d => d.KCustomerQueryOverview)
                .HasConstraintName("FK_dbo_tCustomerQueryOverviewRecht_kCustomerQueryOverview");
        });

        modelBuilder.Entity<TCustomerQueryRecht>(entity =>
        {
            entity.HasKey(e => new { e.KCustomerQuery, e.KRechtBenutzerGruppe }).HasName("PK_dbo_tCustomerQueryRecht");

            entity.ToTable("tCustomerQueryRecht");

            entity.Property(e => e.KCustomerQuery).HasColumnName("kCustomerQuery");
            entity.Property(e => e.KRechtBenutzerGruppe).HasColumnName("kRechtBenutzerGruppe");

            entity.HasOne(d => d.KCustomerQueryNavigation).WithMany(p => p.TCustomerQueryRechts)
                .HasForeignKey(d => d.KCustomerQuery)
                .HasConstraintName("FK_dbo_tCustomerQueryRecht_kCustomerQuery");
        });

        modelBuilder.Entity<TCustomerQueryUser>(entity =>
        {
            entity.HasKey(e => e.KCustomerQueryUser).HasName("PK_dbo_tCustomerQueryUser");

            entity.ToTable("tCustomerQueryUser");

            entity.Property(e => e.KCustomerQueryUser).HasColumnName("kCustomerQueryUser");
            entity.Property(e => e.CFormatConditions)
                .HasMaxLength(4000)
                .HasColumnName("cFormatConditions");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KCustomerQuery).HasColumnName("kCustomerQuery");

            entity.HasOne(d => d.KCustomerQueryNavigation).WithMany(p => p.TCustomerQueryUsers)
                .HasForeignKey(d => d.KCustomerQuery)
                .HasConstraintName("FK_dbo_tCustomerQueryUser_kCustomerQuery");
        });

        modelBuilder.Entity<TDashboard>(entity =>
        {
            entity.HasKey(e => e.KDashboard).HasName("PK_Mobile_tDashboard");

            entity.ToTable("tDashboard", "Mobile");

            entity.Property(e => e.KDashboard).HasColumnName("kDashboard");
            entity.Property(e => e.CDescription)
                .HasMaxLength(1000)
                .HasColumnName("cDescription");
            entity.Property(e => e.CName)
                .HasMaxLength(100)
                .HasColumnName("cName");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<TDashboardPage>(entity =>
        {
            entity.HasKey(e => e.KDashboardPage).HasName("PK_Mobile_tDashboardPage");

            entity.ToTable("tDashboardPage", "Mobile");

            entity.Property(e => e.KDashboardPage).HasColumnName("kDashboardPage");
            entity.Property(e => e.KDashboard).HasColumnName("kDashboard");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<TDateityp>(entity =>
        {
            entity.HasKey(e => e.CDateityp).HasName("PK_dbo_tDateityp");

            entity.ToTable("tDateityp");

            entity.Property(e => e.CDateityp)
                .HasMaxLength(64)
                .HasColumnName("cDateityp");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
        });

        modelBuilder.Entity<TDatevConfig>(entity =>
        {
            entity.HasKey(e => e.KFirma).HasName("PK_dbo_tDatevConfig");

            entity.ToTable("tDatevConfig");

            entity.Property(e => e.KFirma)
                .ValueGeneratedNever()
                .HasColumnName("kFirma");
            entity.Property(e => e.BUseSandbox).HasColumnName("bUseSandbox");
            entity.Property(e => e.DAbgleichStartDatum)
                .HasColumnType("datetime")
                .HasColumnName("dAbgleichStartDatum");
            entity.Property(e => e.NBeraterNummer).HasColumnName("nBeraterNummer");
            entity.Property(e => e.NMandantenNummer).HasColumnName("nMandantenNummer");
            entity.Property(e => e.TOauthConfigCId)
                .HasMaxLength(255)
                .HasColumnName("tOauthConfig_cId");
        });

        modelBuilder.Entity<TDatevLog>(entity =>
        {
            entity.HasKey(e => e.KDatevLog).HasName("PK_dbo_tDatevLogs");

            entity.ToTable("tDatevLogs");

            entity.Property(e => e.KDatevLog).HasColumnName("kDatevLog");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CFehlerMessage)
                .HasMaxLength(2000)
                .HasColumnName("cFehlerMessage");
            entity.Property(e => e.CJsonData)
                .HasMaxLength(2000)
                .HasColumnName("cJsonData");
            entity.Property(e => e.CLogLocation)
                .HasMaxLength(200)
                .HasColumnName("cLogLocation");
            entity.Property(e => e.DUebertragungsDatum)
                .HasColumnType("datetime")
                .HasColumnName("dUebertragungsDatum");
            entity.Property(e => e.KBeleg).HasColumnName("kBeleg");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.NDatevBelegTyp).HasColumnName("nDatevBelegTyp");
            entity.Property(e => e.NDatevUebertragungsStatus).HasColumnName("nDatevUebertragungsStatus");
        });

        modelBuilder.Entity<TDbErrorlog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tDbErrorlog");

            entity.Property(e => e.CAppName)
                .HasMaxLength(128)
                .HasColumnName("cAppName");
            entity.Property(e => e.CDeadlockGraph)
                .HasColumnType("xml")
                .HasColumnName("cDeadlockGraph");
            entity.Property(e => e.CErrorMessage)
                .HasMaxLength(4000)
                .HasColumnName("cErrorMessage");
            entity.Property(e => e.CErrorProcedure)
                .HasMaxLength(128)
                .HasColumnName("cErrorProcedure");
            entity.Property(e => e.CHostName)
                .HasMaxLength(128)
                .HasColumnName("cHostName");
            entity.Property(e => e.CInformation)
                .HasMaxLength(128)
                .HasColumnName("cInformation");
            entity.Property(e => e.CLockStatus)
                .HasColumnType("xml")
                .HasColumnName("cLockStatus");
            entity.Property(e => e.DZeitstempel)
                .HasColumnType("datetime")
                .HasColumnName("dZeitstempel");
            entity.Property(e => e.KDbErrorlog)
                .ValueGeneratedOnAdd()
                .HasColumnName("kDbErrorlog");
            entity.Property(e => e.NErrorLine).HasColumnName("nErrorLine");
            entity.Property(e => e.NErrorNumber).HasColumnName("nErrorNumber");
            entity.Property(e => e.NErrorSeverity).HasColumnName("nErrorSeverity");
            entity.Property(e => e.NErrorState).HasColumnName("nErrorState");
        });

        modelBuilder.Entity<TDbeSlogeintrag>(entity =>
        {
            entity.HasKey(e => e.KDbeSlogeintrag).HasName("PK_Sync_tDbeSLogeintrag");

            entity.ToTable("tDbeSLogeintrag", "Sync");

            entity.Property(e => e.KDbeSlogeintrag).HasColumnName("kDbeSLogeintrag");
            entity.Property(e => e.CExtendedMessage).HasColumnName("cExtendedMessage");
            entity.Property(e => e.CMeldung)
                .HasMaxLength(2048)
                .HasColumnName("cMeldung");
            entity.Property(e => e.DZeitpunkt)
                .HasColumnType("datetime")
                .HasColumnName("dZeitpunkt");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KSyncLogsitzung).HasColumnName("kSyncLogsitzung");
            entity.Property(e => e.NCallType).HasColumnName("nCallType");
            entity.Property(e => e.NSchweregrad).HasColumnName("nSchweregrad");

            entity.HasOne(d => d.KSyncLogsitzungNavigation).WithMany(p => p.TDbeSlogeintrags)
                .HasForeignKey(d => d.KSyncLogsitzung)
                .HasConstraintName("FK_Sync_tDbeSLogeintrag_kSyncLogsitzung");
        });

        modelBuilder.Entity<TDefinition>(entity =>
        {
            entity.HasKey(e => e.KDefinition).HasName("PK_subset_tDefinition");

            entity.ToTable("tDefinition", "subset");

            entity.HasIndex(e => e.KBaseDefinition, "IX_subset_tDefinition_kBaseDefinition");

            entity.HasIndex(e => e.KMassEinheit, "IX_subset_tDefinition_kMassEinheit");

            entity.HasIndex(e => e.CName, "UQ_subset_tDefinition_cName").IsUnique();

            entity.Property(e => e.KDefinition).HasColumnName("kDefinition");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(100)
                .HasColumnName("cName");
            entity.Property(e => e.CPriceFormula)
                .HasMaxLength(4000)
                .HasDefaultValueSql("('1')")
                .HasColumnName("cPriceFormula");
            entity.Property(e => e.CStockFormula)
                .HasMaxLength(4000)
                .HasDefaultValueSql("('1')")
                .HasColumnName("cStockFormula");
            entity.Property(e => e.KBaseDefinition).HasColumnName("kBaseDefinition");
            entity.Property(e => e.KMassEinheit).HasColumnName("kMassEinheit");
        });

        modelBuilder.Entity<TDefinitionSprache>(entity =>
        {
            entity.HasKey(e => new { e.KDefinition, e.KSprache }).HasName("PK_subset_tDefinitionSprache");

            entity.ToTable("tDefinitionSprache", "subset");

            entity.HasIndex(e => e.KDefinition, "IX_subset_tDefinitionSprache_kDefinition");

            entity.HasIndex(e => e.KSprache, "IX_subset_tDefinitionSprache_kSprache");

            entity.Property(e => e.KDefinition).HasColumnName("kDefinition");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(50)
                .HasColumnName("cName");

            entity.HasOne(d => d.KDefinitionNavigation).WithMany(p => p.TDefinitionSpraches)
                .HasForeignKey(d => d.KDefinition)
                .HasConstraintName("FK_subset_tDefinitionSprache_kDefinition");
        });

        modelBuilder.Entity<TDeliveryQueue>(entity =>
        {
            entity.HasKey(e => new { e.KDeliveryQueue, e.KFulfillmentAuftrag }).HasName("PK_FulfillmentNetwork_tDeliveryQueue");

            entity.ToTable("tDeliveryQueue", "FulfillmentNetwork");

            entity.HasIndex(e => e.KFulfillmentAuftrag, "UQ_FulfillmentNetwork_tDeliveryQueue_kFulfillmentAuftrag").IsUnique();

            entity.Property(e => e.KDeliveryQueue)
                .ValueGeneratedOnAdd()
                .HasColumnName("kDeliveryQueue");
            entity.Property(e => e.KFulfillmentAuftrag).HasColumnName("kFulfillmentAuftrag");
            entity.Property(e => e.BRowVersion)
                .HasMaxLength(8)
                .IsFixedLength()
                .HasColumnName("bRowVersion");
            entity.Property(e => e.DCreatedAt).HasColumnName("dCreatedAt");
            entity.Property(e => e.DUpdatedAt).HasColumnName("dUpdatedAt");
            entity.Property(e => e.NDeliveryNoteState).HasColumnName("nDeliveryNoteState");
            entity.Property(e => e.NInvoiceState).HasColumnName("nInvoiceState");
            entity.Property(e => e.NState).HasColumnName("nState");

            entity.HasOne(d => d.KFulfillmentAuftragNavigation).WithOne(p => p.TDeliveryQueue)
                .HasForeignKey<TDeliveryQueue>(d => d.KFulfillmentAuftrag)
                .HasConstraintName("FK_FulfillmentNetwork_tDeliveryQueue_kFulfillmentAuftrag");
        });

        modelBuilder.Entity<TDhlekp>(entity =>
        {
            entity.HasKey(e => e.KDhlekp).HasName("PK_Shipping_tDHLEKP");

            entity.ToTable("tDHLEKP", "Shipping");

            entity.Property(e => e.KDhlekp).HasColumnName("kDHLEKP");
            entity.Property(e => e.CAnmerkung)
                .HasMaxLength(128)
                .HasColumnName("cAnmerkung");
            entity.Property(e => e.CEkp)
                .HasMaxLength(14)
                .HasColumnName("cEkp");
            entity.Property(e => e.KParentDhlekp).HasColumnName("kParentDHLEKP");
            entity.Property(e => e.KShipperAccount).HasColumnName("kShipperAccount");

            entity.HasOne(d => d.KShipperAccountNavigation).WithMany(p => p.TDhlekps)
                .HasForeignKey(d => d.KShipperAccount)
                .HasConstraintName("FK_tDHLEKP_tShipperAccount");
        });

        modelBuilder.Entity<TDimension>(entity =>
        {
            entity.HasKey(e => e.KDimension).HasName("PK_subset_tDimension");

            entity.ToTable("tDimension", "subset");

            entity.HasIndex(e => e.KDefinition, "IX_subset_tDimension_kDefinition");

            entity.Property(e => e.KDimension).HasColumnName("kDimension");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(20)
                .HasColumnName("cName");
            entity.Property(e => e.KDefinition).HasColumnName("kDefinition");

            entity.HasOne(d => d.KDefinitionNavigation).WithMany(p => p.TDimensions)
                .HasForeignKey(d => d.KDefinition)
                .HasConstraintName("FK_subset_tDimension_kDimension");
        });

        modelBuilder.Entity<TDimensionSprache>(entity =>
        {
            entity.HasKey(e => new { e.KDimension, e.KSprache }).HasName("PK_subset_tDimensionSprache");

            entity.ToTable("tDimensionSprache", "subset");

            entity.HasIndex(e => e.KDimension, "IX_subset_tDimensionSprache_kDimension");

            entity.HasIndex(e => e.KSprache, "IX_subset_tDimensionSprache_kSprache");

            entity.Property(e => e.KDimension).HasColumnName("kDimension");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(50)
                .HasColumnName("cName");

            entity.HasOne(d => d.KDimensionNavigation).WithMany(p => p.TDimensionSpraches)
                .HasForeignKey(d => d.KDimension)
                .HasConstraintName("FK_subset_tDimensionSprache_kDimension");
        });

        modelBuilder.Entity<TDirectory>(entity =>
        {
            entity.HasKey(e => e.KDirectory).HasName("PK_Blockly_tDirectory");

            entity.ToTable("tDirectory", "Blockly");

            entity.Property(e => e.KDirectory).HasColumnName("kDirectory");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(100)
                .HasColumnName("cName");
            entity.Property(e => e.DCreated)
                .HasColumnType("datetime")
                .HasColumnName("dCreated");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KParentDirectory).HasColumnName("kParentDirectory");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NType).HasColumnName("nType");

            entity.HasOne(d => d.KParentDirectoryNavigation).WithMany(p => p.InverseKParentDirectoryNavigation)
                .HasForeignKey(d => d.KParentDirectory)
                .HasConstraintName("FK_Blockly_tDirectory_kParentDirectory");
        });

        modelBuilder.Entity<TDisposition>(entity =>
        {
            entity.HasKey(e => e.KDisposition).HasName("PK_pps_tDisposition");

            entity.ToTable("tDisposition", "pps");

            entity.Property(e => e.KDisposition).HasColumnName("kDisposition");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CComment).HasColumnName("cComment");
            entity.Property(e => e.DCreated).HasColumnName("dCreated");
            entity.Property(e => e.DIntendedCompletionDate).HasColumnName("dIntendedCompletionDate");
            entity.Property(e => e.FActualQuantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fActualQuantity");
            entity.Property(e => e.FPlannedQuantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPlannedQuantity");
            entity.Property(e => e.FQuantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fQuantity");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KReference).HasColumnName("kReference");
            entity.Property(e => e.NReferenceType).HasColumnName("nReferenceType");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");

            entity.HasOne(d => d.KArtikelNavigation).WithMany(p => p.TDispositions)
                .HasForeignKey(d => d.KArtikel)
                .HasConstraintName("FK_pps_tDisposition_kArtikel");
        });

        modelBuilder.Entity<TDownload>(entity =>
        {
            entity.HasKey(e => e.KDownload).HasName("PK_dbo_tDownload");

            entity.ToTable("tDownload");

            entity.HasIndex(e => e.CId, "IX_tDownload_cID");

            entity.Property(e => e.KDownload).HasColumnName("kDownload");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CId)
                .HasMaxLength(255)
                .HasColumnName("cID");
            entity.Property(e => e.CPfad)
                .HasMaxLength(255)
                .HasColumnName("cPfad");
            entity.Property(e => e.CPfadVorschau)
                .HasMaxLength(255)
                .HasColumnName("cPfadVorschau");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.NAnzahl).HasColumnName("nAnzahl");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NTage).HasColumnName("nTage");
        });

        modelBuilder.Entity<TDownloadShop>(entity =>
        {
            entity.HasKey(e => new { e.KDownload, e.KShop }).HasName("PK_dbo_tDownloadShop");

            entity.ToTable("tDownloadShop");

            entity.Property(e => e.KDownload).HasColumnName("kDownload");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CDelInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cDelInet");
            entity.Property(e => e.CInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cInet");
        });

        modelBuilder.Entity<TDropShippingPo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tDropShippingPos");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");
            entity.Property(e => e.KLieferantenBestellungPos).HasColumnName("kLieferantenBEstellungPos");
        });

        modelBuilder.Entity<TDruckEinstellung>(entity =>
        {
            entity.HasKey(e => e.KDruckEinstellung).HasName("PK_dbo_tDruckEinstellung");

            entity.ToTable("tDruckEinstellung");

            entity.HasIndex(e => new { e.CArbeitsplatz, e.KBenutzer, e.KDruckvorlage }, "UQ_dbo_tDruckEinstellung_cArbeitsplatz_kBenutzer_kDruckvorlage").IsUnique();

            entity.Property(e => e.KDruckEinstellung).HasColumnName("kDruckEinstellung");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CArbeitsplatz)
                .HasMaxLength(64)
                .HasColumnName("cArbeitsplatz");
            entity.Property(e => e.CDruckername1)
                .HasMaxLength(64)
                .HasColumnName("cDruckername1");
            entity.Property(e => e.CDruckername2)
                .HasMaxLength(64)
                .HasColumnName("cDruckername2");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KDruckvorlage).HasColumnName("kDruckvorlage");
        });

        modelBuilder.Entity<TDruckQueue>(entity =>
        {
            entity.HasKey(e => e.KDruckQueue).HasName("PK_dbo_tDruckQueue");

            entity.ToTable("tDruckQueue");

            entity.HasIndex(e => e.KLhm, "IX_dbo_tDruckQueue_kLHM");

            entity.Property(e => e.KDruckQueue).HasColumnName("kDruckQueue");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DZeitstempel)
                .HasColumnType("datetime")
                .HasColumnName("dZeitstempel");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KLhm).HasColumnName("kLHM");
            entity.Property(e => e.KWarenlagerPlatz).HasColumnName("kWarenlagerPlatz");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<TDruckvorlage>(entity =>
        {
            entity.HasKey(e => e.KDruckvorlage).HasName("PK_dbo_tDruckvorlage");

            entity.ToTable("tDruckvorlage");

            entity.Property(e => e.KDruckvorlage)
                .ValueGeneratedNever()
                .HasColumnName("kDruckvorlage");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KFormType).HasColumnName("kFormType");
            entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");
            entity.Property(e => e.KLlvorlage).HasColumnName("kLLVorlage");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.NAusgabe)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nAusgabe");
            entity.Property(e => e.NStandard).HasColumnName("nStandard");
        });

        modelBuilder.Entity<TDtau>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tDTAUS");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBlz)
                .HasMaxLength(8)
                .HasColumnName("cBLZ");
            entity.Property(e => e.CKontoInhaber)
                .HasMaxLength(28)
                .HasColumnName("cKontoInhaber");
            entity.Property(e => e.CKontoNr)
                .HasMaxLength(10)
                .HasColumnName("cKontoNr");
            entity.Property(e => e.CName)
                .HasMaxLength(512)
                .HasColumnName("cName");
            entity.Property(e => e.CZeile1)
                .HasMaxLength(27)
                .HasColumnName("cZeile1");
            entity.Property(e => e.CZeile2)
                .HasMaxLength(27)
                .HasColumnName("cZeile2");
            entity.Property(e => e.NZahlung).HasColumnName("nZahlung");
        });

        modelBuilder.Entity<TEan>(entity =>
        {
            entity.HasKey(e => e.CEan).HasName("PK_dbo_tEAN");

            entity.ToTable("tEAN");

            entity.Property(e => e.CEan)
                .HasMaxLength(255)
                .HasColumnName("cEAN");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DImportdatum)
                .HasColumnType("datetime")
                .HasColumnName("dImportdatum");
            entity.Property(e => e.DLockDate)
                .HasColumnType("datetime")
                .HasColumnName("dLockDate");
        });

        modelBuilder.Entity<TEazyShippingVerpackQueue>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tEazyShippingVerpackQueue");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DTimeStamp)
                .HasColumnType("datetime")
                .HasColumnName("dTimeStamp");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
        });

        modelBuilder.Entity<TEbayAbgleichLogeintrag>(entity =>
        {
            entity.HasKey(e => e.KEbayAbgleichLogeintrag).HasName("PK_Ebay_tEbayAbgleichLogeintrag");

            entity.ToTable("tEbayAbgleichLogeintrag", "Ebay");

            entity.Property(e => e.KEbayAbgleichLogeintrag).HasColumnName("kEbayAbgleichLogeintrag");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CMeldung)
                .HasMaxLength(2048)
                .HasColumnName("cMeldung");
            entity.Property(e => e.DZeitpunkt)
                .HasColumnType("datetime")
                .HasColumnName("dZeitpunkt");
            entity.Property(e => e.KEbayAbgleichLogsitzung).HasColumnName("kEbayAbgleichLogsitzung");
            entity.Property(e => e.KEbayUser).HasColumnName("kEbayUser");
            entity.Property(e => e.KItemId).HasColumnName("kItemId");
            entity.Property(e => e.KSiteId).HasColumnName("kSiteId");
            entity.Property(e => e.NSchweregrad).HasColumnName("nSchweregrad");
            entity.Property(e => e.NVorgang).HasColumnName("nVorgang");

            entity.HasOne(d => d.KEbayAbgleichLogsitzungNavigation).WithMany(p => p.TEbayAbgleichLogeintrags)
                .HasForeignKey(d => d.KEbayAbgleichLogsitzung)
                .HasConstraintName("FK_Ebay_tEbayAbgleichLogeintrag_kEbayAbgleichLogsitzung");
        });

        modelBuilder.Entity<TEbayAbgleichLogsitzung>(entity =>
        {
            entity.HasKey(e => e.KEbayAbgleichLogsitzung).HasName("PK_Ebay_tEbayAbgleichLogsitzung");

            entity.ToTable("tEbayAbgleichLogsitzung", "Ebay");

            entity.Property(e => e.KEbayAbgleichLogsitzung).HasColumnName("kEbayAbgleichLogsitzung");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CRechnername)
                .HasMaxLength(64)
                .HasColumnName("cRechnername");
            entity.Property(e => e.CStatusMeldung)
                .HasMaxLength(2048)
                .HasColumnName("cStatusMeldung");
            entity.Property(e => e.DEnde)
                .HasColumnType("datetime")
                .HasColumnName("dEnde");
            entity.Property(e => e.DStart)
                .HasColumnType("datetime")
                .HasColumnName("dStart");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<TEbayItemProductCompliance>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tEbayItemProductCompliance", "Ebay");

            entity.HasIndex(e => new { e.KItem, e.CProfileId }, "UQ_Ebay_tEbayItemProductCompliance_kItem_cProfileId").IsUnique();

            entity.Property(e => e.CProfileId)
                .HasMaxLength(255)
                .HasColumnName("cProfileId");
            entity.Property(e => e.KItem).HasColumnName("kItem");

            entity.HasOne(d => d.KItemNavigation).WithMany()
                .HasForeignKey(d => d.KItem)
                .HasConstraintName("FK_Ebay_tEbayItemProductCompliance_kItem");
        });

        modelBuilder.Entity<TEigenschaftKombiWert>(entity =>
        {
            entity.HasKey(e => new { e.KEigenschaftKombi, e.KEigenschaft }).HasName("PK_dbo_tEigenschaftKombiWert");

            entity.ToTable("tEigenschaftKombiWert", tb => tb.HasTrigger("jtlActionValidator_tEigenschaftKombiWert"));

            entity.Property(e => e.KEigenschaftKombi).HasColumnName("kEigenschaftKombi");
            entity.Property(e => e.KEigenschaft).HasColumnName("kEigenschaft");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KEigenschaftWert).HasColumnName("kEigenschaftWert");
        });

        modelBuilder.Entity<TEigenschaftSichtbarkeit>(entity =>
        {
            entity.HasKey(e => new { e.KEigenschaft, e.KKundenGruppe, e.KShop }).HasName("PK_dbo_tEigenschaftSichtbarkeit");

            entity.ToTable("tEigenschaftSichtbarkeit", tb => tb.HasTrigger("tgr_tEigenschaftSichtbarkeit_Connector"));

            entity.Property(e => e.KEigenschaft).HasColumnName("kEigenschaft");
            entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
        });

        modelBuilder.Entity<TEigenschaftSprache>(entity =>
        {
            entity.HasKey(e => new { e.KEigenschaft, e.KSprache }).HasName("PK_dbo_tEigenschaftSprache");

            entity.ToTable("tEigenschaftSprache", tb =>
                {
                    tb.HasTrigger("tgr_tEigenschaftSprache_DEL");
                    tb.HasTrigger("tgr_tEigenschaftSprache_INSUP");
                });

            entity.Property(e => e.KEigenschaft).HasColumnName("kEigenschaft");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
        });

        modelBuilder.Entity<TEigenschaftWertAbhaengigkeit>(entity =>
        {
            entity.HasKey(e => e.KEigenschaftWertAbhaengigkeit).HasName("PK_dbo_tEigenschaftWertAbhaengigkeit");

            entity.ToTable("tEigenschaftWertAbhaengigkeit");

            entity.Property(e => e.KEigenschaftWertAbhaengigkeit).HasColumnName("kEigenschaftWertAbhaengigkeit");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KEigenschaftWert).HasColumnName("kEigenschaftWert");
            entity.Property(e => e.KEigenschaftWertZiel).HasColumnName("kEigenschaftWertZiel");
        });

        modelBuilder.Entity<TEigenschaftWertAufprei>(entity =>
        {
            entity.HasKey(e => new { e.KEigenschaftWert, e.KKundenGruppe, e.KShop }).HasName("PK_dbo_tEigenschaftWertAufpreis");

            entity.ToTable("tEigenschaftWertAufpreis", tb => tb.HasTrigger("tgr_tEigenschaftWertAufpreis_Connector"));

            entity.Property(e => e.KEigenschaftWert).HasColumnName("kEigenschaftWert");
            entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.FAufpreisNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAufpreisNetto");
        });

        modelBuilder.Entity<TEigenschaftWertPict>(entity =>
        {
            entity.HasKey(e => e.KEigenschaftWertPict).HasName("PK_dbo_tEigenschaftWertPict");

            entity.ToTable("tEigenschaftWertPict", tb =>
                {
                    tb.HasTrigger("tgr_tEigenschaftWertPict_DELETE");
                    tb.HasTrigger("tgr_tEigenschaftWertPict_INSERT");
                    tb.HasTrigger("tgr_tEigenschaftWertPict_UPDATE");
                });

            entity.Property(e => e.KEigenschaftWertPict).HasColumnName("kEigenschaftWertPict");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KBild).HasColumnName("kBild");
            entity.Property(e => e.KEigenschaftWert).HasColumnName("kEigenschaftWert");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NInet).HasColumnName("nInet");
        });

        modelBuilder.Entity<TEigenschaftWertSichtbarkeit>(entity =>
        {
            entity.HasKey(e => new { e.KEigenschaftWert, e.KKundenGruppe, e.KShop }).HasName("PK_dbo_tEigenschaftWertSichtbarkeit");

            entity.ToTable("tEigenschaftWertSichtbarkeit", tb => tb.HasTrigger("tgr_tEigenschaftWertSichtbarkeit_Connector"));

            entity.Property(e => e.KEigenschaftWert).HasColumnName("kEigenschaftWert");
            entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
        });

        modelBuilder.Entity<TEigenschaftWertSprache>(entity =>
        {
            entity.HasKey(e => new { e.KEigenschaftWert, e.KSprache }).HasName("PK_dbo_tEigenschaftWertSprache");

            entity.ToTable("tEigenschaftWertSprache", tb =>
                {
                    tb.HasTrigger("tgr_tEigenschaftWertSprache_DEL");
                    tb.HasTrigger("tgr_tEigenschaftWertSprache_INSUP");
                });

            entity.Property(e => e.KEigenschaftWert).HasColumnName("kEigenschaftWert");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
        });

        modelBuilder.Entity<TEingangskanalEmail>(entity =>
        {
            entity.HasKey(e => e.KEingangskanalEmail).HasName("PK_Ticketsystem_tEingangskanalEmail");

            entity.ToTable("tEingangskanalEmail", "Ticketsystem");

            entity.HasIndex(e => e.KAusgangskanalEmail, "IX_Ticketsystem_tEingangskanalEmail_kAusgangskanalEmail");

            entity.Property(e => e.KEingangskanalEmail).HasColumnName("kEingangskanalEmail");
            entity.Property(e => e.CBenutzername)
                .HasMaxLength(255)
                .HasColumnName("cBenutzername");
            entity.Property(e => e.CEmailAdresse)
                .HasMaxLength(255)
                .HasColumnName("cEmailAdresse");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasDefaultValueSql("('kein Name')")
                .HasColumnName("cName");
            entity.Property(e => e.CPasswort)
                .HasMaxLength(255)
                .HasColumnName("cPasswort");
            entity.Property(e => e.CServeradresse)
                .HasMaxLength(255)
                .HasColumnName("cServeradresse");
            entity.Property(e => e.CServerport)
                .HasMaxLength(255)
                .HasColumnName("cServerport");
            entity.Property(e => e.CVerschluesselung).HasColumnName("cVerschluesselung");
            entity.Property(e => e.KAusgangskanalEmail).HasColumnName("kAusgangskanalEmail");
            entity.Property(e => e.KStatusNeueAntwort).HasColumnName("kStatusNeueAntwort");
            entity.Property(e => e.KStatusNeuesTicket).HasColumnName("kStatusNeuesTicket");
            entity.Property(e => e.NGeleseneNachrichtenAbholen).HasColumnName("nGeleseneNachrichtenAbholen");
            entity.Property(e => e.NIntervall).HasColumnName("nIntervall");
            entity.Property(e => e.NMailNachDemAbrufenLoeschen)
                .HasDefaultValueSql("((1))")
                .HasColumnName("nMailNachDemAbrufenLoeschen");
            entity.Property(e => e.NMaximalesEmailAlter).HasColumnName("nMaximalesEmailAlter");
            entity.Property(e => e.NNeuesteUniqueIdImap).HasColumnName("nNeuesteUniqueIdImap");
            entity.Property(e => e.NProtokoll).HasColumnName("nProtokoll");

            entity.HasOne(d => d.KAusgangskanalEmailNavigation).WithMany(p => p.TEingangskanalEmails)
                .HasForeignKey(d => d.KAusgangskanalEmail)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Ticketsystem_tEingangskanalEmail_kAusgangskanalEmail");

            entity.HasOne(d => d.KStatusNeueAntwortNavigation).WithMany(p => p.TEingangskanalEmailKStatusNeueAntwortNavigations)
                .HasForeignKey(d => d.KStatusNeueAntwort)
                .HasConstraintName("FK_Ticketsystem_tEingangskanalEmail_kStatusNeueAntwort");

            entity.HasOne(d => d.KStatusNeuesTicketNavigation).WithMany(p => p.TEingangskanalEmailKStatusNeuesTicketNavigations)
                .HasForeignKey(d => d.KStatusNeuesTicket)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Ticketsystem_tEingangskanalEmail_kStatusNeuesTicket");
        });

        modelBuilder.Entity<TEingangskanalEmailLabel>(entity =>
        {
            entity.HasKey(e => e.KEingangskanalEmailLabel).HasName("PK_Ticketsystem_tEingangskanalEmailLabel");

            entity.ToTable("tEingangskanalEmailLabel", "Ticketsystem");

            entity.HasIndex(e => e.KEingangskanalEmail, "IX_Ticketsystem_tEingangskanalEmailLabel_kEingangskanalEmail");

            entity.HasIndex(e => e.KLabel, "IX_Ticketsystem_tEingangskanalEmailLabel_kLabel");

            entity.Property(e => e.KEingangskanalEmailLabel).HasColumnName("kEingangskanalEmailLabel");
            entity.Property(e => e.KEingangskanalEmail).HasColumnName("kEingangskanalEmail");
            entity.Property(e => e.KLabel).HasColumnName("kLabel");

            entity.HasOne(d => d.KEingangskanalEmailNavigation).WithMany(p => p.TEingangskanalEmailLabels)
                .HasForeignKey(d => d.KEingangskanalEmail)
                .HasConstraintName("FK_Ticketsystem_tEingangskanalEmailLabel_kEingangskanalEmail");

            entity.HasOne(d => d.KLabelNavigation).WithMany(p => p.TEingangskanalEmailLabels)
                .HasForeignKey(d => d.KLabel)
                .HasConstraintName("FK_Ticketsystem_tEingangskanalEmailLabel_kLabel");
        });

        modelBuilder.Entity<TEingangskanalEmailOauth>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tEingangskanalEmailOauth", "Ticketsystem");

            entity.Property(e => e.KEingangskanalEmail).HasColumnName("kEingangskanalEmail");
            entity.Property(e => e.KOauthToken).HasColumnName("kOauthToken");
            entity.Property(e => e.NProvider).HasColumnName("nProvider");

            entity.HasOne(d => d.KEingangskanalEmailNavigation).WithMany()
                .HasForeignKey(d => d.KEingangskanalEmail)
                .HasConstraintName("FK_Ticketsystem_tEingangskanalEmailOauth_kEingangskanalEmail");

            entity.HasOne(d => d.KOauthTokenNavigation).WithMany()
                .HasForeignKey(d => d.KOauthToken)
                .HasConstraintName("FK_Ticketsystem_tEingangskanalEmailOauth_kOauthToken");
        });

        modelBuilder.Entity<TEingangsrechnung>(entity =>
        {
            entity.HasKey(e => e.KEingangsrechnung).HasName("PK_dbo_tEingangsrechnung");

            entity.ToTable("tEingangsrechnung");

            entity.Property(e => e.KEingangsrechnung).HasColumnName("kEingangsrechnung");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAdresszusatz)
                .HasMaxLength(255)
                .HasColumnName("cAdresszusatz");
            entity.Property(e => e.CBundesland)
                .HasMaxLength(255)
                .HasColumnName("cBundesland");
            entity.Property(e => e.CEigeneRechnungsnummer)
                .HasMaxLength(255)
                .HasColumnName("cEigeneRechnungsnummer");
            entity.Property(e => e.CFax)
                .HasMaxLength(255)
                .HasColumnName("cFax");
            entity.Property(e => e.CFremdbelegnummer)
                .HasMaxLength(255)
                .HasColumnName("cFremdbelegnummer");
            entity.Property(e => e.CHinweise)
                .HasMaxLength(255)
                .HasColumnName("cHinweise");
            entity.Property(e => e.CLandIso)
                .HasMaxLength(5)
                .HasColumnName("cLandISO");
            entity.Property(e => e.CLieferant)
                .HasMaxLength(255)
                .HasColumnName("cLieferant");
            entity.Property(e => e.CMail)
                .HasMaxLength(255)
                .HasColumnName("cMail");
            entity.Property(e => e.CMobil)
                .HasMaxLength(255)
                .HasColumnName("cMobil");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPlz)
                .HasMaxLength(255)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTel)
                .HasMaxLength(255)
                .HasColumnName("cTel");
            entity.Property(e => e.DBelegdatum)
                .HasColumnType("datetime")
                .HasColumnName("dBelegdatum");
            entity.Property(e => e.DBezahlt)
                .HasColumnType("datetime")
                .HasColumnName("dBezahlt");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DZahlungsziel)
                .HasColumnType("datetime")
                .HasColumnName("dZahlungsziel");
            entity.Property(e => e.FFremdFaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fFremdFaktor");
            entity.Property(e => e.KAnsprechpartner).HasColumnName("kAnsprechpartner");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.NDeleted).HasColumnName("nDeleted");
            entity.Property(e => e.NKumuliert).HasColumnName("nKumuliert");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
            entity.Property(e => e.NVerteilungsArt).HasColumnName("nVerteilungsArt");
            entity.Property(e => e.NZahlungFreigegeben).HasColumnName("nZahlungFreigegeben");
        });

        modelBuilder.Entity<TEingangsrechnungPo>(entity =>
        {
            entity.HasKey(e => e.KEingangsrechnungPos).HasName("PK_dbo_tEingangsrechnungPos");

            entity.ToTable("tEingangsrechnungPos");

            entity.HasIndex(e => e.KEingangsrechnung, "IX_tEingangsrechnungPos_kEingangsrechnung_kLieferantenbestellung");

            entity.Property(e => e.KEingangsrechnungPos).HasColumnName("kEingangsrechnungPos");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CArtNr)
                .HasMaxLength(255)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CEinheit)
                .HasMaxLength(255)
                .HasColumnName("cEinheit");
            entity.Property(e => e.CHinweis)
                .HasMaxLength(255)
                .HasColumnName("cHinweis");
            entity.Property(e => e.CLieferantenArtNr)
                .HasMaxLength(255)
                .HasColumnName("cLieferantenArtNr");
            entity.Property(e => e.CLieferantenBezeichnung)
                .HasMaxLength(255)
                .HasColumnName("cLieferantenBezeichnung");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.FEknetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEKNetto");
            entity.Property(e => e.FMenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMenge");
            entity.Property(e => e.FMwSt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwSt");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KEingangsrechnung).HasColumnName("kEingangsrechnung");
            entity.Property(e => e.KLieferantenBestellungPos).HasColumnName("kLieferantenBestellungPos");
            entity.Property(e => e.KLieferantenbestellung).HasColumnName("kLieferantenbestellung");
            entity.Property(e => e.NPosTyp).HasColumnName("nPosTyp");
        });

        modelBuilder.Entity<TEingangsrechnungPosZusatzkosten>(entity =>
        {
            entity.HasKey(e => new { e.KZusatzkosten, e.KEingangsrechnungPos }).HasName("PK_dbo_tEingangsrechnungPosZusatzkosten");

            entity.ToTable("tEingangsrechnungPosZusatzkosten");

            entity.Property(e => e.KZusatzkosten).HasColumnName("kZusatzkosten");
            entity.Property(e => e.KEingangsrechnungPos).HasColumnName("kEingangsrechnungPos");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CWaehrungIso)
                .HasMaxLength(20)
                .HasColumnName("cWaehrungISO");
            entity.Property(e => e.DWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dWert");
            entity.Property(e => e.FFremdFaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fFremdFaktor");
            entity.Property(e => e.FMwst)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwst");
        });

        modelBuilder.Entity<TEingangsrechnungzusatzkosten>(entity =>
        {
            entity.HasKey(e => e.KZusatzkosten).HasName("PK_dbo_tEingangsrechnungzusatzkosten");

            entity.ToTable("tEingangsrechnungzusatzkosten");

            entity.Property(e => e.KZusatzkosten).HasColumnName("kZusatzkosten");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.NGld).HasColumnName("nGLD");
            entity.Property(e => e.NPreis).HasColumnName("nPreis");
        });

        modelBuilder.Entity<TEinheit>(entity =>
        {
            entity.HasKey(e => e.KEinheit).HasName("PK_dbo_tEinheit");

            entity.ToTable("tEinheit", tb => tb.HasTrigger("jtlActionValidator_teinheit"));

            entity.Property(e => e.KEinheit).HasColumnName("kEinheit");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.NIstUnsichtbar).HasColumnName("nIstUnsichtbar");
        });

        modelBuilder.Entity<TEinheitSprache>(entity =>
        {
            entity.HasKey(e => new { e.KEinheit, e.KSprache }).HasName("PK_dbo_tEinheitSprache");

            entity.ToTable("tEinheitSprache", tb =>
                {
                    tb.HasTrigger("tgr_tEinheitSprache_DEL");
                    tb.HasTrigger("tgr_tEinheitSprache_INSUP");
                });

            entity.Property(e => e.KEinheit).HasColumnName("kEinheit");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
        });

        modelBuilder.Entity<TEmailEinstellung>(entity =>
        {
            entity.HasKey(e => e.KEmailEinstellungen).HasName("PK_dbo_tEMailEinstellung");

            entity.ToTable("tEMailEinstellung");

            entity.Property(e => e.KEmailEinstellungen).HasColumnName("kEMailEinstellungen");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.BSmimezertifikatData).HasColumnName("bSMIMEZertifikatData");
            entity.Property(e => e.CAbsender)
                .HasMaxLength(255)
                .HasColumnName("cAbsender");
            entity.Property(e => e.CBcc)
                .HasMaxLength(255)
                .HasColumnName("cBCC");
            entity.Property(e => e.CNutzernameSmtp)
                .HasMaxLength(255)
                .HasColumnName("cNutzernameSMTP");
            entity.Property(e => e.CPasswortSmtp)
                .HasMaxLength(255)
                .HasColumnName("cPasswortSMTP");
            entity.Property(e => e.CServerSmtp)
                .HasMaxLength(255)
                .HasColumnName("cServerSMTP");
            entity.Property(e => e.CSigBefehlDateiname)
                .HasMaxLength(255)
                .HasColumnName("cSigBefehlDateiname");
            entity.Property(e => e.CSigBefehlParameter)
                .HasMaxLength(255)
                .HasColumnName("cSigBefehlParameter");
            entity.Property(e => e.CSigPortalKdNummer)
                .HasMaxLength(64)
                .HasColumnName("cSigPortalKdNummer");
            entity.Property(e => e.CSigPortalNutzername)
                .HasMaxLength(64)
                .HasColumnName("cSigPortalNutzername");
            entity.Property(e => e.CSigPortalPasswort)
                .HasMaxLength(64)
                .HasColumnName("cSigPortalPasswort");
            entity.Property(e => e.CSigPortalPfad)
                .HasMaxLength(255)
                .HasColumnName("cSigPortalPfad");
            entity.Property(e => e.CSmimepasswort)
                .HasMaxLength(64)
                .HasColumnName("cSMIMEPasswort");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KOauthToken).HasColumnName("kOauthToken");
            entity.Property(e => e.NPortSmtp).HasColumnName("nPortSMTP");
            entity.Property(e => e.NSecurity).HasColumnName("nSecurity");
            entity.Property(e => e.NSigBefehlAktiv).HasColumnName("nSigBefehlAktiv");
            entity.Property(e => e.NSigPortalAktiv).HasColumnName("nSigPortalAktiv");
            entity.Property(e => e.NSigPortalVerifizierung).HasColumnName("nSigPortalVerifizierung");
            entity.Property(e => e.NSmimeaktiv).HasColumnName("nSMIMEAktiv");
        });

        modelBuilder.Entity<TEntityDialogLock>(entity =>
        {
            entity.HasKey(e => e.KEntityDialogLock).HasName("PK_dbo_tEntityDialogLock");

            entity.ToTable("tEntityDialogLock");

            entity.HasIndex(e => new { e.KEntity, e.CDialogName, e.KBenutzer, e.NProcessId, e.CHostName }, "UQ_dbo_tEntityDialogLock_cDialogName_cHostName_kBenutzer_kEntity_nProcessId").IsUnique();

            entity.Property(e => e.KEntityDialogLock).HasColumnName("kEntityDialogLock");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CDialogName)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("cDialogName");
            entity.Property(e => e.CHostName)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("cHostName");
            entity.Property(e => e.CInfo).HasColumnName("cInfo");
            entity.Property(e => e.DExpire).HasColumnName("dExpire");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KEntity).HasColumnName("kEntity");
            entity.Property(e => e.KEntityDialogLockReleased).HasColumnName("kEntityDialogLockReleased");
            entity.Property(e => e.NProcessId).HasColumnName("nProcessId");
        });

        modelBuilder.Entity<TEntityPlatform>(entity =>
        {
            entity.HasKey(e => new { e.KEntityId, e.NEntityType, e.KShop }).HasName("PK_Sync_tEntityPlatform");

            entity.ToTable("tEntityPlatform", "Sync", tb => tb.HasTrigger("tgr_tEntityPlatform_INSUP"));

            entity.HasIndex(e => new { e.NEntityType, e.KShop, e.DInactive }, "IX_Sync_tEntityPlatform_nEntityType_kShop_dInactive_INCL");

            entity.Property(e => e.KEntityId).HasColumnName("kEntityId");
            entity.Property(e => e.NEntityType).HasColumnName("nEntityType");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.BLastChanged)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bLastChanged");
            entity.Property(e => e.DActive)
                .HasColumnType("datetime")
                .HasColumnName("dActive");
            entity.Property(e => e.DInactive)
                .HasColumnType("datetime")
                .HasColumnName("dInactive");
        });

        modelBuilder.Entity<TEntityTracking>(entity =>
        {
            entity.HasKey(e => new { e.KEntityId, e.NEntityType, e.NSyncType }).HasName("PK_Sync_tEntityTracking");

            entity.ToTable("tEntityTracking", "Sync");

            entity.Property(e => e.KEntityId).HasColumnName("kEntityId");
            entity.Property(e => e.NEntityType).HasColumnName("nEntityType");
            entity.Property(e => e.NSyncType).HasColumnName("nSyncType");
            entity.Property(e => e.BLastChanged)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bLastChanged");
            entity.Property(e => e.DCreated)
                .HasColumnType("datetime")
                .HasColumnName("dCreated");
            entity.Property(e => e.DLastModified)
                .HasColumnType("datetime")
                .HasColumnName("dLastModified");
        });

        modelBuilder.Entity<TErlaubterDateityp>(entity =>
        {
            entity.HasKey(e => e.KErlaubterDateityp).HasName("PK_Ticketsystem_tErlaubterDateityp");

            entity.ToTable("tErlaubterDateityp", "Ticketsystem");

            entity.Property(e => e.KErlaubterDateityp).HasColumnName("kErlaubterDateityp");
            entity.Property(e => e.CDateityp)
                .HasMaxLength(20)
                .HasColumnName("cDateityp");
            entity.Property(e => e.DErstelldatum)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dErstelldatum");
            entity.Property(e => e.KBenutzerErsteller).HasColumnName("kBenutzer_Ersteller");
        });

        modelBuilder.Entity<TErloeskonten>(entity =>
        {
            entity.HasKey(e => e.KErloeskonten).HasName("PK_dbo_tErloeskonten");

            entity.ToTable("tErloeskonten");

            entity.Property(e => e.KErloeskonten)
                .ValueGeneratedNever()
                .HasColumnName("kErloeskonten");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(64)
                .HasColumnName("cName");
            entity.Property(e => e.NType).HasColumnName("nType");
        });

        modelBuilder.Entity<TErreichbarkeit>(entity =>
        {
            entity.HasKey(e => e.KEreichbarkeit).HasName("PK_Ticketsystem_tErreichbarkeit");

            entity.ToTable("tErreichbarkeit", "Ticketsystem");

            entity.HasIndex(e => e.KAntwortkanal, "IX_Ticketsystem_tErreichbarkeit_kAntwortkanal");

            entity.Property(e => e.KEreichbarkeit).HasColumnName("kEreichbarkeit");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DAnfang)
                .HasColumnType("datetime")
                .HasColumnName("dAnfang");
            entity.Property(e => e.DEnde)
                .HasColumnType("datetime")
                .HasColumnName("dEnde");
            entity.Property(e => e.KAntwortkanal).HasColumnName("kAntwortkanal");

            entity.HasOne(d => d.KAntwortkanalNavigation).WithMany(p => p.TErreichbarkeits)
                .HasForeignKey(d => d.KAntwortkanal)
                .HasConstraintName("FK_Ticketsystem_tErreichbarkeit_kAntwortkanal");
        });

        modelBuilder.Entity<TErrorlog>(entity =>
        {
            entity.HasKey(e => e.KErrorlog).HasName("PK_dbo_tErrorlog");

            entity.ToTable("tErrorlog");

            entity.Property(e => e.KErrorlog).HasColumnName("kErrorlog");
            entity.Property(e => e.CMeldung).HasColumnName("cMeldung");
            entity.Property(e => e.CRechnername)
                .HasMaxLength(64)
                .HasColumnName("cRechnername");
            entity.Property(e => e.DErstelltUtc)
                .HasColumnType("datetime")
                .HasColumnName("dErstelltUtc");
            entity.Property(e => e.NFehlerId).HasColumnName("nFehlerID");
            entity.Property(e => e.NIstWorker).HasColumnName("nIstWorker");
        });

        modelBuilder.Entity<TErrorlog1>(entity =>
        {
            entity.HasKey(e => new { e.KMandant, e.NAbgleichstyp, e.KZiel }).HasName("PK_Worker_tErrorLog");

            entity.ToTable("tErrorlog", "Worker");

            entity.Property(e => e.KMandant).HasColumnName("kMandant");
            entity.Property(e => e.NAbgleichstyp).HasColumnName("nAbgleichstyp");
            entity.Property(e => e.KZiel).HasColumnName("kZiel");
            entity.Property(e => e.CMeldung)
                .HasMaxLength(4000)
                .HasColumnName("cMeldung");
            entity.Property(e => e.DZeitstempelUtc)
                .HasColumnType("datetime")
                .HasColumnName("dZeitstempelUtc");
        });

        modelBuilder.Entity<TEtikett>(entity =>
        {
            entity.HasKey(e => e.KEtikett).HasName("PK_dbo_tEtikett");

            entity.ToTable("tEtikett");

            entity.Property(e => e.KEtikett)
                .ValueGeneratedNever()
                .HasColumnName("kEtikett");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAfontName)
                .HasMaxLength(128)
                .HasColumnName("cAFontName");
            entity.Property(e => e.CAzeile1)
                .HasMaxLength(128)
                .HasColumnName("cAZeile1");
            entity.Property(e => e.CAzeile2)
                .HasMaxLength(128)
                .HasColumnName("cAZeile2");
            entity.Property(e => e.CAzeile3)
                .HasMaxLength(128)
                .HasColumnName("cAZeile3");
            entity.Property(e => e.CAzeile4)
                .HasMaxLength(128)
                .HasColumnName("cAZeile4");
            entity.Property(e => e.CAzeile5)
                .HasMaxLength(128)
                .HasColumnName("cAZeile5");
            entity.Property(e => e.CEfontName)
                .HasMaxLength(128)
                .HasColumnName("cEFontName");
            entity.Property(e => e.CEzeile1)
                .HasMaxLength(128)
                .HasColumnName("cEZeile1");
            entity.Property(e => e.CEzeile2)
                .HasMaxLength(128)
                .HasColumnName("cEZeile2");
            entity.Property(e => e.CEzeile3)
                .HasMaxLength(128)
                .HasColumnName("cEZeile3");
            entity.Property(e => e.CEzeile4)
                .HasMaxLength(128)
                .HasColumnName("cEZeile4");
            entity.Property(e => e.CEzeile5)
                .HasMaxLength(128)
                .HasColumnName("cEZeile5");
            entity.Property(e => e.CEzeile6)
                .HasMaxLength(128)
                .HasColumnName("cEZeile6");
            entity.Property(e => e.CName)
                .HasMaxLength(48)
                .HasColumnName("cName");
            entity.Property(e => e.DAx1)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dAX1");
            entity.Property(e => e.DAx2)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dAX2");
            entity.Property(e => e.DAx3)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dAX3");
            entity.Property(e => e.DAx4)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dAX4");
            entity.Property(e => e.DAx5)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dAX5");
            entity.Property(e => e.DAxx1)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dAXX1");
            entity.Property(e => e.DAxx2)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dAXX2");
            entity.Property(e => e.DAxx3)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dAXX3");
            entity.Property(e => e.DAxx4)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dAXX4");
            entity.Property(e => e.DAxx5)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dAXX5");
            entity.Property(e => e.DAy1)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dAY1");
            entity.Property(e => e.DAy2)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dAY2");
            entity.Property(e => e.DAy3)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dAY3");
            entity.Property(e => e.DAy4)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dAY4");
            entity.Property(e => e.DAy5)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dAY5");
            entity.Property(e => e.DAyy1)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dAYY1");
            entity.Property(e => e.DAyy2)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dAYY2");
            entity.Property(e => e.DAyy3)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dAYY3");
            entity.Property(e => e.DAyy4)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dAYY4");
            entity.Property(e => e.DAyy5)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dAYY5");
            entity.Property(e => e.DEx1)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dEX1");
            entity.Property(e => e.DEx2)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dEX2");
            entity.Property(e => e.DEx3)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dEX3");
            entity.Property(e => e.DEx4)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dEX4");
            entity.Property(e => e.DEx5)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dEX5");
            entity.Property(e => e.DEx6)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dEX6");
            entity.Property(e => e.DExx1)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dEXX1");
            entity.Property(e => e.DExx2)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dEXX2");
            entity.Property(e => e.DExx3)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dEXX3");
            entity.Property(e => e.DExx4)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dEXX4");
            entity.Property(e => e.DExx5)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dEXX5");
            entity.Property(e => e.DExx6)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dEXX6");
            entity.Property(e => e.DEy1)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dEY1");
            entity.Property(e => e.DEy2)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dEY2");
            entity.Property(e => e.DEy3)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dEY3");
            entity.Property(e => e.DEy4)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dEY4");
            entity.Property(e => e.DEy5)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dEY5");
            entity.Property(e => e.DEy6)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dEY6");
            entity.Property(e => e.DEyy1)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dEYY1");
            entity.Property(e => e.DEyy2)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dEYY2");
            entity.Property(e => e.DEyy3)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dEYY3");
            entity.Property(e => e.DEyy4)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dEYY4");
            entity.Property(e => e.DEyy5)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dEYY5");
            entity.Property(e => e.DEyy6)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("dEYY6");
            entity.Property(e => e.NAfontSize).HasColumnName("nAFontSize");
            entity.Property(e => e.NEfontSize).HasColumnName("nEFontSize");
        });

        modelBuilder.Entity<TExternOffer>(entity =>
        {
            entity.HasKey(e => e.KExternOffer).HasName("PK_SCX_tExternOffer");

            entity.ToTable("tExternOffer", "SCX");

            entity.HasIndex(e => e.KOffer, "IX_SCX_tExternOffer_kOffer_INCL");

            entity.Property(e => e.KExternOffer).HasColumnName("kExternOffer");
            entity.Property(e => e.CGtin)
                .HasMaxLength(255)
                .HasColumnName("cGTIN");
            entity.Property(e => e.CJsonAttributes).HasColumnName("cJsonAttributes");
            entity.Property(e => e.CSku)
                .HasMaxLength(100)
                .HasColumnName("cSKU");
            entity.Property(e => e.CTitle).HasColumnName("cTitle");
            entity.Property(e => e.KOffer).HasColumnName("kOffer");
            entity.Property(e => e.NAktion).HasColumnName("nAktion");

            entity.HasOne(d => d.KOfferNavigation).WithMany(p => p.TExternOffers)
                .HasForeignKey(d => d.KOffer)
                .HasConstraintName("FK_SCX_tExternOffer_kOffer");
        });

        modelBuilder.Entity<TExterneRechnung>(entity =>
        {
            entity.HasKey(e => e.KExterneRechnung).HasName("PK_Verkauf_tExterneRechnung");

            entity.ToTable("tExterneRechnung", "Verkauf", tb => tb.HasTrigger("tgr_tExterneRechnung_INS"));

            entity.HasIndex(e => e.CExterneRechnungsnr, "IX_Verkauf_tExterneRechnung_cExterneRechnungsnr");

            entity.HasIndex(e => e.KAmazonUser, "IX_Verkauf_tExterneRechnung_kAmazonUser");

            entity.HasIndex(e => e.KBenutzer, "IX_Verkauf_tExterneRechnung_kBenutzer");

            entity.HasIndex(e => new { e.KExterneRechnung, e.BRowVersion }, "IX_Verkauf_tExterneRechnung_kExterneRechnung_bRowVersion");

            entity.HasIndex(e => e.KFirmaHistory, "IX_Verkauf_tExterneRechnung_kFirmaHistory");

            entity.HasIndex(e => e.KKunde, "IX_Verkauf_tExterneRechnung_kKunde");

            entity.HasIndex(e => e.KPlattform, "IX_Verkauf_tExterneRechnung_kPlattform");

            entity.Property(e => e.KExterneRechnung).HasColumnName("kExterneRechnung");
            entity.Property(e => e.BRowVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowVersion");
            entity.Property(e => e.CExterneRechnungsnr)
                .HasMaxLength(50)
                .HasColumnName("cExterneRechnungsnr");
            entity.Property(e => e.CKaeuferUstId)
                .HasMaxLength(50)
                .HasColumnName("cKaeuferUstId");
            entity.Property(e => e.CKaeuferUstLandIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cKaeuferUstLandISO");
            entity.Property(e => e.CRechnungsadresseAnrede)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseAnrede");
            entity.Property(e => e.CRechnungsadresseFirma)
                .HasMaxLength(128)
                .HasColumnName("cRechnungsadresseFirma");
            entity.Property(e => e.CRechnungsadresseLand)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseLand");
            entity.Property(e => e.CRechnungsadresseName)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseName");
            entity.Property(e => e.CRechnungsadresseOrt)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseOrt");
            entity.Property(e => e.CRechnungsadressePlz)
                .HasMaxLength(24)
                .HasColumnName("cRechnungsadressePLZ");
            entity.Property(e => e.CRechnungsadresseStrasse)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseStrasse");
            entity.Property(e => e.CRechnungsadresseTitel)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseTitel");
            entity.Property(e => e.CRechnungsadresseVorname)
                .HasMaxLength(128)
                .HasColumnName("cRechnungsadresseVorname");
            entity.Property(e => e.CSdIkontoNr)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cSdIKontoNr");
            entity.Property(e => e.CSteuerbehoerde)
                .HasMaxLength(200)
                .HasColumnName("cSteuerbehoerde");
            entity.Property(e => e.CSteuerbehoerdeEbene)
                .HasMaxLength(50)
                .HasColumnName("cSteuerbehoerdeEbene");
            entity.Property(e => e.CVerkaeuferUstId)
                .HasMaxLength(50)
                .HasColumnName("cVerkaeuferUstId");
            entity.Property(e => e.CVerkaeuferUstLandIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cVerkaeuferUstLandISO");
            entity.Property(e => e.CWaehrungIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWaehrungISO");
            entity.Property(e => e.DBelegzeitpunktUtc).HasColumnName("dBelegzeitpunktUtc");
            entity.Property(e => e.DWaehrungsfaktorZeitpunktUtc).HasColumnName("dWaehrungsfaktorZeitpunktUtc");
            entity.Property(e => e.FUmgerechneterGesamtUstBetrag)
                .HasColumnType("decimal(23, 15)")
                .HasColumnName("fUmgerechneterGesamtUstBetrag");
            entity.Property(e => e.FWaehrungsfaktor)
                .HasColumnType("decimal(23, 15)")
                .HasColumnName("fWaehrungsfaktor");
            entity.Property(e => e.KAmazonUser).HasColumnName("kAmazonUser");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KFirmaHistory).HasColumnName("kFirmaHistory");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.NKaeuferUstIdArt).HasColumnName("nKaeuferUstIdArt");
            entity.Property(e => e.NUstIdBerechnungsadresse).HasColumnName("nUstIdBerechnungsadresse");

            entity.HasOne(d => d.KAmazonUserNavigation).WithMany(p => p.TExterneRechnungs)
                .HasForeignKey(d => d.KAmazonUser)
                .HasConstraintName("FK_Verkauf_tExterneRechnung_kAmazonUser");

            entity.HasOne(d => d.KFirmaHistoryNavigation).WithMany(p => p.TExterneRechnungs)
                .HasForeignKey(d => d.KFirmaHistory)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Verkauf_tExterneRechnung_kFirmaHistory");

            entity.HasOne(d => d.KKundeNavigation).WithMany(p => p.TExterneRechnungs)
                .HasForeignKey(d => d.KKunde)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Verkauf_tExterneRechnung_kKunde");

            entity.HasOne(d => d.KPlattformNavigation).WithMany(p => p.TExterneRechnungs)
                .HasForeignKey(d => d.KPlattform)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Verkauf_tExterneRechnung_kPlattform");
        });

        modelBuilder.Entity<TExterneRechnungDokument>(entity =>
        {
            entity.HasKey(e => e.KExterneRechnungDokument).HasName("PK_Verkauf_tExterneRechnungDokument");

            entity.ToTable("tExterneRechnungDokument", "Verkauf");

            entity.Property(e => e.KExterneRechnungDokument).HasColumnName("kExterneRechnungDokument");
            entity.Property(e => e.BContent).HasColumnName("bContent");
            entity.Property(e => e.BRowVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowVersion");
            entity.Property(e => e.CBeschreibung)
                .HasMaxLength(100)
                .HasColumnName("cBeschreibung");
            entity.Property(e => e.CContentType)
                .HasMaxLength(50)
                .HasColumnName("cContentType");
            entity.Property(e => e.CUrl)
                .HasMaxLength(2048)
                .HasColumnName("cUrl");
            entity.Property(e => e.KExterneRechnung).HasColumnName("kExterneRechnung");

            entity.HasOne(d => d.KExterneRechnungNavigation).WithMany(p => p.TExterneRechnungDokuments)
                .HasForeignKey(d => d.KExterneRechnung)
                .HasConstraintName("FK_Verkauf_tExterneRechnungDokument_kExterneRechnung");
        });

        modelBuilder.Entity<TExterneRechnungEckdaten>(entity =>
        {
            entity.HasKey(e => e.KExterneRechnung).HasName("PK_Verkauf_tExterneRechnungEckdaten");

            entity.ToTable("tExterneRechnungEckdaten", "Verkauf", tb =>
                {
                    tb.HasTrigger("tgr_tExterneRechnungEckdaten_INS");
                    tb.HasTrigger("tgr_tExterneRechnungEckdaten_UPD");
                });

            entity.Property(e => e.KExterneRechnung)
                .ValueGeneratedNever()
                .HasColumnName("kExterneRechnung");
            entity.Property(e => e.BRowVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowVersion");
            entity.Property(e => e.BRowVersionExterneRechnung)
                .HasMaxLength(8)
                .IsFixedLength()
                .HasColumnName("bRowVersionExterneRechnung");
            entity.Property(e => e.FSummeBrutto)
                .HasColumnType("decimal(23, 15)")
                .HasColumnName("fSummeBrutto");
            entity.Property(e => e.FSummeNetto)
                .HasColumnType("decimal(23, 15)")
                .HasColumnName("fSummeNetto");
            entity.Property(e => e.NAnzahlPositionen).HasColumnName("nAnzahlPositionen");

            entity.HasOne(d => d.KExterneRechnungNavigation).WithOne(p => p.TExterneRechnungEckdaten)
                .HasForeignKey<TExterneRechnungEckdaten>(d => d.KExterneRechnung)
                .HasConstraintName("FK_Verkauf_PK_Verkauf_tExterneRechnungEckdaten_kExterneRechnung");
        });

        modelBuilder.Entity<TExterneRechnungPosition>(entity =>
        {
            entity.HasKey(e => e.KExterneRechnungPosition).HasName("PK_Verkauf_tExterneRechnungPosition");

            entity.ToTable("tExterneRechnungPosition", "Verkauf");

            entity.HasIndex(e => e.KExterneRechnung, "IX_Verkauf_tExterneRechnungPosition_kExterneRechnung_INCL");

            entity.Property(e => e.KExterneRechnungPosition).HasColumnName("kExterneRechnungPosition");
            entity.Property(e => e.BRowVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowVersion");
            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CAuftragsnr)
                .HasMaxLength(50)
                .HasColumnName("cAuftragsnr");
            entity.Property(e => e.CAuftragswaehrungIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAuftragswaehrungISO");
            entity.Property(e => e.CLieferadresseLandIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLieferadresseLandISO");
            entity.Property(e => e.CLieferadresseOrt).HasColumnName("cLieferadresseOrt");
            entity.Property(e => e.CLieferadressePlz)
                .HasMaxLength(10)
                .HasColumnName("cLieferadressePLZ");
            entity.Property(e => e.CLieferadresseRegion).HasColumnName("cLieferadresseRegion");
            entity.Property(e => e.CLieferadresseSteuercode)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseSteuercode");
            entity.Property(e => e.CTransaktionstext).HasColumnName("cTransaktionstext");
            entity.Property(e => e.CVersandadresseLandIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cVersandadresseLandISO");
            entity.Property(e => e.CVersandadresseOrt).HasColumnName("cVersandadresseOrt");
            entity.Property(e => e.CVersandadressePlz)
                .HasMaxLength(10)
                .HasColumnName("cVersandadressePLZ");
            entity.Property(e => e.CVersandadresseRegion).HasColumnName("cVersandadresseRegion");
            entity.Property(e => e.CVersandadresseSteuercode)
                .HasMaxLength(30)
                .HasColumnName("cVersandadresseSteuercode");
            entity.Property(e => e.DAuftragszeitpunktUtc).HasColumnName("dAuftragszeitpunktUtc");
            entity.Property(e => e.DSteuerberechnungszeitpunktUtc).HasColumnName("dSteuerberechnungszeitpunktUtc");
            entity.Property(e => e.DVersandzeitpunktUtc).HasColumnName("dVersandzeitpunktUtc");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(10, 4)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.FSteuersatz)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("fSteuersatz");
            entity.Property(e => e.FSummeBrutto)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("fSummeBrutto");
            entity.Property(e => e.FSummeNetto)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("fSummeNetto");
            entity.Property(e => e.FSummeRabattBrutto)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("fSummeRabattBrutto");
            entity.Property(e => e.FSummeRabattNetto)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("fSummeRabattNetto");
            entity.Property(e => e.FSummeRabattSteuer)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("fSummeRabattSteuer");
            entity.Property(e => e.FSummeSteuer)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("fSummeSteuer");
            entity.Property(e => e.KAmazonVcsbestellungPos).HasColumnName("kAmazonVCSBestellungPos");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KAuftragPosition).HasColumnName("kAuftragPosition");
            entity.Property(e => e.KExterneRechnung).HasColumnName("kExterneRechnung");
            entity.Property(e => e.KExterneRechnungPositionVater).HasColumnName("kExterneRechnungPositionVater");
            entity.Property(e => e.NPositionstyp).HasColumnName("nPositionstyp");
            entity.Property(e => e.NTransaktionstyp).HasColumnName("nTransaktionstyp");

            entity.HasOne(d => d.KExterneRechnungNavigation).WithMany(p => p.TExterneRechnungPositions)
                .HasForeignKey(d => d.KExterneRechnung)
                .HasConstraintName("FK_Verkauf_tExterneRechnungPosition_kExterneRechnung");
        });

        modelBuilder.Entity<TExterneRechnungPositionZusatzdaten>(entity =>
        {
            entity.HasKey(e => e.KExterneRechnungPosition).HasName("PK_Verkauf_tExterneRechnungPositionZusatzdaten");

            entity.ToTable("tExterneRechnungPositionZusatzdaten", "Verkauf");

            entity.Property(e => e.KExterneRechnungPosition)
                .ValueGeneratedNever()
                .HasColumnName("kExterneRechnungPosition");
            entity.Property(e => e.BRowVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowVersion");
            entity.Property(e => e.CAnmerkung).HasColumnName("cAnmerkung");

            entity.HasOne(d => d.KExterneRechnungPositionNavigation).WithOne(p => p.TExterneRechnungPositionZusatzdaten)
                .HasForeignKey<TExterneRechnungPositionZusatzdaten>(d => d.KExterneRechnungPosition)
                .HasConstraintName("FK_Verkauf_tExterneRechnungPositionZusatzdaten_kExterneRechnungPosition");
        });

        modelBuilder.Entity<TExterneRechnungZusatzdaten>(entity =>
        {
            entity.HasKey(e => e.KExterneRechnung).HasName("PK_Verkauf_tExterneRechnungZusatzdaten");

            entity.ToTable("tExterneRechnungZusatzdaten", "Verkauf");

            entity.Property(e => e.KExterneRechnung)
                .ValueGeneratedNever()
                .HasColumnName("kExterneRechnung");
            entity.Property(e => e.BRowVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowVersion");
            entity.Property(e => e.CAnmerkung).HasColumnName("cAnmerkung");
            entity.Property(e => e.KFarbe).HasColumnName("kFarbe");

            entity.HasOne(d => d.KExterneRechnungNavigation).WithOne(p => p.TExterneRechnungZusatzdaten)
                .HasForeignKey<TExterneRechnungZusatzdaten>(d => d.KExterneRechnung)
                .HasConstraintName("FK_Verkauf_tExterneRechnungZusatzdaten_kExterneRechnung");
        });

        modelBuilder.Entity<TExterneReservierung>(entity =>
        {
            entity.HasKey(e => new { e.KKey, e.KArtikel, e.NTyp }).HasName("PK_dbo_tExterneReservierung");

            entity.ToTable("tExterneReservierung");

            entity.Property(e => e.KKey).HasColumnName("kKey");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");

            entity.HasOne(d => d.KArtikelNavigation).WithMany(p => p.TExterneReservierungs)
                .HasForeignKey(d => d.KArtikel)
                .HasConstraintName("FK_dbo_tExterneReservierung_kArtikel");
        });

        modelBuilder.Entity<TExternerBeleg>(entity =>
        {
            entity.HasKey(e => e.KExternerBeleg)
                .HasName("PK_Rechnung_tExternerBeleg")
                .IsClustered(false);

            entity.ToTable("tExternerBeleg", "Rechnung");

            entity.HasIndex(e => new { e.DBelegdatumUtc, e.KExternerBeleg }, "CX_Rechnung_tExternerBeleg_dBelegdatumUtc_kExternerBeleg").IsClustered();

            entity.HasIndex(e => e.CBelegnr, "UQ_Rechnung_tExternerBeleg_cBelegNr").IsUnique();

            entity.Property(e => e.KExternerBeleg).HasColumnName("kExternerBeleg");
            entity.Property(e => e.CBelegnr)
                .HasMaxLength(50)
                .HasColumnName("cBelegnr");
            entity.Property(e => e.CBezugsbelegnr)
                .HasMaxLength(50)
                .HasColumnName("cBezugsbelegnr");
            entity.Property(e => e.CFirmaUstid)
                .HasMaxLength(30)
                .HasColumnName("cFirmaUstid");
            entity.Property(e => e.CHinweis)
                .HasMaxLength(2000)
                .HasColumnName("cHinweis");
            entity.Property(e => e.CKaeuferUstId)
                .HasMaxLength(30)
                .HasColumnName("cKaeuferUstId");
            entity.Property(e => e.CRaadresse1)
                .HasMaxLength(100)
                .HasColumnName("cRAAdresse1");
            entity.Property(e => e.CRaadresse2)
                .HasMaxLength(100)
                .HasColumnName("cRAAdresse2");
            entity.Property(e => e.CRaadresse3)
                .HasMaxLength(100)
                .HasColumnName("cRAAdresse3");
            entity.Property(e => e.CRalandIso)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cRALandISO");
            entity.Property(e => e.CRaname)
                .HasMaxLength(100)
                .HasColumnName("cRAName");
            entity.Property(e => e.CRaort)
                .HasMaxLength(100)
                .HasColumnName("cRAOrt");
            entity.Property(e => e.CRapostcode)
                .HasMaxLength(20)
                .HasColumnName("cRAPostcode");
            entity.Property(e => e.CRastaat)
                .HasMaxLength(100)
                .HasColumnName("cRAStaat");
            entity.Property(e => e.CRatelefon)
                .HasMaxLength(100)
                .HasColumnName("cRATelefon");
            entity.Property(e => e.CWaehrungIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWaehrungISO");
            entity.Property(e => e.DBelegdatumUtc).HasColumnName("dBelegdatumUtc");
            entity.Property(e => e.KFirmaHistory).HasColumnName("kFirmaHistory");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KPlattformKey).HasColumnName("kPlattformKey");
            entity.Property(e => e.NBelegtyp).HasColumnName("nBelegtyp");

            entity.HasOne(d => d.KFirmaHistoryNavigation).WithMany(p => p.TExternerBelegs)
                .HasForeignKey(d => d.KFirmaHistory)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Rechnung_tExternerBeleg_kFirmaHistory");

            entity.HasOne(d => d.KPlattformNavigation).WithMany(p => p.TExternerBelegs)
                .HasForeignKey(d => d.KPlattform)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Rechnung_tExternerBeleg_kPlattform");
        });

        modelBuilder.Entity<TExternerBelegEckdaten>(entity =>
        {
            entity.HasKey(e => e.KExternerBeleg).HasName("PK_Rechnung_tExternerBelegEckdaten");

            entity.ToTable("tExternerBelegEckdaten", "Rechnung", tb => tb.HasTrigger("tgr_Rechnung_tExternerBelegEckdaten_UP"));

            entity.Property(e => e.KExternerBeleg)
                .ValueGeneratedNever()
                .HasColumnName("kExternerBeleg");
            entity.Property(e => e.BIstStorniert).HasColumnName("bIstStorniert");
            entity.Property(e => e.FVkBrutto)
                .HasColumnType("decimal(25, 2)")
                .HasColumnName("fVkBrutto");
            entity.Property(e => e.FVkNetto)
                .HasColumnType("decimal(25, 2)")
                .HasColumnName("fVkNetto");

            entity.HasOne(d => d.KExternerBelegNavigation).WithOne(p => p.TExternerBelegEckdaten)
                .HasForeignKey<TExternerBelegEckdaten>(d => d.KExternerBeleg)
                .HasConstraintName("FK_Rechnung_tExternerBelegEckdaten_kExternerBeleg");
        });

        modelBuilder.Entity<TExternerBelegPosition>(entity =>
        {
            entity.HasKey(e => e.KExternerBelegPosition)
                .HasName("PK_Rechnung_tExternerBelegPosition")
                .IsClustered(false);

            entity.ToTable("tExternerBelegPosition", "Rechnung");

            entity.HasIndex(e => new { e.KExternerBelegTransaktion, e.KExternerBelegPosition }, "CX_Rechnung_tExternerBelegPosition_kExternerBelegTransaktion_kExternerBelegPosition").IsClustered();

            entity.Property(e => e.KExternerBelegPosition).HasColumnName("kExternerBelegPosition");
            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CEinheit)
                .HasMaxLength(25)
                .HasColumnName("cEinheit");
            entity.Property(e => e.CRabatttext)
                .HasMaxLength(50)
                .HasColumnName("cRabatttext");
            entity.Property(e => e.CText)
                .HasMaxLength(255)
                .HasColumnName("cText");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.FEkNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEkNetto");
            entity.Property(e => e.FMwStSatz)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwStSatz");
            entity.Property(e => e.FRabattBrutto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabattBrutto");
            entity.Property(e => e.FRabattNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabattNetto");
            entity.Property(e => e.FVkBrutto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVkBrutto");
            entity.Property(e => e.FVkNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVkNetto");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KAuftragPosition).HasColumnName("kAuftragPosition");
            entity.Property(e => e.KBezugExternerBelegPosition).HasColumnName("kBezugExternerBelegPosition");
            entity.Property(e => e.KBezugRechnungPosition).HasColumnName("kBezugRechnungPosition");
            entity.Property(e => e.KExterneId).HasColumnName("kExterneId");
            entity.Property(e => e.KExternerBelegPositionVater).HasColumnName("kExternerBelegPositionVater");
            entity.Property(e => e.KExternerBelegTransaktion).HasColumnName("kExternerBelegTransaktion");
            entity.Property(e => e.NKindtyp).HasColumnName("nKindtyp");
            entity.Property(e => e.NPositionstyp).HasColumnName("nPositionstyp");

            entity.HasOne(d => d.KArtikelNavigation).WithMany(p => p.TExternerBelegPositions)
                .HasForeignKey(d => d.KArtikel)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Rechnung_tExternerBelegPosition_kArtikel");

            entity.HasOne(d => d.KAuftragPositionNavigation).WithMany(p => p.TExternerBelegPositions)
                .HasForeignKey(d => d.KAuftragPosition)
                .HasConstraintName("FK_Rechnung_tExternerBelegPosition_kAuftragPosition");

            entity.HasOne(d => d.KExternerBelegTransaktionNavigation).WithMany(p => p.TExternerBelegPositions)
                .HasForeignKey(d => d.KExternerBelegTransaktion)
                .HasConstraintName("FK_Rechnung_tExternerBelegPosition_kExternerBelegTransaktion");
        });

        modelBuilder.Entity<TExternerBelegTransaktion>(entity =>
        {
            entity.HasKey(e => e.KExternerBelegTransaktion)
                .HasName("PK_Rechnung_tExternerBelegTransaktion")
                .IsClustered(false);

            entity.ToTable("tExternerBelegTransaktion", "Rechnung");

            entity.HasIndex(e => new { e.KExternerBeleg, e.KExternerBelegTransaktion }, "CX_Rechnung_tExternerBelegTransaktion_kExternerBeleg_kExternerBelegTransaktion").IsClustered();

            entity.Property(e => e.KExternerBelegTransaktion).HasColumnName("kExternerBelegTransaktion");
            entity.Property(e => e.CBezugstransaktionId)
                .HasMaxLength(50)
                .HasColumnName("cBezugstransaktionId");
            entity.Property(e => e.CExterneAuftragsnummer)
                .HasMaxLength(50)
                .HasColumnName("cExterneAuftragsnummer");
            entity.Property(e => e.CKundenAuftragsnummer)
                .HasMaxLength(50)
                .HasColumnName("cKundenAuftragsnummer");
            entity.Property(e => e.CLaadresse1)
                .HasMaxLength(100)
                .HasColumnName("cLAAdresse1");
            entity.Property(e => e.CLaadresse2)
                .HasMaxLength(100)
                .HasColumnName("cLAAdresse2");
            entity.Property(e => e.CLaadresse3)
                .HasMaxLength(100)
                .HasColumnName("cLAAdresse3");
            entity.Property(e => e.CLalandIso)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLALandISO");
            entity.Property(e => e.CLaname)
                .HasMaxLength(100)
                .HasColumnName("cLAName");
            entity.Property(e => e.CLaort)
                .HasMaxLength(100)
                .HasColumnName("cLAOrt");
            entity.Property(e => e.CLapostcode)
                .HasMaxLength(20)
                .HasColumnName("cLAPostcode");
            entity.Property(e => e.CLastaat)
                .HasMaxLength(100)
                .HasColumnName("cLAStaat");
            entity.Property(e => e.CLatelefon)
                .HasMaxLength(100)
                .HasColumnName("cLATelefon");
            entity.Property(e => e.CTransaktionId)
                .HasMaxLength(50)
                .HasColumnName("cTransaktionId");
            entity.Property(e => e.CValandIso)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cVALandISO");
            entity.Property(e => e.CVaort)
                .HasMaxLength(100)
                .HasColumnName("cVAOrt");
            entity.Property(e => e.CVapostcode)
                .HasMaxLength(20)
                .HasColumnName("cVAPostcode");
            entity.Property(e => e.CVastaat)
                .HasMaxLength(100)
                .HasColumnName("cVAStaat");
            entity.Property(e => e.DExternesAuftragsdatumUtc).HasColumnName("dExternesAuftragsdatumUtc");
            entity.Property(e => e.DTransaktionsdatumUtc).HasColumnName("dTransaktionsdatumUtc");
            entity.Property(e => e.KExternerBeleg).HasColumnName("kExternerBeleg");
            entity.Property(e => e.NTransaktionstyp).HasColumnName("nTransaktionstyp");

            entity.HasOne(d => d.KExternerBelegNavigation).WithMany(p => p.TExternerBelegTransaktions)
                .HasForeignKey(d => d.KExternerBeleg)
                .HasConstraintName("FK_Rechnung_tExternerBelegTransaktion_kExternerBeleg");
        });

        modelBuilder.Entity<TFailedEvent>(entity =>
        {
            entity.HasKey(e => e.KFailedEvent);

            entity.ToTable("tFailedEvent", "SCX");

            entity.Property(e => e.KFailedEvent).HasColumnName("kFailedEvent");
            entity.Property(e => e.CEventId)
                .HasMaxLength(255)
                .HasColumnName("cEventId");
            entity.Property(e => e.CJson).HasColumnName("cJson");
            entity.Property(e => e.NApiType).HasColumnName("nApiType");
            entity.Property(e => e.NCount).HasColumnName("nCount");
        });

        modelBuilder.Entity<TFarbe>(entity =>
        {
            entity.HasKey(e => e.KFarbe).HasName("PK_dbo_tFarbe");

            entity.ToTable("tFarbe");

            entity.Property(e => e.KFarbe).HasColumnName("kFarbe");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.NFarbcode).HasColumnName("nFarbcode");
        });

        modelBuilder.Entity<TFeatureFlag>(entity =>
        {
            entity.HasKey(e => e.KFeatureFlag).HasName("PK_dbo_tFeatureFlag");

            entity.ToTable("tFeatureFlag");

            entity.HasIndex(e => e.CFeatureCode, "UQ_dbo_tFeatureFlag_cFeatureCode").IsUnique();

            entity.Property(e => e.KFeatureFlag).HasColumnName("kFeatureFlag");
            entity.Property(e => e.BActivated).HasColumnName("bActivated");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CFeatureCode)
                .HasMaxLength(200)
                .HasColumnName("cFeatureCode");
        });

        modelBuilder.Entity<TFehler>(entity =>
        {
            entity.HasKey(e => e.KFehler).HasName("PK_dbo_tFehler");

            entity.ToTable("tFehler");

            entity.Property(e => e.KFehler).HasColumnName("kFehler");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CText)
                .HasMaxLength(255)
                .HasColumnName("cText");
            entity.Property(e => e.CValue1)
                .HasMaxLength(255)
                .HasColumnName("cValue1");
            entity.Property(e => e.CValue2)
                .HasMaxLength(255)
                .HasColumnName("cValue2");
            entity.Property(e => e.CValue3)
                .HasMaxLength(255)
                .HasColumnName("cValue3");
            entity.Property(e => e.KSessionId).HasColumnName("kSessionId");
            entity.Property(e => e.Kkey1).HasColumnName("kkey1");
            entity.Property(e => e.Kkey2).HasColumnName("kkey2");
            entity.Property(e => e.NValue1).HasColumnName("nValue1");
            entity.Property(e => e.NValue2).HasColumnName("nValue2");
            entity.Property(e => e.NValue3).HasColumnName("nValue3");
        });

        modelBuilder.Entity<TFeldTyp>(entity =>
        {
            entity.HasKey(e => e.KFeldTyp).HasName("PK_dbo_tFeldTyp");

            entity.ToTable("tFeldTyp");

            entity.Property(e => e.KFeldTyp).HasColumnName("kFeldTyp");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(300)
                .HasColumnName("cName");
            entity.Property(e => e.CRegEx).HasColumnName("cRegEx");
            entity.Property(e => e.NDatenTyp).HasColumnName("nDatenTyp");
        });

        modelBuilder.Entity<TFile>(entity =>
        {
            entity.HasKey(e => e.KFile).HasName("PK_dbo_tFile");

            entity.ToTable("tFile");

            entity.Property(e => e.KFile).HasColumnName("kFile");
            entity.Property(e => e.BFile).HasColumnName("bFile");
            entity.Property(e => e.CFileHash)
                .HasMaxLength(255)
                .HasColumnName("cFileHash");
            entity.Property(e => e.CFileName)
                .HasMaxLength(255)
                .HasColumnName("cFileName");
            entity.Property(e => e.CFileType)
                .HasMaxLength(20)
                .HasColumnName("cFileType");
            entity.Property(e => e.DErstellDatum)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dErstellDatum");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.NFileSizeKb).HasColumnName("nFileSizeKB");
        });

        modelBuilder.Entity<TFile1>(entity =>
        {
            entity.HasKey(e => e.KFile).HasName("PK_Report_tFile");

            entity.ToTable("tFile", "Report");

            entity.HasIndex(e => new { e.KReferenz, e.NReferenztyp }, "UQ_Report_tFile_kReferenz_nReferenztyp").IsUnique();

            entity.Property(e => e.KFile).HasColumnName("kFile");
            entity.Property(e => e.BData).HasColumnName("bData");
            entity.Property(e => e.CFileName)
                .HasMaxLength(250)
                .HasColumnName("cFileName");
            entity.Property(e => e.DErstelltUtc)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("dErstelltUtc");
            entity.Property(e => e.KReferenz).HasColumnName("kReferenz");
            entity.Property(e => e.NReferenztyp).HasColumnName("nReferenztyp");
        });

        modelBuilder.Entity<TFirmaAufbewahrungsfrist>(entity =>
        {
            entity.HasKey(e => e.KAufbewahrungsfrist).HasName("PK_dbo_tFirmaAufbewahrungsfrist");

            entity.ToTable("tFirmaAufbewahrungsfrist", tb => tb.HasTrigger("tgr_tFirmaAufbewahrungsfrist_INSUP"));

            entity.HasIndex(e => new { e.CVorgangsId, e.KFirma }, "UQ_dbo_tFirmaAufbewahrungsfrist_cVorgangsId_kFirma").IsUnique();

            entity.Property(e => e.KAufbewahrungsfrist).HasColumnName("kAufbewahrungsfrist");
            entity.Property(e => e.CVorgangsId)
                .HasMaxLength(100)
                .HasColumnName("cVorgangsId");
            entity.Property(e => e.DFestgeschrieben)
                .HasColumnType("datetime")
                .HasColumnName("dFestgeschrieben");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.NDays).HasColumnName("nDays");
            entity.Property(e => e.NMonths).HasColumnName("nMonths");
            entity.Property(e => e.NObfuskieren).HasColumnName("nObfuskieren");
            entity.Property(e => e.NYears).HasColumnName("nYears");
        });

        modelBuilder.Entity<TFirmaEigenesFeld>(entity =>
        {
            entity.HasKey(e => e.KFirmaEigenesFeld).HasName("PK_Firma_tFirmaEigenesFeld");

            entity.ToTable("tFirmaEigenesFeld", "Firma");

            entity.HasIndex(e => new { e.KAttribut, e.KFirma }, "UQ_Firma_tFirmaEigenesFeld_kAttribut_kFirma").IsUnique();

            entity.Property(e => e.KFirmaEigenesFeld).HasColumnName("kFirmaEigenesFeld");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CWertVarchar).HasColumnName("cWertVarchar");
            entity.Property(e => e.DWertDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dWertDateTime");
            entity.Property(e => e.FWertDecimal)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertDecimal");
            entity.Property(e => e.KAttribut).HasColumnName("kAttribut");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.NWertInt).HasColumnName("nWertInt");
        });

        modelBuilder.Entity<TFirmaHistory>(entity =>
        {
            entity.HasKey(e => e.KFirmaHistory).HasName("PK_dbo_tFirmaHistory");

            entity.ToTable("tFirmaHistory");

            entity.Property(e => e.KFirmaHistory).HasColumnName("kFirmaHistory");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBank)
                .HasMaxLength(50)
                .HasColumnName("cBank");
            entity.Property(e => e.CBic)
                .HasMaxLength(64)
                .HasColumnName("cBIC");
            entity.Property(e => e.CEmail)
                .HasMaxLength(255)
                .HasColumnName("cEMail");
            entity.Property(e => e.CFax)
                .HasMaxLength(30)
                .HasColumnName("cFax");
            entity.Property(e => e.CGlaeubigerId)
                .HasMaxLength(35)
                .HasColumnName("cGlaeubigerID");
            entity.Property(e => e.CIban)
                .HasMaxLength(64)
                .HasColumnName("cIBAN");
            entity.Property(e => e.CKontoInhaber)
                .HasMaxLength(255)
                .HasColumnName("cKontoInhaber");
            entity.Property(e => e.CLand)
                .HasMaxLength(255)
                .HasColumnName("cLand");
            entity.Property(e => e.CLandIso)
                .HasMaxLength(5)
                .HasColumnName("cLandISO");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPayPalEmail)
                .HasMaxLength(250)
                .HasColumnName("cPayPalEMail");
            entity.Property(e => e.CPlz)
                .HasMaxLength(50)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CSteuerNr)
                .HasMaxLength(25)
                .HasColumnName("cSteuerNr");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTel)
                .HasMaxLength(50)
                .HasColumnName("cTel");
            entity.Property(e => e.CUnternehmer)
                .HasMaxLength(255)
                .HasColumnName("cUnternehmer");
            entity.Property(e => e.CWww)
                .HasMaxLength(255)
                .HasColumnName("cWWW");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.NKleinunternehmer).HasColumnName("nKleinunternehmer");
        });

        modelBuilder.Entity<TFirmaUstIdNr>(entity =>
        {
            entity.HasKey(e => e.KFirmaUstIdNr).HasName("PK_dbo_tFirmaUStIdNr");

            entity.ToTable("tFirmaUStIdNr");

            entity.HasIndex(e => new { e.CLandIso, e.KFirma }, "UQ_dbo_tFirmaUStIdNr_cLandISO_kFirma").IsUnique();

            entity.Property(e => e.KFirmaUstIdNr).HasColumnName("kFirmaUStIdNr");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CLandIso)
                .HasMaxLength(5)
                .HasColumnName("cLandISO");
            entity.Property(e => e.CUstId)
                .HasMaxLength(25)
                .HasColumnName("cUStId");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.NAuchAlsVersandlandBetrachten).HasColumnName("nAuchAlsVersandlandBetrachten");
        });

        modelBuilder.Entity<TFormular>(entity =>
        {
            entity.HasKey(e => e.KFormular).HasName("PK_dbo_tFormular");

            entity.ToTable("tFormular");

            entity.Property(e => e.KFormular).HasColumnName("kFormular");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(64)
                .HasColumnName("cName");
            entity.Property(e => e.NStandard).HasColumnName("nStandard");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<TFormularAnhangDaten>(entity =>
        {
            entity.HasKey(e => e.KFormularAnhangDaten).HasName("PK_dbo_tFormularAnhangDaten");

            entity.ToTable("tFormularAnhangDaten");

            entity.Property(e => e.KFormularAnhangDaten).HasColumnName("kFormularAnhangDaten");
            entity.Property(e => e.BDaten).HasColumnName("bDaten");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.BSha1)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("bSHA1");
            entity.Property(e => e.CDateiname)
                .HasMaxLength(255)
                .HasColumnName("cDateiname");
        });

        modelBuilder.Entity<TFormularDruckEinstellung>(entity =>
        {
            entity.HasKey(e => e.KFormularDruckEinstellung).HasName("PK_dbo_tFormularDruckEinstellung");

            entity.ToTable("tFormularDruckEinstellung");

            entity.HasIndex(e => new { e.CRechnername, e.KBenutzer, e.KFormular }, "UQ_dbo_tFormularDruckEinstellung_cRechnername_kBenutzer_kFormular").IsUnique();

            entity.Property(e => e.KFormularDruckEinstellung).HasColumnName("kFormularDruckEinstellung");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CDruckername1)
                .HasMaxLength(255)
                .HasColumnName("cDruckername1");
            entity.Property(e => e.CDruckername2)
                .HasMaxLength(255)
                .HasColumnName("cDruckername2");
            entity.Property(e => e.CRechnername)
                .HasMaxLength(255)
                .HasColumnName("cRechnername");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KFormular).HasColumnName("kFormular");
            entity.Property(e => e.NKopien1).HasColumnName("nKopien1");
            entity.Property(e => e.NKopien2).HasColumnName("nKopien2");
        });

        modelBuilder.Entity<TFormularEmailEinstellung>(entity =>
        {
            entity.HasKey(e => e.KFormularEmailEinstellung).HasName("PK_dbo_tFormularEMailEinstellung");

            entity.ToTable("tFormularEMailEinstellung");

            entity.HasIndex(e => e.KFormular, "UQ_dbo_tFormularEMailEinstellung_kFormular").IsUnique();

            entity.Property(e => e.KFormularEmailEinstellung).HasColumnName("kFormularEMailEinstellung");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBcc)
                .HasMaxLength(127)
                .HasColumnName("cBcc");
            entity.Property(e => e.KFormular).HasColumnName("kFormular");
            entity.Property(e => e.NSignieren).HasColumnName("nSignieren");
        });

        modelBuilder.Entity<TFormularEmailVorlageAnhang>(entity =>
        {
            entity.HasKey(e => e.KFormularEmailVorlageAnhang).HasName("PK_dbo_tFormularEMailVorlageAnhang");

            entity.ToTable("tFormularEMailVorlageAnhang");

            entity.Property(e => e.KFormularEmailVorlageAnhang).HasColumnName("kFormularEMailVorlageAnhang");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(128)
                .HasColumnName("cName");
            entity.Property(e => e.KFormularAnhangDaten).HasColumnName("kFormularAnhangDaten");
            entity.Property(e => e.KFormularVorlage).HasColumnName("kFormularVorlage");
            entity.Property(e => e.NAusgabetyp).HasColumnName("nAusgabetyp");
            entity.Property(e => e.NFormular).HasColumnName("nFormular");
            entity.Property(e => e.NKindElement).HasColumnName("nKindElement");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<TFormularFaxEinstellung>(entity =>
        {
            entity.HasKey(e => e.KFormularFaxEinstellung).HasName("PK_dbo_tFormularFaxEinstellung");

            entity.ToTable("tFormularFaxEinstellung");

            entity.HasIndex(e => new { e.CRechnername, e.KBenutzer, e.KFormular }, "UQ_dbo_tFormularFaxEinstellung_cRechnername_kBenutzer_kFormular").IsUnique();

            entity.Property(e => e.KFormularFaxEinstellung).HasColumnName("kFormularFaxEinstellung");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CFaxname)
                .HasMaxLength(255)
                .HasColumnName("cFaxname");
            entity.Property(e => e.CRechnername)
                .HasMaxLength(255)
                .HasColumnName("cRechnername");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KFormular).HasColumnName("kFormular");
        });

        modelBuilder.Entity<TFormularLlvorlageDaten>(entity =>
        {
            entity.HasKey(e => e.KFormularLlvorlageDaten).HasName("PK_dbo_tFormularLLVorlageDaten");

            entity.ToTable("tFormularLLVorlageDaten");

            entity.Property(e => e.KFormularLlvorlageDaten).HasColumnName("kFormularLLVorlageDaten");
            entity.Property(e => e.BDaten).HasColumnName("bDaten");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DAktualisiert)
                .HasColumnType("datetime")
                .HasColumnName("dAktualisiert");
        });

        modelBuilder.Entity<TFormularVorlage>(entity =>
        {
            entity.HasKey(e => e.KFormularVorlage).HasName("PK_dbo_tFormularVorlage");

            entity.ToTable("tFormularVorlage");

            entity.Property(e => e.KFormularVorlage).HasColumnName("kFormularVorlage");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CMahnstufenName)
                .HasMaxLength(255)
                .HasColumnName("cMahnstufenName");
            entity.Property(e => e.CName)
                .HasMaxLength(64)
                .HasColumnName("cName");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KFormular).HasColumnName("kFormular");
            entity.Property(e => e.KFormularLlvorlageDaten).HasColumnName("kFormularLLVorlageDaten");
            entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<TFulfillerAttributeMapping>(entity =>
        {
            entity.HasKey(e => e.KFulfillerAttributeMapping);

            entity.ToTable("tFulfillerAttributeMapping", "FulfillmentNetwork");

            entity.HasIndex(e => new { e.CMerchantId, e.CName, e.CType }, "IX_FulfillmentNetwork_tFulfillerAttributeMapping_cMerchantId_cName_cType").IsUnique();

            entity.Property(e => e.KFulfillerAttributeMapping).HasColumnName("kFulfillerAttributeMapping");
            entity.Property(e => e.CMerchantId)
                .HasMaxLength(10)
                .HasColumnName("cMerchantId");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CType)
                .HasMaxLength(10)
                .HasColumnName("cType");
            entity.Property(e => e.KAttribut).HasColumnName("kAttribut");

            entity.HasOne(d => d.KAttributNavigation).WithMany(p => p.TFulfillerAttributeMappings)
                .HasForeignKey(d => d.KAttribut)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_FulfillmentNetwork_tFulfillerAttributeMapping_kAttribut");
        });

        modelBuilder.Entity<TFulfillerEinstellungen>(entity =>
        {
            entity.HasKey(e => e.KFulfillerEinstellungen).HasName("PK_FulfillmentNetwork_tFulfillerEinstellungen");

            entity.ToTable("tFulfillerEinstellungen", "FulfillmentNetwork");

            entity.HasIndex(e => new { e.KLieferant, e.KKunde }, "UQ_FulfillmentNetwork_tFulfillerEinstellungen_kLieferant_kKunde").IsUnique();

            entity.Property(e => e.KFulfillerEinstellungen).HasColumnName("kFulfillerEinstellungen");
            entity.Property(e => e.CPrefixAbrechnung)
                .HasMaxLength(12)
                .HasColumnName("cPrefixAbrechnung");
            entity.Property(e => e.CSuffixAbrechnung)
                .HasMaxLength(12)
                .HasColumnName("cSuffixAbrechnung");
            entity.Property(e => e.DAbrechnungEnde)
                .HasColumnType("datetime")
                .HasColumnName("dAbrechnungEnde");
            entity.Property(e => e.DAbrechnungInitial)
                .HasColumnType("datetime")
                .HasColumnName("dAbrechnungInitial");
            entity.Property(e => e.DAbrechnungStart)
                .HasColumnType("datetime")
                .HasColumnName("dAbrechnungStart");
            entity.Property(e => e.KAbrechnung).HasColumnName("kAbrechnung");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.NAbrechnungsZeitraum).HasColumnName("nAbrechnungsZeitraum");
            entity.Property(e => e.NBestandserfassungModus).HasColumnName("nBestandserfassungModus");
        });

        modelBuilder.Entity<TFulfillerLieferscheinRef>(entity =>
        {
            entity.HasKey(e => e.KFulfillerLieferscheinRef).HasName("PK_FulfillmentNetwork_tFulfillerLieferscheinRef");

            entity.ToTable("tFulfillerLieferscheinRef", "FulfillmentNetwork");

            entity.HasIndex(e => e.KLieferschein, "UQ_FulfillmentNetwork_tFulfillerLieferscheinRef_kLieferschein").IsUnique();

            entity.Property(e => e.KFulfillerLieferscheinRef).HasColumnName("kFulfillerLieferscheinRef");
            entity.Property(e => e.BRowVersion)
                .HasMaxLength(8)
                .IsFixedLength()
                .HasColumnName("bRowVersion");
            entity.Property(e => e.COwnerId)
                .HasMaxLength(10)
                .HasColumnName("cOwnerId");
            entity.Property(e => e.DCreatedAt).HasColumnName("dCreatedAt");
            entity.Property(e => e.DUpdatedAt).HasColumnName("dUpdatedAt");
            entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");

            entity.HasOne(d => d.KLieferscheinNavigation).WithOne(p => p.TFulfillerLieferscheinRef)
                .HasForeignKey<TFulfillerLieferscheinRef>(d => d.KLieferschein)
                .HasConstraintName("FK_FulfillmentNetwork_tFulfillerLieferscheinRef_kLieferschein");
        });

        modelBuilder.Entity<TFulfillerMerchantsSupplier>(entity =>
        {
            entity.HasKey(e => e.KFulfillerMerchantsSupplier).HasName("PK_FulfillmentNetwork_tFulfillerMerchantsSupplier");

            entity.ToTable("tFulfillerMerchantsSupplier", "FulfillmentNetwork");

            entity.Property(e => e.KFulfillerMerchantsSupplier).HasColumnName("kFulfillerMerchantsSupplier");
            entity.Property(e => e.CMerchantSupplierName)
                .HasMaxLength(255)
                .HasColumnName("cMerchantSupplierName");
            entity.Property(e => e.CMerchantSupplierNumber)
                .HasMaxLength(255)
                .HasColumnName("cMerchantSupplierNumber");
            entity.Property(e => e.KFulfillerEinstellungen).HasColumnName("kFulfillerEinstellungen");
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.KLieferantenSupplier).HasColumnName("kLieferantenSupplier");

            entity.HasOne(d => d.KFulfillerEinstellungenNavigation).WithMany(p => p.TFulfillerMerchantsSuppliers)
                .HasForeignKey(d => d.KFulfillerEinstellungen)
                .HasConstraintName("FK_FulfillmentNetwork_tFulfillerMerchantsSupplier_kFulfillerEinstellungen");
        });

        modelBuilder.Entity<TFulfillerProductAttributeAtFfn>(entity =>
        {
            entity.HasKey(e => e.KFulfillerProductAttributeAtFfn);

            entity.ToTable("tFulfillerProductAttributeAtFfn", "FulfillmentNetwork");

            entity.Property(e => e.KFulfillerProductAttributeAtFfn).HasColumnName("kFulfillerProductAttributeAtFfn");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CMerchantId)
                .HasMaxLength(10)
                .HasColumnName("cMerchantId");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CType)
                .HasMaxLength(10)
                .HasColumnName("cType");
            entity.Property(e => e.CValue)
                .HasMaxLength(255)
                .HasColumnName("cValue");
            entity.Property(e => e.KProductRef).HasColumnName("kProductRef");

            entity.HasOne(d => d.KProductRefNavigation).WithMany(p => p.TFulfillerProductAttributeAtFfns)
                .HasForeignKey(d => d.KProductRef)
                .HasConstraintName("FK_FulfillmentNetwork_tFulfillerProductAttributes_kProductRef");
        });

        modelBuilder.Entity<TFulfillerStammdatenKonfiguration>(entity =>
        {
            entity.HasKey(e => e.CName).HasName("PK_FulfillmentNetwork_tFulfillerStammdatenKonfiguration");

            entity.ToTable("tFulfillerStammdatenKonfiguration", "FulfillmentNetwork");

            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CValue)
                .HasMaxLength(255)
                .HasColumnName("cValue");
        });

        modelBuilder.Entity<TFulfillmentAuftrag>(entity =>
        {
            entity.HasKey(e => e.KFulfillmentAuftrag).HasName("PK_dbo_tFulfillmentAuftrag");

            entity.ToTable("tFulfillmentAuftrag", tb => tb.HasTrigger("jtlActionValidator_tFulfillmentAuftrag"));

            entity.Property(e => e.KFulfillmentAuftrag).HasColumnName("kFulfillmentAuftrag");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBestellnummer)
                .HasMaxLength(50)
                .HasColumnName("cBestellnummer");
            entity.Property(e => e.CFehlermeldung).HasColumnName("cFehlermeldung");
            entity.Property(e => e.CKommentar)
                .HasMaxLength(1000)
                .HasColumnName("cKommentar");
            entity.Property(e => e.CLieferAdressZusatz)
                .HasMaxLength(255)
                .HasColumnName("cLieferAdressZusatz");
            entity.Property(e => e.CLieferAdresseAnrede)
                .HasMaxLength(30)
                .HasColumnName("cLieferAdresseAnrede");
            entity.Property(e => e.CLieferAdresseEmail)
                .HasMaxLength(255)
                .HasColumnName("cLieferAdresseEmail");
            entity.Property(e => e.CLieferAdresseFax)
                .HasMaxLength(30)
                .HasColumnName("cLieferAdresseFax");
            entity.Property(e => e.CLieferAdresseFirma)
                .HasMaxLength(128)
                .HasColumnName("cLieferAdresseFirma");
            entity.Property(e => e.CLieferAdresseKundennummer)
                .HasMaxLength(30)
                .HasColumnName("cLieferAdresseKundennummer");
            entity.Property(e => e.CLieferAdresseLand)
                .HasMaxLength(64)
                .HasColumnName("cLieferAdresseLand");
            entity.Property(e => e.CLieferAdresseName)
                .HasMaxLength(126)
                .HasColumnName("cLieferAdresseName");
            entity.Property(e => e.CLieferAdresseOrt)
                .HasMaxLength(64)
                .HasColumnName("cLieferAdresseOrt");
            entity.Property(e => e.CLieferAdressePlz)
                .HasMaxLength(24)
                .HasColumnName("cLieferAdressePLZ");
            entity.Property(e => e.CLieferAdresseStrasse)
                .HasMaxLength(255)
                .HasColumnName("cLieferAdresseStrasse");
            entity.Property(e => e.CLieferAdresseTel)
                .HasMaxLength(30)
                .HasColumnName("cLieferAdresseTel");
            entity.Property(e => e.CLieferAdresseTitel)
                .HasMaxLength(64)
                .HasColumnName("cLieferAdresseTitel");
            entity.Property(e => e.CLieferAdresseVorname)
                .HasMaxLength(126)
                .HasColumnName("cLieferAdresseVorname");
            entity.Property(e => e.CLieferPrioritaet)
                .HasMaxLength(30)
                .HasDefaultValueSql("('Standard')")
                .HasColumnName("cLieferPrioritaet");
            entity.Property(e => e.CLieferZusatz)
                .HasMaxLength(60)
                .HasColumnName("cLieferZusatz");
            entity.Property(e => e.CLieferadresseBundesland)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseBundesland");
            entity.Property(e => e.CLieferscheinnummer)
                .HasMaxLength(255)
                .HasColumnName("cLieferscheinnummer");
            entity.Property(e => e.COutboundId)
                .HasMaxLength(255)
                .HasColumnName("cOutboundId");
            entity.Property(e => e.CStornoCode)
                .HasMaxLength(255)
                .HasColumnName("cStornoCode");
            entity.Property(e => e.CStornoGrund).HasColumnName("cStornoGrund");
            entity.Property(e => e.DApiVersendet)
                .HasColumnType("datetime")
                .HasColumnName("dApiVersendet");
            entity.Property(e => e.DBestelldatum)
                .HasColumnType("datetime")
                .HasColumnName("dBestelldatum");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DGedruckt)
                .HasColumnType("datetime")
                .HasColumnName("dGedruckt");
            entity.Property(e => e.DGefaxt)
                .HasColumnType("datetime")
                .HasColumnName("dGefaxt");
            entity.Property(e => e.DGemailt)
                .HasColumnType("datetime")
                .HasColumnName("dGemailt");
            entity.Property(e => e.DInBearbeitung)
                .HasColumnType("datetime")
                .HasColumnName("dInBearbeitung");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KLieferadresse).HasColumnName("kLieferadresse");
            entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.NFulfillmentDienstleister).HasColumnName("nFulfillmentDienstleister");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<TFulfillmentAuftragPo>(entity =>
        {
            entity.HasKey(e => e.KFulfillmentAuftragPos).HasName("PK_dbo_tFulfillmentAuftragPos");

            entity.ToTable("tFulfillmentAuftragPos");

            entity.HasIndex(e => e.KFulfillmentAuftrag, "IX_tFulfillmentAuftragPos_kFulfillmentAuftrag");

            entity.HasIndex(e => e.KLieferscheinPos, "IX_tFulfillmentAuftragPos_kLieferscheinPos");

            entity.Property(e => e.KFulfillmentAuftragPos).HasColumnName("kFulfillmentAuftragPos");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAbhilfe)
                .HasMaxLength(255)
                .HasColumnName("cAbhilfe");
            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CArtikelGeschenkText)
                .HasMaxLength(1000)
                .HasColumnName("cArtikelGeschenkText");
            entity.Property(e => e.CArtikelHinweis)
                .HasMaxLength(2000)
                .HasColumnName("cArtikelHinweis");
            entity.Property(e => e.CCarrier)
                .HasMaxLength(20)
                .HasColumnName("cCarrier");
            entity.Property(e => e.CErrorMessage)
                .HasMaxLength(1000)
                .HasColumnName("cErrorMessage");
            entity.Property(e => e.CErrorType)
                .HasMaxLength(20)
                .HasColumnName("cErrorType");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KFulfillmentAuftrag).HasColumnName("kFulfillmentAuftrag");
            entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");
            entity.Property(e => e.NErrorCode).HasColumnName("nErrorCode");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<TFulfillmentLog>(entity =>
        {
            entity.HasKey(e => e.KFulfillmentLog).HasName("PK_FulfillmentNetwork_tFulfillmentLog");

            entity.ToTable("tFulfillmentLog", "FulfillmentNetwork");

            entity.HasIndex(e => new { e.NLogLevel, e.DTimestamp }, "IX_FulfillmentNetwork_tFulfillmentLog_nLogLevel_dTimestamp");

            entity.Property(e => e.KFulfillmentLog).HasColumnName("kFulfillmentLog");
            entity.Property(e => e.CMessage).HasColumnName("cMessage");
            entity.Property(e => e.CMessageDetails).HasColumnName("cMessageDetails");
            entity.Property(e => e.CRequestId)
                .HasMaxLength(64)
                .HasColumnName("cRequestId");
            entity.Property(e => e.CSessionId)
                .HasMaxLength(100)
                .HasColumnName("cSessionId");
            entity.Property(e => e.DTimestamp)
                .HasColumnType("datetime")
                .HasColumnName("dTimestamp");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KArtikelHistory).HasColumnName("kArtikelHistory");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KFulfillmentAuftrag).HasColumnName("kFulfillmentAuftrag");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");
            entity.Property(e => e.KLieferavis).HasColumnName("kLieferavis");
            entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");
            entity.Property(e => e.KRmRetoure).HasColumnName("kRmRetoure");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.NLogLevel).HasColumnName("nLogLevel");
            entity.Property(e => e.NMessageSource).HasColumnName("nMessageSource");
        });

        modelBuilder.Entity<TFulfillmentWorker>(entity =>
        {
            entity.HasKey(e => e.KFulfillmentWorker).HasName("PK_dbo_tFulfillmentWorker");

            entity.ToTable("tFulfillmentWorker");

            entity.Property(e => e.KFulfillmentWorker)
                .ValueGeneratedNever()
                .HasColumnName("kFulfillmentWorker");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CTaskId)
                .HasMaxLength(100)
                .HasColumnName("cTaskId");
            entity.Property(e => e.DUpdated)
                .HasColumnType("datetime")
                .HasColumnName("dUpdated");
            entity.Property(e => e.NTaskId).HasColumnName("nTaskId");
        });

        modelBuilder.Entity<TGebinde>(entity =>
        {
            entity.HasKey(e => e.KGebinde).HasName("PK_dbo_tGebinde");

            entity.ToTable("tGebinde", tb =>
                {
                    tb.HasTrigger("tgr_tGebinde_DELETE");
                    tb.HasTrigger("tgr_tGebinde_INSUP");
                });

            entity.HasIndex(e => e.KArtikel, "IX_tGebinde_kArtikel");

            entity.Property(e => e.KGebinde).HasColumnName("kGebinde");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CEan)
                .HasMaxLength(255)
                .HasColumnName("cEAN");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CUpc)
                .HasMaxLength(255)
                .HasColumnName("cUPC");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
        });

        modelBuilder.Entity<TGebuehrtyp>(entity =>
        {
            entity.HasKey(e => e.KGebuehrtyp).HasName("PK_dbo_tGebuehrtyp");

            entity.ToTable("tGebuehrtyp");

            entity.Property(e => e.KGebuehrtyp).HasColumnName("kGebuehrtyp");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(100)
                .HasColumnName("cName");
            entity.Property(e => e.CNameExtern)
                .HasMaxLength(100)
                .HasColumnName("cNameExtern");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<TGlobalsQueue>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tGlobalsQueue");

            entity.HasIndex(e => e.CName, "IX_tGlobalsQueue_cName");

            entity.HasIndex(e => e.KShop, "IX_tGlobalsQueue_kShop");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(64)
                .HasColumnName("cName");
            entity.Property(e => e.CText).HasColumnName("cText");
            entity.Property(e => e.DTimeStamp)
                .HasColumnType("datetime")
                .HasColumnName("dTimeStamp");
            entity.Property(e => e.KKey).HasColumnName("kKey");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NType).HasColumnName("nType");
        });

        modelBuilder.Entity<TGutschein>(entity =>
        {
            entity.HasKey(e => e.KGutschein).HasName("PK_dbo_tGutschein");

            entity.ToTable("tGutschein", tb => tb.HasTrigger("tgr_tGutschein_INSERT"));

            entity.Property(e => e.KGutschein)
                .ValueGeneratedNever()
                .HasColumnName("kGutschein");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CGrund)
                .HasMaxLength(1024)
                .HasColumnName("cGrund");
            entity.Property(e => e.CInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cInet");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.FWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWert");
            entity.Property(e => e.KInetKunde).HasColumnName("kInetKunde");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KShop).HasColumnName("kShop");
        });

        modelBuilder.Entity<TGutschriftLog>(entity =>
        {
            entity.HasKey(e => e.KGutschriftLog)
                .HasName("PK_Logging_tGutschriftLog")
                .IsClustered(false);

            entity.ToTable("tGutschriftLog", "Logging", tb =>
                {
                    tb.HasTrigger("tgr_Logging_tGutschriftLog_INS");
                    tb.HasTrigger("tgr_Logging_tGutschriftLog_UPDEL");
                });

            entity.HasIndex(e => e.KGutschrift, "IX_Logging_tGutschriftLog_kGutschrift");

            entity.HasIndex(e => new { e.DErstelltUtc, e.KGutschriftLog }, "UCX_Logging_tGutschriftLog_dErstelltUtc_kAuftragLog").IsUnique();

            entity.Property(e => e.KGutschriftLog).HasColumnName("kGutschriftLog");
            entity.Property(e => e.BLastRowVersion)
                .HasMaxLength(8)
                .IsFixedLength()
                .HasColumnName("bLastRowVersion");
            entity.Property(e => e.BRowVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowVersion");
            entity.Property(e => e.BXml).HasColumnName("bXML");
            entity.Property(e => e.CAppName)
                .HasMaxLength(128)
                .HasColumnName("cAppName");
            entity.Property(e => e.CGutschriftNr)
                .HasMaxLength(50)
                .HasColumnName("cGutschriftNr");
            entity.Property(e => e.DErstelltUtc).HasColumnName("dErstelltUtc");
            entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");
            entity.Property(e => e.NGutschriftType).HasColumnName("nGutschriftType");
            entity.Property(e => e.NLogTyp).HasColumnName("nLogTyp");
        });

        modelBuilder.Entity<TGutschriftPo>(entity =>
        {
            entity.HasKey(e => e.KGutschriftPos).HasName("PK_dbo_tGutschriftPos");

            entity.ToTable("tGutschriftPos", tb => tb.HasTrigger("tgr_dbo_tGutschriftPos_INSUPDEL"));

            entity.HasIndex(e => e.KBestellPos, "IX_tGutschriftPos_kBestellPos");

            entity.HasIndex(e => e.KRechnungPosition, "IX_tGutschriftPos_kRechnungPosition");

            entity.HasIndex(e => e.TArtikelKArtikel, "IX_tGutschriftPos_tArtikel_kArtikel");

            entity.HasIndex(e => e.TGutschriftKGutschrift, "IX_tGutschriftPos_tGutschrift_kGutschrift");

            entity.Property(e => e.KGutschriftPos).HasColumnName("kGutschriftPos");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CString)
                .HasMaxLength(255)
                .HasColumnName("cString");
            entity.Property(e => e.FMwSt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwSt");
            entity.Property(e => e.FRabatt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabatt");
            entity.Property(e => e.FVknetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVKNetto");
            entity.Property(e => e.FVkpreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVKPreis");
            entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");
            entity.Property(e => e.KGutschriftStueckliste).HasColumnName("kGutschriftStueckliste");
            entity.Property(e => e.KRechnungPosition).HasColumnName("kRechnungPosition");
            entity.Property(e => e.NAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nAnzahl");
            entity.Property(e => e.NAuftragsmengeReduzieren)
                .HasDefaultValueSql("((1))")
                .HasColumnName("nAuftragsmengeReduzieren");
            entity.Property(e => e.NLager)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nLager");
            entity.Property(e => e.NLiefermengeReduzieren)
                .HasDefaultValueSql("((1))")
                .HasColumnName("nLiefermengeReduzieren");
            entity.Property(e => e.NSkontogegenbuchung).HasColumnName("nSkontogegenbuchung");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.TArtikelKArtikel).HasColumnName("tArtikel_kArtikel");
            entity.Property(e => e.TGutschriftKGutschrift).HasColumnName("tGutschrift_kGutschrift");
        });

        modelBuilder.Entity<TGutschriftStorno>(entity =>
        {
            entity.HasKey(e => e.KGutschrift).HasName("PK_dbo_tGutschriftStorno");

            entity.ToTable("tGutschriftStorno", tb => tb.HasTrigger("tgr_dbo_tGutschriftStorno_INSUPDEL"));

            entity.Property(e => e.KGutschrift)
                .ValueGeneratedNever()
                .HasColumnName("kGutschrift");
            entity.Property(e => e.CKommentar)
                .HasMaxLength(100)
                .HasColumnName("cKommentar");
            entity.Property(e => e.DStorniert)
                .HasColumnType("datetime")
                .HasColumnName("dStorniert");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KGutschriftStornogrund).HasColumnName("kGutschriftStornogrund");
            entity.Property(e => e.KStornoGutschrift).HasColumnName("kStornoGutschrift");

            entity.HasOne(d => d.KStornoGutschriftNavigation).WithMany(p => p.TGutschriftStornos)
                .HasForeignKey(d => d.KStornoGutschrift)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo_tGutschriftStorno_kStornoGutschrift");
        });

        modelBuilder.Entity<TGutschriftStornogrund>(entity =>
        {
            entity.HasKey(e => e.KGutschriftStornogrund).HasName("PK_dbo_tGutschriftStornogrund");

            entity.ToTable("tGutschriftStornogrund");

            entity.Property(e => e.KGutschriftStornogrund).HasColumnName("kGutschriftStornogrund");
            entity.Property(e => e.CStornogrund)
                .HasMaxLength(50)
                .HasColumnName("cStornogrund");
        });

        modelBuilder.Entity<THealthCheck>(entity =>
        {
            entity.HasKey(e => e.KHc).HasName("PK_Maintenance_tHealthCheck");

            entity.ToTable("tHealthCheck", "Maintenance");

            entity.Property(e => e.KHc).HasColumnName("kHC");
            entity.Property(e => e.CBezugsObjekt)
                .HasMaxLength(255)
                .HasColumnName("cBezugsObjekt");
            entity.Property(e => e.CFehlercode)
                .HasMaxLength(30)
                .HasColumnName("cFehlercode");
            entity.Property(e => e.CHerkunft)
                .HasMaxLength(200)
                .HasColumnName("cHerkunft");
            entity.Property(e => e.CLink).HasColumnName("cLink");
            entity.Property(e => e.CMeldung)
                .HasMaxLength(2048)
                .HasColumnName("cMeldung");
            entity.Property(e => e.CObjekt)
                .HasMaxLength(255)
                .HasColumnName("cObjekt");
            entity.Property(e => e.CObjektDetailIst).HasColumnName("cObjektDetailIst");
            entity.Property(e => e.CObjektDetailSoll).HasColumnName("cObjektDetailSoll");
            entity.Property(e => e.CObjektReparatur).HasColumnName("cObjektReparatur");
            entity.Property(e => e.CObjektTyp)
                .HasMaxLength(20)
                .HasColumnName("cObjektTyp");
            entity.Property(e => e.CSchweregrad)
                .HasMaxLength(10)
                .HasColumnName("cSchweregrad");
            entity.Property(e => e.DErstelltUtc)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("dErstelltUtc");
            entity.Property(e => e.NCheckId).HasColumnName("nCheckID");
        });

        modelBuilder.Entity<THersteller>(entity =>
        {
            entity.HasKey(e => e.KHersteller).HasName("PK_dbo_tHersteller");

            entity.ToTable("tHersteller", tb =>
                {
                    tb.HasTrigger("jtlActionValidator_tHersteller");
                    tb.HasTrigger("tgr_tHersteller_Connector_INSERT_UPDATE");
                });

            entity.HasIndex(e => e.CName, "UQ_dbo_tHersteller_cName").IsUnique();

            entity.Property(e => e.KHersteller)
                .ValueGeneratedNever()
                .HasColumnName("kHersteller");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBeschreibung).HasColumnName("cBeschreibung");
            entity.Property(e => e.CHomepage)
                .HasMaxLength(255)
                .HasColumnName("cHomepage");
            entity.Property(e => e.CMetaDescription).HasColumnName("cMetaDescription");
            entity.Property(e => e.CMetaKeywords)
                .HasMaxLength(4000)
                .HasColumnName("cMetaKeywords");
            entity.Property(e => e.CMetaTitle)
                .HasMaxLength(4000)
                .HasColumnName("cMetaTitle");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<THerstellerBildPlattform>(entity =>
        {
            entity.HasKey(e => e.KHerstellerBildPlattform).HasName("PK_dbo_tHerstellerBildPlattform");

            entity.ToTable("tHerstellerBildPlattform", tb => tb.HasTrigger("tgr_tHerstellerBildPlattform_DELETE"));

            entity.Property(e => e.KHerstellerBildPlattform).HasColumnName("kHerstellerBildPlattform");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KBild).HasColumnName("kBild");
            entity.Property(e => e.KHersteller).HasColumnName("kHersteller");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NInet).HasColumnName("nInet");
        });

        modelBuilder.Entity<THerstellerSprache>(entity =>
        {
            entity.HasKey(e => new { e.KHersteller, e.KSprache }).HasName("PK_dbo_tHerstellerSprache");

            entity.ToTable("tHerstellerSprache", tb => tb.HasTrigger("tgr_tHerstellerSprache_Connector"));

            entity.Property(e => e.KHersteller).HasColumnName("kHersteller");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBeschreibung).HasColumnName("cBeschreibung");
            entity.Property(e => e.CMetaDescription).HasColumnName("cMetaDescription");
            entity.Property(e => e.CMetaKeywords)
                .HasMaxLength(512)
                .HasColumnName("cMetaKeywords");
            entity.Property(e => e.CMetaTitle)
                .HasMaxLength(255)
                .HasColumnName("cMetaTitle");
            entity.Property(e => e.CSeo)
                .HasMaxLength(256)
                .HasColumnName("cSeo");
        });

        modelBuilder.Entity<THintergrundDienst>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tHintergrundDienst");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.NAktiv).HasColumnName("nAktiv");
            entity.Property(e => e.NAmazonAuftrag).HasColumnName("nAmazonAuftrag");
            entity.Property(e => e.NEbayAuftrag).HasColumnName("nEbayAuftrag");
            entity.Property(e => e.NEbayBestand).HasColumnName("nEbayBestand");
            entity.Property(e => e.NEbaySmall).HasColumnName("nEbaySmall");
            entity.Property(e => e.NKeinAmazon).HasColumnName("nKeinAmazon");
            entity.Property(e => e.NKeinEbay).HasColumnName("nKeinEbay");
            entity.Property(e => e.NKeinFulfillment).HasColumnName("nKeinFulfillment");
            entity.Property(e => e.NKeinShop).HasColumnName("nKeinShop");
            entity.Property(e => e.NKeinZahlungsabgleich).HasColumnName("nKeinZahlungsabgleich");
            entity.Property(e => e.NKundenupdate).HasColumnName("nKundenupdate");
            entity.Property(e => e.NReDrucken).HasColumnName("nReDrucken");
            entity.Property(e => e.NRepricer).HasColumnName("nRepricer");
            entity.Property(e => e.NRetourenErstellen).HasColumnName("nRetourenErstellen");
            entity.Property(e => e.NSek).HasColumnName("nSek");
            entity.Property(e => e.NUpdateBilderBeschreibung).HasColumnName("nUpdateBilderBeschreibung");
            entity.Property(e => e.NWaehrung).HasColumnName("nWaehrung");
            entity.Property(e => e.NWebshopAuftrag).HasColumnName("nWebshopAuftrag");
        });

        modelBuilder.Entity<THistorie>(entity =>
        {
            entity.HasKey(e => e.KHistorie).HasName("PK_Kunde.tHistorie");

            entity.ToTable("tHistorie", "Kunde");

            entity.HasIndex(e => new { e.KKey, e.KVorgang }, "IX_Kunde_tHistorie_kKey_kVorgang");

            entity.HasIndex(e => new { e.KAuftrag, e.KVorgang, e.DErstellt }, "IX_tHistorie_kAuftrag_kVorgang_dErstellt");

            entity.HasIndex(e => new { e.KKunde, e.KVorgang, e.DErstellt }, "IX_tHistorie_kKunde_kVorgang_dErstellt");

            entity.Property(e => e.KHistorie).HasColumnName("kHistorie");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CValue1)
                .HasMaxLength(4000)
                .HasColumnName("cValue1");
            entity.Property(e => e.CValue2)
                .HasMaxLength(4000)
                .HasColumnName("cValue2");
            entity.Property(e => e.CValue3)
                .HasMaxLength(4000)
                .HasColumnName("cValue3");
            entity.Property(e => e.DErstellt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.FValue1)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fValue1");
            entity.Property(e => e.FValue2)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fValue2");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KKey).HasColumnName("kKey");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KVorgang).HasColumnName("kVorgang");
        });

        modelBuilder.Entity<TIduUploadQueue>(entity =>
        {
            entity.HasKey(e => e.KIduUploadQueue).HasName("PK_Amazon_tIduUploadQueue");

            entity.ToTable("tIduUploadQueue", "Amazon");

            entity.HasIndex(e => new { e.KBeleg, e.NBelegtyp }, "UQ_Amazon_tIduUploadQueue_kBeleg_nBelegtyp").IsUnique();

            entity.Property(e => e.KIduUploadQueue).HasColumnName("kIduUploadQueue");
            entity.Property(e => e.CBelegnummer)
                .HasMaxLength(50)
                .HasColumnName("cBelegnummer");
            entity.Property(e => e.CBezugsbelegnummer)
                .HasMaxLength(50)
                .HasColumnName("cBezugsbelegnummer");
            entity.Property(e => e.CMeldung)
                .HasMaxLength(4000)
                .HasColumnName("cMeldung");
            entity.Property(e => e.COrderId)
                .HasMaxLength(30)
                .HasColumnName("cOrderId");
            entity.Property(e => e.DAusgabeBeendetUtc).HasColumnName("dAusgabeBeendetUtc");
            entity.Property(e => e.DAusgabeGestartetUtc).HasColumnName("dAusgabeGestartetUtc");
            entity.Property(e => e.DBelegdatum).HasColumnName("dBelegdatum");
            entity.Property(e => e.DErstelltUtc)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("dErstelltUtc");
            entity.Property(e => e.DUploadErfolgtUtc).HasColumnName("dUploadErfolgtUtc");
            entity.Property(e => e.KBeleg).HasColumnName("kBeleg");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.NAusgabeVersuche).HasColumnName("nAusgabeVersuche");
            entity.Property(e => e.NBelegtyp).HasColumnName("nBelegtyp");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
            entity.Property(e => e.NUploadVersuche).HasColumnName("nUploadVersuche");
        });

        modelBuilder.Entity<TInboundRef>(entity =>
        {
            entity.HasKey(e => e.KInboundRef).HasName("PK_FulfillmentNetwork_tInboundRef");

            entity.ToTable("tInboundRef", "FulfillmentNetwork");

            entity.HasIndex(e => e.CInboundId, "IX_FulfillmentNetwork_tInboundRef_cInboundId").IsDescending();

            entity.HasIndex(e => e.COwnerId, "IX_FulfillmentNetwork_tInboundRef_cOwnerId").IsDescending();

            entity.HasIndex(e => e.NType, "IX_FulfillmentNetwork_tInboundRef_nType");

            entity.Property(e => e.KInboundRef).HasColumnName("kInboundRef");
            entity.Property(e => e.BRowVersion)
                .HasMaxLength(8)
                .IsFixedLength()
                .HasColumnName("bRowVersion");
            entity.Property(e => e.CInboundId)
                .HasMaxLength(255)
                .HasColumnName("cInboundId");
            entity.Property(e => e.COwnerId)
                .HasMaxLength(10)
                .HasColumnName("cOwnerId");
            entity.Property(e => e.DCreatedAt).HasColumnName("dCreatedAt");
            entity.Property(e => e.DUpdatedAt).HasColumnName("dUpdatedAt");
            entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");
            entity.Property(e => e.NChangeState).HasColumnName("nChangeState");
            entity.Property(e => e.NInboundStatus).HasColumnName("nInboundStatus");
            entity.Property(e => e.NRetryAttempts).HasColumnName("nRetryAttempts");
            entity.Property(e => e.NType).HasColumnName("nType");

            entity.HasOne(d => d.KLieferantenBestellungNavigation).WithMany(p => p.TInboundRefs)
                .HasForeignKey(d => d.KLieferantenBestellung)
                .HasConstraintName("FK_FulfillmentNetwork_tInboundRef_kLieferantenBestellung");
        });

        modelBuilder.Entity<TInboundShippingNotificationRef>(entity =>
        {
            entity.HasKey(e => e.KLieferavis).HasName("PK_FulfillmentNetwork_tInboundShippingNotificationRef");

            entity.ToTable("tInboundShippingNotificationRef", "FulfillmentNetwork");

            entity.Property(e => e.KLieferavis)
                .ValueGeneratedNever()
                .HasColumnName("kLieferavis");
            entity.Property(e => e.CInboundShippingNotificationId)
                .HasMaxLength(255)
                .HasColumnName("cInboundShippingNotificationId");
            entity.Property(e => e.COwnerId)
                .HasMaxLength(10)
                .HasColumnName("cOwnerId");
            entity.Property(e => e.DCreatedAt).HasColumnName("dCreatedAt");
            entity.Property(e => e.DUpdatedAt).HasColumnName("dUpdatedAt");

            entity.HasOne(d => d.KLieferavisNavigation).WithOne(p => p.TInboundShippingNotificationRef)
                .HasForeignKey<TInboundShippingNotificationRef>(d => d.KLieferavis)
                .HasConstraintName("FK_FulfillmentNetwork_tInboundShippingNotificationRef");
        });

        modelBuilder.Entity<TInetAdresseShop>(entity =>
        {
            entity.HasKey(e => new { e.KInetAdresse, e.KShop }).HasName("PK_dbo_tInetAdresseShop");

            entity.ToTable("tInetAdresseShop");

            entity.HasIndex(e => e.KAdresse, "IX_tInetAdresseShop_kAdresse");

            entity.Property(e => e.KInetAdresse).HasColumnName("kInetAdresse");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KAdresse).HasColumnName("kAdresse");
        });

        modelBuilder.Entity<TInetBestellungAttribute>(entity =>
        {
            entity.HasKey(e => e.KInetBestellungAttribute).HasName("PK_dbo_tInetBestellungAttribute");

            entity.ToTable("tInetBestellungAttribute");

            entity.Property(e => e.KInetBestellungAttribute).HasColumnName("kInetBestellungAttribute");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CValue)
                .HasMaxLength(4000)
                .HasColumnName("cValue");
            entity.Property(e => e.KInetBestellung).HasColumnName("kInetBestellung");
            entity.Property(e => e.KShop).HasColumnName("kShop");
        });

        modelBuilder.Entity<TInetKundeShop>(entity =>
        {
            entity.HasKey(e => new { e.KInetKunde, e.KShop }).HasName("PK_dbo_tInetKundeShop");

            entity.ToTable("tInetKundeShop", tb => tb.HasTrigger("tgr_tInetKundeShop_INSUP"));

            entity.HasIndex(e => e.KKunde, "IX_tInetKundeShop_kKunde");

            entity.Property(e => e.KInetKunde).HasColumnName("kInetKunde");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('Y')")
                .IsFixedLength()
                .HasColumnName("cInet");
            entity.Property(e => e.CShopKundenNr)
                .HasMaxLength(30)
                .HasColumnName("cShopKundenNr");
            entity.Property(e => e.DKundeSeit)
                .HasMaxLength(11)
                .HasColumnName("dKundeSeit");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");
            entity.Property(e => e.KSubShop).HasColumnName("kSubShop");
            entity.Property(e => e.NRegistriert).HasColumnName("nRegistriert");
        });

        modelBuilder.Entity<TInetKundenAttribute>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tInetKundenAttribute");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CValue)
                .HasMaxLength(255)
                .HasColumnName("cValue");
            entity.Property(e => e.KInetKunde).HasColumnName("kInetKunde");
            entity.Property(e => e.KShop).HasColumnName("kShop");
        });

        modelBuilder.Entity<TInetShopZahlung>(entity =>
        {
            entity.HasKey(e => new { e.KZahlungseingang, e.KShop }).HasName("PK_dbo_tInetShopZahlung");

            entity.ToTable("tInetShopZahlung");

            entity.Property(e => e.KZahlungseingang).HasColumnName("kZahlungseingang");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CEmpfaenger)
                .HasMaxLength(255)
                .HasColumnName("cEmpfaenger");
            entity.Property(e => e.CHinweis)
                .HasMaxLength(255)
                .HasColumnName("cHinweis");
            entity.Property(e => e.CIso)
                .HasMaxLength(20)
                .HasColumnName("cISO");
            entity.Property(e => e.CZahler)
                .HasMaxLength(255)
                .HasColumnName("cZahler");
            entity.Property(e => e.CZahlungsanbieter)
                .HasMaxLength(255)
                .HasColumnName("cZahlungsanbieter");
            entity.Property(e => e.DZeit)
                .HasMaxLength(20)
                .HasColumnName("dZeit");
            entity.Property(e => e.FBetrag)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBetrag");
            entity.Property(e => e.FZahlungsgebuehr)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZahlungsgebuehr");
            entity.Property(e => e.KInetBestellung).HasColumnName("kInetBestellung");
            entity.Property(e => e.KZahlung).HasColumnName("kZahlung");
        });

        modelBuilder.Entity<TInkassoUser>(entity =>
        {
            entity.HasKey(e => e.KInkassoUser).HasName("PK_dbo_tInkassoUser");

            entity.ToTable("tInkassoUser");

            entity.Property(e => e.KInkassoUser)
                .ValueGeneratedNever()
                .HasColumnName("kInkassoUser");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAktiv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAktiv");
            entity.Property(e => e.CPasswort)
                .HasMaxLength(50)
                .HasColumnName("cPasswort");
            entity.Property(e => e.CUsername)
                .HasMaxLength(50)
                .HasColumnName("cUsername");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
        });

        modelBuilder.Entity<TInteropQueue>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tInteropQueue");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CData).HasColumnName("cData");
            entity.Property(e => e.CUnique)
                .HasMaxLength(255)
                .HasColumnName("cUnique");
            entity.Property(e => e.NKey1).HasColumnName("nKey1");
            entity.Property(e => e.NKey2).HasColumnName("nKey2");
            entity.Property(e => e.NOperation).HasColumnName("nOperation");
        });

        modelBuilder.Entity<TInventur>(entity =>
        {
            entity.HasKey(e => e.KInventur).HasName("PK_dbo_tInventur");

            entity.ToTable("tInventur");

            entity.Property(e => e.KInventur).HasColumnName("kInventur");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CCharge)
                .HasMaxLength(255)
                .HasColumnName("cCharge");
            entity.Property(e => e.CSeriennummer)
                .HasMaxLength(128)
                .HasColumnName("cSeriennummer");
            entity.Property(e => e.DErstellt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DMhd)
                .HasColumnType("datetime")
                .HasColumnName("dMHD");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");
        });

        modelBuilder.Entity<TInventurArtikel>(entity =>
        {
            entity.HasKey(e => new { e.KArtikel, e.KWmsInventur }).HasName("PK_WMS_tInventurArtikel");

            entity.ToTable("tInventurArtikel", "WMS");

            entity.HasIndex(e => new { e.KWmsInventur, e.NBearbeitet }, "IX_WMS_tInventurArtikel_kWmsInventur_nBearbeitet");

            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KWmsInventur).HasColumnName("kWmsInventur");
            entity.Property(e => e.DInventurDatum)
                .HasColumnType("datetime")
                .HasColumnName("dInventurDatum");
            entity.Property(e => e.NBearbeitet).HasColumnName("nBearbeitet");

            entity.HasOne(d => d.KWmsInventurNavigation).WithMany(p => p.TInventurArtikels)
                .HasForeignKey(d => d.KWmsInventur)
                .HasConstraintName("FK_WMS_tInventurArtikel_kWmsInventur");
        });

        modelBuilder.Entity<TItemStockDemand>(entity =>
        {
            entity.HasKey(e => e.KItemStockDemand).HasName("PK_Beschaffung_tItemStockDemand");

            entity.ToTable("tItemStockDemand", "Beschaffung");

            entity.Property(e => e.KItemStockDemand).HasColumnName("kItemStockDemand");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CComment)
                .HasColumnType("ntext")
                .HasColumnName("cComment");
            entity.Property(e => e.DCreationDate).HasColumnName("dCreationDate");
            entity.Property(e => e.DTargetDate).HasColumnName("dTargetDate");
            entity.Property(e => e.FQuantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fQuantity");
            entity.Property(e => e.IContext).HasColumnName("iContext");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KContext).HasColumnName("kContext");
            entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");
            entity.Property(e => e.KWarenLagerBereich).HasColumnName("kWarenLagerBereich");
            entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<TItemStockDemandStatusTransition>(entity =>
        {
            entity.HasKey(e => e.KItemStockDemandStatusTransition).HasName("PK_Beschaffung_tItemStockDemandStatusTransition");

            entity.ToTable("tItemStockDemandStatusTransition", "Beschaffung");

            entity.Property(e => e.KItemStockDemandStatusTransition).HasColumnName("kItemStockDemandStatusTransition");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CComment)
                .HasColumnType("ntext")
                .HasColumnName("cComment");
            entity.Property(e => e.DCreationDate).HasColumnName("dCreationDate");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KItemStockDemand).HasColumnName("kItemStockDemand");
            entity.Property(e => e.NNextStatus).HasColumnName("nNextStatus");
            entity.Property(e => e.NPreviousStatus).HasColumnName("nPreviousStatus");

            entity.HasOne(d => d.KItemStockDemandNavigation).WithMany(p => p.TItemStockDemandStatusTransitions)
                .HasForeignKey(d => d.KItemStockDemand)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Beschaffung_tItemStockDemandStatusTransition_kItemStockDemand");
        });

        modelBuilder.Entity<TKartonVersandArtMapping>(entity =>
        {
            entity.HasKey(e => new { e.KVersandArt, e.KArtikel }).HasName("PK_dbo_tKartonVersandArtMapping");

            entity.ToTable("tKartonVersandArtMapping");

            entity.Property(e => e.KVersandArt).HasColumnName("kVersandArt");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.NIstStandard).HasColumnName("nIstStandard");
        });

        modelBuilder.Entity<TKategorieAttribut>(entity =>
        {
            entity.HasKey(e => e.KKategorieAttribut).HasName("PK_dbo_tKategorieAttribut");

            entity.ToTable("tKategorieAttribut", tb => tb.HasTrigger("jtlActionValidator_tKategorieAttribut"));

            entity.HasIndex(e => new { e.KAttribut, e.KKategorie, e.KShop }, "IX_dbo_tKategorieAttribut_kAttribut_kKategorie_kShop");

            entity.HasIndex(e => new { e.KKategorie, e.KAttribut, e.KShop }, "UQ_tKategorieAttribut_kAttribut_kKategorie_kShop").IsUnique();

            entity.Property(e => e.KKategorieAttribut).HasColumnName("kKategorieAttribut");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KAttribut).HasColumnName("kAttribut");
            entity.Property(e => e.KKategorie).HasColumnName("kKategorie");
            entity.Property(e => e.KShop).HasColumnName("kShop");
        });

        modelBuilder.Entity<TKategorieAttributSprache>(entity =>
        {
            entity.HasKey(e => new { e.KKategorieAttribut, e.KSprache }).HasName("PK_dbo_tKategorieAttributSprache");

            entity.ToTable("tKategorieAttributSprache", tb => tb.HasTrigger("tgr_tKategorieAttributSprache_Connector"));

            entity.Property(e => e.KKategorieAttribut).HasColumnName("kKategorieAttribut");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CWertVarchar).HasColumnName("cWertVarchar");
            entity.Property(e => e.DWertDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dWertDateTime");
            entity.Property(e => e.FWertDecimal)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertDecimal");
            entity.Property(e => e.NWertInt).HasColumnName("nWertInt");
        });

        modelBuilder.Entity<TKategorieMapping>(entity =>
        {
            entity.HasKey(e => e.KKategorieMapping).HasName("PK_dbo_tKategorieMapping");

            entity.ToTable("tKategorieMapping");

            entity.Property(e => e.KKategorieMapping).HasColumnName("kKategorieMapping");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KFremdKategorie).HasColumnName("kFremdKategorie");
            entity.Property(e => e.KKategorie).HasColumnName("kKategorie");
            entity.Property(e => e.NPlattform).HasColumnName("nPlattform");
        });

        modelBuilder.Entity<TKategorieRabatt>(entity =>
        {
            entity.HasKey(e => new { e.KKategorie, e.KKundenGruppe, e.KShop }).HasName("PK_dbo_tKategorieRabatt");

            entity.ToTable("tKategorieRabatt", tb =>
                {
                    tb.HasTrigger("tgr_tKategorieRabatt_DEL");
                    tb.HasTrigger("tgr_tKategorieRabatt_INSUP");
                });

            entity.Property(e => e.KKategorie).HasColumnName("kKategorie");
            entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.FRabatt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabatt");
        });

        modelBuilder.Entity<TKategorieShop>(entity =>
        {
            entity.HasKey(e => new { e.KKategorie, e.KShop }).HasName("PK_dbo_tKategorieShop");

            entity.ToTable("tKategorieShop", tb =>
                {
                    tb.HasTrigger("tgr_tKategorieShop_DEL");
                    tb.HasTrigger("tgr_tKategorieShop_INSUP");
                });

            entity.Property(e => e.KKategorie).HasColumnName("kKategorie");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CDelInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cDelInet");
            entity.Property(e => e.CInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cInet");
            entity.Property(e => e.NInBearbeitung).HasColumnName("nInBearbeitung");
        });

        modelBuilder.Entity<TKategorieSichtbarkeit>(entity =>
        {
            entity.HasKey(e => new { e.KKategorie, e.KKundenGruppe, e.KShop }).HasName("PK_dbo_tKategorieSichtbarkeit");

            entity.ToTable("tKategorieSichtbarkeit");

            entity.Property(e => e.KKategorie).HasColumnName("kKategorie");
            entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
        });

        modelBuilder.Entity<TKategorieSperre>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tKategorieSperre");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KKategorie).HasColumnName("kKategorie");
        });

        modelBuilder.Entity<TKategorieSprache>(entity =>
        {
            entity.HasKey(e => new { e.KKategorie, e.KSprache, e.KPlattform, e.KShop }).HasName("PK_dbo_tKategorieSprache");

            entity.ToTable("tKategorieSprache", tb =>
                {
                    tb.HasTrigger("tgr_tKategorieSprache_DEL");
                    tb.HasTrigger("tgr_tKategorieSprache_INSUP");
                });

            entity.HasIndex(e => e.KPlattform, "IX_tKategorieSprache_kPlattform");

            entity.Property(e => e.KKategorie).HasColumnName("kKategorie");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBeschreibung).HasColumnName("cBeschreibung");
            entity.Property(e => e.CMetaDescription).HasColumnName("cMetaDescription");
            entity.Property(e => e.CMetaKeywords)
                .HasMaxLength(4000)
                .HasColumnName("cMetaKeywords");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CTitleTag)
                .HasMaxLength(4000)
                .HasColumnName("cTitleTag");
            entity.Property(e => e.CUrlPfad)
                .HasMaxLength(255)
                .HasColumnName("cUrlPfad");
        });

        modelBuilder.Entity<TKategoriebildPlattform>(entity =>
        {
            entity.HasKey(e => e.KKategoriebildPlattform).HasName("PK_dbo_tKategoriebildPlattform");

            entity.ToTable("tKategoriebildPlattform", tb =>
                {
                    tb.HasTrigger("tgr_tKategoriebildPlattform_DEL");
                    tb.HasTrigger("tgr_tKategoriebildPlattform_INSUP");
                });

            entity.HasIndex(e => new { e.KKategorie, e.KPlattform, e.KShop, e.NNr }, "UQ_dbo_tKategoriebildPlattform_kKategorie_kPlattform_kShop_nNr").IsUnique();

            entity.Property(e => e.KKategoriebildPlattform).HasColumnName("kKategoriebildPlattform");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KBild).HasColumnName("kBild");
            entity.Property(e => e.KKategorie).HasColumnName("kKategorie");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NInet)
                .HasDefaultValueSql("((1))")
                .HasColumnName("nInet");
            entity.Property(e => e.NNr).HasColumnName("nNr");
        });

        modelBuilder.Entity<TKostenTyp>(entity =>
        {
            entity.HasKey(e => e.KKostentyp).HasName("PK_bi_kKostentyp");

            entity.ToTable("tKostenTyp", "BI");

            entity.Property(e => e.KKostentyp).HasColumnName("kKostentyp");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CKommentar)
                .HasMaxLength(512)
                .HasColumnName("cKommentar");
            entity.Property(e => e.CKostentyp)
                .HasMaxLength(128)
                .HasColumnName("cKostentyp");
            entity.Property(e => e.DAenderung)
                .HasColumnType("datetime")
                .HasColumnName("dAenderung");
            entity.Property(e => e.DErstellt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
        });

        modelBuilder.Entity<TKundeEigenesFeld>(entity =>
        {
            entity.HasKey(e => e.KKundeEigenesFeld).HasName("PK_Kunde_tKundeEigenesFeld");

            entity.ToTable("tKundeEigenesFeld", "Kunde");

            entity.HasIndex(e => new { e.KAttribut, e.KKunde }, "UQ_Kunde_tKundeEigenesFeld_kAttribut_kKunde").IsUnique();

            entity.Property(e => e.KKundeEigenesFeld).HasColumnName("kKundeEigenesFeld");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CWertVarchar).HasColumnName("cWertVarchar");
            entity.Property(e => e.DWertDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dWertDateTime");
            entity.Property(e => e.FWertDecimal)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertDecimal");
            entity.Property(e => e.KAttribut).HasColumnName("kAttribut");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.NWertInt).HasColumnName("nWertInt");

            entity.HasOne(d => d.KAttributNavigation).WithMany(p => p.TKundeEigenesFelds)
                .HasForeignKey(d => d.KAttribut)
                .HasConstraintName("FK_Kunde_tKundeEigenesFeld_kAttribut");
        });

        modelBuilder.Entity<TKundeKategorieRabatt>(entity =>
        {
            entity.HasKey(e => e.KKundeKategorieRabatt).HasName("PK_Kunde_tKundeKategorieRabatt");

            entity.ToTable("tKundeKategorieRabatt", "Kunde");

            entity.Property(e => e.KKundeKategorieRabatt).HasColumnName("kKundeKategorieRabatt");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.FRabatt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabatt");
            entity.Property(e => e.KKategorie).HasColumnName("kKategorie");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
        });

        modelBuilder.Entity<TKundeLabel>(entity =>
        {
            entity.HasKey(e => new { e.KKunde, e.KLabel }).HasName("PK_dbo_tKundeLabel");

            entity.ToTable("tKundeLabel");

            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KLabel).HasColumnName("kLabel");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
        });

        modelBuilder.Entity<TKundeSuche>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tKunde_suche");

            entity.HasIndex(e => new { e.CValue, e.NId }, "IX_tkunde_suche_cValue_nId_include_kKunde");

            entity.HasIndex(e => e.KKunde, "IX_tkunde_suche_kKunde");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CValue)
                .HasMaxLength(255)
                .HasColumnName("cValue");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.NId).HasColumnName("nId");
        });

        modelBuilder.Entity<TKundenDrucktext>(entity =>
        {
            entity.HasKey(e => e.KKundenDrucktext).HasName("PK_dbo_tKundenDrucktext");

            entity.ToTable("tKundenDrucktext");

            entity.Property(e => e.KKundenDrucktext).HasColumnName("kKundenDrucktext");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
        });

        modelBuilder.Entity<TKundenDrucktextSprache>(entity =>
        {
            entity.HasKey(e => new { e.KKundenDrucktext, e.KSprache }).HasName("PK_dbo_tKundenDrucktextSprache");

            entity.ToTable("tKundenDrucktextSprache");

            entity.Property(e => e.KKundenDrucktext).HasColumnName("kKundenDrucktext");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAngebotstext).HasColumnName("cAngebotstext");
            entity.Property(e => e.CAuftragstext).HasColumnName("cAuftragstext");
            entity.Property(e => e.CGutschrifttext).HasColumnName("cGutschrifttext");
            entity.Property(e => e.CLieferscheintext).HasColumnName("cLieferscheintext");
            entity.Property(e => e.CRechnungstext).HasColumnName("cRechnungstext");
        });

        modelBuilder.Entity<TKundenGruppe>(entity =>
        {
            entity.HasKey(e => e.KKundenGruppe).HasName("PK_dbo_tKundenGruppe");

            entity.ToTable("tKundenGruppe", tb =>
                {
                    tb.HasTrigger("jtlActionValidator_tKundenGruppe");
                    tb.HasTrigger("tgr_tKundenGruppe_INSUP");
                    tb.HasTrigger("tgr_tkundengruppe_DELETE");
                });

            entity.Property(e => e.KKundenGruppe)
                .ValueGeneratedNever()
                .HasColumnName("kKundenGruppe");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.FRabatt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabatt");
            entity.Property(e => e.KKundenDrucktext).HasColumnName("kKundenDrucktext");
            entity.Property(e => e.NNettoPreise).HasColumnName("nNettoPreise");
            entity.Property(e => e.NRabattVeraendert).HasColumnName("nRabattVeraendert");
            entity.Property(e => e.NShopLogin).HasColumnName("nShopLogin");
            entity.Property(e => e.NStandard).HasColumnName("nStandard");
        });

        modelBuilder.Entity<TKundenGruppeAttribute>(entity =>
        {
            entity.HasKey(e => e.KKundenGruppeAttribute).HasName("PK_dbo_tKundenGruppeAttribute");

            entity.ToTable("tKundenGruppeAttribute", tb =>
                {
                    tb.HasTrigger("tgr_tKundenGruppeAttribute_DEL");
                    tb.HasTrigger("tgr_tKundenGruppeAttribute_INSUP");
                });

            entity.Property(e => e.KKundenGruppeAttribute)
                .ValueGeneratedNever()
                .HasColumnName("kKundenGruppeAttribute");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CValue)
                .HasMaxLength(255)
                .HasColumnName("cValue");
            entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");
        });

        modelBuilder.Entity<TKundenGruppeSprache>(entity =>
        {
            entity.HasKey(e => new { e.KKundenGruppe, e.KSprache }).HasName("PK_dbo_tKundenGruppeSprache");

            entity.ToTable("tKundenGruppeSprache", tb => tb.HasTrigger("tgr_tKundenGruppeSprache_Connector"));

            entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
        });

        modelBuilder.Entity<TKundenKategorie>(entity =>
        {
            entity.HasKey(e => e.KKundenKategorie).HasName("PK_dbo_tKundenKategorie");

            entity.ToTable("tKundenKategorie");

            entity.Property(e => e.KKundenKategorie)
                .ValueGeneratedNever()
                .HasColumnName("kKundenKategorie");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(128)
                .HasColumnName("cName");
        });

        modelBuilder.Entity<TKundenRankingGlobal>(entity =>
        {
            entity.HasKey(e => new { e.KKunde, e.NType, e.KShop, e.NPlattform }).HasName("PK_dbo_tKundenRankingGlobal");

            entity.ToTable("tKundenRankingGlobal");

            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.NType).HasColumnName("nType");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NPlattform).HasColumnName("nPlattform");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DStand)
                .HasColumnType("datetime")
                .HasColumnName("dStand");
            entity.Property(e => e.DVon)
                .HasColumnType("datetime")
                .HasColumnName("dVon");
            entity.Property(e => e.NAnteilProzent)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nAnteilProzent");
            entity.Property(e => e.NPauschal)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nPauschal");
            entity.Property(e => e.NRang).HasColumnName("nRang");
            entity.Property(e => e.NRangMax).HasColumnName("nRangMax");
        });

        modelBuilder.Entity<TKundenRankingZeitraum>(entity =>
        {
            entity.HasKey(e => new { e.KKunde, e.NZeitraum, e.DVon, e.NType, e.KShop, e.NPlattform }).HasName("PK_dbo_tKundenRankingZeitraum");

            entity.ToTable("tKundenRankingZeitraum");

            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.NZeitraum).HasColumnName("nZeitraum");
            entity.Property(e => e.DVon)
                .HasColumnType("datetime")
                .HasColumnName("dVon");
            entity.Property(e => e.NType).HasColumnName("nType");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NPlattform).HasColumnName("nPlattform");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DStand)
                .HasColumnType("datetime")
                .HasColumnName("dStand");
            entity.Property(e => e.NAnteilProzent)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nAnteilProzent");
            entity.Property(e => e.NPauschal)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nPauschal");
            entity.Property(e => e.NRang).HasColumnName("nRang");
            entity.Property(e => e.NRangMax).HasColumnName("nRangMax");
        });

        modelBuilder.Entity<TKundenSperre>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tKundenSperre");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
        });

        modelBuilder.Entity<TLabel>(entity =>
        {
            entity.HasKey(e => e.KLabel).HasName("PK_dbo_tLabel");

            entity.ToTable("tLabel", tb =>
                {
                    tb.HasTrigger("tgr_tLabel_DEL");
                    tb.HasTrigger("tgr_tLabel_INSUP");
                });

            entity.Property(e => e.KLabel).HasColumnName("kLabel");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CColor)
                .HasMaxLength(7)
                .HasColumnName("cColor");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<TLabelBenutzergruppeRechte>(entity =>
        {
            entity.HasKey(e => e.KLabelBenutzergruppeRechte).HasName("PK_Ticketsystem_tLabelBenutzergruppeRechte");

            entity.ToTable("tLabelBenutzergruppeRechte", "Ticketsystem");

            entity.Property(e => e.KLabelBenutzergruppeRechte).HasColumnName("kLabelBenutzergruppeRechte");
            entity.Property(e => e.KLabel).HasColumnName("kLabel");
            entity.Property(e => e.KRechtBenutzerGruppe).HasColumnName("kRechtBenutzerGruppe");
            entity.Property(e => e.NIstSichtbar).HasColumnName("nIstSichtbar");

            entity.HasOne(d => d.KLabelNavigation).WithMany(p => p.TLabelBenutzergruppeRechtes)
                .HasForeignKey(d => d.KLabel)
                .HasConstraintName("FK_Ticketsystem_tLabelBenutzergruppeRechte_kLabel");
        });

        modelBuilder.Entity<TLagerArtikel>(entity =>
        {
            entity.HasKey(e => e.KLagerArtikel).HasName("PK_dbo_tLagerArtikel");

            entity.ToTable("tLagerArtikel");

            entity.Property(e => e.KLagerArtikel).HasColumnName("kLagerArtikel");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBeschreibung1)
                .HasMaxLength(64)
                .HasColumnName("cBeschreibung1");
            entity.Property(e => e.CBeschreibung2)
                .HasMaxLength(64)
                .HasColumnName("cBeschreibung2");
            entity.Property(e => e.CSeriennr)
                .HasMaxLength(128)
                .HasColumnName("cSeriennr");
            entity.Property(e => e.FEk)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEK");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");
            entity.Property(e => e.KLager).HasColumnName("kLager");
            entity.Property(e => e.KLagerOrt).HasColumnName("kLagerOrt");
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.KLieferantenbestellung).HasColumnName("kLieferantenbestellung");
            entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");
            entity.Property(e => e.KPicklistePos).HasColumnName("kPicklistePos");
            entity.Property(e => e.KRmretourePos).HasColumnName("kRMRetourePos");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
        });

        modelBuilder.Entity<TLagerbestandBackup>(entity =>
        {
            entity.HasKey(e => e.KArtikel).HasName("PK_dbo_tLagerbestandBackup");

            entity.ToTable("tLagerbestandBackup");

            entity.Property(e => e.KArtikel)
                .ValueGeneratedNever()
                .HasColumnName("kArtikel");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CVersion)
                .HasMaxLength(8)
                .HasColumnName("cVersion");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.FLagerbestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLagerbestand");
        });

        modelBuilder.Entity<TLagerbestandShop>(entity =>
        {
            entity.HasKey(e => new { e.KShop, e.CArtNr }).HasName("PK_dbo_tLagerbestandShop");

            entity.ToTable("tLagerbestandShop");

            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.DBestandsdatum)
                .HasColumnType("datetime")
                .HasColumnName("dBestandsdatum");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
        });

        modelBuilder.Entity<TLagerbestandVirtuell>(entity =>
        {
            entity.HasKey(e => e.KLagerbestandVirtuell).HasName("PK_dbo_tLagerbestandVirtuell");

            entity.ToTable("tLagerbestandVirtuell");

            entity.HasIndex(e => new { e.KArtikel, e.IModuleId }, "UQ_dbo_tLagerbestandVirtuell_iModuleId_kArtikel").IsUnique();

            entity.Property(e => e.KLagerbestandVirtuell).HasColumnName("kLagerbestandVirtuell");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DGeandert)
                .HasColumnType("datetime")
                .HasColumnName("dGeandert");
            entity.Property(e => e.FBestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBestand");
            entity.Property(e => e.FZulauf)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZulauf");
            entity.Property(e => e.IModuleId).HasColumnName("iModuleId");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.NLagerBeachten).HasColumnName("nLagerBeachten");
        });

        modelBuilder.Entity<TLandSteuersatz>(entity =>
        {
            entity.HasKey(e => new { e.CIsoland, e.CKuerzelBundesland }).HasName("PK_dbo_tLandSteuersatz");

            entity.ToTable("tLandSteuersatz");

            entity.Property(e => e.CIsoland)
                .HasMaxLength(5)
                .HasColumnName("cISOLand");
            entity.Property(e => e.CKuerzelBundesland)
                .HasMaxLength(5)
                .HasColumnName("cKuerzelBundesland");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.FErmaessigterSatz)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fErmaessigterSatz");
            entity.Property(e => e.FErmaessigterSatzNiedrig)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fErmaessigterSatzNiedrig");
            entity.Property(e => e.FLieferschwelle)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLieferschwelle");
            entity.Property(e => e.FNormalerSatz)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fNormalerSatz");
            entity.Property(e => e.FStarkErmaessigterSatz)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fStarkErmaessigterSatz");
            entity.Property(e => e.FZwischensatz)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZwischensatz");
        });

        modelBuilder.Entity<TLaufendeNummern>(entity =>
        {
            entity.HasKey(e => e.KLaufendeNummer).HasName("PK_dbo_tLaufendeNummern");

            entity.ToTable("tLaufendeNummern");

            entity.Property(e => e.KLaufendeNummer).HasColumnName("kLaufendeNummer");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAnzeigename)
                .HasMaxLength(100)
                .HasColumnName("cAnzeigename");
            entity.Property(e => e.CColumn)
                .HasMaxLength(100)
                .HasColumnName("cColumn");
            entity.Property(e => e.CName)
                .HasMaxLength(100)
                .HasColumnName("cName");
            entity.Property(e => e.CPrefix)
                .HasMaxLength(20)
                .HasColumnName("cPrefix");
            entity.Property(e => e.CSuffix)
                .HasMaxLength(20)
                .HasColumnName("cSuffix");
            entity.Property(e => e.CTable)
                .HasMaxLength(100)
                .HasColumnName("cTable");
            entity.Property(e => e.CTypeColumn)
                .HasMaxLength(20)
                .HasColumnName("cTypeColumn");
            entity.Property(e => e.CTypeValue)
                .HasMaxLength(4)
                .HasColumnName("cTypeValue");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.NNummer).HasColumnName("nNummer");
        });

        modelBuilder.Entity<TLfdnrKunde>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tLfdnrKunde", tb => tb.HasTrigger("tgr_tLfdnrKunde_INSUPDEL"));

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.NNummer).HasColumnName("nNummer");
        });

        modelBuilder.Entity<TLhm>(entity =>
        {
            entity.HasKey(e => e.KLhm).HasName("PK_dbo_tLHM");

            entity.ToTable("tLHM", tb => tb.HasTrigger("jtlActionValidator_tLHM"));

            entity.HasIndex(e => e.KLhmstatus, "IX_tLHM_kLHMStatus");

            entity.HasIndex(e => new { e.CLhmid, e.KWarenlager }, "UQ_dbo_tLHM_cLHMId_kWarenlager").IsUnique();

            entity.Property(e => e.KLhm).HasColumnName("kLHM");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CLhmid)
                .HasMaxLength(30)
                .HasColumnName("cLHMId");
            entity.Property(e => e.DBearbeitet)
                .HasColumnType("datetime")
                .HasColumnName("dBearbeitet");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KLhmstatus).HasColumnName("kLHMStatus");
            entity.Property(e => e.KLhmtyp).HasColumnName("kLHMTyp");
            entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.NSperre).HasColumnName("nSperre");
        });

        modelBuilder.Entity<TLhmattribut>(entity =>
        {
            entity.HasKey(e => e.KLhmattribut).HasName("PK_dbo_tLHMAttribut");

            entity.ToTable("tLHMAttribut");

            entity.Property(e => e.KLhmattribut).HasColumnName("kLHMAttribut");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAttribut)
                .HasMaxLength(200)
                .HasColumnName("cAttribut");
            entity.Property(e => e.KLhm).HasColumnName("kLHM");
        });

        modelBuilder.Entity<TLhmstatus>(entity =>
        {
            entity.HasKey(e => e.KLhmstatus).HasName("PK_dbo_tLHMStatus");

            entity.ToTable("tLHMStatus");

            entity.HasIndex(e => new { e.KBestellung, e.NStatus }, "IX_tLHMStatus_kBestellung_nStatus");

            entity.Property(e => e.KLhmstatus).HasColumnName("kLHMStatus");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DZeitstempel)
                .HasColumnType("datetime")
                .HasColumnName("dZeitstempel");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KLhm).HasColumnName("kLHM");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<TLhmtyp>(entity =>
        {
            entity.HasKey(e => e.KLhmtyp).HasName("PK_dbo_tLHMTyp");

            entity.ToTable("tLHMTyp");

            entity.Property(e => e.KLhmtyp)
                .ValueGeneratedNever()
                .HasColumnName("kLHMTyp");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
        });

        modelBuilder.Entity<TLiefArtikelPrei>(entity =>
        {
            entity.HasKey(e => e.KLiefArtikelPreis).HasName("PK_dbo_tLiefArtikelPreis");

            entity.ToTable("tLiefArtikelPreis", tb => tb.HasTrigger("tgr_tliefartikelpreis_INSUP"));

            entity.HasIndex(e => e.KLiefArtikel, "IX_tLiefArtikelPreis_kLiefArtikel");

            entity.Property(e => e.KLiefArtikelPreis).HasColumnName("kLiefArtikelPreis");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.FAb)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAb");
            entity.Property(e => e.FPreisNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPreisNetto");
            entity.Property(e => e.FProzentualerRabatt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fProzentualerRabatt");
            entity.Property(e => e.KLiefArtikel).HasColumnName("kLiefArtikel");
            entity.Property(e => e.NUseProzentualerRabatt).HasColumnName("nUseProzentualerRabatt");
        });

        modelBuilder.Entity<TLieferInfoVersand>(entity =>
        {
            entity.HasKey(e => e.KBestellung).HasName("PK_dbo_tLieferInfoVersand");

            entity.ToTable("tLieferInfoVersand");

            entity.Property(e => e.KBestellung)
                .ValueGeneratedNever()
                .HasColumnName("kBestellung");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
            entity.Property(e => e.NStatusBestellt).HasColumnName("nStatusBestellt");
            entity.Property(e => e.NStatusBestelltBlockiert).HasColumnName("nStatusBestelltBlockiert");
            entity.Property(e => e.NStatusEigen).HasColumnName("nStatusEigen");
            entity.Property(e => e.NStatusEigenBestellt).HasColumnName("nStatusEigenBestellt");
            entity.Property(e => e.NStatusEigenBstelltBlockiert).HasColumnName("nStatusEigenBstelltBlockiert");
        });

        modelBuilder.Entity<TLieferStatus>(entity =>
        {
            entity.HasKey(e => new { e.KLieferStatus, e.KSprache }).HasName("PK_dbo_tLieferStatus");

            entity.ToTable("tLieferStatus", tb => tb.HasTrigger("tgr_tLieferStatus_INSUP"));

            entity.Property(e => e.KLieferStatus).HasColumnName("kLieferStatus");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
        });

        modelBuilder.Entity<TLieferadresse>(entity =>
        {
            entity.HasKey(e => new { e.KInetBestellung, e.KShop }).HasName("PK_DbeS_tLieferadresse");

            entity.ToTable("tLieferadresse", "DbeS");

            entity.Property(e => e.KInetBestellung).HasColumnName("kInetBestellung");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAdressZusatz)
                .HasMaxLength(255)
                .HasColumnName("cAdressZusatz");
            entity.Property(e => e.CAnrede)
                .HasMaxLength(30)
                .HasColumnName("cAnrede");
            entity.Property(e => e.CBundesland)
                .HasMaxLength(255)
                .HasColumnName("cBundesland");
            entity.Property(e => e.CFax)
                .HasMaxLength(45)
                .HasColumnName("cFax");
            entity.Property(e => e.CFirma)
                .HasMaxLength(128)
                .HasColumnName("cFirma");
            entity.Property(e => e.CLand)
                .HasMaxLength(255)
                .HasColumnName("cLand");
            entity.Property(e => e.CLandIso)
                .HasMaxLength(5)
                .HasColumnName("cLandISO");
            entity.Property(e => e.CMail)
                .HasMaxLength(255)
                .HasColumnName("cMail");
            entity.Property(e => e.CMobil)
                .HasMaxLength(30)
                .HasColumnName("cMobil");
            entity.Property(e => e.CNachname)
                .HasMaxLength(255)
                .HasColumnName("cNachname");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPlz)
                .HasMaxLength(20)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTel)
                .HasMaxLength(45)
                .HasColumnName("cTel");
            entity.Property(e => e.CTitel)
                .HasMaxLength(64)
                .HasColumnName("cTitel");
            entity.Property(e => e.CVorname)
                .HasMaxLength(255)
                .HasColumnName("cVorname");
            entity.Property(e => e.CZusatz)
                .HasMaxLength(60)
                .HasColumnName("cZusatz");
            entity.Property(e => e.KInetKunde).HasColumnName("kInetKunde");
            entity.Property(e => e.KLieferadresse).HasColumnName("kLieferadresse");
        });

        modelBuilder.Entity<TLieferantErlaubteLieferlaender>(entity =>
        {
            entity.HasKey(e => new { e.KLieferant, e.CIso }).HasName("PK_dbo_tLieferantErlaubteLieferlaender");

            entity.ToTable("tLieferantErlaubteLieferlaender");

            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.CIso)
                .HasMaxLength(5)
                .HasColumnName("cIso");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
        });

        modelBuilder.Entity<TLieferantRabattStaffel>(entity =>
        {
            entity.HasKey(e => e.KLieferantStaffelPreis).HasName("PK_dbo_tLieferantRabattStaffel");

            entity.ToTable("tLieferantRabattStaffel");

            entity.Property(e => e.KLieferantStaffelPreis).HasColumnName("kLieferantStaffelPreis");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.FAb)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAb");
            entity.Property(e => e.FRabatt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabatt");
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
        });

        modelBuilder.Entity<TLieferantSperre>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tLieferantSperre");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
        });

        modelBuilder.Entity<TLieferantWarenlager>(entity =>
        {
            entity.HasKey(e => e.KLieferantWarenlager).HasName("PK_FulfillmentNetwork_tLieferantWarenlager");

            entity.ToTable("tLieferantWarenlager", "FulfillmentNetwork");

            entity.HasIndex(e => new { e.KLieferant, e.KWarenlager }, "UQ_FulfillmentNetwork_tLieferantWarenlager_kLieferant_kWarenlager").IsUnique();

            entity.Property(e => e.KLieferantWarenlager).HasColumnName("kLieferantWarenlager");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
        });

        modelBuilder.Entity<TLieferantenBestellung>(entity =>
        {
            entity.HasKey(e => e.KLieferantenBestellung).HasName("PK_dbo_tLieferantenBestellung");

            entity.ToTable("tLieferantenBestellung", tb => tb.HasTrigger("tgr_tlieferantenBestellung_INSUPDEL"));

            entity.HasIndex(e => e.NStatus, "IX_dbo_tLieferantenbestellung_nStatus").HasFilter("([nStatus]>=(20) AND [nStatus]<=(50))");

            entity.HasIndex(e => e.KFirma, "IX_tLieferantenBestellung_kFirma");

            entity.HasIndex(e => e.KKunde, "IX_tLieferantenBestellung_kKunde");

            entity.HasIndex(e => e.KLieferant, "IX_tLieferantenBestellung_kLieferant");

            entity.HasIndex(e => e.KLieferantenBestellungLa, "IX_tLieferantenBestellung_kLieferantenBestellungLA");

            entity.HasIndex(e => e.KLieferantenBestellungLieferant, "IX_tLieferantenBestellung_kLieferantenBestellungLieferant");

            entity.HasIndex(e => e.KLieferantenBestellungRa, "IX_tLieferantenBestellung_kLieferantenBestellungRA");

            entity.HasIndex(e => e.NStatus, "IX_tLieferantenBestellung_nStatus");

            entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBezugsAuftragsNummer)
                .HasMaxLength(255)
                .HasColumnName("cBezugsAuftragsNummer");
            entity.Property(e => e.CDruckAnmerkung).HasColumnName("cDruckAnmerkung");
            entity.Property(e => e.CEigeneBestellnummer)
                .HasMaxLength(255)
                .HasColumnName("cEigeneBestellnummer");
            entity.Property(e => e.CFremdbelegnummer)
                .HasMaxLength(255)
                .HasColumnName("cFremdbelegnummer");
            entity.Property(e => e.CInternerKommentar).HasColumnName("cInternerKommentar");
            entity.Property(e => e.CWaehrungIso)
                .HasMaxLength(5)
                .HasColumnName("cWaehrungISO");
            entity.Property(e => e.DAngemahnt)
                .HasColumnType("datetime")
                .HasColumnName("dAngemahnt");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DExportiert)
                .HasColumnType("datetime")
                .HasColumnName("dExportiert");
            entity.Property(e => e.DGedruckt)
                .HasColumnType("datetime")
                .HasColumnName("dGedruckt");
            entity.Property(e => e.DGefaxt)
                .HasColumnType("datetime")
                .HasColumnName("dGefaxt");
            entity.Property(e => e.DGemailt)
                .HasColumnType("datetime")
                .HasColumnName("dGemailt");
            entity.Property(e => e.DInBearbeitung)
                .HasColumnType("datetime")
                .HasColumnName("dInBearbeitung");
            entity.Property(e => e.DLieferdatum)
                .HasColumnType("datetime")
                .HasColumnName("dLieferdatum");
            entity.Property(e => e.FFaktor)
                .HasDefaultValueSql("((1))")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fFaktor");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KLager).HasColumnName("kLager");
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.KLieferantenBestellungLa).HasColumnName("kLieferantenBestellungLA");
            entity.Property(e => e.KLieferantenBestellungLieferant).HasColumnName("kLieferantenBestellungLieferant");
            entity.Property(e => e.KLieferantenBestellungRa).HasColumnName("kLieferantenBestellungRA");
            entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.NAngelegtDurchWms).HasColumnName("nAngelegtDurchWMS");
            entity.Property(e => e.NBestaetigt).HasColumnName("nBestaetigt");
            entity.Property(e => e.NDeleted).HasColumnName("nDeleted");
            entity.Property(e => e.NDropShipping).HasColumnName("nDropShipping");
            entity.Property(e => e.NManuellAbgeschlossen).HasColumnName("nManuellAbgeschlossen");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<TLieferantenBestellungErinnerung>(entity =>
        {
            entity.HasKey(e => e.KLieferantenBestellungErinnerung).HasName("PK_dbo_tLieferantenBestellungErinnerung");

            entity.ToTable("tLieferantenBestellungErinnerung");

            entity.HasIndex(e => e.KLieferantenBestellung, "IX_tLieferantenBestellungErinnerung_kLieferantenBestellung");

            entity.Property(e => e.KLieferantenBestellungErinnerung).HasColumnName("kLieferantenBestellungErinnerung");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DDatum)
                .HasColumnType("datetime")
                .HasColumnName("dDatum");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");
        });

        modelBuilder.Entity<TLieferantenBestellungErinnerungPo>(entity =>
        {
            entity.HasKey(e => new { e.KLieferantenBestellungErinnerung, e.KLieferantenBestellung, e.KLieferantenBestellungPos }).HasName("PK_dbo_tLieferantenBestellungErinnerungPos");

            entity.ToTable("tLieferantenBestellungErinnerungPos");

            entity.HasIndex(e => e.KLieferantenBestellung, "IX_tLieferantenBestellungErinnerungPos_kLieferantenBestellung");

            entity.HasIndex(e => e.KLieferantenBestellungPos, "IX_tLieferantenBestellungErinnerungPos_kLieferantenBestellungPos");

            entity.Property(e => e.KLieferantenBestellungErinnerung).HasColumnName("kLieferantenBestellungErinnerung");
            entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");
            entity.Property(e => e.KLieferantenBestellungPos).HasColumnName("kLieferantenBestellungPos");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
        });

        modelBuilder.Entity<TLieferantenBestellungLa>(entity =>
        {
            entity.HasKey(e => e.KLieferantenBestellungLa).HasName("PK_dbo_tLieferantenBestellungLA");

            entity.ToTable("tLieferantenBestellungLA");

            entity.Property(e => e.KLieferantenBestellungLa).HasColumnName("kLieferantenBestellungLA");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAdresszusatz)
                .HasMaxLength(255)
                .HasColumnName("cAdresszusatz");
            entity.Property(e => e.CAnrede)
                .HasMaxLength(255)
                .HasColumnName("cAnrede");
            entity.Property(e => e.CBundesland)
                .HasMaxLength(255)
                .HasColumnName("cBundesland");
            entity.Property(e => e.CFax)
                .HasMaxLength(255)
                .HasColumnName("cFax");
            entity.Property(e => e.CFirma)
                .HasMaxLength(255)
                .HasColumnName("cFirma");
            entity.Property(e => e.CFirmenZusatz)
                .HasMaxLength(255)
                .HasColumnName("cFirmenZusatz");
            entity.Property(e => e.CKundennummer)
                .HasMaxLength(255)
                .HasColumnName("cKundennummer");
            entity.Property(e => e.CLandIso)
                .HasMaxLength(5)
                .HasColumnName("cLandISO");
            entity.Property(e => e.CMail)
                .HasMaxLength(255)
                .HasColumnName("cMail");
            entity.Property(e => e.CMobil)
                .HasMaxLength(255)
                .HasColumnName("cMobil");
            entity.Property(e => e.CNachname)
                .HasMaxLength(255)
                .HasColumnName("cNachname");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPlz)
                .HasMaxLength(255)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTel)
                .HasMaxLength(255)
                .HasColumnName("cTel");
            entity.Property(e => e.CTitel)
                .HasMaxLength(255)
                .HasColumnName("cTitel");
            entity.Property(e => e.CVorname)
                .HasMaxLength(255)
                .HasColumnName("cVorname");
        });

        modelBuilder.Entity<TLieferantenBestellungLieferant>(entity =>
        {
            entity.HasKey(e => e.KLieferantenBestellungLieferant).HasName("PK_dbo_tLieferantenBestellungLieferant");

            entity.ToTable("tLieferantenBestellungLieferant");

            entity.Property(e => e.KLieferantenBestellungLieferant).HasColumnName("kLieferantenBestellungLieferant");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAdresszusatz)
                .HasMaxLength(255)
                .HasColumnName("cAdresszusatz");
            entity.Property(e => e.CAnsprechpartnerAnrede)
                .HasMaxLength(255)
                .HasColumnName("cAnsprechpartnerAnrede");
            entity.Property(e => e.CAnsprechpartnerName)
                .HasMaxLength(255)
                .HasColumnName("cAnsprechpartnerName");
            entity.Property(e => e.CAnsprechpartnerVorname)
                .HasMaxLength(255)
                .HasColumnName("cAnsprechpartnerVorname");
            entity.Property(e => e.CBundesland)
                .HasMaxLength(255)
                .HasColumnName("cBundesland");
            entity.Property(e => e.CFax)
                .HasMaxLength(255)
                .HasColumnName("cFax");
            entity.Property(e => e.CFirma)
                .HasMaxLength(255)
                .HasColumnName("cFirma");
            entity.Property(e => e.CFirmenZusatz)
                .HasMaxLength(255)
                .HasColumnName("cFirmenZusatz");
            entity.Property(e => e.CLandIso)
                .HasMaxLength(5)
                .HasColumnName("cLandISO");
            entity.Property(e => e.CMail)
                .HasMaxLength(255)
                .HasColumnName("cMail");
            entity.Property(e => e.CMobil)
                .HasMaxLength(255)
                .HasColumnName("cMobil");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPlz)
                .HasMaxLength(255)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTel)
                .HasMaxLength(255)
                .HasColumnName("cTel");
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
        });

        modelBuilder.Entity<TLieferantenBestellungLock>(entity =>
        {
            entity.HasKey(e => new { e.KLieferantenBestellung, e.KBenutzer, e.NSperreDurch }).HasName("PK_dbo_tLieferantenBestellungLock");

            entity.ToTable("tLieferantenBestellungLock");

            entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.NSperreDurch).HasColumnName("nSperreDurch");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DZeitstempel)
                .HasColumnType("datetime")
                .HasColumnName("dZeitstempel");
        });

        modelBuilder.Entity<TLieferantenBestellungPo>(entity =>
        {
            entity.HasKey(e => e.KLieferantenBestellungPos).HasName("PK_dbo_tLieferantenBestellungPos");

            entity.ToTable("tLieferantenBestellungPos", tb => tb.HasTrigger("tgr_tlieferantenBestellungPos_INSUPDEL"));

            entity.HasIndex(e => new { e.KArtikel, e.FAnzahlOffen }, "IX_dbo_tLieferantenBestellungPos_kArtikel_fAnzahlOffen");

            entity.HasIndex(e => e.FAnzahlOffen, "IX_tLieferantenBestellungPos_fAnzahlOffen_INCL").HasFilter("([fAnzahlOffen]>(0))");

            entity.HasIndex(e => e.KArtikel, "IX_tLieferantenBestellungPos_kArtikel");

            entity.HasIndex(e => e.KLieferantenBestellung, "IX_tLieferantenBestellungPos_kLieferantenBestellung");

            entity.HasIndex(e => e.NPosTyp, "IX_tLieferantenBestellungPos_nPosTyp");

            entity.Property(e => e.KLieferantenBestellungPos).HasColumnName("kLieferantenBestellungPos");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CArtNr)
                .HasMaxLength(255)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CHinweis)
                .HasMaxLength(2000)
                .HasColumnName("cHinweis");
            entity.Property(e => e.CLieferantenArtNr)
                .HasMaxLength(255)
                .HasColumnName("cLieferantenArtNr");
            entity.Property(e => e.CLieferantenBezeichnung)
                .HasMaxLength(255)
                .HasColumnName("cLieferantenBezeichnung");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CNameLieferant)
                .HasMaxLength(255)
                .HasColumnName("cNameLieferant");
            entity.Property(e => e.CVpeeinheit)
                .HasMaxLength(255)
                .HasColumnName("cVPEEinheit");
            entity.Property(e => e.DLieferdatum)
                .HasColumnType("datetime")
                .HasColumnName("dLieferdatum");
            entity.Property(e => e.FAnzahlOffen)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahlOffen");
            entity.Property(e => e.FEknetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEKNetto");
            entity.Property(e => e.FMenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMenge");
            entity.Property(e => e.FMengeGeliefert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMengeGeliefert");
            entity.Property(e => e.FUst)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fUST");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");
            entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");
            entity.Property(e => e.NLiefertage).HasColumnName("nLiefertage");
            entity.Property(e => e.NPosTyp).HasColumnName("nPosTyp");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NVpemenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nVPEMenge");
        });

        modelBuilder.Entity<TLieferantenBestellungRa>(entity =>
        {
            entity.HasKey(e => e.KLieferantenBestellungRa).HasName("PK_dbo_tLieferantenBestellungRA");

            entity.ToTable("tLieferantenBestellungRA");

            entity.Property(e => e.KLieferantenBestellungRa).HasColumnName("kLieferantenBestellungRA");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAdresszusatz)
                .HasMaxLength(255)
                .HasColumnName("cAdresszusatz");
            entity.Property(e => e.CAnrede)
                .HasMaxLength(255)
                .HasColumnName("cAnrede");
            entity.Property(e => e.CBundesland)
                .HasMaxLength(255)
                .HasColumnName("cBundesland");
            entity.Property(e => e.CFax)
                .HasMaxLength(255)
                .HasColumnName("cFax");
            entity.Property(e => e.CFirma)
                .HasMaxLength(255)
                .HasColumnName("cFirma");
            entity.Property(e => e.CFirmenZusatz)
                .HasMaxLength(255)
                .HasColumnName("cFirmenZusatz");
            entity.Property(e => e.CLandIso)
                .HasMaxLength(5)
                .HasColumnName("cLandISO");
            entity.Property(e => e.CMail)
                .HasMaxLength(255)
                .HasColumnName("cMail");
            entity.Property(e => e.CMobil)
                .HasMaxLength(255)
                .HasColumnName("cMobil");
            entity.Property(e => e.CNachname)
                .HasMaxLength(255)
                .HasColumnName("cNachname");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPlz)
                .HasMaxLength(255)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTel)
                .HasMaxLength(255)
                .HasColumnName("cTel");
            entity.Property(e => e.CTitel)
                .HasMaxLength(255)
                .HasColumnName("cTitel");
            entity.Property(e => e.CVorname)
                .HasMaxLength(255)
                .HasColumnName("cVorname");
        });

        modelBuilder.Entity<TLieferantenRankingGlobal>(entity =>
        {
            entity.HasKey(e => new { e.KLieferant, e.NType }).HasName("PK_dbo_tLieferantenRankingGlobal");

            entity.ToTable("tLieferantenRankingGlobal");

            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.NType).HasColumnName("nType");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DStand)
                .HasColumnType("datetime")
                .HasColumnName("dStand");
            entity.Property(e => e.DVon)
                .HasColumnType("datetime")
                .HasColumnName("dVon");
            entity.Property(e => e.NAnteilProzent)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nAnteilProzent");
            entity.Property(e => e.NPauschal)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nPauschal");
            entity.Property(e => e.NRang).HasColumnName("nRang");
            entity.Property(e => e.NRangMax).HasColumnName("nRangMax");
        });

        modelBuilder.Entity<TLieferantenRankingZeitraum>(entity =>
        {
            entity.HasKey(e => new { e.KLieferant, e.NZeitraum, e.DVon, e.NType }).HasName("PK_dbo_tLieferantenRankingZeitraum");

            entity.ToTable("tLieferantenRankingZeitraum");

            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.NZeitraum).HasColumnName("nZeitraum");
            entity.Property(e => e.DVon)
                .HasColumnType("datetime")
                .HasColumnName("dVon");
            entity.Property(e => e.NType).HasColumnName("nType");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DStand)
                .HasColumnType("datetime")
                .HasColumnName("dStand");
            entity.Property(e => e.NAnteilProzent)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nAnteilProzent");
            entity.Property(e => e.NPauschal)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nPauschal");
            entity.Property(e => e.NRang).HasColumnName("nRang");
            entity.Property(e => e.NRangMax).HasColumnName("nRangMax");
        });

        modelBuilder.Entity<TLieferavi>(entity =>
        {
            entity.HasKey(e => e.KLieferavis).HasName("PK_dbo_tLieferavis");

            entity.ToTable("tLieferavis");

            entity.HasIndex(e => new { e.KLieferantenBestellung, e.CNummer }, "IX_tLieferavis_kLieferantenbestellung_cNummer");

            entity.Property(e => e.KLieferavis).HasColumnName("kLieferavis");
            entity.Property(e => e.CNotiz)
                .IsUnicode(false)
                .HasColumnName("cNotiz");
            entity.Property(e => e.CNummer)
                .HasMaxLength(512)
                .HasColumnName("cNummer");
            entity.Property(e => e.DErstellt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DLieferdatum)
                .HasColumnType("datetime")
                .HasColumnName("dLieferdatum");
            entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");

            entity.HasOne(d => d.KLieferantenBestellungNavigation).WithMany(p => p.TLieferavis)
                .HasForeignKey(d => d.KLieferantenBestellung)
                .HasConstraintName("FK_dbo_tLieferantenBestellung_kLieferantenBestellung");
        });

        modelBuilder.Entity<TLieferavisIdentifier>(entity =>
        {
            entity.HasKey(e => e.KLieferavisIdentifier).HasName("PK_dbo_kLieferavisIdentifier");

            entity.ToTable("tLieferavisIdentifier");

            entity.Property(e => e.KLieferavisIdentifier).HasColumnName("kLieferavisIdentifier");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CWert)
                .HasMaxLength(1024)
                .HasColumnName("cWert");
            entity.Property(e => e.KLieferavisPaket).HasColumnName("kLieferavisPaket");

            entity.HasOne(d => d.KLieferavisPaketNavigation).WithMany(p => p.TLieferavisIdentifiers)
                .HasForeignKey(d => d.KLieferavisPaket)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo_tLieferavisPaket_kPaket");
        });

        modelBuilder.Entity<TLieferavisPaket>(entity =>
        {
            entity.HasKey(e => e.KLieferavisPaket).HasName("PK_dbo_tPaket");

            entity.ToTable("tLieferavisPaket");

            entity.Property(e => e.KLieferavisPaket).HasColumnName("kLieferavisPaket");
            entity.Property(e => e.CNotiz).HasColumnName("cNotiz");
            entity.Property(e => e.CTrackingId)
                .HasMaxLength(512)
                .HasColumnName("cTrackingId");
            entity.Property(e => e.CTrackingUrl)
                .HasMaxLength(2048)
                .HasColumnName("cTrackingUrl");
            entity.Property(e => e.CVersanddienstleister)
                .HasMaxLength(512)
                .HasColumnName("cVersanddienstleister");
            entity.Property(e => e.DVersanddatum)
                .HasColumnType("datetime")
                .HasColumnName("dVersanddatum");
            entity.Property(e => e.DVoraussichtlichesLieferdatum)
                .HasColumnType("datetime")
                .HasColumnName("dVoraussichtlichesLieferdatum");
            entity.Property(e => e.FBreite)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBreite");
            entity.Property(e => e.FGewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGewicht");
            entity.Property(e => e.FHoehe)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fHoehe");
            entity.Property(e => e.FTiefe)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fTiefe");
            entity.Property(e => e.KLieferavis).HasColumnName("kLieferavis");
            entity.Property(e => e.NAnzahlFrachtstuecke).HasColumnName("nAnzahlFrachtstuecke");
            entity.Property(e => e.NFrachtart)
                .HasDefaultValueSql("((1))")
                .HasColumnName("nFrachtart");
            entity.Property(e => e.NPaketNummer).HasColumnName("nPaketNummer");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");

            entity.HasOne(d => d.KLieferavisNavigation).WithMany(p => p.TLieferavisPakets)
                .HasForeignKey(d => d.KLieferavis)
                .HasConstraintName("FK_dbo_tLieferavisPaket_kLieferavis");
        });

        modelBuilder.Entity<TLieferavisPosition>(entity =>
        {
            entity.HasKey(e => e.KLieferavisPosition).HasName("PK_dbo_tLieferavisArtikel");

            entity.ToTable("tLieferavisPosition");

            entity.Property(e => e.KLieferavisPosition).HasColumnName("kLieferavisPosition");
            entity.Property(e => e.CArtikelnummer)
                .HasMaxLength(100)
                .HasColumnName("cArtikelnummer");
            entity.Property(e => e.CCharge)
                .HasMaxLength(255)
                .HasColumnName("cCharge");
            entity.Property(e => e.CNotiz)
                .HasMaxLength(255)
                .HasColumnName("cNotiz");
            entity.Property(e => e.CSeriennummer)
                .HasMaxLength(255)
                .HasColumnName("cSeriennummer");
            entity.Property(e => e.DMhd)
                .HasColumnType("date")
                .HasColumnName("dMHD");
            entity.Property(e => e.FMenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMenge");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KLieferavis).HasColumnName("kLieferavis");
            entity.Property(e => e.NPaketNummer).HasColumnName("nPaketNummer");

            entity.HasOne(d => d.KLieferavisNavigation).WithMany(p => p.TLieferavisPositions)
                .HasForeignKey(d => d.KLieferavis)
                .HasConstraintName("FK_dbo_tLieferavis_kLieferavis");
        });

        modelBuilder.Entity<TLieferavisSeriennummer>(entity =>
        {
            entity.HasKey(e => e.KLieferavisSeriennummer).HasName("PK_dbo_tLieferavisSeriennummer");

            entity.ToTable("tLieferavisSeriennummer");

            entity.Property(e => e.KLieferavisSeriennummer).HasColumnName("kLieferavisSeriennummer");
            entity.Property(e => e.CSeriennummer)
                .HasMaxLength(255)
                .HasColumnName("cSeriennummer");
            entity.Property(e => e.KLieferavisPosition).HasColumnName("kLieferavisPosition");

            entity.HasOne(d => d.KLieferavisPositionNavigation).WithMany(p => p.TLieferavisSeriennummers)
                .HasForeignKey(d => d.KLieferavisPosition)
                .HasConstraintName("FK_dbo_tLieferavisSeriennummer_kLieferavisPosition");
        });

        modelBuilder.Entity<TLieferschein>(entity =>
        {
            entity.HasKey(e => e.KLieferschein).HasName("PK_dbo_tLieferschein");

            entity.ToTable("tLieferschein", tb => tb.HasTrigger("tgr_tLieferschein_INSUPDEL"));

            entity.HasIndex(e => e.DErstellt, "IX_dbo_tLieferschein_dErstellt");

            entity.HasIndex(e => e.KBestellung, "IX_tLieferschein_kBestellung");

            entity.HasIndex(e => e.KLieferantenBestellung, "IX_tLieferschein_kLieferantenBestellung");

            entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CHinweis)
                .HasMaxLength(255)
                .HasColumnName("cHinweis");
            entity.Property(e => e.CLieferscheinNr)
                .HasMaxLength(50)
                .HasColumnName("cLieferscheinNr");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DGedruckt)
                .HasColumnType("datetime")
                .HasColumnName("dGedruckt");
            entity.Property(e => e.DMailVersand)
                .HasColumnType("datetime")
                .HasColumnName("dMailVersand");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");
            entity.Property(e => e.KSessionId).HasColumnName("kSessionId");
            entity.Property(e => e.NFulfillment).HasColumnName("nFulfillment");
        });

        modelBuilder.Entity<TLieferscheinEckdaten>(entity =>
        {
            entity.HasKey(e => e.KLieferschein)
                .HasName("PK_dbo_tLieferscheinEckdaten")
                .IsClustered(false);

            entity.ToTable("tLieferscheinEckdaten");

            entity.HasIndex(e => new { e.DErstellt, e.KLieferschein }, "CIX_dbo_tLieferscheinEckdaten_dErstellt_kLieferschein")
                .IsUnique()
                .IsDescending(true, false)
                .IsClustered();

            entity.Property(e => e.KLieferschein)
                .ValueGeneratedNever()
                .HasColumnName("kLieferschein");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DVersendet)
                .HasColumnType("datetime")
                .HasColumnName("dVersendet");
            entity.Property(e => e.FArtikelGewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fArtikelGewicht");
            entity.Property(e => e.FVersandGewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVersandGewicht");
            entity.Property(e => e.KVersandArt).HasColumnName("kVersandArt");
            entity.Property(e => e.NAnzahlPakete).HasColumnName("nAnzahlPakete");
            entity.Property(e => e.NAnzahlVersendetePakete).HasColumnName("nAnzahlVersendetePakete");
            entity.Property(e => e.NRechnungStatus).HasColumnName("nRechnungStatus");
            entity.Property(e => e.NVersandStatus).HasColumnName("nVersandStatus");

            entity.HasOne(d => d.KLieferscheinNavigation).WithOne(p => p.TLieferscheinEckdaten)
                .HasForeignKey<TLieferscheinEckdaten>(d => d.KLieferschein)
                .HasConstraintName("FK_dbo_tLieferscheinEckdaten_kLieferschein");
        });

        modelBuilder.Entity<TLieferscheinPo>(entity =>
        {
            entity.HasKey(e => e.KLieferscheinPos).HasName("PK_dbo_tLieferscheinPos");

            entity.ToTable("tLieferscheinPos", tb => tb.HasTrigger("tgr_tlieferscheinpos_INSUPDEL"));

            entity.HasIndex(e => e.KBestellPos, "IX_tLieferscheinPos_kBestellPos");

            entity.HasIndex(e => new { e.KBestellPos, e.KLieferschein }, "IX_tLieferscheinPos_kBestellPos_kLieferschein_INCL");

            entity.HasIndex(e => e.KLieferschein, "IX_tLieferscheinPos_kLieferschein");

            entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CHinweis)
                .HasMaxLength(4000)
                .HasColumnName("cHinweis");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");
            entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");
        });

        modelBuilder.Entity<TListViewExColor>(entity =>
        {
            entity.HasKey(e => e.KListViewExColor).HasName("PK_dbo_tListViewExColor");

            entity.ToTable("tListViewExColor");

            entity.Property(e => e.KListViewExColor).HasColumnName("kListViewExColor");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CRechnername)
                .HasMaxLength(255)
                .HasColumnName("cRechnername");
            entity.Property(e => e.CRgb)
                .HasMaxLength(255)
                .HasColumnName("cRGB");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBenutzerAdmin).HasColumnName("kBenutzerAdmin");
            entity.Property(e => e.NColorId).HasColumnName("nColorID");
            entity.Property(e => e.NListViewId).HasColumnName("nListViewID");
            entity.Property(e => e.NSubColorId).HasColumnName("nSubColorID");
        });

        modelBuilder.Entity<TListViewExDateTimeFilter>(entity =>
        {
            entity.HasKey(e => e.NListViewId).HasName("PK_dbo_tListViewExDateTimeFilter");

            entity.ToTable("tListViewExDateTimeFilter");

            entity.Property(e => e.NListViewId)
                .ValueGeneratedNever()
                .HasColumnName("nListViewID");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DValue)
                .HasColumnType("datetime")
                .HasColumnName("dValue");
            entity.Property(e => e.NSelectedIndex).HasColumnName("nSelectedIndex");
        });

        modelBuilder.Entity<TListViewExHeader>(entity =>
        {
            entity.HasKey(e => e.KListViewExHeader).HasName("PK_dbo_tListViewExHeader");

            entity.ToTable("tListViewExHeader");

            entity.Property(e => e.KListViewExHeader).HasColumnName("kListViewExHeader");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CCustomName)
                .HasMaxLength(255)
                .HasColumnName("cCustomName");
            entity.Property(e => e.COriginalName)
                .HasMaxLength(255)
                .HasColumnName("cOriginalName");
            entity.Property(e => e.CRechnername)
                .HasMaxLength(255)
                .HasColumnName("cRechnername");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBenutzerAdmin).HasColumnName("kBenutzerAdmin");
            entity.Property(e => e.NHeaderId).HasColumnName("nHeaderID");
            entity.Property(e => e.NListViewId).HasColumnName("nListViewID");
            entity.Property(e => e.NOrderBy).HasColumnName("nOrderBy");
            entity.Property(e => e.NRoundStellen).HasColumnName("nRoundStellen");
            entity.Property(e => e.NSize).HasColumnName("nSize");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<TListViewExSummary>(entity =>
        {
            entity.HasKey(e => e.KListViewExSummary).HasName("PK_dbo_tListViewExSummary");

            entity.ToTable("tListViewExSummary");

            entity.Property(e => e.KListViewExSummary).HasColumnName("kListViewExSummary");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CRechnername)
                .HasMaxLength(255)
                .HasColumnName("cRechnername");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBenutzerAdmin).HasColumnName("kBenutzerAdmin");
            entity.Property(e => e.NListViewId).HasColumnName("nListViewID");
            entity.Property(e => e.NSummaryId).HasColumnName("nSummaryID");
        });

        modelBuilder.Entity<TListViewSpalten>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tListViewSpalten");

            entity.HasIndex(e => e.KListView, "IX_tListViewSpalten_kListView");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CWert)
                .HasMaxLength(255)
                .HasColumnName("cWert");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KListView).HasColumnName("kListView");
            entity.Property(e => e.NPos).HasColumnName("nPos");
        });

        modelBuilder.Entity<TLizenz>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tLizenz");

            entity.Property(e => e.BLizenzen).HasColumnName("bLizenzen");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.BSignatur)
                .HasMaxLength(1024)
                .HasColumnName("bSignatur");
            entity.Property(e => e.CAuthId)
                .HasMaxLength(32)
                .HasColumnName("cAuthId");
            entity.Property(e => e.CAuthToken)
                .HasMaxLength(32)
                .HasColumnName("cAuthToken");
            entity.Property(e => e.DDatum)
                .HasColumnType("datetime")
                .HasColumnName("dDatum");
            entity.Property(e => e.DLetzteAktualisierung)
                .HasDefaultValueSql("('1900-01-01')")
                .HasColumnType("datetime")
                .HasColumnName("dLetzteAktualisierung");
            entity.Property(e => e.NAktualisierungsSperrZaehler).HasColumnName("nAktualisierungsSperrZaehler");
            entity.Property(e => e.NAktualisierungsZaehler).HasColumnName("nAktualisierungsZaehler");
        });

        modelBuilder.Entity<TLizenzInfo>(entity =>
        {
            entity.HasKey(e => e.KLizenzInfo).HasName("PK_dbo_tLizenzInfo");

            entity.ToTable("tLizenzInfo");

            entity.Property(e => e.KLizenzInfo).HasColumnName("kLizenzInfo");
            entity.Property(e => e.CShopType)
                .HasMaxLength(500)
                .HasColumnName("cShopType");
            entity.Property(e => e.DLastUsed)
                .HasColumnType("datetime")
                .HasColumnName("dLastUsed");
            entity.Property(e => e.KApplication).HasColumnName("kApplication");
            entity.Property(e => e.KLicense).HasColumnName("kLicense");
        });

        modelBuilder.Entity<TLizenzlog>(entity =>
        {
            entity.HasKey(e => e.KLizenzlog).HasName("PK_dbo_tLizenzlog");

            entity.ToTable("tLizenzlog");

            entity.Property(e => e.KLizenzlog).HasColumnName("kLizenzlog");
            entity.Property(e => e.CAufruf)
                .HasMaxLength(255)
                .HasColumnName("cAufruf");
            entity.Property(e => e.CLog).HasColumnName("cLog");
            entity.Property(e => e.DDatum)
                .HasColumnType("datetime")
                .HasColumnName("dDatum");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<TLlvorlage>(entity =>
        {
            entity.HasKey(e => e.KLlvorlage).HasName("PK_dbo_tLLVorlage");

            entity.ToTable("tLLVorlage");

            entity.Property(e => e.KLlvorlage).HasColumnName("kLLVorlage");
            entity.Property(e => e.BData)
                .HasColumnType("image")
                .HasColumnName("bData");
            entity.Property(e => e.BPreview)
                .HasColumnType("image")
                .HasColumnName("bPreview");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CKommentar)
                .HasMaxLength(255)
                .HasColumnName("cKommentar");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.DDatum)
                .HasMaxLength(20)
                .HasColumnName("dDatum");
            entity.Property(e => e.NDatasize).HasColumnName("nDatasize");
            entity.Property(e => e.NPreviewsize).HasColumnName("nPreviewsize");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<TLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tLog");

            entity.HasIndex(e => e.DDatum, "IX_tLog_dDatum").IsClustered();

            entity.Property(e => e.CLog)
                .HasMaxLength(4000)
                .HasColumnName("cLog");
            entity.Property(e => e.DDatum)
                .HasColumnType("datetime")
                .HasColumnName("dDatum");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
            entity.Property(e => e.NVorgang).HasColumnName("nVorgang");
        });

        modelBuilder.Entity<TLogeintrag>(entity =>
        {
            entity.HasKey(e => e.KLogeintrag).HasName("PK_BI_tLogeintrag");

            entity.ToTable("tLogeintrag", "BI");

            entity.Property(e => e.KLogeintrag).HasColumnName("kLogeintrag");
            entity.Property(e => e.CAbgleichName)
                .HasMaxLength(50)
                .HasColumnName("cAbgleichName");
            entity.Property(e => e.CMeldung)
                .HasMaxLength(2048)
                .HasColumnName("cMeldung");
            entity.Property(e => e.DZeitpunkt)
                .HasColumnType("datetime")
                .HasColumnName("dZeitpunkt");
            entity.Property(e => e.KLogsitzung).HasColumnName("kLogsitzung");
            entity.Property(e => e.NSchweregrad).HasColumnName("nSchweregrad");

            entity.HasOne(d => d.KLogsitzungNavigation).WithMany(p => p.TLogeintrags)
                .HasForeignKey(d => d.KLogsitzung)
                .HasConstraintName("FK_BI_tLogeintrag_kLogsitzung");
        });

        modelBuilder.Entity<TLoggingConfiguration>(entity =>
        {
            entity.HasKey(e => e.KLogsitzungTyp).HasName("PK_dbo_tLoggingConfiguration");

            entity.ToTable("tLoggingConfiguration");

            entity.Property(e => e.KLogsitzungTyp).HasColumnName("kLogsitzungTyp");
            entity.Property(e => e.DLogDateEnd)
                .HasColumnType("datetime")
                .HasColumnName("dLogDateEnd");
            entity.Property(e => e.NDisableLogging).HasColumnName("nDisableLogging");
        });

        modelBuilder.Entity<TLogin>(entity =>
        {
            entity.HasKey(e => e.KLogin).HasName("PK_FulfillmentNetwork_tLogin");

            entity.ToTable("tLogin", "FulfillmentNetwork");

            entity.Property(e => e.KLogin)
                .ValueGeneratedNever()
                .HasColumnName("kLogin");
            entity.Property(e => e.BFulfiller).HasColumnName("bFulfiller");
            entity.Property(e => e.BMerchant).HasColumnName("bMerchant");
            entity.Property(e => e.CApiToken).HasColumnName("cApiToken");
            entity.Property(e => e.CUserId)
                .HasMaxLength(10)
                .HasColumnName("cUserId");
        });

        modelBuilder.Entity<TLogistik>(entity =>
        {
            entity.HasKey(e => e.KLogistik).HasName("PK_dbo_tLogistik");

            entity.ToTable("tLogistik");

            entity.Property(e => e.KLogistik)
                .ValueGeneratedNever()
                .HasColumnName("kLogistik");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAmazonCc)
                .HasMaxLength(255)
                .HasColumnName("cAmazonCC");
            entity.Property(e => e.CEbayCc)
                .HasMaxLength(255)
                .HasColumnName("cEbayCC");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CUrl)
                .HasMaxLength(255)
                .HasColumnName("cURL");
            entity.Property(e => e.FMaxGewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMaxGewicht");
            entity.Property(e => e.KVersanddatenExportVorlage).HasColumnName("kVersanddatenExportVorlage");
            entity.Property(e => e.KVersanddatenImportVorlage).HasColumnName("kVersanddatenImportVorlage");
            entity.Property(e => e.NPaketeAutomatischErzeugen).HasColumnName("nPaketeAutomatischErzeugen");
            entity.Property(e => e.NStandard).HasColumnName("nStandard");
        });

        modelBuilder.Entity<TLogsitzung>(entity =>
        {
            entity.HasKey(e => e.KLogsitzung).HasName("PK_BI_tLogsitzung");

            entity.ToTable("tLogsitzung", "BI");

            entity.Property(e => e.KLogsitzung).HasColumnName("kLogsitzung");
            entity.Property(e => e.CRechnername)
                .HasMaxLength(64)
                .HasColumnName("cRechnername");
            entity.Property(e => e.CStatusMeldung)
                .HasMaxLength(2048)
                .HasColumnName("cStatusMeldung");
            entity.Property(e => e.DEnde)
                .HasColumnType("datetime")
                .HasColumnName("dEnde");
            entity.Property(e => e.DStart)
                .HasColumnType("datetime")
                .HasColumnName("dStart");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<TLotPreparationComponent>(entity =>
        {
            entity.HasKey(e => e.KLotPreparationComponent).HasName("PK_pps_tLotPreparationComponent");

            entity.ToTable("tLotPreparationComponent", "pps");

            entity.HasIndex(e => new { e.KLotPreparationLot, e.KBillOfMaterialComponent }, "UQ_pps_tLotPreparationComponent_kLotPreparationLot_kBillOfMaterialComponent").IsUnique();

            entity.Property(e => e.KLotPreparationComponent).HasColumnName("kLotPreparationComponent");
            entity.Property(e => e.KBillOfMaterialComponent).HasColumnName("kBillOfMaterialComponent");
            entity.Property(e => e.KLotPreparationLot).HasColumnName("kLotPreparationLot");

            entity.HasOne(d => d.KBillOfMaterialComponentNavigation).WithMany(p => p.TLotPreparationComponents)
                .HasForeignKey(d => d.KBillOfMaterialComponent)
                .HasConstraintName("FK_pps_tLotPreparationComponent_kBillOfMaterialComponent");

            entity.HasOne(d => d.KLotPreparationLotNavigation).WithMany(p => p.TLotPreparationComponents)
                .HasForeignKey(d => d.KLotPreparationLot)
                .HasConstraintName("FK_pps_tLotPreparationComponent_kLotPreparationLot");
        });

        modelBuilder.Entity<TLotPreparationItem>(entity =>
        {
            entity.HasKey(e => e.KLotPreparationItem).HasName("PK_pps_tLotPreparationItem");

            entity.ToTable("tLotPreparationItem", "pps");

            entity.HasIndex(e => e.KProductionOrderProducible, "UQ_pps_tLotPreparationItem_kProductionOrderProducible").IsUnique();

            entity.Property(e => e.KLotPreparationItem).HasColumnName("kLotPreparationItem");
            entity.Property(e => e.KLotPreparationProductionOrder).HasColumnName("kLotPreparationProductionOrder");
            entity.Property(e => e.KProductionOrderProducible).HasColumnName("kProductionOrderProducible");

            entity.HasOne(d => d.KLotPreparationProductionOrderNavigation).WithMany(p => p.TLotPreparationItems)
                .HasForeignKey(d => d.KLotPreparationProductionOrder)
                .HasConstraintName("FK_pps_tLotPreparationItem_kLotPreparationProductionOrder");

            entity.HasOne(d => d.KProductionOrderProducibleNavigation).WithOne(p => p.TLotPreparationItem)
                .HasForeignKey<TLotPreparationItem>(d => d.KProductionOrderProducible)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pps_tLotPreparationItem_kProductionOrderProducible");
        });

        modelBuilder.Entity<TLotPreparationLot>(entity =>
        {
            entity.HasKey(e => e.KLotPreparationLot).HasName("PK_pps_tLotPreparationLot");

            entity.ToTable("tLotPreparationLot", "pps");

            entity.HasIndex(e => new { e.KLotPreparationItem, e.NLotIndex }, "UQ_pps_tLotPreparationLot_kLotPreparationItem_nLotIndex").IsUnique();

            entity.HasIndex(e => e.KPickliste, "UQ_pps_tLotPreparationLot_kPickliste")
                .IsUnique()
                .HasFilter("([kPickliste] IS NOT NULL)");

            entity.Property(e => e.KLotPreparationLot).HasColumnName("kLotPreparationLot");
            entity.Property(e => e.CBatchNumber)
                .HasMaxLength(255)
                .HasColumnName("cBatchNumber");
            entity.Property(e => e.DShelfLifeEndDate)
                .HasColumnType("datetime")
                .HasColumnName("dShelfLifeEndDate");
            entity.Property(e => e.KLotPreparationItem).HasColumnName("kLotPreparationItem");
            entity.Property(e => e.KPickliste).HasColumnName("kPickliste");
            entity.Property(e => e.KResource).HasColumnName("kResource");
            entity.Property(e => e.NIsBatchNumberModifiable).HasColumnName("nIsBatchNumberModifiable");
            entity.Property(e => e.NIsShelfLifeEndDateModifiable).HasColumnName("nIsShelfLifeEndDateModifiable");
            entity.Property(e => e.NLotIndex).HasColumnName("nLotIndex");

            entity.HasOne(d => d.KLotPreparationItemNavigation).WithMany(p => p.TLotPreparationLots)
                .HasForeignKey(d => d.KLotPreparationItem)
                .HasConstraintName("FK_pps_tLotPreparationLot_kLotPreparationItem");

            entity.HasOne(d => d.KPicklisteNavigation).WithOne(p => p.TLotPreparationLot)
                .HasForeignKey<TLotPreparationLot>(d => d.KPickliste)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_pps_tLotPreparationLot_kPickliste");

            entity.HasOne(d => d.KResourceNavigation).WithMany(p => p.TLotPreparationLots)
                .HasForeignKey(d => d.KResource)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_pps_tLotPreparationLot_kResource");
        });

        modelBuilder.Entity<TLotPreparationProductionOrder>(entity =>
        {
            entity.HasKey(e => e.KLotPreparationProductionOrder).HasName("PK_pps_tLotPreparationProductionOrder");

            entity.ToTable("tLotPreparationProductionOrder", "pps");

            entity.HasIndex(e => e.KProductionOrder, "UQ_pps_tLotPreparationProductionOrder_kProductionOrder").IsUnique();

            entity.Property(e => e.KLotPreparationProductionOrder).HasColumnName("kLotPreparationProductionOrder");
            entity.Property(e => e.KProductionOrder).HasColumnName("kProductionOrder");

            entity.HasOne(d => d.KProductionOrderNavigation).WithOne(p => p.TLotPreparationProductionOrder)
                .HasForeignKey<TLotPreparationProductionOrder>(d => d.KProductionOrder)
                .HasConstraintName("FK_pps_tLotPreparationProductionOrder_kProductionOrder");
        });

        modelBuilder.Entity<TLotPreparationStock>(entity =>
        {
            entity.HasKey(e => e.KLotPreparationStock).HasName("PK_pps_tLotPreparationStock");

            entity.ToTable("tLotPreparationStock", "pps");

            entity.HasIndex(e => e.KPicklistePos, "UQ_pps_tLotPreparationStock_kPicklistePos").IsUnique();

            entity.Property(e => e.KLotPreparationStock).HasColumnName("kLotPreparationStock");
            entity.Property(e => e.KLotPreparationComponent).HasColumnName("kLotPreparationComponent");
            entity.Property(e => e.KPicklistePos).HasColumnName("kPicklistePos");

            entity.HasOne(d => d.KLotPreparationComponentNavigation).WithMany(p => p.TLotPreparationStocks)
                .HasForeignKey(d => d.KLotPreparationComponent)
                .HasConstraintName("FK_pps_tLotPreparationStock_kLotPreparationComponent");

            entity.HasOne(d => d.KPicklistePosNavigation).WithOne(p => p.TLotPreparationStock)
                .HasForeignKey<TLotPreparationStock>(d => d.KPicklistePos)
                .HasConstraintName("FK_pps_tLotPreparationStock_kPicklistePos");
        });

        modelBuilder.Entity<TLotSize>(entity =>
        {
            entity.HasKey(e => e.KLotSize).HasName("PK_pps_tLotSize");

            entity.ToTable("tLotSize", "pps");

            entity.HasIndex(e => e.KArtikel, "IX_pps_tLotSize_kArtikel");

            entity.HasIndex(e => new { e.KArtikel, e.NSize }, "UQ_pps_tLotSize_kArtikel_nSize").IsUnique();

            entity.Property(e => e.KLotSize).HasColumnName("kLotSize");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.NAverageTime).HasColumnName("nAverageTime");
            entity.Property(e => e.NSize)
                .HasDefaultValueSql("((1))")
                .HasColumnName("nSize");

            entity.HasOne(d => d.KArtikelNavigation).WithMany(p => p.TLotSizes)
                .HasForeignKey(d => d.KArtikel)
                .HasConstraintName("FK_pps_tLotSize_kArtikel");
        });

        modelBuilder.Entity<TMahnstufe>(entity =>
        {
            entity.HasKey(e => e.KMahnstufe).HasName("PK_dbo_tMahnstufe");

            entity.ToTable("tMahnstufe");

            entity.HasIndex(e => new { e.KFirma, e.KKundengruppe, e.NStufe }, "UQ_dbo_tMahnstufe_kFirma_kKundengruppe_nStufe").IsUnique();

            entity.Property(e => e.KMahnstufe).HasColumnName("kMahnstufe");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.FGebuehrPauschal)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGebuehrPauschal");
            entity.Property(e => e.FGebuehrZinssatz)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGebuehrZinssatz");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KKundengruppe).HasColumnName("kKundengruppe");
            entity.Property(e => e.NKarenzzeit).HasColumnName("nKarenzzeit");
            entity.Property(e => e.NStufe).HasColumnName("nStufe");
            entity.Property(e => e.NZahlungsfristInTagen).HasColumnName("nZahlungsfristInTagen");
        });

        modelBuilder.Entity<TMailVorlage>(entity =>
        {
            entity.HasKey(e => new { e.KMailVorlage, e.KSprache, e.KPlattform }).HasName("PK_dbo_tMailVorlage");

            entity.ToTable("tMailVorlage");

            entity.Property(e => e.KMailVorlage).HasColumnName("kMailVorlage");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CHtml).HasColumnName("cHTML");
            entity.Property(e => e.CSubject)
                .HasMaxLength(511)
                .HasColumnName("cSubject");
            entity.Property(e => e.CText).HasColumnName("cText");
            entity.Property(e => e.CVorlagenname)
                .HasMaxLength(255)
                .HasColumnName("cVorlagenname");
            entity.Property(e => e.NHtml).HasColumnName("nHTML");
            entity.Property(e => e.NStandard).HasColumnName("nStandard");
            entity.Property(e => e.NType).HasColumnName("nType");
        });

        modelBuilder.Entity<TMandant>(entity =>
        {
            entity.HasKey(e => e.KMandant).HasName("PK_dbo_tMandant");

            entity.ToTable("tMandant");

            entity.Property(e => e.KMandant)
                .ValueGeneratedNever()
                .HasColumnName("kMandant");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CDb)
                .HasMaxLength(20)
                .HasColumnName("cDB");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
        });

        modelBuilder.Entity<TMargensteigerung>(entity =>
        {
            entity.HasKey(e => e.KMargensteigerung).HasName("PK_Repricer_tMargensteigerung");

            entity.ToTable("tMargensteigerung", "Repricer");

            entity.Property(e => e.KMargensteigerung).HasColumnName("kMargensteigerung");
            entity.Property(e => e.FAenderungMaxPreis)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fAenderungMaxPreis");
            entity.Property(e => e.FAenderungMinPreis)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fAenderungMinPreis");
            entity.Property(e => e.NAenderungMaxPreisTyp).HasColumnName("nAenderungMaxPreisTyp");
            entity.Property(e => e.NAenderungMinPreisTyp).HasColumnName("nAenderungMinPreisTyp");
            entity.Property(e => e.NAktiv).HasColumnName("nAktiv");
            entity.Property(e => e.NBestandAb).HasColumnName("nBestandAb");
        });

        modelBuilder.Entity<TMarktplatz>(entity =>
        {
            entity.HasKey(e => e.KMarktplatz).HasName("PK_Repricer_tMarktplatz");

            entity.ToTable("tMarktplatz", "Repricer");

            entity.HasIndex(e => new { e.KUser, e.NPlattform }, "IX_Repricer_tMarktplatz_kUser_nPlattform");

            entity.HasIndex(e => new { e.KUser, e.NPlattform }, "UQ_Repricer_tMarktplatz_kUser_nPlattform").IsUnique();

            entity.Property(e => e.KMarktplatz).HasColumnName("kMarktplatz");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.NAktiv).HasColumnName("nAktiv");
            entity.Property(e => e.NPlattform).HasColumnName("nPlattform");

            entity.HasOne(d => d.KUserNavigation).WithMany(p => p.TMarktplatzs)
                .HasForeignKey(d => d.KUser)
                .HasConstraintName("FK_Repricer_tMarktplatz_kUser");
        });

        modelBuilder.Entity<TMassEinheit>(entity =>
        {
            entity.HasKey(e => e.KMassEinheit).HasName("PK_dbo_tMassEinheit");

            entity.ToTable("tMassEinheit", tb => tb.HasTrigger("jtlActionValidator_tMassEinheit"));

            entity.Property(e => e.KMassEinheit).HasColumnName("kMassEinheit");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CCode)
                .HasMaxLength(10)
                .HasColumnName("cCode");
            entity.Property(e => e.CDisplayCode)
                .HasMaxLength(255)
                .HasColumnName("cDisplayCode");
            entity.Property(e => e.FBezugsMassEinheitFaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBezugsMassEinheitFaktor");
            entity.Property(e => e.KBezugsMassEinheit).HasColumnName("kBezugsMassEinheit");
        });

        modelBuilder.Entity<TMassEinheitSprache>(entity =>
        {
            entity.HasKey(e => new { e.KMassEinheit, e.KSprache }).HasName("PK_dbo_tMassEinheitSprache");

            entity.ToTable("tMassEinheitSprache");

            entity.Property(e => e.KMassEinheit).HasColumnName("kMassEinheit");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
        });

        modelBuilder.Entity<TMdelog>(entity =>
        {
            entity.HasKey(e => e.KMdelog).HasName("PK_dbo_tMDELog");

            entity.ToTable("tMDELog");

            entity.Property(e => e.KMdelog).HasColumnName("kMDELog");
            entity.Property(e => e.CLog)
                .HasMaxLength(4000)
                .HasColumnName("cLog");
            entity.Property(e => e.CServer)
                .HasMaxLength(250)
                .HasColumnName("cServer");
            entity.Property(e => e.CSessionId)
                .HasMaxLength(250)
                .HasColumnName("cSessionId");
            entity.Property(e => e.CView)
                .HasMaxLength(100)
                .HasColumnName("cView");
            entity.Property(e => e.DDatum)
                .HasColumnType("datetime")
                .HasColumnName("dDatum");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.NLogId).HasColumnName("nLogID");
            entity.Property(e => e.NLogLevel).HasColumnName("nLogLevel");
            entity.Property(e => e.NTime).HasColumnName("nTime");
        });

        modelBuilder.Entity<TMedienDatei>(entity =>
        {
            entity.HasKey(e => e.KMedienDatei).HasName("PK_dbo_tMedienDatei");

            entity.ToTable("tMedienDatei", tb => tb.HasTrigger("tgr_tMedienDatei_Connector"));

            entity.Property(e => e.KMedienDatei).HasColumnName("kMedienDatei");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CKategorie)
                .HasMaxLength(255)
                .HasColumnName("cKategorie");
            entity.Property(e => e.CPfad)
                .HasMaxLength(2000)
                .HasColumnName("cPfad");
            entity.Property(e => e.CTyp)
                .HasMaxLength(255)
                .HasColumnName("cTyp");
            entity.Property(e => e.CUrl)
                .HasMaxLength(2000)
                .HasColumnName("cURL");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<TMedienDateiAttribut>(entity =>
        {
            entity.HasKey(e => e.KMediendateiAttribut).HasName("PK_dbo_tMedienDateiAttribut");

            entity.ToTable("tMedienDateiAttribut", tb => tb.HasTrigger("tgr_tMedienDateiAttribut_Connector"));

            entity.Property(e => e.KMediendateiAttribut).HasColumnName("kMediendateiAttribut");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CWert).HasColumnName("cWert");
            entity.Property(e => e.KMedienDatei).HasColumnName("kMedienDatei");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
        });

        modelBuilder.Entity<TMedienDateiShop>(entity =>
        {
            entity.HasKey(e => new { e.KMedienDatei, e.KShop }).HasName("PK_dbo_tMedienDateiShop");

            entity.ToTable("tMedienDateiShop", tb => tb.HasTrigger("tgr_tMedienDateiShop_Connector"));

            entity.Property(e => e.KMedienDatei).HasColumnName("kMedienDatei");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CDelInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cDelInet");
            entity.Property(e => e.CInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cInet");
        });

        modelBuilder.Entity<TMedienDateiSprache>(entity =>
        {
            entity.HasKey(e => new { e.KMedienDatei, e.KSprache }).HasName("PK_dbo_tMedienDateiSprache");

            entity.ToTable("tMedienDateiSprache", tb => tb.HasTrigger("tgr_tMedienDateiSprache_Connector"));

            entity.Property(e => e.KMedienDatei).HasColumnName("kMedienDatei");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBeschreibung).HasColumnName("cBeschreibung");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
        });

        modelBuilder.Entity<TMedienDir>(entity =>
        {
            entity.HasKey(e => e.KMedienDir).HasName("PK_dbo_tMedienDir");

            entity.ToTable("tMedienDir");

            entity.Property(e => e.KMedienDir)
                .ValueGeneratedNever()
                .HasColumnName("kMedienDir");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KParentDir).HasColumnName("kParentDir");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NDel).HasColumnName("nDel");
        });

        modelBuilder.Entity<TMedienFile>(entity =>
        {
            entity.HasKey(e => e.KMedienFile).HasName("PK_dbo_tMedienFile");

            entity.ToTable("tMedienFile");

            entity.Property(e => e.KMedienFile)
                .ValueGeneratedNever()
                .HasColumnName("kMedienFile");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.DTime)
                .HasColumnType("datetime")
                .HasColumnName("dTime");
            entity.Property(e => e.KMedienDir).HasColumnName("kMedienDir");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NDel).HasColumnName("nDel");
            entity.Property(e => e.NSize).HasColumnName("nSize");
        });

        modelBuilder.Entity<TMerchantInboundShippingNotificationRef>(entity =>
        {
            entity.HasKey(e => e.KMerchantInboundShippingNotificationRef).HasName("PK_FulfillmentNetwork_tMerchantInboundShippingNotificationRef");

            entity.ToTable("tMerchantInboundShippingNotificationRef", "FulfillmentNetwork");

            entity.HasIndex(e => e.KLieferschein, "IX_FulfillmentNetwork_tMerchantInboundShippingNotificationRef_kLieferschein");

            entity.HasIndex(e => new { e.CInboundShippingNotificationId, e.KLieferschein }, "UQ_FulfillmentNetwork_tMerchantInboundShippingNotificationRef_cInboundShippingNotificationId_kLieferschein")
                .IsUnique()
                .IsDescending(false, true);

            entity.Property(e => e.KMerchantInboundShippingNotificationRef).HasColumnName("kMerchantInboundShippingNotificationRef");
            entity.Property(e => e.CInboundShippingNotificationId)
                .HasMaxLength(255)
                .HasColumnName("cInboundShippingNotificationId");
            entity.Property(e => e.DCreatedAt).HasColumnName("dCreatedAt");
            entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");

            entity.HasOne(d => d.KLieferscheinNavigation).WithMany(p => p.TMerchantInboundShippingNotificationRefs)
                .HasForeignKey(d => d.KLieferschein)
                .HasConstraintName("FK_FulfillmentNetwork_tMerchantInboundShippingNotificationRef_kLieferschein");
        });

        modelBuilder.Entity<TMerchantProductAttributeMapping>(entity =>
        {
            entity.HasKey(e => e.KAttribut).HasName("PK_FulfillmentNetwork_tMerchantProductAttributeMapping");

            entity.ToTable("tMerchantProductAttributeMapping", "FulfillmentNetwork");

            entity.Property(e => e.KAttribut)
                .ValueGeneratedNever()
                .HasColumnName("kAttribut");
            entity.Property(e => e.CFfnName)
                .HasMaxLength(255)
                .HasColumnName("cFfnName");

            entity.HasOne(d => d.KAttributNavigation).WithOne(p => p.TMerchantProductAttributeMapping)
                .HasForeignKey<TMerchantProductAttributeMapping>(d => d.KAttribut)
                .HasConstraintName("FK_FulfillmentNetwork_tMerchantProductAttributeMapping_kAttribut");
        });

        modelBuilder.Entity<TMerchantProductUpdateQueue>(entity =>
        {
            entity.HasKey(e => e.KMerchantProductUpdateQueue).HasName("PK_FulfillmentNetwork_tMerchantProductUpdateQueue");

            entity.ToTable("tMerchantProductUpdateQueue", "FulfillmentNetwork");

            entity.Property(e => e.KMerchantProductUpdateQueue).HasColumnName("kMerchantProductUpdateQueue");
            entity.Property(e => e.DCreatedAt).HasColumnName("dCreatedAt");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.NProcessing).HasColumnName("nProcessing");
        });

        modelBuilder.Entity<TMerchantStockChange>(entity =>
        {
            entity.HasKey(e => e.KMerchantStockChange).HasName("PK_FulfillmentNetwork_tMerchantStockChange");

            entity.ToTable("tMerchantStockChange", "FulfillmentNetwork");

            entity.HasIndex(e => new { e.CWarehouseId, e.CJfsku, e.NStockVersion }, "IX_FulfillmentNetwork_tMerchantStockChange_cWarehouseId_cJfsku_nStockVersion").IsDescending();

            entity.HasIndex(e => new { e.NProcessingState, e.DTimestamp }, "IX_FulfillmentNetwork_tMerchantStockChange_nProcessingState_dTimestamp").IsDescending(true, false);

            entity.Property(e => e.KMerchantStockChange).HasColumnName("kMerchantStockChange");
            entity.Property(e => e.CBatch)
                .HasMaxLength(255)
                .HasColumnName("cBatch");
            entity.Property(e => e.CInboundItemId)
                .HasMaxLength(255)
                .HasColumnName("cInboundItemId");
            entity.Property(e => e.CInboundNumber)
                .HasMaxLength(255)
                .HasColumnName("cInboundNumber");
            entity.Property(e => e.CJfsku)
                .HasMaxLength(255)
                .HasColumnName("cJfsku");
            entity.Property(e => e.CNote).HasColumnName("cNote");
            entity.Property(e => e.COutboundItemId)
                .HasMaxLength(255)
                .HasColumnName("cOutboundItemId");
            entity.Property(e => e.COutboundNumber)
                .HasMaxLength(255)
                .HasColumnName("cOutboundNumber");
            entity.Property(e => e.COutboundShippingNotificationId)
                .HasMaxLength(255)
                .HasColumnName("cOutboundShippingNotificationId");
            entity.Property(e => e.COutboundShippingNotificationItemId)
                .HasMaxLength(255)
                .HasColumnName("cOutboundShippingNotificationItemId");
            entity.Property(e => e.CReturnId)
                .HasMaxLength(255)
                .HasColumnName("cReturnId");
            entity.Property(e => e.CReturnItemId)
                .HasMaxLength(255)
                .HasColumnName("cReturnItemId");
            entity.Property(e => e.CWarehouseId)
                .HasMaxLength(255)
                .HasColumnName("cWarehouseId");
            entity.Property(e => e.DBestBefore).HasColumnName("dBestBefore");
            entity.Property(e => e.DProcessedAt).HasColumnName("dProcessedAt");
            entity.Property(e => e.DTimestamp).HasColumnName("dTimestamp");
            entity.Property(e => e.FLevelAnnounced)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLevelAnnounced");
            entity.Property(e => e.FLevelBlocked)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLevelBlocked");
            entity.Property(e => e.FLevelReserved)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLevelReserved");
            entity.Property(e => e.FLevelShippable)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLevelShippable");
            entity.Property(e => e.FQuantityAnnounced)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fQuantityAnnounced");
            entity.Property(e => e.FQuantityAnnouncedBooked)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fQuantityAnnouncedBooked");
            entity.Property(e => e.FQuantityBlocked)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fQuantityBlocked");
            entity.Property(e => e.FQuantityBlockedBooked)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fQuantityBlockedBooked");
            entity.Property(e => e.FQuantityReserved)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fQuantityReserved");
            entity.Property(e => e.FQuantityReservedBooked)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fQuantityReservedBooked");
            entity.Property(e => e.FQuantityShippable)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fQuantityShippable");
            entity.Property(e => e.FQuantityShippableBooked)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fQuantityShippableBooked");
            entity.Property(e => e.NChangeType).HasColumnName("nChangeType");
            entity.Property(e => e.NProcessingState).HasColumnName("nProcessingState");
            entity.Property(e => e.NStockVersion).HasColumnName("nStockVersion");
        });

        modelBuilder.Entity<TMerchantStockChangeRef>(entity =>
        {
            entity.HasKey(e => e.KMerchantStockChangeRef).HasName("PK_FulfillmentNetwork.tMerchantStockChangeRef");

            entity.ToTable("tMerchantStockChangeRef", "FulfillmentNetwork");

            entity.HasIndex(e => e.KWarenlagerAusgang, "IX_FulfillmentNetwork_tMerchantStockChangeRef_kWarenlagerAusgang").IsDescending();

            entity.Property(e => e.KMerchantStockChangeRef).HasColumnName("kMerchantStockChangeRef");
            entity.Property(e => e.KMerchantStockChange).HasColumnName("kMerchantStockChange");
            entity.Property(e => e.KWarenlagerAusgang).HasColumnName("kWarenlagerAusgang");
            entity.Property(e => e.KWarenlagerEingang).HasColumnName("kWarenlagerEingang");
        });

        modelBuilder.Entity<TMerchantVersandRef>(entity =>
        {
            entity.HasKey(e => e.KMerchantVersandRef).HasName("PK_FulfillmentNetwork_tMerchantVersandRef");

            entity.ToTable("tMerchantVersandRef", "FulfillmentNetwork");

            entity.HasIndex(e => e.COwnerId, "IX_FulfillmentNetwork_tMerchantVersandRef_cOwnerId").IsDescending();

            entity.HasIndex(e => e.KLieferschein, "IX_FulfillmentNetwork_tMerchantVersandRef_kLieferschein");

            entity.HasIndex(e => e.KVersand, "IX_FulfillmentNetwork_tMerchantVersandRef_kVersand");

            entity.HasIndex(e => new { e.COutboundShippingNotificationId, e.KVersand }, "UQ_FulfillmentNetwork_tMerchantVersandRef_cOutboundShippingNotificationId_kVersand")
                .IsUnique()
                .IsDescending(false, true);

            entity.Property(e => e.KMerchantVersandRef).HasColumnName("kMerchantVersandRef");
            entity.Property(e => e.BRowVersion)
                .HasMaxLength(8)
                .IsFixedLength()
                .HasColumnName("bRowVersion");
            entity.Property(e => e.COutboundShippingNotificationId)
                .HasMaxLength(255)
                .HasColumnName("cOutboundShippingNotificationId");
            entity.Property(e => e.COwnerId)
                .HasMaxLength(10)
                .HasColumnName("cOwnerId");
            entity.Property(e => e.DCreatedAt).HasColumnName("dCreatedAt");
            entity.Property(e => e.DUpdatedAt).HasColumnName("dUpdatedAt");
            entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");
            entity.Property(e => e.KVersand).HasColumnName("kVersand");

            entity.HasOne(d => d.KLieferscheinNavigation).WithMany(p => p.TMerchantVersandRefs)
                .HasForeignKey(d => d.KLieferschein)
                .HasConstraintName("FK_FulfillmentNetwork_tMerchantVersandRef_kLieferschein");

            entity.HasOne(d => d.KVersandNavigation).WithMany(p => p.TMerchantVersandRefs)
                .HasForeignKey(d => d.KVersand)
                .HasConstraintName("FK_dbo_tMerchantVersandRef_kVersand");
        });

        modelBuilder.Entity<TMerchantWarehouseRef>(entity =>
        {
            entity.HasKey(e => e.KWarenLagerRef).HasName("PK_FulfillmentNetwork_tMerchantWarehouseRef");

            entity.ToTable("tMerchantWarehouseRef", "FulfillmentNetwork");

            entity.HasIndex(e => e.KWarenLager, "UQ_FulfillmentNetwork_tMerchantWarehouseRef_kWarenLager").IsUnique();

            entity.Property(e => e.KWarenLagerRef).HasColumnName("kWarenLagerRef");
            entity.Property(e => e.CFfnWarehouseId)
                .HasMaxLength(50)
                .HasColumnName("cFfnWarehouseId");
            entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");
            entity.Property(e => e.NLieferantenNameUebertragen).HasColumnName("nLieferantenNameUebertragen");

            entity.HasOne(d => d.KWarenLagerNavigation).WithOne(p => p.TMerchantWarehouseRef)
                .HasForeignKey<TMerchantWarehouseRef>(d => d.KWarenLager)
                .HasConstraintName("FK_dbo_tMerchantWarehouseRef_kWarenLager");
        });

        modelBuilder.Entity<TMerkmal>(entity =>
        {
            entity.HasKey(e => e.KMerkmal).HasName("PK_dbo_tMerkmal");

            entity.ToTable("tMerkmal", tb =>
                {
                    tb.HasTrigger("jtlActionValidator_tMerkmal");
                    tb.HasTrigger("tgr_tMerkmal_Connector");
                    tb.HasTrigger("tgr_tMerkmal_UPDDEL");
                });

            entity.Property(e => e.KMerkmal).HasColumnName("kMerkmal");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CTyp)
                .HasMaxLength(255)
                .HasColumnName("cTyp");
            entity.Property(e => e.NGlobal).HasColumnName("nGlobal");
            entity.Property(e => e.NMehrfachauswahl)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nMehrfachauswahl");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NVerwendungszweck).HasColumnName("nVerwendungszweck");
        });

        modelBuilder.Entity<TMerkmalBildPlattform>(entity =>
        {
            entity.HasKey(e => e.KMerkmalBildPlattform).HasName("PK_dbo_tMerkmalBildPlattform");

            entity.ToTable("tMerkmalBildPlattform", tb =>
                {
                    tb.HasTrigger("tgr_tMerkmalBildPlattform_DELETE");
                    tb.HasTrigger("tgr_tMerkmalBildPlattform_UPDATE");
                });

            entity.Property(e => e.KMerkmalBildPlattform).HasColumnName("kMerkmalBildPlattform");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KBild).HasColumnName("kBild");
            entity.Property(e => e.KMerkmal).HasColumnName("kMerkmal");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NInet).HasColumnName("nInet");
        });

        modelBuilder.Entity<TMerkmalGruppe>(entity =>
        {
            entity.HasKey(e => e.KMerkmalGruppe).HasName("PK_dbo_tMerkmalGruppe");

            entity.ToTable("tMerkmalGruppe", tb => tb.HasTrigger("jtlActionValidator_tMerkmalGruppe"));

            entity.Property(e => e.KMerkmalGruppe)
                .ValueGeneratedNever()
                .HasColumnName("kMerkmalGruppe");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<TMerkmalGruppeMerkmal>(entity =>
        {
            entity.HasKey(e => new { e.KMerkmalGruppe, e.KMerkmal }).HasName("PK_dbo_tMerkmalGruppeMerkmal");

            entity.ToTable("tMerkmalGruppeMerkmal");

            entity.Property(e => e.KMerkmalGruppe).HasColumnName("kMerkmalGruppe");
            entity.Property(e => e.KMerkmal).HasColumnName("kMerkmal");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
        });

        modelBuilder.Entity<TMerkmalSprache>(entity =>
        {
            entity.HasKey(e => new { e.KMerkmal, e.KSprache }).HasName("PK_dbo_tMerkmalSprache");

            entity.ToTable("tMerkmalSprache", tb =>
                {
                    tb.HasTrigger("tgr_tMerkmalSprache_Connector");
                    tb.HasTrigger("tgr_tMerkmalSprache_INSUPDDEL");
                });

            entity.HasIndex(e => e.CName, "IX_tMerkmalSprache_cName");

            entity.Property(e => e.KMerkmal).HasColumnName("kMerkmal");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
        });

        modelBuilder.Entity<TMerkmalWert>(entity =>
        {
            entity.HasKey(e => e.KMerkmalWert).HasName("PK_dbo_tMerkmalWert");

            entity.ToTable("tMerkmalWert", tb =>
                {
                    tb.HasTrigger("jtlActionValidator_tMerkmalWert");
                    tb.HasTrigger("tgr_tMerkmalWert_Connector");
                    tb.HasTrigger("tgr_tMerkmalWert_DELETE");
                });

            entity.HasIndex(e => e.KMerkmal, "IX_tMerkmalWert_kMerkmal");

            entity.Property(e => e.KMerkmalWert)
                .ValueGeneratedNever()
                .HasColumnName("kMerkmalWert");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KMerkmal).HasColumnName("kMerkmal");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<TMerkmalWertSprache>(entity =>
        {
            entity.HasKey(e => new { e.KMerkmalWert, e.KSprache }).HasName("PK_dbo_tMerkmalWertSprache");

            entity.ToTable("tMerkmalWertSprache", tb =>
                {
                    tb.HasTrigger("tgr_tMerkmalWertSprache_Connector");
                    tb.HasTrigger("tgr_tMerkmalWertSprache_INSUPDDEL");
                });

            entity.HasIndex(e => e.CWert, "IX_tMerkmalWertSprache_cWert");

            entity.Property(e => e.KMerkmalWert).HasColumnName("kMerkmalWert");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBeschreibung).HasColumnName("cBeschreibung");
            entity.Property(e => e.CMetaDescription).HasColumnName("cMetaDescription");
            entity.Property(e => e.CMetaKeywords)
                .HasMaxLength(255)
                .HasColumnName("cMetaKeywords");
            entity.Property(e => e.CMetaTitle)
                .HasMaxLength(255)
                .HasColumnName("cMetaTitle");
            entity.Property(e => e.CSeo)
                .HasMaxLength(255)
                .HasColumnName("cSeo");
            entity.Property(e => e.CWert)
                .HasMaxLength(255)
                .HasColumnName("cWert");
        });

        modelBuilder.Entity<TMerkmalwertBildPlattform>(entity =>
        {
            entity.HasKey(e => e.KMerkmalwertBildPlattform).HasName("PK_dbo_tMerkmalwertBildPlattform");

            entity.ToTable("tMerkmalwertBildPlattform", tb =>
                {
                    tb.HasTrigger("tgr_tMerkmalwertBildPlattform_DELETE");
                    tb.HasTrigger("tgr_tMerkmalwertBildPlattform_UPDATE");
                });

            entity.Property(e => e.KMerkmalwertBildPlattform).HasColumnName("kMerkmalwertBildPlattform");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KBild).HasColumnName("kBild");
            entity.Property(e => e.KMerkmalwert).HasColumnName("kMerkmalwert");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NInet).HasColumnName("nInet");
        });

        modelBuilder.Entity<TMessage>(entity =>
        {
            entity.HasKey(e => e.KMessages).HasName("PK_dbo_tMessages");

            entity.ToTable("tMessages", tb => tb.HasTrigger("tgr_tMessages_INSERT"));

            entity.HasIndex(e => e.KKunde, "IX_tMessages_kKunde");

            entity.HasIndex(e => e.KLieferant, "IX_tMessages_kLieferant");

            entity.Property(e => e.KMessages)
                .ValueGeneratedNever()
                .HasColumnName("kMessages");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KAnsprechpartner).HasColumnName("kAnsprechpartner");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.NType).HasColumnName("nType");
            entity.Property(e => e.SAttachment).HasColumnName("sAttachment");
            entity.Property(e => e.SBereff)
                .HasMaxLength(511)
                .HasColumnName("sBereff");
            entity.Property(e => e.SHtmltext).HasColumnName("sHTMLText");
            entity.Property(e => e.SSentFaxDate)
                .HasMaxLength(20)
                .HasColumnName("sSentFaxDate");
            entity.Property(e => e.SSentMailDate)
                .HasMaxLength(20)
                .HasColumnName("sSentMailDate");
            entity.Property(e => e.SText).HasColumnName("sText");
        });

        modelBuilder.Entity<TMessage1>(entity =>
        {
            entity.HasKey(e => e.KMessage).HasName("PK_Shipping_tMessage");

            entity.ToTable("tMessage", "Shipping");

            entity.Property(e => e.KMessage).HasColumnName("kMessage");
            entity.Property(e => e.CCode)
                .HasMaxLength(255)
                .HasColumnName("cCode");
            entity.Property(e => e.CContent).HasColumnName("cContent");
            entity.Property(e => e.CContentShort)
                .HasMaxLength(255)
                .HasColumnName("cContentShort");
            entity.Property(e => e.DTimestamp)
                .HasColumnType("datetime")
                .HasColumnName("dTimestamp");
            entity.Property(e => e.KMessageServer).HasColumnName("kMessageServer");
            entity.Property(e => e.KPackage).HasColumnName("kPackage");
            entity.Property(e => e.NSource).HasColumnName("nSource");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");

            entity.HasOne(d => d.KPackageNavigation).WithMany(p => p.TMessage1s)
                .HasForeignKey(d => d.KPackage)
                .HasConstraintName("FK_Shipping_tMessage_kPackage");
        });

        modelBuilder.Entity<TMetaDataChanged>(entity =>
        {
            entity.HasKey(e => e.KMetaDataChanged).HasName("PK_SCX_tMetaDataChanged");

            entity.ToTable("tMetaDataChanged", "SCX");

            entity.Property(e => e.KMetaDataChanged).HasColumnName("kMetaDataChanged");
            entity.Property(e => e.CResource)
                .HasMaxLength(255)
                .HasColumnName("cResource");
            entity.Property(e => e.CSellerId)
                .HasMaxLength(50)
                .HasColumnName("cSellerId");
            entity.Property(e => e.CType)
                .HasMaxLength(255)
                .HasColumnName("cType");
            entity.Property(e => e.DCreatedAfter)
                .HasColumnType("datetime")
                .HasColumnName("dCreatedAfter");
            entity.Property(e => e.KChannel).HasColumnName("kChannel");
            entity.Property(e => e.NApiModeType).HasColumnName("nApiModeType");
        });

        modelBuilder.Entity<TMissedAcknowledge>(entity =>
        {
            entity.HasKey(e => e.KMissedAcknowledge).HasName("PK_SCX_tMissedAcknowledge");

            entity.ToTable("tMissedAcknowledge", "SCX");

            entity.Property(e => e.KMissedAcknowledge).HasColumnName("kMissedAcknowledge");
            entity.Property(e => e.CEventId)
                .HasMaxLength(1024)
                .HasColumnName("cEventId");
            entity.Property(e => e.NCount).HasColumnName("nCount");
        });

        modelBuilder.Entity<TMobileAuth>(entity =>
        {
            entity.HasKey(e => e.KAuthCode).HasName("PK_wms_tMobileAuth");

            entity.ToTable("tMobileAuth", "WMS");

            entity.Property(e => e.KAuthCode)
                .ValueGeneratedNever()
                .HasColumnName("kAuthCode");
            entity.Property(e => e.KMandant).HasColumnName("kMandant");
        });

        modelBuilder.Entity<TMobileBenutzer>(entity =>
        {
            entity.HasKey(e => e.KMobileBenutzer).HasName("PK_WMS_tMobileBenutzer");

            entity.ToTable("tMobileBenutzer", "WMS");

            entity.Property(e => e.KMobileBenutzer).HasColumnName("kMobileBenutzer");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CIpAddress)
                .HasMaxLength(15)
                .HasColumnName("cIpAddress");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CUniqueId)
                .HasMaxLength(255)
                .HasColumnName("cUniqueId");
            entity.Property(e => e.DLetzteAktion)
                .HasColumnType("datetime")
                .HasColumnName("dLetzteAktion");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
        });

        modelBuilder.Entity<TNachricht>(entity =>
        {
            entity.HasKey(e => e.KNachricht).HasName("PK_Ticketsystem_tNachricht");

            entity.ToTable("tNachricht", "Ticketsystem");

            entity.HasIndex(e => e.KBenutzerErsteller, "IX_Ticketsystem_tNachricht_kBenutzerErsteller");

            entity.HasIndex(e => e.KTicket, "IX_Ticketsystem_tNachricht_kTicket");

            entity.Property(e => e.KNachricht).HasColumnName("kNachricht");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBeschreibung)
                .HasMaxLength(998)
                .HasColumnName("cBeschreibung");
            entity.Property(e => e.CInhalt).HasColumnName("cInhalt");
            entity.Property(e => e.DEmpfangen)
                .HasColumnType("datetime")
                .HasColumnName("dEmpfangen");
            entity.Property(e => e.DErstellung)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dErstellung");
            entity.Property(e => e.DGesendet)
                .HasColumnType("datetime")
                .HasColumnName("dGesendet");
            entity.Property(e => e.KBenutzerErsteller).HasColumnName("kBenutzer_Ersteller");
            entity.Property(e => e.KFileHtmlInhalt).HasColumnName("kFile_HtmlInhalt");
            entity.Property(e => e.KTicket).HasColumnName("kTicket");
            entity.Property(e => e.NRichtung).HasColumnName("nRichtung");
            entity.Property(e => e.NVollstaendigAngelegt).HasColumnName("nVollstaendigAngelegt");
            entity.Property(e => e.NVorgangserkennungGelaufen).HasColumnName("nVorgangserkennungGelaufen");

            entity.HasOne(d => d.KFileHtmlInhaltNavigation).WithMany(p => p.TNachrichts)
                .HasForeignKey(d => d.KFileHtmlInhalt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Ticketsystem_tNachricht_kFile_HtmlInhalt");

            entity.HasOne(d => d.KTicketNavigation).WithMany(p => p.TNachrichts)
                .HasForeignKey(d => d.KTicket)
                .HasConstraintName("FK_Ticketsystem_tNachricht_kTicket");
        });

        modelBuilder.Entity<TNachrichtAngebot>(entity =>
        {
            entity.HasKey(e => e.KNachrichtAngebot).HasName("PK_Ticketsystem_tNachrichtAngebot");

            entity.ToTable("tNachrichtAngebot", "Ticketsystem");

            entity.HasIndex(e => e.KAuftrag, "IX_Ticketsystem_tNachrichtAngebot_kAuftrag");

            entity.HasIndex(e => e.KNachricht, "IX_Ticketsystem_tNachrichtAngebot_kNachricht");

            entity.HasIndex(e => new { e.KNachricht, e.KAuftrag }, "UQ_Ticketsystem_tNachrichtAngebot_kAuftrag_kNachricht").IsUnique();

            entity.Property(e => e.KNachrichtAngebot).HasColumnName("kNachrichtAngebot");
            entity.Property(e => e.CMatchingWord)
                .HasMaxLength(50)
                .HasColumnName("cMatchingWord");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KNachricht).HasColumnName("kNachricht");

            entity.HasOne(d => d.KNachrichtNavigation).WithMany(p => p.TNachrichtAngebots)
                .HasForeignKey(d => d.KNachricht)
                .HasConstraintName("FK_Ticketsystem_tNachrichtAngebot_tNachricht");
        });

        modelBuilder.Entity<TNachrichtArtikel>(entity =>
        {
            entity.HasKey(e => e.KNachrichtArtikel).HasName("PK_Ticketsystem_tNachrichtArtikel");

            entity.ToTable("tNachrichtArtikel", "Ticketsystem");

            entity.HasIndex(e => e.KArtikel, "IX_Ticketsystem_tNachrichtArtikel_kArtikel");

            entity.HasIndex(e => e.KNachricht, "IX_Ticketsystem_tNachrichtArtikel_kNachricht");

            entity.HasIndex(e => new { e.KNachricht, e.KArtikel, e.CMatchingWord }, "UQ_Ticketsystem_tNachrichtArtikel_kNachricht_kArtikel_cMatchingWord").IsUnique();

            entity.Property(e => e.KNachrichtArtikel).HasColumnName("kNachrichtArtikel");
            entity.Property(e => e.CMatchingWord)
                .HasMaxLength(100)
                .HasColumnName("cMatchingWord");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KNachricht).HasColumnName("kNachricht");

            entity.HasOne(d => d.KArtikelNavigation).WithMany(p => p.TNachrichtArtikels)
                .HasForeignKey(d => d.KArtikel)
                .HasConstraintName("FK_Ticketsystem_tNachrichtArtikel_tArtikel");

            entity.HasOne(d => d.KNachrichtNavigation).WithMany(p => p.TNachrichtArtikels)
                .HasForeignKey(d => d.KNachricht)
                .HasConstraintName("FK_Ticketsystem_tNachrichtArtikel_tNachricht");
        });

        modelBuilder.Entity<TNachrichtAuftrag>(entity =>
        {
            entity.HasKey(e => e.KNachrichtAuftrag).HasName("PK_Ticketsystem_tNachrichtAuftrag");

            entity.ToTable("tNachrichtAuftrag", "Ticketsystem");

            entity.HasIndex(e => e.KAuftrag, "IX_Ticketsystem_tNachrichtAuftrag_kAuftrag");

            entity.HasIndex(e => e.KNachricht, "IX_Ticketsystem_tNachrichtAuftrag_kNachricht");

            entity.HasIndex(e => new { e.KNachricht, e.KAuftrag }, "UQ_Ticketsystem_tNachrichtAuftrag_kAuftrag_kNachricht").IsUnique();

            entity.Property(e => e.KNachrichtAuftrag).HasColumnName("kNachrichtAuftrag");
            entity.Property(e => e.CMatchingWord)
                .HasMaxLength(50)
                .HasColumnName("cMatchingWord");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KNachricht).HasColumnName("kNachricht");

            entity.HasOne(d => d.KNachrichtNavigation).WithMany(p => p.TNachrichtAuftrags)
                .HasForeignKey(d => d.KNachricht)
                .HasConstraintName("FK_Ticketsystem_tNachrichtAuftrag_tNachricht");
        });

        modelBuilder.Entity<TNachrichtBenutzerOptionen>(entity =>
        {
            entity.HasKey(e => e.KNachrichtBenutzerOptionen).HasName("PK_Ticketsystem_tNachrichtBenutzerOptionen");

            entity.ToTable("tNachrichtBenutzerOptionen", "Ticketsystem");

            entity.HasIndex(e => e.KNachricht, "IX_Ticketsystem_tNachrichtBenutzerOptionen_kNachricht");

            entity.Property(e => e.KNachrichtBenutzerOptionen).HasColumnName("kNachrichtBenutzerOptionen");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KNachricht).HasColumnName("kNachricht");
            entity.Property(e => e.NEingebetteteBilderAnzeigen).HasColumnName("nEingebetteteBilderAnzeigen");

            entity.HasOne(d => d.KNachrichtNavigation).WithMany(p => p.TNachrichtBenutzerOptionens)
                .HasForeignKey(d => d.KNachricht)
                .HasConstraintName("FK_Ticketsystem_tNachrichtBenutzerOptionen_kNachricht");
        });

        modelBuilder.Entity<TNachrichtEingangsrechnung>(entity =>
        {
            entity.HasKey(e => e.KNachrichtEingangsrechnung).HasName("PK_Ticketsystem_tNachrichtEingangsrechnung");

            entity.ToTable("tNachrichtEingangsrechnung", "Ticketsystem");

            entity.HasIndex(e => e.KEingangsrechnung, "IX_Ticketsystem_tNachrichtEingangsrechnung_kEingangsrechnung");

            entity.HasIndex(e => e.KNachricht, "IX_Ticketsystem_tNachrichtEingangsrechnung_kNachricht");

            entity.Property(e => e.KNachrichtEingangsrechnung).HasColumnName("kNachrichtEingangsrechnung");
            entity.Property(e => e.CMatchingWord)
                .HasMaxLength(50)
                .HasColumnName("cMatchingWord");
            entity.Property(e => e.KEingangsrechnung).HasColumnName("kEingangsrechnung");
            entity.Property(e => e.KNachricht).HasColumnName("kNachricht");

            entity.HasOne(d => d.KNachrichtNavigation).WithMany(p => p.TNachrichtEingangsrechnungs)
                .HasForeignKey(d => d.KNachricht)
                .HasConstraintName("FK_Ticketsystem_tNachrichtEingangsrechnung_tNachricht");
        });

        modelBuilder.Entity<TNachrichtEntwurf>(entity =>
        {
            entity.HasKey(e => e.KNachrichtEntwurf).HasName("PK_Ticketsystem_tNachrichtEntwurf");

            entity.ToTable("tNachrichtEntwurf", "Ticketsystem");

            entity.HasIndex(e => e.KBenutzer, "IX_Ticketsystem_tNachrichtEntwurf_kBenutzer");

            entity.HasIndex(e => e.KTicket, "IX_Ticketsystem_tNachrichtEntwurf_kTicket");

            entity.HasIndex(e => new { e.KTicket, e.KBenutzer }, "UQ_Ticketsystem_tNachrichtentwurf_kTicket_kBenutzer").IsUnique();

            entity.Property(e => e.KNachrichtEntwurf).HasColumnName("kNachrichtEntwurf");
            entity.Property(e => e.CBetreff)
                .HasMaxLength(998)
                .HasColumnName("cBetreff");
            entity.Property(e => e.DErstelldatum)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dErstelldatum");
            entity.Property(e => e.KAusgangskanalEmail).HasColumnName("kAusgangskanalEmail");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KFileHtmlInhalt).HasColumnName("kFile_HtmlInhalt");
            entity.Property(e => e.KTicket).HasColumnName("kTicket");

            entity.HasOne(d => d.KAusgangskanalEmailNavigation).WithMany(p => p.TNachrichtEntwurves)
                .HasForeignKey(d => d.KAusgangskanalEmail)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Ticketsystem_tNachrichtEntwurf_kAusgangskanalEmail");

            entity.HasOne(d => d.KFileHtmlInhaltNavigation).WithMany(p => p.TNachrichtEntwurves)
                .HasForeignKey(d => d.KFileHtmlInhalt)
                .HasConstraintName("FK_Ticketsystem_tNachrichtEntwurf_kFile_HtmlInhalt");

            entity.HasOne(d => d.KTicketNavigation).WithMany(p => p.TNachrichtEntwurves)
                .HasForeignKey(d => d.KTicket)
                .HasConstraintName("FK_Ticketsystem_tNachrichtEntwurf_kTicket");
        });

        modelBuilder.Entity<TNachrichtEntwurfAnhang>(entity =>
        {
            entity.HasKey(e => e.KNachrichtEntwurfAnhang).HasName("PK_Ticketsystem_tNachrichtEntwurfAnhang");

            entity.ToTable("tNachrichtEntwurfAnhang", "Ticketsystem");

            entity.HasIndex(e => e.KAnhang, "IX_Ticketsystem_tNachrichtEntwurfAnhang_kAnhang");

            entity.HasIndex(e => e.KNachrichtEntwurf, "IX_Ticketsystem_tNachrichtEntwurfAnhang_kNachrichtEntwurf");

            entity.Property(e => e.KNachrichtEntwurfAnhang).HasColumnName("kNachrichtEntwurfAnhang");
            entity.Property(e => e.KAnhang).HasColumnName("kAnhang");
            entity.Property(e => e.KNachrichtEntwurf).HasColumnName("kNachrichtEntwurf");

            entity.HasOne(d => d.KAnhangNavigation).WithMany(p => p.TNachrichtEntwurfAnhangs)
                .HasForeignKey(d => d.KAnhang)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Ticketsystem_tNachrichtEntwurfAnhang_kAnhang");

            entity.HasOne(d => d.KNachrichtEntwurfNavigation).WithMany(p => p.TNachrichtEntwurfAnhangs)
                .HasForeignKey(d => d.KNachrichtEntwurf)
                .HasConstraintName("FK_Ticketsystem_tNachrichtEntwurfAnhang_kNachrichtEntwurf");
        });

        modelBuilder.Entity<TNachrichtEntwurfTyp>(entity =>
        {
            entity.HasKey(e => e.KNachrichtEntwurfTyp).HasName("PK_Ticketsystem_tNachrichtEntwurfTyp");

            entity.ToTable("tNachrichtEntwurfTyp", "Ticketsystem");

            entity.HasIndex(e => e.KAntwortkanal, "IX_Ticketsystem_tNachrichtEntwurfTyp_kAntwortkanal");

            entity.HasIndex(e => e.KNachrichtEntwurf, "IX_Ticketsystem_tNachrichtEntwurfTyp_kNachrichtEntwurf");

            entity.Property(e => e.KNachrichtEntwurfTyp).HasColumnName("kNachrichtEntwurfTyp");
            entity.Property(e => e.KAntwortkanal).HasColumnName("kAntwortkanal");
            entity.Property(e => e.KNachrichtEntwurf).HasColumnName("kNachrichtEntwurf");
            entity.Property(e => e.NAntwortTyp).HasColumnName("nAntwortTyp");

            entity.HasOne(d => d.KAntwortkanalNavigation).WithMany(p => p.TNachrichtEntwurfTyps)
                .HasForeignKey(d => d.KAntwortkanal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Ticketsystem_tNachrichtEntwurfTyp_kAntwortkanal");

            entity.HasOne(d => d.KNachrichtEntwurfNavigation).WithMany(p => p.TNachrichtEntwurfTyps)
                .HasForeignKey(d => d.KNachrichtEntwurf)
                .HasConstraintName("FK_Ticketsystem_tNachrichtEntwurfTyp_kNachrichtEntwurf");
        });

        modelBuilder.Entity<TNachrichtLieferantenbestellung>(entity =>
        {
            entity.HasKey(e => e.KNachrichtLieferantenbestellung).HasName("PK_Ticketsystem_tNachrichtLieferantenbestellung");

            entity.ToTable("tNachrichtLieferantenbestellung", "Ticketsystem");

            entity.HasIndex(e => e.KLieferantenbestellung, "IX_Ticketsystem_tNachrichtLieferantenbestellung_kLieferantenbestellung");

            entity.HasIndex(e => e.KNachricht, "IX_Ticketsystem_tNachrichtLieferantenbestellung_kNachricht");

            entity.Property(e => e.KNachrichtLieferantenbestellung).HasColumnName("kNachrichtLieferantenbestellung");
            entity.Property(e => e.CMatchingWord)
                .HasMaxLength(50)
                .HasColumnName("cMatchingWord");
            entity.Property(e => e.KLieferantenbestellung).HasColumnName("kLieferantenbestellung");
            entity.Property(e => e.KNachricht).HasColumnName("kNachricht");

            entity.HasOne(d => d.KNachrichtNavigation).WithMany(p => p.TNachrichtLieferantenbestellungs)
                .HasForeignKey(d => d.KNachricht)
                .HasConstraintName("FK_Ticketsystem_tNachrichtLieferantenbestellung_tNachricht");
        });

        modelBuilder.Entity<TNachrichtPreisanfrage>(entity =>
        {
            entity.HasKey(e => e.KNachrichtPreisanfrage).HasName("PK_Ticketsystem_tNachrichtPreisanfrage");

            entity.ToTable("tNachrichtPreisanfrage", "Ticketsystem");

            entity.HasIndex(e => e.KLieferantenbestellung, "IX_Ticketsystem_tNachrichtPreisanfrage_kLieferantenbestellung");

            entity.HasIndex(e => e.KNachricht, "IX_Ticketsystem_tNachrichtPreisanfrage_kNachricht");

            entity.Property(e => e.KNachrichtPreisanfrage).HasColumnName("kNachrichtPreisanfrage");
            entity.Property(e => e.CMatchingWord)
                .HasMaxLength(50)
                .HasColumnName("cMatchingWord");
            entity.Property(e => e.KLieferantenbestellung).HasColumnName("kLieferantenbestellung");
            entity.Property(e => e.KNachricht).HasColumnName("kNachricht");

            entity.HasOne(d => d.KNachrichtNavigation).WithMany(p => p.TNachrichtPreisanfrages)
                .HasForeignKey(d => d.KNachricht)
                .HasConstraintName("FK_Ticketsystem_tNachrichtPreisanfrage_tNachricht");
        });

        modelBuilder.Entity<TNachrichtRechnung>(entity =>
        {
            entity.HasKey(e => e.KNachrichtRechnung).HasName("PK_Ticketsystem_tNachrichtRechnung");

            entity.ToTable("tNachrichtRechnung", "Ticketsystem");

            entity.HasIndex(e => e.KNachricht, "IX_Ticketsystem_tNachrichtRechnung_kNachricht");

            entity.HasIndex(e => e.KRechnung, "IX_Ticketsystem_tNachrichtRechnung_kRechnung");

            entity.HasIndex(e => new { e.KNachricht, e.KRechnung }, "UQ_Ticketsystem_tNachrichtRechnung_kNachricht_kRechnung").IsUnique();

            entity.Property(e => e.KNachrichtRechnung).HasColumnName("kNachrichtRechnung");
            entity.Property(e => e.CMatchingWord)
                .HasMaxLength(50)
                .HasColumnName("cMatchingWord");
            entity.Property(e => e.KNachricht).HasColumnName("kNachricht");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");

            entity.HasOne(d => d.KNachrichtNavigation).WithMany(p => p.TNachrichtRechnungs)
                .HasForeignKey(d => d.KNachricht)
                .HasConstraintName("FK_Ticketsystem_tNachrichtRechnung_tNachricht");
        });

        modelBuilder.Entity<TNachrichtRechnungskorrektur>(entity =>
        {
            entity.HasKey(e => e.KNachrichtRechnungskorrektur).HasName("PK_Ticketsystem_tNachrichtRechnungskorrektur");

            entity.ToTable("tNachrichtRechnungskorrektur", "Ticketsystem");

            entity.HasIndex(e => e.KGutschrift, "IX_Ticketsystem_tNachrichtRechnungskorrektur_kGutschrift");

            entity.HasIndex(e => e.KNachricht, "IX_Ticketsystem_tNachrichtRechnungskorrektur_kNachricht");

            entity.HasIndex(e => new { e.KNachricht, e.KGutschrift }, "UQ_Ticketsystem_tNachrichtRechnungskorrektur_kGutschrift_kNachricht").IsUnique();

            entity.Property(e => e.KNachrichtRechnungskorrektur).HasColumnName("kNachrichtRechnungskorrektur");
            entity.Property(e => e.CMatchingWord)
                .HasMaxLength(50)
                .HasColumnName("cMatchingWord");
            entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");
            entity.Property(e => e.KNachricht).HasColumnName("kNachricht");

            entity.HasOne(d => d.KNachrichtNavigation).WithMany(p => p.TNachrichtRechnungskorrekturs)
                .HasForeignKey(d => d.KNachricht)
                .HasConstraintName("FK_Ticketsystem_tNachrichtRechnungskorrektur_tNachricht");
        });

        modelBuilder.Entity<TNachrichtRetoure>(entity =>
        {
            entity.HasKey(e => e.KNachrichtRetoure).HasName("PK_Ticketsystem_tNachrichtRetoure");

            entity.ToTable("tNachrichtRetoure", "Ticketsystem");

            entity.HasIndex(e => e.KNachricht, "IX_Ticketsystem_tNachrichtRetoure_kNachricht");

            entity.HasIndex(e => e.KRmretoure, "IX_Ticketsystem_tNachrichtRetoure_kRMRetoure");

            entity.HasIndex(e => new { e.KNachricht, e.KRmretoure }, "UQ_Ticketsystem_tNachrichtRetoure_kNachricht_kRMRetoure").IsUnique();

            entity.Property(e => e.KNachrichtRetoure).HasColumnName("kNachrichtRetoure");
            entity.Property(e => e.CMatchingWord)
                .HasMaxLength(255)
                .HasColumnName("cMatchingWord");
            entity.Property(e => e.KNachricht).HasColumnName("kNachricht");
            entity.Property(e => e.KRmretoure).HasColumnName("kRMRetoure");

            entity.HasOne(d => d.KNachrichtNavigation).WithMany(p => p.TNachrichtRetoures)
                .HasForeignKey(d => d.KNachricht)
                .HasConstraintName("FK_Ticketsystem_tNachrichtRetoure_tNachricht");
        });

        modelBuilder.Entity<TNachrichtTyp>(entity =>
        {
            entity.HasKey(e => e.KNachrichtTyp).HasName("PK_Ticketsystem_tNachrichtTyp");

            entity.ToTable("tNachrichtTyp", "Ticketsystem");

            entity.HasIndex(e => e.KAntwortkanal, "IX_Ticketsystem_tNachrichtTyp_kAntwortkanal");

            entity.HasIndex(e => e.KNachricht, "IX_Ticketsystem_tNachrichtTyp_kNachricht");

            entity.Property(e => e.KNachrichtTyp).HasColumnName("kNachrichtTyp");
            entity.Property(e => e.KAntwortkanal).HasColumnName("kAntwortkanal");
            entity.Property(e => e.KNachricht).HasColumnName("kNachricht");
            entity.Property(e => e.NAntwortTyp).HasColumnName("nAntwortTyp");

            entity.HasOne(d => d.KAntwortkanalNavigation).WithMany(p => p.TNachrichtTyps)
                .HasForeignKey(d => d.KAntwortkanal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Ticketsystem_tNachrichtTyp_kAntwortkanal");

            entity.HasOne(d => d.KNachrichtNavigation).WithMany(p => p.TNachrichtTyps)
                .HasForeignKey(d => d.KNachricht)
                .HasConstraintName("FK_Ticketsystem_tNachrichtTyp_kNachricht");
        });

        modelBuilder.Entity<TNachrichtenanhang>(entity =>
        {
            entity.HasKey(e => e.KNachrichtenanhang).HasName("PK_Ticketsystem_tNachrichtenanhang");

            entity.ToTable("tNachrichtenanhang", "Ticketsystem");

            entity.HasIndex(e => e.KAnhang, "IX_Ticketsystem_tNachrichtenanhang_kAnhang");

            entity.HasIndex(e => e.KNachricht, "IX_Ticketsystem_tNachrichtenanhang_kNachricht");

            entity.HasIndex(e => new { e.KAnhang, e.KNachricht }, "UQ_Ticketsystem_tNachrichtenanhang_kAnhang_kNachricht").IsUnique();

            entity.Property(e => e.KNachrichtenanhang).HasColumnName("kNachrichtenanhang");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KAnhang).HasColumnName("kAnhang");
            entity.Property(e => e.KBenutzerFreigabeStatus).HasColumnName("kBenutzer_FreigabeStatus");
            entity.Property(e => e.KNachricht).HasColumnName("kNachricht");
            entity.Property(e => e.NFreigabeStatus).HasColumnName("nFreigabeStatus");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");

            entity.HasOne(d => d.KAnhangNavigation).WithMany(p => p.TNachrichtenanhangs)
                .HasForeignKey(d => d.KAnhang)
                .HasConstraintName("FK_Ticketsystem_tNachrichtenanhang_kAnhang");

            entity.HasOne(d => d.KNachrichtNavigation).WithMany(p => p.TNachrichtenanhangs)
                .HasForeignKey(d => d.KNachricht)
                .HasConstraintName("FK_Ticketsystem_tNachrichtenanhang_kNachricht");
        });

        modelBuilder.Entity<TNegotiationAngebot>(entity =>
        {
            entity.HasKey(e => e.KNegotiationAngebot).HasName("PK_Ebay_tNegotiationAngebot");

            entity.ToTable("tNegotiationAngebot", "Ebay");

            entity.Property(e => e.KNegotiationAngebot).HasColumnName("kNegotiationAngebot");
            entity.Property(e => e.CNachricht)
                .HasMaxLength(2048)
                .HasColumnName("cNachricht");
            entity.Property(e => e.FRabattAbsolut)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fRabattAbsolut");
            entity.Property(e => e.FRabattProzentual)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fRabattProzentual");
            entity.Property(e => e.KAlienItem).HasColumnName("kAlienItem");
            entity.Property(e => e.KEbayItem).HasColumnName("kEbayItem");
            entity.Property(e => e.NIstProzentual).HasColumnName("nIstProzentual");
            entity.Property(e => e.NRabattmenge).HasColumnName("nRabattmenge");

            entity.HasOne(d => d.KAlienItemNavigation).WithMany(p => p.TNegotiationAngebots)
                .HasForeignKey(d => d.KAlienItem)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Ebay_tNegotiationAngebot_kAlienItem");

            entity.HasOne(d => d.KEbayItemNavigation).WithMany(p => p.TNegotiationAngebots)
                .HasForeignKey(d => d.KEbayItem)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Ebay_tNegotiationAngebot_kEbayItem");
        });

        modelBuilder.Entity<TNegotiationAngebotStatus>(entity =>
        {
            entity.HasKey(e => e.KNegotiationAngebotStatus).HasName("PK_Ebay_tNegotiationAngebotStatus");

            entity.ToTable("tNegotiationAngebotStatus", "Ebay");

            entity.Property(e => e.KNegotiationAngebotStatus).HasColumnName("kNegotiationAngebotStatus");
            entity.Property(e => e.CDauerEinheit)
                .HasMaxLength(255)
                .HasColumnName("cDauerEinheit");
            entity.Property(e => e.CKaeuferMaskiert)
                .HasMaxLength(255)
                .HasColumnName("cKaeuferMaskiert");
            entity.Property(e => e.DErstellungsDatum)
                .HasColumnType("datetime")
                .HasColumnName("dErstellungsDatum");
            entity.Property(e => e.KAlienItem).HasColumnName("kAlienItem");
            entity.Property(e => e.KEbayItem).HasColumnName("kEbayItem");
            entity.Property(e => e.NDauer).HasColumnName("nDauer");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");

            entity.HasOne(d => d.KAlienItemNavigation).WithMany(p => p.TNegotiationAngebotStatuses)
                .HasForeignKey(d => d.KAlienItem)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Ebay_tNegotiationAngebotStatus_kAlienItem");

            entity.HasOne(d => d.KEbayItemNavigation).WithMany(p => p.TNegotiationAngebotStatuses)
                .HasForeignKey(d => d.KEbayItem)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Ebay_tNegotiationAngebotStatus_kEbayItem");
        });

        modelBuilder.Entity<TNegotiationAutomatisierung>(entity =>
        {
            entity.HasKey(e => e.KNegotiationAutomatisierung).HasName("PK_Ebay_tNegotiationAutomatisierung");

            entity.ToTable("tNegotiationAutomatisierung", "Ebay");

            entity.Property(e => e.KNegotiationAutomatisierung).HasColumnName("kNegotiationAutomatisierung");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CNachricht)
                .HasMaxLength(2048)
                .HasColumnName("cNachricht");
            entity.Property(e => e.FRabattAbsolut)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabattAbsolut");
            entity.Property(e => e.FRabattProzentual)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabattProzentual");
            entity.Property(e => e.KAlienItem).HasColumnName("kAlienItem");
            entity.Property(e => e.KEbayItem).HasColumnName("kEbayItem");
            entity.Property(e => e.NIstAngebotsIndividuell).HasColumnName("nIstAngebotsIndividuell");
            entity.Property(e => e.NIstAutomatisiert).HasColumnName("nIstAutomatisiert");
            entity.Property(e => e.NIstProzentual).HasColumnName("nIstProzentual");
            entity.Property(e => e.NRabattmenge).HasColumnName("nRabattmenge");

            entity.HasOne(d => d.KAlienItemNavigation).WithMany(p => p.TNegotiationAutomatisierungs)
                .HasForeignKey(d => d.KAlienItem)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Ebay_tNegotiationAutomatisierung_kAlienItem");

            entity.HasOne(d => d.KEbayItemNavigation).WithMany(p => p.TNegotiationAutomatisierungs)
                .HasForeignKey(d => d.KEbayItem)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Ebay_tNegotiationAutomatisierung_kEbayItem");
        });

        modelBuilder.Entity<TNegotiationGlobaleEinstellungen>(entity =>
        {
            entity.HasKey(e => e.KNegotiationGlobaleEinstellungen).HasName("PK_Ebay_tNegotiationGlobaleEinstellungen");

            entity.ToTable("tNegotiationGlobaleEinstellungen", "Ebay");

            entity.Property(e => e.KNegotiationGlobaleEinstellungen).HasColumnName("kNegotiationGlobaleEinstellungen");
            entity.Property(e => e.CNachricht)
                .HasMaxLength(2048)
                .HasColumnName("cNachricht");
            entity.Property(e => e.FRabattAbsolut)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabattAbsolut");
            entity.Property(e => e.FRabattProzentual)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabattProzentual");
            entity.Property(e => e.KEbayuser).HasColumnName("kEbayuser");
            entity.Property(e => e.NAutomatischVersenden).HasColumnName("nAutomatischVersenden");
            entity.Property(e => e.NIstProzentual).HasColumnName("nIstProzentual");
            entity.Property(e => e.NRabattMenge).HasColumnName("nRabattMenge");

            entity.HasOne(d => d.KEbayuserNavigation).WithMany(p => p.TNegotiationGlobaleEinstellungens)
                .HasForeignKey(d => d.KEbayuser)
                .HasConstraintName("FK_Ebay_tNegotiationGlobaleEinstellungen_kEbayuser");
        });

        modelBuilder.Entity<TNegotiationItem>(entity =>
        {
            entity.HasKey(e => e.KNegotiationItem).HasName("PK_Ebay_tNegotiationItem");

            entity.ToTable("tNegotiationItem", "Ebay");

            entity.Property(e => e.KNegotiationItem).HasColumnName("kNegotiationItem");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DZuletztAngefordert)
                .HasColumnType("datetime")
                .HasColumnName("dZuletztAngefordert");
            entity.Property(e => e.KAlienItem).HasColumnName("kAlienItem");
            entity.Property(e => e.KEbayItem).HasColumnName("kEbayItem");
            entity.Property(e => e.KEbayuser).HasColumnName("kEbayuser");
            entity.Property(e => e.NSiteId).HasColumnName("nSiteId");

            entity.HasOne(d => d.KAlienItemNavigation).WithMany(p => p.TNegotiationItems)
                .HasForeignKey(d => d.KAlienItem)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Ebay_tNegotiationItem_kAlienItem");

            entity.HasOne(d => d.KEbayItemNavigation).WithMany(p => p.TNegotiationItems)
                .HasForeignKey(d => d.KEbayItem)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Ebay_tNegotiationItem_kEbayItem");

            entity.HasOne(d => d.KEbayuserNavigation).WithMany(p => p.TNegotiationItems)
                .HasForeignKey(d => d.KEbayuser)
                .HasConstraintName("FK_Ebay_tNegotiationItem_kEbayuser");

            entity.HasOne(d => d.NSite).WithMany(p => p.TNegotiationItems)
                .HasForeignKey(d => d.NSiteId)
                .HasConstraintName("FK_Ebay_tNegotiationItem_nSiteId");
        });

        modelBuilder.Entity<TNegotiationVerlauf>(entity =>
        {
            entity.HasKey(e => e.KNegotiationVerlauf).HasName("PK_Ebay_tNegotiationVerlauf");

            entity.ToTable("tNegotiationVerlauf", "Ebay");

            entity.Property(e => e.KNegotiationVerlauf).HasColumnName("kNegotiationVerlauf");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DZuletztAngefordert)
                .HasColumnType("datetime")
                .HasColumnName("dZuletztAngefordert");
            entity.Property(e => e.KAlienItem).HasColumnName("kAlienItem");
            entity.Property(e => e.KEbayItem).HasColumnName("kEbayItem");
            entity.Property(e => e.KEbayuser).HasColumnName("kEbayuser");
            entity.Property(e => e.NSiteId).HasColumnName("nSiteId");

            entity.HasOne(d => d.KAlienItemNavigation).WithMany(p => p.TNegotiationVerlaufs)
                .HasForeignKey(d => d.KAlienItem)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Ebay_tNegotiationVerlauf_kAlienItem");

            entity.HasOne(d => d.KEbayItemNavigation).WithMany(p => p.TNegotiationVerlaufs)
                .HasForeignKey(d => d.KEbayItem)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Ebay_tNegotiationVerlauf_kEbayItem");

            entity.HasOne(d => d.KEbayuserNavigation).WithMany(p => p.TNegotiationVerlaufs)
                .HasForeignKey(d => d.KEbayuser)
                .HasConstraintName("FK_Ebay_tNegotiationVerlauf_kEbayuser");

            entity.HasOne(d => d.NSite).WithMany(p => p.TNegotiationVerlaufs)
                .HasForeignKey(d => d.NSiteId)
                .HasConstraintName("FK_Ebay_tNegotiationVerlauf_nSiteId");
        });

        modelBuilder.Entity<TNotification>(entity =>
        {
            entity.HasKey(e => e.KNotification).HasName("PK_SCX_tNotification");

            entity.ToTable("tNotification", "SCX");

            entity.HasIndex(e => e.KShop, "IX_SCX_tNotification_kShop");

            entity.HasIndex(e => e.NSeverity, "IX_SCX_tNotification_nSeverity");

            entity.HasIndex(e => e.NType, "IX_SCX_tNotification_nType");

            entity.Property(e => e.KNotification).HasColumnName("kNotification");
            entity.Property(e => e.CEventId)
                .HasMaxLength(122)
                .HasColumnName("cEventId");
            entity.Property(e => e.COrderCancellationRequestId)
                .HasMaxLength(255)
                .HasColumnName("cOrderCancellationRequestId");
            entity.Property(e => e.CReference)
                .HasMaxLength(255)
                .HasColumnName("cReference");
            entity.Property(e => e.DCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("dCreationDate");
            entity.Property(e => e.KId).HasColumnName("kId");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NGelesen).HasColumnName("nGelesen");
            entity.Property(e => e.NSeverity).HasColumnName("nSeverity");
            entity.Property(e => e.NType).HasColumnName("nType");
        });

        modelBuilder.Entity<TNotificationDetail>(entity =>
        {
            entity.HasKey(e => e.KNotificationDetail).HasName("PK_SCX_tNotificationDetail");

            entity.ToTable("tNotificationDetail", "SCX");

            entity.Property(e => e.KNotificationDetail).HasColumnName("kNotificationDetail");
            entity.Property(e => e.CCode)
                .HasMaxLength(255)
                .HasColumnName("cCode");
            entity.Property(e => e.CMessage).HasColumnName("cMessage");
            entity.Property(e => e.KNotification).HasColumnName("kNotification");

            entity.HasOne(d => d.KNotificationNavigation).WithMany(p => p.TNotificationDetails)
                .HasForeignKey(d => d.KNotification)
                .HasConstraintName("FK_SCX_tNotification_kNotification");
        });

        modelBuilder.Entity<TNotiz>(entity =>
        {
            entity.HasKey(e => e.KNotiz).HasName("PK_Kunde_tNotiz");

            entity.ToTable("tNotiz", "Kunde");

            entity.Property(e => e.KNotiz).HasColumnName("kNotiz");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CNotiz).HasColumnName("cNotiz");
            entity.Property(e => e.DErstellt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<TNotiz1>(entity =>
        {
            entity.HasKey(e => e.KNotiz).HasName("PK_Ticketsystem_tNotiz");

            entity.ToTable("tNotiz", "Ticketsystem");

            entity.HasIndex(e => e.KBenutzer, "IX_Ticketsystem_tNotiz_kBenutzer");

            entity.HasIndex(e => e.KTicket, "IX_Ticketsystem_tNotiz_kTicket");

            entity.Property(e => e.KNotiz).HasColumnName("kNotiz");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBeschreibung)
                .HasMaxLength(998)
                .HasColumnName("cBeschreibung");
            entity.Property(e => e.DErstellung)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dErstellung");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KFileHtmlInhalt).HasColumnName("kFile_HtmlInhalt");
            entity.Property(e => e.KTicket).HasColumnName("kTicket");

            entity.HasOne(d => d.KFileHtmlInhaltNavigation).WithMany(p => p.TNotiz1s)
                .HasForeignKey(d => d.KFileHtmlInhalt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Ticketsystem_tNotiz_kFile_HtmlInhalt");

            entity.HasOne(d => d.KTicketNavigation).WithMany(p => p.TNotiz1s)
                .HasForeignKey(d => d.KTicket)
                .HasConstraintName("FK_Ticketsystem_tNotiz_kTicket");
        });

        modelBuilder.Entity<TNotizAnhang>(entity =>
        {
            entity.HasKey(e => e.KNotizAnhang).HasName("PK_Ticketsystem_tNotizAnhang");

            entity.ToTable("tNotizAnhang", "Ticketsystem");

            entity.HasIndex(e => e.KAnhang, "IX_Ticketsystem_tNotizAnhang_kAnhang");

            entity.HasIndex(e => e.KNotiz, "IX_Ticketsystem_tNotizAnhang_kNotiz");

            entity.HasIndex(e => new { e.KAnhang, e.KNotiz }, "UQ_Ticketsystem_tNotizAnhang_kAnhang_kNotiz").IsUnique();

            entity.Property(e => e.KNotizAnhang).HasColumnName("kNotizAnhang");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KAnhang).HasColumnName("kAnhang");
            entity.Property(e => e.KNotiz).HasColumnName("kNotiz");

            entity.HasOne(d => d.KAnhangNavigation).WithMany(p => p.TNotizAnhangs)
                .HasForeignKey(d => d.KAnhang)
                .HasConstraintName("FK_Ticketsystem_tNotizAnhang_kAnhang");

            entity.HasOne(d => d.KNotizNavigation).WithMany(p => p.TNotizAnhangs)
                .HasForeignKey(d => d.KNotiz)
                .HasConstraintName("FK_Ticketsystem_tNotizAnhang_kNotiz");
        });

        modelBuilder.Entity<TNotizEntwurf>(entity =>
        {
            entity.HasKey(e => e.KNotizEntwurf).HasName("PK_Ticketsystem_tNotizEntwurf");

            entity.ToTable("tNotizEntwurf", "Ticketsystem");

            entity.HasIndex(e => e.KBenutzer, "IX_Ticketsystem_tNotizEntwurf_kBenutzer");

            entity.HasIndex(e => e.KTicket, "IX_Ticketsystem_tNotizEntwurf_kTicket");

            entity.HasIndex(e => new { e.KTicket, e.KBenutzer }, "UQ_Ticketsystem_tNotizEntwurf_kTicket_kBenutzer").IsUnique();

            entity.Property(e => e.KNotizEntwurf).HasColumnName("kNotizEntwurf");
            entity.Property(e => e.CBetreff)
                .HasMaxLength(998)
                .HasColumnName("cBetreff");
            entity.Property(e => e.DErstelldatum)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dErstelldatum");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KFileHtmlInhalt).HasColumnName("kFile_HtmlInhalt");
            entity.Property(e => e.KTicket).HasColumnName("kTicket");

            entity.HasOne(d => d.KFileHtmlInhaltNavigation).WithMany(p => p.TNotizEntwurves)
                .HasForeignKey(d => d.KFileHtmlInhalt)
                .HasConstraintName("FK_Ticketsystem_tNotizEntwurf_kFile_HtmlInhalt");

            entity.HasOne(d => d.KTicketNavigation).WithMany(p => p.TNotizEntwurves)
                .HasForeignKey(d => d.KTicket)
                .HasConstraintName("FK_Ticketsystem_tNotizEntwurf_kTicket");
        });

        modelBuilder.Entity<TNotizEntwurfAnhang>(entity =>
        {
            entity.HasKey(e => e.KNotizEntwurfAnhang).HasName("PK_Ticketsystem_tNotizEntwurfAnhang");

            entity.ToTable("tNotizEntwurfAnhang", "Ticketsystem");

            entity.HasIndex(e => e.KAnhang, "IX_Ticketsystem_tNotizEntwurfAnhang_kAnhang");

            entity.HasIndex(e => e.KNotizEntwurf, "IX_Ticketsystem_tNotizEntwurfAnhang_kNotizEntwurf");

            entity.Property(e => e.KNotizEntwurfAnhang).HasColumnName("kNotizEntwurfAnhang");
            entity.Property(e => e.KAnhang).HasColumnName("kAnhang");
            entity.Property(e => e.KNotizEntwurf).HasColumnName("kNotizEntwurf");

            entity.HasOne(d => d.KAnhangNavigation).WithMany(p => p.TNotizEntwurfAnhangs)
                .HasForeignKey(d => d.KAnhang)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Ticketsystem_tNotizEntwurfAnhang_kAnhang");

            entity.HasOne(d => d.KNotizEntwurfNavigation).WithMany(p => p.TNotizEntwurfAnhangs)
                .HasForeignKey(d => d.KNotizEntwurf)
                .HasConstraintName("FK_Ticketsystem_tNotizEntwurfAnhang_kNotizEntwurf");
        });

        modelBuilder.Entity<TOauthConfig>(entity =>
        {
            entity.HasKey(e => e.CId).HasName("PK_dbo_tOauthConfig");

            entity.ToTable("tOauthConfig");

            entity.Property(e => e.CId)
                .HasMaxLength(255)
                .HasColumnName("cId");
            entity.Property(e => e.CAuthorize)
                .HasMaxLength(255)
                .HasColumnName("cAuthorize");
            entity.Property(e => e.CClientCallback)
                .HasMaxLength(255)
                .HasColumnName("cClientCallback");
            entity.Property(e => e.CClientId)
                .HasMaxLength(255)
                .HasColumnName("cClientId");
            entity.Property(e => e.CClientSecret)
                .HasMaxLength(255)
                .HasColumnName("cClientSecret");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CScopes).HasColumnName("cScopes");
            entity.Property(e => e.CToken)
                .HasMaxLength(255)
                .HasColumnName("cToken");
            entity.Property(e => e.NFlow).HasColumnName("nFlow");
        });

        modelBuilder.Entity<TOauthToken>(entity =>
        {
            entity.HasKey(e => e.KOauthToken).HasName("PK_dbo_tOauthToken");

            entity.ToTable("tOauthToken");

            entity.Property(e => e.KOauthToken).HasColumnName("kOauthToken");
            entity.Property(e => e.CAccessToken).HasColumnName("cAccessToken");
            entity.Property(e => e.CConfigId)
                .HasMaxLength(255)
                .HasColumnName("cConfigId");
            entity.Property(e => e.CRefreshToken).HasColumnName("cRefreshToken");
            entity.Property(e => e.DValidUntil)
                .HasColumnType("datetime")
                .HasColumnName("dValidUntil");
            entity.Property(e => e.NInvalid).HasColumnName("nInvalid");

            entity.HasOne(d => d.CConfig).WithMany(p => p.TOauthTokens)
                .HasForeignKey(d => d.CConfigId)
                .HasConstraintName("FK_dbo_tOauthToken_cConfigId");
        });

        modelBuilder.Entity<TOffer>(entity =>
        {
            entity.HasKey(e => e.KOffer).HasName("PK_SCX_tOffer");

            entity.ToTable("tOffer", "SCX");

            entity.HasIndex(e => e.CChannelOfferId, "IX_SCX_tOffer_cChannelOfferId_INCL");

            entity.HasIndex(e => new { e.KArtikel, e.KShop }, "UQ_SCX_tOffer")
                .IsUnique()
                .HasFilter("([nStatus]<>(5) AND [kArtikel] IS NOT NULL)");

            entity.Property(e => e.KOffer).HasColumnName("kOffer");
            entity.Property(e => e.CChannelOfferId)
                .HasMaxLength(50)
                .HasColumnName("cChannelOfferId");
            entity.Property(e => e.CErrorMessage).HasColumnName("cErrorMessage");
            entity.Property(e => e.CHash)
                .HasMaxLength(40)
                .HasColumnName("cHash");
            entity.Property(e => e.CListingUrl)
                .HasMaxLength(2000)
                .HasColumnName("cListingUrl");
            entity.Property(e => e.DActiveSince)
                .HasColumnType("datetime")
                .HasColumnName("dActiveSince");
            entity.Property(e => e.DBeendet)
                .HasColumnType("datetime")
                .HasColumnName("dBeendet");
            entity.Property(e => e.DExpirationDate)
                .HasColumnType("datetime")
                .HasColumnName("dExpirationDate");
            entity.Property(e => e.DFailedAt)
                .HasColumnType("datetime")
                .HasColumnName("dFailedAt");
            entity.Property(e => e.DLetzterUpload)
                .HasColumnType("datetime")
                .HasColumnName("dLetzterUpload");
            entity.Property(e => e.DPriceUpdatedUtc)
                .HasColumnType("datetime")
                .HasColumnName("dPriceUpdatedUtc");
            entity.Property(e => e.DQuantityUpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("dQuantityUpdatedAt");
            entity.Property(e => e.DStatusReceivedUtc)
                .HasColumnType("datetime")
                .HasColumnName("dStatusReceivedUtc");
            entity.Property(e => e.FQuantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fQuantity");
            entity.Property(e => e.FZuletztHochgeladenerPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZuletztHochgeladenerPreis");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KCategory).HasColumnName("kCategory");
            entity.Property(e => e.KParentOffer).HasColumnName("kParentOffer");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NIsListed).HasColumnName("nIsListed");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
            entity.Property(e => e.NType).HasColumnName("nType");
        });

        modelBuilder.Entity<TOfferFailure>(entity =>
        {
            entity.HasKey(e => e.KOfferFailure).HasName("PK_SCX_tOfferFailure");

            entity.ToTable("tOfferFailure", "SCX");

            entity.Property(e => e.KOfferFailure).HasColumnName("kOfferFailure");
            entity.Property(e => e.CCode)
                .HasMaxLength(255)
                .HasColumnName("cCode");
            entity.Property(e => e.CLongMessage).HasColumnName("cLongMessage");
            entity.Property(e => e.CMessage).HasColumnName("cMessage");
            entity.Property(e => e.DCreatedAtUtc)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("dCreatedAtUtc");
            entity.Property(e => e.KOffer).HasColumnName("kOffer");

            entity.HasOne(d => d.KOfferNavigation).WithMany(p => p.TOfferFailures)
                .HasForeignKey(d => d.KOffer)
                .HasConstraintName("FK_SCX_tOfferFailure_kOffer");
        });

        modelBuilder.Entity<TOperation>(entity =>
        {
            entity.HasKey(e => e.KOperation).HasName("PK_pps_tOperation");

            entity.ToTable("tOperation", "pps");

            entity.HasIndex(e => e.COperationNumber, "UQ_pps_tOperation_cOperationNumber").IsUnique();

            entity.Property(e => e.KOperation).HasColumnName("kOperation");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CDescription).HasColumnName("cDescription");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.COperationNumber)
                .HasMaxLength(100)
                .HasColumnName("cOperationNumber");
            entity.Property(e => e.DCreated)
                .HasDefaultValueSql("(sysdatetimeoffset())")
                .HasColumnName("dCreated");
            entity.Property(e => e.DLastChanged)
                .HasDefaultValueSql("(sysdatetimeoffset())")
                .HasColumnName("dLastChanged");
            entity.Property(e => e.KBenutzerLastChanged).HasColumnName("kBenutzerLastChanged");
            entity.Property(e => e.NIsCompletionMandatory).HasColumnName("nIsCompletionMandatory");
            entity.Property(e => e.NIsInactive).HasColumnName("nIsInactive");
            entity.Property(e => e.NIsInternal).HasColumnName("nIsInternal");
        });

        modelBuilder.Entity<TOperationCustomField>(entity =>
        {
            entity.HasKey(e => e.KOperationCustomField).HasName("PK_pps_tOperationCustomField");

            entity.ToTable("tOperationCustomField", "pps");

            entity.HasIndex(e => new { e.KAttribut, e.KOperation }, "UQ_pps_tOperationCustomField_kAttribut_kOperation").IsUnique();

            entity.Property(e => e.KOperationCustomField).HasColumnName("kOperationCustomField");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CWertVarchar).HasColumnName("cWertVarchar");
            entity.Property(e => e.DWertDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dWertDateTime");
            entity.Property(e => e.FWertDecimal)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertDecimal");
            entity.Property(e => e.KAttribut).HasColumnName("kAttribut");
            entity.Property(e => e.KOperation).HasColumnName("kOperation");
            entity.Property(e => e.NWertInt).HasColumnName("nWertInt");
        });

        modelBuilder.Entity<TOperationFile>(entity =>
        {
            entity.HasKey(e => e.KOperationFile).HasName("PK_pps_tOperationFile");

            entity.ToTable("tOperationFile", "pps");

            entity.HasIndex(e => new { e.KOperation, e.CName }, "UQ_pps_tOperationFile_kOperation_cName")
                .IsUnique()
                .HasFilter("([cName] IS NOT NULL)");

            entity.HasIndex(e => new { e.KOperation, e.KFile }, "UQ_pps_tOperationFile_kOperation_kFile").IsUnique();

            entity.Property(e => e.KOperationFile).HasColumnName("kOperationFile");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KFile).HasColumnName("kFile");
            entity.Property(e => e.KOperation).HasColumnName("kOperation");
            entity.Property(e => e.NSort).HasColumnName("nSort");

            entity.HasOne(d => d.KOperationNavigation).WithMany(p => p.TOperationFiles)
                .HasForeignKey(d => d.KOperation)
                .HasConstraintName("FK_pps_tOperationFile_kOperation");
        });

        modelBuilder.Entity<TOperationLabel>(entity =>
        {
            entity.HasKey(e => new { e.KOperation, e.KLabel }).HasName("PK_pps_tOperationLabel");

            entity.ToTable("tOperationLabel", "pps");

            entity.Property(e => e.KOperation).HasColumnName("kOperation");
            entity.Property(e => e.KLabel).HasColumnName("kLabel");

            entity.HasOne(d => d.KOperationNavigation).WithMany(p => p.TOperationLabels)
                .HasForeignKey(d => d.KOperation)
                .HasConstraintName("FK_pps_tOperationLabel_kOperation");
        });

        modelBuilder.Entity<TOperationStep>(entity =>
        {
            entity.HasKey(e => e.KOperationStep).HasName("PK_pps_tOperationStep");

            entity.ToTable("tOperationStep", "pps");

            entity.Property(e => e.KOperationStep).HasColumnName("kOperationStep");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(100)
                .HasColumnName("cName");
            entity.Property(e => e.KOperation).HasColumnName("kOperation");
            entity.Property(e => e.NSort).HasColumnName("nSort");

            entity.HasOne(d => d.KOperationNavigation).WithMany(p => p.TOperationSteps)
                .HasForeignKey(d => d.KOperation)
                .HasConstraintName("FK_pps_tOperationStep_kOperation");
        });

        modelBuilder.Entity<TOperationStepFile>(entity =>
        {
            entity.HasKey(e => e.KOperationStepFile).HasName("PK_pps_tOperationStepFile");

            entity.ToTable("tOperationStepFile", "pps");

            entity.HasIndex(e => new { e.KOperationStep, e.CName }, "UQ_pps_tOperationStepFile_kOperationStep_cName")
                .IsUnique()
                .HasFilter("([cName] IS NOT NULL)");

            entity.HasIndex(e => new { e.KOperationStep, e.KFile }, "UQ_pps_tOperationStepFile_kOperationStep_kFile").IsUnique();

            entity.Property(e => e.KOperationStepFile).HasColumnName("kOperationStepFile");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KFile).HasColumnName("kFile");
            entity.Property(e => e.KOperationStep).HasColumnName("kOperationStep");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NType).HasColumnName("nType");

            entity.HasOne(d => d.KOperationStepNavigation).WithMany(p => p.TOperationStepFiles)
                .HasForeignKey(d => d.KOperationStep)
                .HasConstraintName("FK_pps_tOperationStepFile_kOperationStep");
        });

        modelBuilder.Entity<TOperationStepSprache>(entity =>
        {
            entity.HasKey(e => new { e.KOperationStep, e.KSprache }).HasName("PK_pps_tOperationStepSprache");

            entity.ToTable("tOperationStepSprache", "pps");

            entity.Property(e => e.KOperationStep).HasColumnName("kOperationStep");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CText).HasColumnName("cText");

            entity.HasOne(d => d.KOperationStepNavigation).WithMany(p => p.TOperationStepSpraches)
                .HasForeignKey(d => d.KOperationStep)
                .HasConstraintName("FK_pps_tOperationStepSprache_kOperationStep");
        });

        modelBuilder.Entity<TOption>(entity =>
        {
            entity.HasKey(e => e.CKey).HasName("PK_dbo_tOptions");

            entity.ToTable("tOptions", tb => tb.HasTrigger("tgr_tOptions_INSUPDEL"));

            entity.Property(e => e.CKey)
                .HasMaxLength(256)
                .HasColumnName("cKey");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CValue)
                .HasMaxLength(500)
                .HasColumnName("cValue");
        });

        modelBuilder.Entity<TOrder>(entity =>
        {
            entity.HasKey(e => e.KOrder).HasName("PK_SCX_tOrder");

            entity.ToTable("tOrder", "SCX");

            entity.HasIndex(e => e.COrderCancellationRequestId, "IX_SCX_tOrder_cOrderCancellationRequestId_INCL");

            entity.Property(e => e.KOrder).HasColumnName("kOrder");
            entity.Property(e => e.CChannel)
                .HasMaxLength(15)
                .HasColumnName("cChannel");
            entity.Property(e => e.CChannelReturnId)
                .HasMaxLength(255)
                .HasColumnName("cChannelReturnId");
            entity.Property(e => e.CEventId)
                .HasMaxLength(255)
                .HasColumnName("cEventId");
            entity.Property(e => e.COrderCancellationRequestId)
                .HasMaxLength(255)
                .HasColumnName("cOrderCancellationRequestId");
            entity.Property(e => e.COrderStatus)
                .HasMaxLength(255)
                .HasColumnName("cOrderStatus");
            entity.Property(e => e.CPaymentMethod)
                .HasMaxLength(150)
                .HasColumnName("cPaymentMethod");
            entity.Property(e => e.CPaymentReference)
                .HasMaxLength(255)
                .HasColumnName("cPaymentReference");
            entity.Property(e => e.CSellerId)
                .HasMaxLength(50)
                .HasColumnName("cSellerId");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.NCancellationUpload).HasColumnName("nCancellationUpload");
            entity.Property(e => e.NInvoiceCorrectionUpload).HasColumnName("nInvoiceCorrectionUpload");
            entity.Property(e => e.NInvoiceUpload).HasColumnName("nInvoiceUpload");
            entity.Property(e => e.NPaymentUpload).HasColumnName("nPaymentUpload");
            entity.Property(e => e.NReturnUpload).HasColumnName("nReturnUpload");

            entity.HasOne(d => d.KAuftragNavigation).WithMany(p => p.TOrders)
                .HasForeignKey(d => d.KAuftrag)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_SCX_tOrder_kAuftrag");
        });

        modelBuilder.Entity<TOrderCancellationEvent>(entity =>
        {
            entity.HasKey(e => e.KOrderCancellationEvent).HasName("PK_SCX_tOrderCancellationEvent");

            entity.ToTable("tOrderCancellationEvent", "SCX");

            entity.Property(e => e.KOrderCancellationEvent).HasColumnName("kOrderCancellationEvent");
            entity.Property(e => e.CChannel)
                .HasMaxLength(15)
                .HasColumnName("cChannel");
            entity.Property(e => e.COrderCancellationRequestId)
                .HasMaxLength(255)
                .HasColumnName("cOrderCancellationRequestId");
            entity.Property(e => e.CReason)
                .HasMaxLength(250)
                .HasColumnName("cReason");
            entity.Property(e => e.CSellerId)
                .HasMaxLength(50)
                .HasColumnName("cSellerId");
            entity.Property(e => e.NCount).HasColumnName("nCount");
            entity.Property(e => e.NType).HasColumnName("nType");
        });

        modelBuilder.Entity<TOrderInvoiceEvent>(entity =>
        {
            entity.HasKey(e => e.KOrderInvoiceEvent).HasName("PK_SCX_tOrderInvoiceEvent");

            entity.ToTable("tOrderInvoiceEvent", "SCX");

            entity.HasIndex(e => e.NCount, "IX_SCX_tOrderInvoiceEvent_nCount");

            entity.Property(e => e.KOrderInvoiceEvent).HasColumnName("kOrderInvoiceEvent");
            entity.Property(e => e.CChannel)
                .HasMaxLength(15)
                .HasColumnName("cChannel");
            entity.Property(e => e.CDocumentId)
                .HasMaxLength(36)
                .HasColumnName("cDocumentId");
            entity.Property(e => e.CInvoiceNumber)
                .HasMaxLength(256)
                .HasColumnName("cInvoiceNumber");
            entity.Property(e => e.COrderId)
                .HasMaxLength(150)
                .HasColumnName("cOrderId");
            entity.Property(e => e.DDocumentExpiresAt)
                .HasColumnType("datetime")
                .HasColumnName("dDocumentExpiresAt");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NCount).HasColumnName("nCount");
            entity.Property(e => e.NType).HasColumnName("nType");
        });

        modelBuilder.Entity<TOrderItem>(entity =>
        {
            entity.HasKey(e => e.KOrderItem).HasName("PK_SCX_tOrderItem");

            entity.ToTable("tOrderItem", "SCX");

            entity.HasIndex(e => new { e.COrderItemId, e.KOrder }, "IX_SCX_tOrderItem_cOrderItemId_kOrder");

            entity.Property(e => e.KOrderItem).HasColumnName("kOrderItem");
            entity.Property(e => e.CChannelOfferId)
                .HasMaxLength(50)
                .HasColumnName("cChannelOfferId");
            entity.Property(e => e.CItemStatus)
                .HasMaxLength(25)
                .HasColumnName("cItemStatus");
            entity.Property(e => e.COrderItemId)
                .HasMaxLength(50)
                .HasColumnName("cOrderItemId");
            entity.Property(e => e.CShippingGroup).HasColumnName("cShippingGroup");
            entity.Property(e => e.CType)
                .HasMaxLength(8)
                .HasColumnName("cType");
            entity.Property(e => e.DEstimatedDeliveryDate)
                .HasColumnType("datetime")
                .HasColumnName("dEstimatedDeliveryDate");
            entity.Property(e => e.DEstimatedShippingDate)
                .HasColumnType("datetime")
                .HasColumnName("dEstimatedShippingDate");
            entity.Property(e => e.FRemainingQuantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRemainingQuantity");
            entity.Property(e => e.KAuftragPosition).HasColumnName("kAuftragPosition");
            entity.Property(e => e.KOffer).HasColumnName("kOffer");
            entity.Property(e => e.KOrder).HasColumnName("kOrder");
            entity.Property(e => e.NItemPaymentStatus).HasColumnName("nItemPaymentStatus");
            entity.Property(e => e.NRefundUpload).HasColumnName("nRefundUpload");

            entity.HasOne(d => d.KAuftragPositionNavigation).WithMany(p => p.TOrderItems)
                .HasForeignKey(d => d.KAuftragPosition)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_SCX_tOrderItem_kAuftragPosition");

            entity.HasOne(d => d.KOrderNavigation).WithMany(p => p.TOrderItems)
                .HasForeignKey(d => d.KOrder)
                .HasConstraintName("FK_SCX_tOrderItem_kOrder");
        });

        modelBuilder.Entity<TOrderShipping>(entity =>
        {
            entity.HasKey(e => e.KOrderShipping).HasName("PK_SCX_tOrderShipping");

            entity.ToTable("tOrderShipping", "SCX");

            entity.Property(e => e.KOrderShipping).HasColumnName("kOrderShipping");
            entity.Property(e => e.DCreatedAtUtc)
                .HasColumnType("datetime")
                .HasColumnName("dCreatedAtUtc");
            entity.Property(e => e.DUploadedAtUtc)
                .HasColumnType("datetime")
                .HasColumnName("dUploadedAtUtc");
            entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");
            entity.Property(e => e.KOrder).HasColumnName("kOrder");
            entity.Property(e => e.NCount).HasColumnName("nCount");

            entity.HasOne(d => d.KLieferscheinNavigation).WithMany(p => p.TOrderShippings)
                .HasForeignKey(d => d.KLieferschein)
                .HasConstraintName("FK_SCX_tOrderShipping_kLieferschein");
        });

        modelBuilder.Entity<TOutboundItemRef>(entity =>
        {
            entity.HasKey(e => e.KOutboundItemRef).HasName("PK_FulfillmentNetwork.tOutboundItemRef");

            entity.ToTable("tOutboundItemRef", "FulfillmentNetwork");

            entity.HasIndex(e => new { e.KAuftrag, e.KAuftragPosition }, "UQ_FulfillmentNetwork_tOutboundItemRef_kBestellung_kBestellPos").IsUnique();

            entity.Property(e => e.KOutboundItemRef).HasColumnName("kOutboundItemRef");
            entity.Property(e => e.COutboundItemId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("cOutboundItemId");
            entity.Property(e => e.DCreatedAt).HasColumnName("dCreatedAt");
            entity.Property(e => e.DUpdatedAt).HasColumnName("dUpdatedAt");
            entity.Property(e => e.FQuantity)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fQuantity");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KAuftragPosition).HasColumnName("kAuftragPosition");

            entity.HasOne(d => d.KAuftragPositionNavigation).WithMany(p => p.TOutboundItemRefs)
                .HasForeignKey(d => d.KAuftragPosition)
                .HasConstraintName("FK_FulfillmentNetwork_tOutboundItemRef_kBestellPos");
        });

        modelBuilder.Entity<TOutboundRef>(entity =>
        {
            entity.HasKey(e => e.KOutboundRef).HasName("PK_FulfillmentNetwork_tOutboundRef");

            entity.ToTable("tOutboundRef", "FulfillmentNetwork");

            entity.HasIndex(e => e.COutboundId, "IX_FulfillmentNetwork_tOutboundRef_cOutboundId").IsDescending();

            entity.HasIndex(e => e.COwnerId, "IX_FulfillmentNetwork_tOutboundRef_cOwnerId").IsDescending();

            entity.HasIndex(e => e.KBestellung, "IX_FulfillmentNetwork_tOutboundRef_kBestellung");

            entity.HasIndex(e => e.KFulfillmentAuftrag, "IX_FulfillmentNetwork_tOutboundRef_kFulfillmentAuftrag");

            entity.HasIndex(e => e.NType, "IX_FulfillmentNetwork_tOutboundRef_nType");

            entity.Property(e => e.KOutboundRef).HasColumnName("kOutboundRef");
            entity.Property(e => e.BRowVersion)
                .HasMaxLength(8)
                .IsFixedLength()
                .HasColumnName("bRowVersion");
            entity.Property(e => e.CNote).HasColumnName("cNote");
            entity.Property(e => e.COutboundId)
                .HasMaxLength(255)
                .HasColumnName("cOutboundId");
            entity.Property(e => e.COwnerId)
                .HasMaxLength(10)
                .HasColumnName("cOwnerId");
            entity.Property(e => e.CWarehouseId)
                .HasMaxLength(255)
                .HasColumnName("cWarehouseId");
            entity.Property(e => e.DCreatedAt).HasColumnName("dCreatedAt");
            entity.Property(e => e.DObjectVersion).HasColumnName("dObjectVersion");
            entity.Property(e => e.DUpdatedAt).HasColumnName("dUpdatedAt");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KFulfillmentAuftrag).HasColumnName("kFulfillmentAuftrag");
            entity.Property(e => e.NChangeState).HasColumnName("nChangeState");
            entity.Property(e => e.NType).HasColumnName("nType");

            entity.HasOne(d => d.KBestellungNavigation).WithMany(p => p.TOutboundRefs)
                .HasForeignKey(d => d.KBestellung)
                .HasConstraintName("FK_FulfillmentNetwork_tOutboundRef_kBestellung");

            entity.HasOne(d => d.KFulfillmentAuftragNavigation).WithMany(p => p.TOutboundRefs)
                .HasForeignKey(d => d.KFulfillmentAuftrag)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_FulfillmentNetwork_tOutboundRef_kFulfillmentAuftrag");
        });

        modelBuilder.Entity<TPackage>(entity =>
        {
            entity.HasKey(e => e.KPackage).HasName("PK_Shipping_tPackage");

            entity.ToTable("tPackage", "Shipping");

            entity.HasIndex(e => e.KVersand, "IX_tPackage_kVersand");

            entity.Property(e => e.KPackage).HasColumnName("kPackage");
            entity.Property(e => e.CReceiverCountryIso)
                .HasMaxLength(3)
                .HasColumnName("cReceiverCountryIso");
            entity.Property(e => e.CReceiverZipCode)
                .HasMaxLength(50)
                .HasColumnName("cReceiverZipCode");
            entity.Property(e => e.CShipperCountryIso)
                .HasMaxLength(3)
                .HasColumnName("cShipperCountryIso");
            entity.Property(e => e.CTrackingId)
                .HasMaxLength(255)
                .HasColumnName("cTrackingId");
            entity.Property(e => e.DNextUpdateDate)
                .HasColumnType("datetime")
                .HasColumnName("dNextUpdateDate");
            entity.Property(e => e.DRegisteredAt)
                .HasColumnType("datetime")
                .HasColumnName("dRegisteredAt");
            entity.Property(e => e.KPackageServer).HasColumnName("kPackageServer");
            entity.Property(e => e.KVersand).HasColumnName("kVersand");
            entity.Property(e => e.NCurrentStateType).HasColumnName("nCurrentStateType");
            entity.Property(e => e.NServiceProvider).HasColumnName("nServiceProvider");

            entity.HasOne(d => d.KVersandNavigation).WithMany(p => p.TPackages)
                .HasForeignKey(d => d.KVersand)
                .HasConstraintName("FK_Shipping_tPackage_kVersand");
        });

        modelBuilder.Entity<TPackageDpdProperty>(entity =>
        {
            entity.HasKey(e => e.KPackageDpdProperties);

            entity.ToTable("tPackageDpdProperties", "Shipping");

            entity.Property(e => e.KPackageDpdProperties).HasColumnName("kPackageDpdProperties");
            entity.Property(e => e.CDelisId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("cDelisId");
            entity.Property(e => e.KPackage).HasColumnName("kPackage");

            entity.HasOne(d => d.KPackageNavigation).WithMany(p => p.TPackageDpdProperties)
                .HasForeignKey(d => d.KPackage)
                .HasConstraintName("FK_Shipping_tPackage_kPackage");
        });

        modelBuilder.Entity<TPaymentRule>(entity =>
        {
            entity.HasKey(e => e.KPaymentRule).HasName("PK_SCX_tPaymentRule");

            entity.ToTable("tPaymentRule", "SCX");

            entity.HasIndex(e => new { e.CPaymentMethodId, e.KShop }, "UQ_SCX_tPaymentRule_cPaymentMethodId_kShop").IsUnique();

            entity.Property(e => e.KPaymentRule).HasColumnName("kPaymentRule");
            entity.Property(e => e.CDisplayName)
                .HasMaxLength(150)
                .HasColumnName("cDisplayName");
            entity.Property(e => e.CPaymentMethodId)
                .HasMaxLength(100)
                .HasColumnName("cPaymentMethodId");
            entity.Property(e => e.KChannel).HasColumnName("kChannel");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");

            entity.HasOne(d => d.KChannelNavigation).WithMany(p => p.TPaymentRules)
                .HasForeignKey(d => d.KChannel)
                .HasConstraintName("FK_SCX_tPaymentRule_kChannel");
        });

        modelBuilder.Entity<TPermanentInventurOptionen>(entity =>
        {
            entity.HasKey(e => e.KWarenLager).HasName("PK_WMS_tPermanentInventurOptionen");

            entity.ToTable("tPermanentInventurOptionen", "WMS");

            entity.Property(e => e.KWarenLager)
                .ValueGeneratedNever()
                .HasColumnName("kWarenLager");
            entity.Property(e => e.NPermanentInventur).HasColumnName("nPermanentInventur");
            entity.Property(e => e.NPermanentInventurCheckList).HasColumnName("nPermanentInventurCheckList");
            entity.Property(e => e.NPermanentInventurDayDi).HasColumnName("nPermanentInventurDayDi");
            entity.Property(e => e.NPermanentInventurDayDo).HasColumnName("nPermanentInventurDayDo");
            entity.Property(e => e.NPermanentInventurDayFr).HasColumnName("nPermanentInventurDayFr");
            entity.Property(e => e.NPermanentInventurDayMi).HasColumnName("nPermanentInventurDayMi");
            entity.Property(e => e.NPermanentInventurDayMo).HasColumnName("nPermanentInventurDayMo");
            entity.Property(e => e.NPermanentInventurDaySa).HasColumnName("nPermanentInventurDaySa");
            entity.Property(e => e.NPermanentInventurDaySo).HasColumnName("nPermanentInventurDaySo");
            entity.Property(e => e.NPermanentInventurMaxItems).HasColumnName("nPermanentInventurMaxItems");
            entity.Property(e => e.NPermanentInventurMaxQuantity)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("nPermanentInventurMaxQuantity");
            entity.Property(e => e.NPermanentInventurMinMonth).HasColumnName("nPermanentInventurMinMonth");
            entity.Property(e => e.NPermanentInventurProcedure).HasColumnName("nPermanentInventurProcedure");
            entity.Property(e => e.NPermanentInventurProcedureSkip).HasColumnName("nPermanentInventurProcedureSkip");
            entity.Property(e => e.NPermanentInventurProzessMinusbuchung).HasColumnName("nPermanentInventurProzessMinusbuchung");
            entity.Property(e => e.NPermanentInventurProzessRoKo).HasColumnName("nPermanentInventurProzessRoKo");
            entity.Property(e => e.NPermanentInventurProzessSaKo).HasColumnName("nPermanentInventurProzessSaKo");
            entity.Property(e => e.NPermanentInventurProzessUmlagerung).HasColumnName("nPermanentInventurProzessUmlagerung");
            entity.Property(e => e.NPermanentInventurWithStock).HasColumnName("nPermanentInventurWithStock");
        });

        modelBuilder.Entity<TPermanentInventurWarenLagerPlatzType>(entity =>
        {
            entity.HasKey(e => new { e.KWarenLager, e.NWarenLagerPlatzType }).HasName("PK_WMS_tPermanentInventurWarenLagerPlatzType");

            entity.ToTable("tPermanentInventurWarenLagerPlatzType", "WMS");

            entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");
            entity.Property(e => e.NWarenLagerPlatzType).HasColumnName("nWarenLagerPlatzType");
        });

        modelBuilder.Entity<TPicVersand>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tPicVersand");

            entity.HasIndex(e => new { e.KArtikelBild, e.KShop }, "IX_tPicVersand_kArtikelBild_kShop");

            entity.HasIndex(e => e.KEigenschaftWertPict, "IX_tPicVersand_kEigenschaftWertPict");

            entity.HasIndex(e => e.KKategoriePict, "IX_tPicVersand_kKategoriePict");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DMod)
                .HasMaxLength(20)
                .HasColumnName("dMod");
            entity.Property(e => e.KArtikelBild).HasColumnName("kArtikelBild");
            entity.Property(e => e.KEa).HasColumnName("kEA");
            entity.Property(e => e.KEigenschaftWertPict).HasColumnName("kEigenschaftWertPict");
            entity.Property(e => e.KKategoriePict).HasColumnName("kKategoriePict");
            entity.Property(e => e.KShop).HasColumnName("kShop");
        });

        modelBuilder.Entity<TPickliste>(entity =>
        {
            entity.HasKey(e => e.KPickliste).HasName("PK_dbo_tPickliste");

            entity.ToTable("tPickliste", tb => tb.HasTrigger("jtlActionValidator_tPickliste"));

            entity.HasIndex(e => e.CPicklisteNr, "IX_dbo_tPickliste_cPicklisteNr");

            entity.HasIndex(e => new { e.NStatus, e.NType }, "IX_dbo_tPickliste_nStatus_nType");

            entity.HasIndex(e => new { e.KWarenLager, e.NStatus }, "IX_tPickliste_kWarenLager_nStatus");

            entity.Property(e => e.KPickliste).HasColumnName("kPickliste");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CPicklisteNr)
                .HasMaxLength(255)
                .HasColumnName("cPicklisteNr");
            entity.Property(e => e.DGedruckt)
                .HasColumnType("datetime")
                .HasColumnName("dGedruckt");
            entity.Property(e => e.KAnsprechpartner).HasColumnName("kAnsprechpartner");
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.KPicklisteStatus).HasColumnName("kPicklisteStatus");
            entity.Property(e => e.KPicklisteStatusAngelegt).HasColumnName("kPicklisteStatusAngelegt");
            entity.Property(e => e.KPicklistenVorlage).HasColumnName("kPicklistenVorlage");
            entity.Property(e => e.KSessionId).HasColumnName("kSessionId");
            entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
            entity.Property(e => e.NType).HasColumnName("nType");
        });

        modelBuilder.Entity<TPicklisteBenutzerSichtbarkeit>(entity =>
        {
            entity.HasKey(e => new { e.KPicklisteVorlage, e.KBenutzer }).HasName("PK_WMS_tPicklisteBenutzerSichtbarkeit");

            entity.ToTable("tPicklisteBenutzerSichtbarkeit", "WMS");

            entity.Property(e => e.KPicklisteVorlage).HasColumnName("kPicklisteVorlage");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
        });

        modelBuilder.Entity<TPicklisteInBoxLock>(entity =>
        {
            entity.HasKey(e => new { e.KLhm, e.KBenutzer }).HasName("PK_dbo_tBestellungPicklisteLock");

            entity.ToTable("tPicklisteInBoxLock", "WMS");

            entity.Property(e => e.KLhm).HasColumnName("kLHM");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DZeitstempel)
                .HasColumnType("datetime")
                .HasColumnName("dZeitstempel");
        });

        modelBuilder.Entity<TPicklistePo>(entity =>
        {
            entity.HasKey(e => e.KPicklistePos).HasName("PK_dbo_tPicklistePos");

            entity.ToTable("tPicklistePos", tb =>
                {
                    tb.HasTrigger("jtlActionValidator_tPicklistePos");
                    tb.HasTrigger("tgr_tPicklistePos_DELETE");
                    tb.HasTrigger("tgr_tPicklistePos_INSERT");
                    tb.HasTrigger("tgr_tPicklistePos_UPDATE");
                });

            entity.HasIndex(e => new { e.KLieferscheinPos, e.NStatus, e.KWarenlagerPlatz }, "IX_dbo_tPicklistePos_kLieferscheinPos_nStatus_kWarenlagerPlatz");

            entity.HasIndex(e => new { e.KPickliste, e.NStatus }, "IX_dbo_tPicklistePos_kPickliste_nStatus_kBestellung_FilterStatus").HasFilter("([nStatus]<(40))");

            entity.HasIndex(e => new { e.KWarenLagerEingang, e.NStatus, e.KBestellung }, "IX_dbo_tPicklistePos_kWarenLagerEingang_nStatus_kBestellung_FilterOnnStatus").HasFilter("([nStatus]<(40))");

            entity.HasIndex(e => new { e.NStatus, e.NVorreserviert }, "IX_dbo_tPicklistePos_nStatus");

            entity.HasIndex(e => new { e.KArtikel, e.NStatus, e.KWarenLager }, "IX_tPicklistePos_kArtikel_nStatus_kWarenlager_INCL_fAnzahl_kBestellPos").HasFilter("([nStatus]<(40))");

            entity.HasIndex(e => e.KBestellPos, "IX_tPicklistePos_kBestellPos_INCL_F");

            entity.HasIndex(e => new { e.KBestellPos, e.KWarenLager }, "IX_tPicklistePos_kBestellPos_kWarenlager");

            entity.HasIndex(e => new { e.KBestellung, e.NStatus }, "IX_tPicklistePos_kBestellung_nStatus");

            entity.HasIndex(e => e.KPickliste, "IX_tPicklistePos_kPickliste");

            entity.HasIndex(e => new { e.KPickliste, e.NStatus }, "IX_tPicklistePos_kPickliste_nStatus_kBestellung");

            entity.HasIndex(e => e.KWarenLagerEingang, "IX_tPicklistePos_kWarenLagerEingang");

            entity.Property(e => e.KPicklistePos).HasColumnName("kPicklistePos");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.KAnsprechpartner).HasColumnName("kAnsprechpartner");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");
            entity.Property(e => e.KPickliste).HasColumnName("kPickliste");
            entity.Property(e => e.KPicklistePosStatus).HasColumnName("kPicklistePosStatus");
            entity.Property(e => e.KPicklistePosUrsprung).HasColumnName("kPicklistePos_Ursprung");
            entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");
            entity.Property(e => e.KWarenLagerEingang).HasColumnName("kWarenLagerEingang");
            entity.Property(e => e.KWarenlagerPlatz).HasColumnName("kWarenlagerPlatz");
            entity.Property(e => e.NPickPrio).HasColumnName("nPickPrio");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
            entity.Property(e => e.NVorreserviert)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nVorreserviert");
        });

        modelBuilder.Entity<TPicklistePosStatus>(entity =>
        {
            entity.HasKey(e => e.KPicklistePosStatus).HasName("PK_dbo_tPicklistePosStatus");

            entity.ToTable("tPicklistePosStatus", tb => tb.HasTrigger("tgr_tPicklistePosStatus_INSERT"));

            entity.HasIndex(e => new { e.KPicklistePos, e.NStatus }, "IX_tPicklistePosStatus_kPicklistePos_nStatus");

            entity.Property(e => e.KPicklistePosStatus).HasColumnName("kPicklistePosStatus");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DZeitstempel)
                .HasColumnType("datetime")
                .HasColumnName("dZeitstempel");
            entity.Property(e => e.KPicklistePos).HasColumnName("kPicklistePos");
            entity.Property(e => e.Kbenutzer).HasColumnName("kbenutzer");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<TPicklisteStatus>(entity =>
        {
            entity.HasKey(e => e.KPicklisteStatus).HasName("PK_dbo_tPicklisteStatus");

            entity.ToTable("tPicklisteStatus");

            entity.HasIndex(e => e.KPickliste, "IX_tPicklisteStatus_INCL_kPicklisteStatus_nStatus");

            entity.Property(e => e.KPicklisteStatus).HasColumnName("kPicklisteStatus");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DZeitstempel)
                .HasColumnType("datetime")
                .HasColumnName("dZeitstempel");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KPickliste).HasColumnName("kPickliste");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<TPicklisteVorlage>(entity =>
        {
            entity.HasKey(e => e.KPicklisteVorlage).HasName("PK_dbo_tPicklisteVorlage");

            entity.ToTable("tPicklisteVorlage", tb => tb.HasTrigger("jtlActionValidator_tPicklisteVorlage"));

            entity.HasIndex(e => new { e.NIstVorlage, e.KWarenlager }, "IX_tPicklisteVorlage_nIstVorlage_kWarenlager");

            entity.Property(e => e.KPicklisteVorlage).HasColumnName("kPicklisteVorlage");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAuftragkennzeichnung)
                .HasMaxLength(255)
                .HasColumnName("cAuftragkennzeichnung");
            entity.Property(e => e.CAuftragsFarben)
                .HasMaxLength(4000)
                .HasColumnName("cAuftragsFarben");
            entity.Property(e => e.CAuftragsPrio)
                .HasMaxLength(512)
                .HasColumnName("cAuftragsPrio");
            entity.Property(e => e.CBenutzer)
                .HasMaxLength(3000)
                .HasColumnName("cBenutzer");
            entity.Property(e => e.CBenutzerAuftrag)
                .HasMaxLength(4000)
                .HasColumnName("cBenutzerAuftrag");
            entity.Property(e => e.CColor)
                .HasMaxLength(32)
                .HasColumnName("cColor");
            entity.Property(e => e.CFirmen)
                .HasMaxLength(1000)
                .HasColumnName("cFirmen");
            entity.Property(e => e.CKommentar)
                .HasMaxLength(255)
                .HasColumnName("cKommentar");
            entity.Property(e => e.CKundengruppen)
                .HasMaxLength(3000)
                .HasColumnName("cKundengruppen");
            entity.Property(e => e.CLagerbereiche)
                .HasMaxLength(3000)
                .HasColumnName("cLagerbereiche");
            entity.Property(e => e.CLieferlaender)
                .HasMaxLength(3000)
                .HasColumnName("cLieferlaender");
            entity.Property(e => e.CName)
                .HasMaxLength(64)
                .HasColumnName("cName");
            entity.Property(e => e.CPlattformen)
                .HasMaxLength(255)
                .HasColumnName("cPlattformen");
            entity.Property(e => e.CPlatzTypen)
                .HasMaxLength(1000)
                .HasColumnName("cPlatzTypen");
            entity.Property(e => e.CRechnungslaender)
                .HasMaxLength(4000)
                .HasColumnName("cRechnungslaender");
            entity.Property(e => e.CShops)
                .HasMaxLength(255)
                .HasColumnName("cShops");
            entity.Property(e => e.CVersandartNr)
                .HasMaxLength(4000)
                .HasColumnName("cVersandartNr");
            entity.Property(e => e.CVersandklassen)
                .HasMaxLength(3000)
                .HasColumnName("cVersandklassen");
            entity.Property(e => e.CVorlageSerialized).HasColumnName("cVorlageSerialized");
            entity.Property(e => e.CWarengruppen)
                .HasMaxLength(4000)
                .HasColumnName("cWarengruppen");
            entity.Property(e => e.CZahlungsarten)
                .HasMaxLength(3000)
                .HasColumnName("cZahlungsarten");
            entity.Property(e => e.DAngelegt)
                .HasColumnType("datetime")
                .HasColumnName("dAngelegt");
            entity.Property(e => e.DBisDatum)
                .HasColumnType("datetime")
                .HasColumnName("dBisDatum");
            entity.Property(e => e.DVonDatum)
                .HasColumnType("datetime")
                .HasColumnName("dVonDatum");
            entity.Property(e => e.FGewichtBis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGewichtBis");
            entity.Property(e => e.FGewichtVon)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGewichtVon");
            entity.Property(e => e.FPreisAuftragMax)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPreisAuftragMax");
            entity.Property(e => e.FPreisAuftragMin)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPreisAuftragMin");
            entity.Property(e => e.FTeillieferungenWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fTeillieferungenWert");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBestellNr).HasColumnName("kBestellNr");
            entity.Property(e => e.KPickliste).HasColumnName("kPickliste");
            entity.Property(e => e.KPicklisteVorlageParent).HasColumnName("kPicklisteVorlageParent");
            entity.Property(e => e.KPicklistenVorlageUrsprung).HasColumnName("kPicklistenVorlageUrsprung");
            entity.Property(e => e.KRollendeKommissionierungPickwagen).HasColumnName("kRollendeKommissionierungPickwagen");
            entity.Property(e => e.KVorlagenSet).HasColumnName("kVorlagenSet");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.KWarenlagerUmlagerung).HasColumnName("kWarenlagerUmlagerung");
            entity.Property(e => e.NAdressenCheck).HasColumnName("nAdressenCheck");
            entity.Property(e => e.NAlleOhneFarben).HasColumnName("nAlleOhneFarben");
            entity.Property(e => e.NAlleOhneHersteller).HasColumnName("nAlleOhneHersteller");
            entity.Property(e => e.NAlleOhneLagerbereich).HasColumnName("nAlleOhneLagerbereich");
            entity.Property(e => e.NAlleOhneVersandart).HasColumnName("nAlleOhneVersandart");
            entity.Property(e => e.NAlleOhneWarengruppe).HasColumnName("nAlleOhneWarengruppe");
            entity.Property(e => e.NAlleOhneZahlungsart).HasColumnName("nAlleOhneZahlungsart");
            entity.Property(e => e.NAngebrocheneBoxenImmerVervollstaendigen).HasColumnName("nAngebrocheneBoxenImmerVervollstaendigen");
            entity.Property(e => e.NAnzahlArtikelAuftragMax).HasColumnName("nAnzahlArtikelAuftragMax");
            entity.Property(e => e.NAnzahlArtikelAuftragMin).HasColumnName("nAnzahlArtikelAuftragMin");
            entity.Property(e => e.NAnzahlBestellungen).HasColumnName("nAnzahlBestellungen");
            entity.Property(e => e.NAnzahlBestellungenMin).HasColumnName("nAnzahlBestellungenMin");
            entity.Property(e => e.NArtikelBreiteBis).HasColumnName("nArtikelBreiteBis");
            entity.Property(e => e.NArtikelBreiteVon).HasColumnName("nArtikelBreiteVon");
            entity.Property(e => e.NArtikelEinzelPreisMax)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nArtikelEinzelPreisMax");
            entity.Property(e => e.NArtikelEinzelPreisMin)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nArtikelEinzelPreisMin");
            entity.Property(e => e.NArtikelHoeheBis).HasColumnName("nArtikelHoeheBis");
            entity.Property(e => e.NArtikelHoeheVon).HasColumnName("nArtikelHoeheVon");
            entity.Property(e => e.NArtikelKuerzesteKanteMax).HasColumnName("nArtikelKuerzesteKanteMax");
            entity.Property(e => e.NArtikelKuerzesteKanteMin).HasColumnName("nArtikelKuerzesteKanteMin");
            entity.Property(e => e.NArtikelLabelFilterModus)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nArtikelLabelFilterModus");
            entity.Property(e => e.NArtikelLaengeBis).HasColumnName("nArtikelLaengeBis");
            entity.Property(e => e.NArtikelLaengeVon).HasColumnName("nArtikelLaengeVon");
            entity.Property(e => e.NArtikelLaengsteKanteMax).HasColumnName("nArtikelLaengsteKanteMax");
            entity.Property(e => e.NArtikelLaengsteKanteMin).HasColumnName("nArtikelLaengsteKanteMin");
            entity.Property(e => e.NAuftraegeChargenrein).HasColumnName("nAuftraegeChargenrein");
            entity.Property(e => e.NAuftragsArt).HasColumnName("nAuftragsArt");
            entity.Property(e => e.NAuftragsVolumenBis).HasColumnName("nAuftragsVolumenBis");
            entity.Property(e => e.NAuftragsVolumenVon).HasColumnName("nAuftragsVolumenVon");
            entity.Property(e => e.NAutomatischErstellen).HasColumnName("nAutomatischErstellen");
            entity.Property(e => e.NAutomatischErstellenMaxAnzahl)
                .HasDefaultValueSql("((5))")
                .HasColumnName("nAutomatischErstellenMaxAnzahl");
            entity.Property(e => e.NBenutzerAuftragAusschliessen).HasColumnName("nBenutzerAuftragAusschliessen");
            entity.Property(e => e.NBestellungWmsfreigabe)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nBestellungWMSFreigabe");
            entity.Property(e => e.NBoxenBis).HasColumnName("nBoxenBis");
            entity.Property(e => e.NBoxenNurGanzeStuecklistenAufPl).HasColumnName("nBoxenNurGanzeStuecklistenAufPL");
            entity.Property(e => e.NBoxenVon).HasColumnName("nBoxenVon");
            entity.Property(e => e.NDirektVerpacken).HasColumnName("nDirektVerpacken");
            entity.Property(e => e.NEnthaeltArtArtikelZustand).HasColumnName("nEnthaeltArtArtikelZustand");
            entity.Property(e => e.NEnthaeltArtAusEigeneFelder).HasColumnName("nEnthaeltArtAusEigeneFelder");
            entity.Property(e => e.NEnthaeltArtAusWarengruppe).HasColumnName("nEnthaeltArtAusWarengruppe");
            entity.Property(e => e.NEnthaeltAuftragAusEigeneFelder).HasColumnName("nEnthaeltAuftragAusEigeneFelder");
            entity.Property(e => e.NEnthaeltHersteller).HasColumnName("nEnthaeltHersteller");
            entity.Property(e => e.NIstVorlage).HasColumnName("nIstVorlage");
            entity.Property(e => e.NKeineAuftraegeVollstaendigAufPickliste).HasColumnName("nKeineAuftraegeVollstaendigAufPickliste");
            entity.Property(e => e.NKeineOderAlleInLagerbereich).HasColumnName("nKeineOderAlleInLagerbereich");
            entity.Property(e => e.NLagerplatzNachMenge).HasColumnName("nLagerplatzNachMenge");
            entity.Property(e => e.NMaxAnzahlArtikel)
                .HasDefaultValueSql("((999999))")
                .HasColumnName("nMaxAnzahlArtikel");
            entity.Property(e => e.NMhdhandling).HasColumnName("nMHDHandling");
            entity.Property(e => e.NMhdminHaltbarkeit).HasColumnName("nMHDMinHaltbarkeit");
            entity.Property(e => e.NMinAnzahlArtikel).HasColumnName("nMinAnzahlArtikel");
            entity.Property(e => e.NMobileAppPicklistenVorlage).HasColumnName("nMobileAppPicklistenVorlage");
            entity.Property(e => e.NNachschubPickenLast).HasColumnName("nNachschubPickenLast");
            entity.Property(e => e.NNichtBezahltAutomatischAufVorkommi)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nNichtBezahltAutomatischAufVorkommi");
            entity.Property(e => e.NNichtBezahltVorkommissionieren)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nNichtBezahltVorkommissionieren");
            entity.Property(e => e.NNurAusgewaehlteVersandartenAnzeigen).HasColumnName("nNurAusgewaehlteVersandartenAnzeigen");
            entity.Property(e => e.NOhneVolumenAusschliessen).HasColumnName("nOhneVolumenAusschliessen");
            entity.Property(e => e.NPicklisteFuerBenutzerAusblenden).HasColumnName("nPicklisteFuerBenutzerAusblenden");
            entity.Property(e => e.NPicklistenVorlageTyp).HasColumnName("nPicklistenVorlageTyp");
            entity.Property(e => e.NPlaetzeOhneReservierungZuerst).HasColumnName("nPlaetzeOhneReservierungZuerst");
            entity.Property(e => e.NPlatzPrioBeruecksichtigen).HasColumnName("nPlatzPrioBeruecksichtigen");
            entity.Property(e => e.NQuickSlot).HasColumnName("nQuickSlot");
            entity.Property(e => e.NReservierungsFehler).HasColumnName("nReservierungsFehler");
            entity.Property(e => e.NSortenrein).HasColumnName("nSortenrein");
            entity.Property(e => e.NSortenreinMaxAnzahlArtikel).HasColumnName("nSortenreinMaxAnzahlArtikel");
            entity.Property(e => e.NSortierung).HasColumnName("nSortierung");
            entity.Property(e => e.NStuecklisteNurWennAlleAufPlatz).HasColumnName("nStuecklisteNurWennAlleAufPlatz");
            entity.Property(e => e.NStuecklisteVonGleichenPlatz).HasColumnName("nStuecklisteVonGleichenPlatz");
            entity.Property(e => e.NTeillieferungen).HasColumnName("nTeillieferungen");
            entity.Property(e => e.NTreeSort).HasColumnName("nTreeSort");
            entity.Property(e => e.NVollstaendigTeilgeliefertFifo).HasColumnName("nVollstaendigTeilgeliefertFIFO");
            entity.Property(e => e.NVollstaengigeImmerVorkommissionieren).HasColumnName("nVollstaengigeImmerVorkommissionieren");
            entity.Property(e => e.NVorschauDeaktiv).HasColumnName("nVorschauDeaktiv");
        });

        modelBuilder.Entity<TPicklisteVorlageArtikelLabel>(entity =>
        {
            entity.HasKey(e => new { e.KPicklisteVorlage, e.KLabel }).HasName("PK_WMS_tPicklisteVorlageArtikelLabel");

            entity.ToTable("tPicklisteVorlageArtikelLabel", "WMS");

            entity.Property(e => e.KPicklisteVorlage).HasColumnName("kPicklisteVorlage");
            entity.Property(e => e.KLabel).HasColumnName("kLabel");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
        });

        modelBuilder.Entity<TPicklisteVorlageArtikelZustand>(entity =>
        {
            entity.HasKey(e => new { e.KPicklisteVorlage, e.KZustand }).HasName("PK_dbo_tPicklisteVorlageArtikelZustand");

            entity.ToTable("tPicklisteVorlageArtikelZustand");

            entity.Property(e => e.KPicklisteVorlage).HasColumnName("kPicklisteVorlage");
            entity.Property(e => e.KZustand).HasColumnName("kZustand");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
        });

        modelBuilder.Entity<TPicklisteVorlageAuftraege>(entity =>
        {
            entity.HasKey(e => new { e.KPicklisteVorlage, e.KAuftrag }).HasName("PK_WMS_tPicklisteVorlageAuftraege");

            entity.ToTable("tPicklisteVorlageAuftraege", "WMS");

            entity.Property(e => e.KPicklisteVorlage).HasColumnName("kPicklisteVorlage");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.NIsTeillieferung).HasColumnName("nIsTeillieferung");
        });

        modelBuilder.Entity<TPicklisteVorlageBoxen>(entity =>
        {
            entity.HasKey(e => e.KPicklisteVorlageBoxen).HasName("PK_dbo_tPicklisteVorlageBoxen");

            entity.ToTable("tPicklisteVorlageBoxen");

            entity.HasIndex(e => new { e.KPicklisteVorlage, e.KLhm }, "IX_tPicklisteVorlageBoxen_kPicklisteVorlage_kLHM");

            entity.Property(e => e.KPicklisteVorlageBoxen).HasColumnName("kPicklisteVorlageBoxen");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KLhm).HasColumnName("kLHM");
            entity.Property(e => e.KPicklisteVorlage).HasColumnName("kPicklisteVorlage");
        });

        modelBuilder.Entity<TPicklisteVorlageEigeneFelder>(entity =>
        {
            entity.HasKey(e => new { e.KPicklisteVorlage, e.KAttribut }).HasName("PK_dbo_tPicklisteVorlageEigeneFelder");

            entity.ToTable("tPicklisteVorlageEigeneFelder");

            entity.Property(e => e.KPicklisteVorlage).HasColumnName("kPicklisteVorlage");
            entity.Property(e => e.KAttribut).HasColumnName("kAttribut");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CWert).HasColumnName("cWert");
            entity.Property(e => e.DWertDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dWertDateTime");
            entity.Property(e => e.FWertDecimal)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertDecimal");
            entity.Property(e => e.NWertInt).HasColumnName("nWertInt");
        });

        modelBuilder.Entity<TPicklisteVorlageHersteller>(entity =>
        {
            entity.HasKey(e => new { e.KPicklisteVorlage, e.KHersteller }).HasName("PK_WMS_tPicklisteVorlageHersteller");

            entity.ToTable("tPicklisteVorlageHersteller", "WMS");

            entity.Property(e => e.KPicklisteVorlage).HasColumnName("kPicklisteVorlage");
            entity.Property(e => e.KHersteller).HasColumnName("kHersteller");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
        });

        modelBuilder.Entity<TPicklisteVorlageSichtbarkeitBenutzer>(entity =>
        {
            entity.HasKey(e => new { e.KPicklisteVorlage, e.KBenutzer });

            entity.ToTable("tPicklisteVorlageSichtbarkeitBenutzer", "WMS");

            entity.Property(e => e.KPicklisteVorlage).HasColumnName("kPicklisteVorlage");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
        });

        modelBuilder.Entity<TPicklisteVorlageSichtbarkeitPickwagen>(entity =>
        {
            entity.HasKey(e => new { e.KPicklisteVorlage, e.KPickwagen });

            entity.ToTable("tPicklisteVorlageSichtbarkeitPickwagen", "WMS");

            entity.Property(e => e.KPicklisteVorlage).HasColumnName("kPicklisteVorlage");
            entity.Property(e => e.KPickwagen).HasColumnName("kPickwagen");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
        });

        modelBuilder.Entity<TPicklisteVorlageSichtbarkeitVersandBox>(entity =>
        {
            entity.HasKey(e => new { e.KPicklisteVorlage, e.KVersandBox });

            entity.ToTable("tPicklisteVorlageSichtbarkeitVersandBox", "WMS");

            entity.Property(e => e.KPicklisteVorlage).HasColumnName("kPicklisteVorlage");
            entity.Property(e => e.KVersandBox).HasColumnName("kVersandBox");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
        });

        modelBuilder.Entity<TPicklisteVorlageSortierungsKriterium>(entity =>
        {
            entity.HasKey(e => new { e.KPicklisteVorlage, e.NSort }).HasName("PK_WMS_tPicklisteVorlageSortierungsKriterium");

            entity.ToTable("tPicklisteVorlageSortierungsKriterium", "WMS");

            entity.Property(e => e.KPicklisteVorlage).HasColumnName("kPicklisteVorlage");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.NAktiv).HasColumnName("nAktiv");
            entity.Property(e => e.NId).HasColumnName("nID");
        });

        modelBuilder.Entity<TPicklisteVorlageStartZielLager>(entity =>
        {
            entity.HasKey(e => new { e.KPicklisteVorlage, e.KWarenlager }).HasName("PK_WMS_tPicklisteVorlageStartZielLager");

            entity.ToTable("tPicklisteVorlageStartZielLager", "WMS");

            entity.Property(e => e.KPicklisteVorlage).HasColumnName("kPicklisteVorlage");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.NStartLagerAktiv).HasColumnName("nStartLagerAktiv");
            entity.Property(e => e.NZiellagerAktiv).HasColumnName("nZiellagerAktiv");
        });

        modelBuilder.Entity<TPicklisteVorlageVorgangsTypen>(entity =>
        {
            entity.HasKey(e => new { e.KPicklisteVorlage, e.NVorgangsTyp }).HasName("PK_WMS_tPicklisteVorlageVorgangsTypen");

            entity.ToTable("tPicklisteVorlageVorgangsTypen", "WMS");

            entity.Property(e => e.KPicklisteVorlage).HasColumnName("kPicklisteVorlage");
            entity.Property(e => e.NVorgangsTyp).HasColumnName("nVorgangsTyp");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
        });

        modelBuilder.Entity<TPicklisteVorlageVorgangsstatus>(entity =>
        {
            entity.HasKey(e => new { e.KPicklisteVorlage, e.KVorgangsstatus }).HasName("PK_WMS_tPicklisteVorlageVorgangsstatus");

            entity.ToTable("tPicklisteVorlageVorgangsstatus", "WMS");

            entity.Property(e => e.KPicklisteVorlage).HasColumnName("kPicklisteVorlage");
            entity.Property(e => e.KVorgangsstatus).HasColumnName("kVorgangsstatus");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
        });

        modelBuilder.Entity<TPicklistenVorschauSync>(entity =>
        {
            entity.HasKey(e => e.KPicklisteVorlage).HasName("PK_dbo_tPicklistenVorschauSync");

            entity.ToTable("tPicklistenVorschauSync");

            entity.Property(e => e.KPicklisteVorlage)
                .ValueGeneratedNever()
                .HasColumnName("kPicklisteVorlage");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DLastUpdate)
                .HasColumnType("datetime")
                .HasColumnName("dLastUpdate");
            entity.Property(e => e.NAnzahl).HasColumnName("nAnzahl");
        });

        modelBuilder.Entity<TPictureShopMapping>(entity =>
        {
            entity.HasKey(e => new { e.KPicture, e.KShop, e.CHash }).HasName("PK_SCX_tPictureShopMapping");

            entity.ToTable("tPictureShopMapping", "SCX");

            entity.Property(e => e.KPicture).HasColumnName("kPicture");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.CHash)
                .HasMaxLength(200)
                .HasColumnName("cHash");
            entity.Property(e => e.CComputedHash)
                .HasMaxLength(45)
                .HasColumnName("cComputedHash");
        });

        modelBuilder.Entity<TPlattform>(entity =>
        {
            entity.HasKey(e => e.NPlattform).HasName("PK_dbo_tPlattform");

            entity.ToTable("tPlattform");

            entity.Property(e => e.NPlattform).HasColumnName("nPlattform");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CId)
                .HasMaxLength(30)
                .HasColumnName("cID");
            entity.Property(e => e.CName)
                .HasMaxLength(30)
                .HasColumnName("cName");
            entity.Property(e => e.CWaehrung)
                .HasMaxLength(20)
                .HasColumnName("cWaehrung");
            entity.Property(e => e.NInet).HasColumnName("nInet");
            entity.Property(e => e.NTyp)
                .HasDefaultValueSql("((9))")
                .HasColumnName("nTyp");
        });

        modelBuilder.Entity<TPlattformUeberverkaeufeMoeglich>(entity =>
        {
            entity.HasKey(e => e.KPlattformUeberverkaeufeMoeglich).HasName("PK_dbo_tPlattformUeberverkaeufeMoeglich");

            entity.ToTable("tPlattformUeberverkaeufeMoeglich");

            entity.HasIndex(e => new { e.KArtikel, e.NPlattform }, "UQ_dbo_tPlattformUeberverkaeufeMoeglich_kArtikel_nPlattform").IsUnique();

            entity.Property(e => e.KPlattformUeberverkaeufeMoeglich).HasColumnName("kPlattformUeberverkaeufeMoeglich");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.NPlattform).HasColumnName("nPlattform");

            entity.HasOne(d => d.KArtikelNavigation).WithMany(p => p.TPlattformUeberverkaeufeMoegliches)
                .HasForeignKey(d => d.KArtikel)
                .HasConstraintName("FK_dbo_tPlattformUeberverkaeufeMoeglich_kArtikel");

            entity.HasOne(d => d.NPlattformNavigation).WithMany(p => p.TPlattformUeberverkaeufeMoegliches)
                .HasForeignKey(d => d.NPlattform)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo_tPlattformUeberverkaeufeMoeglich_nPlattform");
        });

        modelBuilder.Entity<TPlz>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tPLZ");

            entity.HasIndex(e => e.CPlz, "IX_tPLZ_cPLZ").IsClustered();

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CLand)
                .HasMaxLength(50)
                .HasColumnName("cLand");
            entity.Property(e => e.COrt)
                .HasMaxLength(50)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPlz)
                .HasMaxLength(10)
                .HasColumnName("cPLZ");
        });

        modelBuilder.Entity<TPosLogeintrag>(entity =>
        {
            entity.HasKey(e => e.KPosLogeintrag).HasName("PK_Sync_tPosLogeintrag");

            entity.ToTable("tPosLogeintrag", "Sync");

            entity.Property(e => e.KPosLogeintrag).HasColumnName("kPosLogeintrag");
            entity.Property(e => e.CJson).HasColumnName("cJson");
            entity.Property(e => e.CMeldung)
                .HasMaxLength(2048)
                .HasColumnName("cMeldung");
            entity.Property(e => e.DZeitpunkt)
                .HasColumnType("datetime")
                .HasColumnName("dZeitpunkt");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KShopSubshop).HasColumnName("kShopSubshop");
            entity.Property(e => e.KSyncLogsitzung).HasColumnName("kSyncLogsitzung");
            entity.Property(e => e.NCallType).HasColumnName("nCallType");
            entity.Property(e => e.NLimit).HasColumnName("nLimit");
            entity.Property(e => e.NSchweregrad).HasColumnName("nSchweregrad");

            entity.HasOne(d => d.KSyncLogsitzungNavigation).WithMany(p => p.TPosLogeintrags)
                .HasForeignKey(d => d.KSyncLogsitzung)
                .HasConstraintName("FK_Sync_tPosLogeintrag_kSyncLogsitzung");
        });

        modelBuilder.Entity<TPrei>(entity =>
        {
            entity.HasKey(e => e.KPreis).HasName("PK_dbo_tPreis");

            entity.ToTable("tPreis", tb =>
                {
                    tb.HasTrigger("jtlActionValidator_tPreis");
                    tb.HasTrigger("tgr_tPreis_DEL");
                    tb.HasTrigger("tgr_tPreis_INSUP");
                });

            entity.HasIndex(e => new { e.KArtikel, e.KShop }, "IX_tPreis_kArtikel_kShop");

            entity.HasIndex(e => e.KShop, "IX_tPreis_kShop_INCL");

            entity.HasIndex(e => new { e.KArtikel, e.KKundenGruppe, e.KShop, e.KKunde }, "UQ_dbo_tPreis_kArtikel_kKundenGruppe_kShop_kKunde").IsUnique();

            entity.Property(e => e.KPreis).HasColumnName("kPreis");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");
            entity.Property(e => e.KShop).HasColumnName("kShop");

            entity.HasOne(d => d.KArtikelNavigation).WithMany(p => p.TPreis)
                .HasForeignKey(d => d.KArtikel)
                .HasConstraintName("FK_dbo_tPreis_kArtikel");
        });

        modelBuilder.Entity<TPreisDetail>(entity =>
        {
            entity.HasKey(e => new { e.KPreis, e.NAnzahlAb }).HasName("PK_dbo_tPreisDetail");

            entity.ToTable("tPreisDetail", tb =>
                {
                    tb.HasTrigger("tgr_tPreisDetail_DEL");
                    tb.HasTrigger("tgr_tPreisDetail_INSUP");
                });

            entity.Property(e => e.KPreis).HasColumnName("kPreis");
            entity.Property(e => e.NAnzahlAb).HasColumnName("nAnzahlAb");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.FNettoPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fNettoPreis");
            entity.Property(e => e.FProzent)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fProzent");
        });

        modelBuilder.Entity<TPreisExportVorlage>(entity =>
        {
            entity.HasKey(e => e.KPreisExportVorlage).HasName("PK_dbo_tPreisExportVorlage");

            entity.ToTable("tPreisExportVorlage");

            entity.Property(e => e.KPreisExportVorlage)
                .ValueGeneratedNever()
                .HasColumnName("kPreisExportVorlage");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KKundengruppe).HasColumnName("kKundengruppe");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.SMapping)
                .HasMaxLength(3000)
                .HasColumnName("sMapping");
        });

        modelBuilder.Entity<TPreisImportVorlage>(entity =>
        {
            entity.HasKey(e => e.KPreisImportVorlage).HasName("PK_dbo_tPreisImportVorlage");

            entity.ToTable("tPreisImportVorlage");

            entity.Property(e => e.KPreisImportVorlage)
                .ValueGeneratedNever()
                .HasColumnName("kPreisImportVorlage");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.BZeile).HasColumnName("bZeile");
            entity.Property(e => e.CIdent)
                .HasMaxLength(255)
                .HasColumnName("cIdent");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CTrennzeichen)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cTrennzeichen");
            entity.Property(e => e.FFaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fFaktor");
            entity.Property(e => e.KKundengruppe).HasColumnName("kKundengruppe");
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.NStdvknetto).HasColumnName("nSTDVKNetto");
            entity.Property(e => e.NVknettoberechnen).HasColumnName("nVKNettoberechnen");
            entity.Property(e => e.SMapping)
                .HasMaxLength(3000)
                .HasColumnName("sMapping");
        });

        modelBuilder.Entity<TPreiskalkulation>(entity =>
        {
            entity.HasKey(e => new { e.CName, e.NAb, e.CPlattform }).HasName("PK_dbo_tPreiskalkulation");

            entity.ToTable("tPreiskalkulation");

            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.NAb).HasColumnName("nAB");
            entity.Property(e => e.CPlattform)
                .HasMaxLength(255)
                .HasColumnName("cPlattform");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.BSonderpreiLager).HasColumnName("bSonderpreiLager");
            entity.Property(e => e.BSonderpreisAb).HasColumnName("bSonderpreisAb");
            entity.Property(e => e.BSonderpreisBis).HasColumnName("bSonderpreisBis");
            entity.Property(e => e.CSonderpreisKundengruppe)
                .HasMaxLength(255)
                .HasColumnName("cSonderpreisKundengruppe");
            entity.Property(e => e.CSonderpreisPlattform)
                .HasMaxLength(255)
                .HasColumnName("cSonderpreisPlattform");
            entity.Property(e => e.DModifiziert)
                .HasColumnType("datetime")
                .HasColumnName("dModifiziert");
            entity.Property(e => e.DSonderpreisAb)
                .HasColumnType("datetime")
                .HasColumnName("dSonderpreisAb");
            entity.Property(e => e.DSonderpreisBis)
                .HasColumnType("datetime")
                .HasColumnName("dSonderpreisBis");
            entity.Property(e => e.NDeaktivate).HasColumnName("nDeaktivate");
            entity.Property(e => e.NDelete).HasColumnName("nDelete");
            entity.Property(e => e.NIndexPreisAlt).HasColumnName("nIndexPreisAlt");
            entity.Property(e => e.NIndexPreisAltKundengruppe).HasColumnName("nIndexPreisAltKundengruppe");
            entity.Property(e => e.NIndexPreisAltMarktplatz).HasColumnName("nIndexPreisAltMarktplatz");
            entity.Property(e => e.NIndexPreisNeu).HasColumnName("nIndexPreisNeu");
            entity.Property(e => e.NIndexPreisNeuKundengruppe).HasColumnName("nIndexPreisNeuKundengruppe");
            entity.Property(e => e.NIndexPreisNeuMarktplatz).HasColumnName("nIndexPreisNeuMarktplatz");
            entity.Property(e => e.NOperator).HasColumnName("nOperator");
            entity.Property(e => e.NPreisglaettungBis10).HasColumnName("nPreisglaettungBis10");
            entity.Property(e => e.NPreisglaettungBis100).HasColumnName("nPreisglaettungBis100");
            entity.Property(e => e.NPreisglaettungBis1000).HasColumnName("nPreisglaettungBis1000");
            entity.Property(e => e.NPreisglaettungBis10000).HasColumnName("nPReisglaettungBis10000");
            entity.Property(e => e.NSonderpreisLager).HasColumnName("nSonderpreisLager");
            entity.Property(e => e.NWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nWert");
        });

        modelBuilder.Entity<TPreiskalkulationLogbuch>(entity =>
        {
            entity.HasKey(e => e.KLogbuch).HasName("PK_dbo_tPreiskalkulationLogbuch");

            entity.ToTable("tPreiskalkulationLogbuch");

            entity.Property(e => e.KLogbuch).HasColumnName("kLogbuch");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CArtNr)
                .HasMaxLength(255)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CArtikel)
                .HasMaxLength(255)
                .HasColumnName("cArtikel");
            entity.Property(e => e.CBetreff)
                .HasMaxLength(255)
                .HasColumnName("cBetreff");
            entity.Property(e => e.CKategorie)
                .HasMaxLength(30)
                .HasColumnName("cKategorie");
            entity.Property(e => e.CLog)
                .HasMaxLength(255)
                .HasColumnName("cLog");
            entity.Property(e => e.CPlattform)
                .HasMaxLength(255)
                .HasColumnName("cPlattform");
            entity.Property(e => e.DZeit)
                .HasColumnType("datetime")
                .HasColumnName("dZeit");
            entity.Property(e => e.KUser).HasColumnName("kUSer");
        });

        modelBuilder.Entity<TPreiskalkulationLogbuchDetail>(entity =>
        {
            entity.HasKey(e => e.KLogbuchDetails).HasName("PK_dbo_tPreiskalkulationLogbuchDetails");

            entity.ToTable("tPreiskalkulationLogbuchDetails");

            entity.Property(e => e.KLogbuchDetails).HasColumnName("kLogbuchDetails");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CArtNr)
                .HasMaxLength(255)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CDifferenz)
                .HasMaxLength(255)
                .HasColumnName("cDifferenz");
            entity.Property(e => e.CEinstellungen).HasColumnName("cEinstellungen");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CPreisAlt)
                .HasMaxLength(255)
                .HasColumnName("cPreisAlt");
            entity.Property(e => e.CPreisNeu)
                .HasMaxLength(255)
                .HasColumnName("cPreisNeu");
            entity.Property(e => e.CWaehrung)
                .HasMaxLength(255)
                .HasColumnName("cWaehrung");
            entity.Property(e => e.FPreisAlt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPreisAlt");
            entity.Property(e => e.FPreisNeu)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPreisNeu");
            entity.Property(e => e.KLogbuch).HasColumnName("kLogbuch");
        });

        modelBuilder.Entity<TPreiskalkulationSetting>(entity =>
        {
            entity.HasKey(e => new { e.KPreiskalkulationSetting, e.CNameSetting }).HasName("PK_dbo_tPreiskalkulationSetting");

            entity.ToTable("tPreiskalkulationSetting");

            entity.Property(e => e.KPreiskalkulationSetting)
                .ValueGeneratedOnAdd()
                .HasColumnName("kPreiskalkulationSetting");
            entity.Property(e => e.CNameSetting)
                .HasMaxLength(255)
                .HasColumnName("cNameSetting");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CKundenGruppe)
                .HasMaxLength(255)
                .HasColumnName("cKundenGruppe");
            entity.Property(e => e.CModifikator)
                .HasMaxLength(255)
                .HasColumnName("cModifikator");
            entity.Property(e => e.CModus)
                .HasMaxLength(255)
                .HasColumnName("cModus");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CPlattform)
                .HasMaxLength(255)
                .HasColumnName("cPlattform");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.FApamax)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAPAMax");
            entity.Property(e => e.FApamin)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAPAMin");
            entity.Property(e => e.FWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWert");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.NPlattform).HasColumnName("nPlattform");
            entity.Property(e => e.NPreisBis10).HasColumnName("nPreisBis10");
            entity.Property(e => e.NPreisBis100).HasColumnName("nPreisBis100");
            entity.Property(e => e.NPreisBis1000).HasColumnName("nPreisBis1000");
            entity.Property(e => e.NPreisBis10000).HasColumnName("nPreisBis10000");
        });

        modelBuilder.Entity<TProcessParameter>(entity =>
        {
            entity.HasKey(e => e.KProcessParameter).HasName("PK_Deprecated_kProcessParameter");

            entity.ToTable("tProcessParameter", "DEPRECATED");

            entity.HasIndex(e => e.CGroupName, "IX_Deprecated_tProcessParameter_cGroupName");

            entity.HasIndex(e => e.IPrimaryReference, "IX_Deprecated_tProcessParameter_iPrimaryReference");

            entity.HasIndex(e => e.IRelation, "IX_Deprecated_tProcessParameter_iRelation");

            entity.HasIndex(e => e.ISecondaryReference, "IX_Deprecated_tProcessParameter_iSecondaryReference");

            entity.HasIndex(e => e.NOrigin, "IX_Deprecated_tProcessParameter_nOrigin");

            entity.HasIndex(e => new { e.IPrimaryReference, e.CName }, "UQ_Params_tProcessParameter_iPrimaryReference_cName").IsUnique();

            entity.Property(e => e.KProcessParameter).HasColumnName("kProcessParameter");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CDescription).HasColumnName("cDescription");
            entity.Property(e => e.CGroupName)
                .HasMaxLength(150)
                .HasColumnName("cGroupName");
            entity.Property(e => e.CName)
                .HasMaxLength(100)
                .HasColumnName("cName");
            entity.Property(e => e.IPrimaryReference).HasColumnName("iPrimaryReference");
            entity.Property(e => e.IRelation).HasColumnName("iRelation");
            entity.Property(e => e.ISecondaryReference).HasColumnName("iSecondaryReference");
            entity.Property(e => e.NDeleted).HasColumnName("nDeleted");
            entity.Property(e => e.NFieldType).HasColumnName("nFieldType");
            entity.Property(e => e.NOrigin).HasColumnName("nOrigin");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<TProcessParameter1>(entity =>
        {
            entity.HasKey(e => e.KProcessParameter).HasName("PK_PParams_tProcessParameter");

            entity.ToTable("tProcessParameter", "PParams");

            entity.HasIndex(e => e.CId, "UQ_PParams_tProcessParameter_cId").IsUnique();

            entity.Property(e => e.KProcessParameter).HasColumnName("kProcessParameter");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CId)
                .HasMaxLength(100)
                .HasColumnName("cId");
            entity.Property(e => e.CInternalDescription).HasColumnName("cInternalDescription");
            entity.Property(e => e.KProcessParameterGroup).HasColumnName("kProcessParameterGroup");
            entity.Property(e => e.NValueType).HasColumnName("nValueType");

            entity.HasOne(d => d.KProcessParameterGroupNavigation).WithMany(p => p.TProcessParameter1s)
                .HasForeignKey(d => d.KProcessParameterGroup)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PParams_tProcessParameter_kProcessParameterGroup");
        });

        modelBuilder.Entity<TProcessParameterActualValue>(entity =>
        {
            entity.HasKey(e => e.KProcessParameterActualValue).HasName("PK_PParams_tProcessParameterActualValue");

            entity.ToTable("tProcessParameterActualValue", "PParams");

            entity.HasIndex(e => new { e.KProcessParameterAssignment, e.KActualValueObject }, "UQ_PParams_tProcessParameterActualValue_kProcessParameterAssignment_kProcessParameterActualValueObject").IsUnique();

            entity.Property(e => e.KProcessParameterActualValue).HasColumnName("kProcessParameterActualValue");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CValueText).HasColumnName("cValueText");
            entity.Property(e => e.DValueDateTime).HasColumnName("dValueDateTime");
            entity.Property(e => e.KActualValueObject).HasColumnName("kActualValueObject");
            entity.Property(e => e.KFile).HasColumnName("kFile");
            entity.Property(e => e.KProcessParameterAssignment).HasColumnName("kProcessParameterAssignment");
            entity.Property(e => e.NValueDecimal)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nValueDecimal");
            entity.Property(e => e.NValueInt).HasColumnName("nValueInt");

            entity.HasOne(d => d.KProcessParameterAssignmentNavigation).WithMany(p => p.TProcessParameterActualValues)
                .HasForeignKey(d => d.KProcessParameterAssignment)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PParams_tProcessParameterActualValue_kProcessParameterAssignment");
        });

        modelBuilder.Entity<TProcessParameterActualValueObjectType>(entity =>
        {
            entity.HasKey(e => e.KProcessParameterActualValueObjectType).HasName("PK_PParams_tProcessParameterActualValueObjectType");

            entity.ToTable("tProcessParameterActualValueObjectType", "PParams");

            entity.HasIndex(e => new { e.KProcessParameter, e.IActualValueObjectType }, "UQ_PParams_tProcessParameterActualValueObjectType_kProcessParameter_iActualValueObjectType").IsUnique();

            entity.Property(e => e.KProcessParameterActualValueObjectType).HasColumnName("kProcessParameterActualValueObjectType");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.IActualValueObjectType).HasColumnName("iActualValueObjectType");
            entity.Property(e => e.KProcessParameter).HasColumnName("kProcessParameter");

            entity.HasOne(d => d.KProcessParameterNavigation).WithMany(p => p.TProcessParameterActualValueObjectTypes)
                .HasForeignKey(d => d.KProcessParameter)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PParams_tProcessParameterActualValueObjectType_kProcessParameter");
        });

        modelBuilder.Entity<TProcessParameterAssignment>(entity =>
        {
            entity.HasKey(e => e.KProcessParameterAssignment).HasName("PK_Deprecated_kProcessParameterAssignment");

            entity.ToTable("tProcessParameterAssignment", "DEPRECATED");

            entity.HasIndex(e => e.IPrimaryReference, "IX_Deprecated_tProcessParameterAssignment_iPrimaryReference");

            entity.HasIndex(e => e.KPrimaryReference, "IX_Deprecated_tProcessParameterAssignment_kPrimaryReference");

            entity.HasIndex(e => e.KProcessParameter, "IX_Deprecated_tProcessParameterAssignment_kProcessParameter");

            entity.HasIndex(e => new { e.KProcessParameter, e.KPrimaryReference }, "UQ_Deprecated_tProcessParameterAssignment_kProcessParameter_kPrimaryReference").IsUnique();

            entity.Property(e => e.KProcessParameterAssignment).HasColumnName("kProcessParameterAssignment");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CDefaultValueText).HasColumnName("cDefaultValueText");
            entity.Property(e => e.FDefaultValueDecimal)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fDefaultValueDecimal");
            entity.Property(e => e.IPrimaryReference).HasColumnName("iPrimaryReference");
            entity.Property(e => e.KLinkedProcessParameter).HasColumnName("kLinkedProcessParameter");
            entity.Property(e => e.KPrimaryReference).HasColumnName("kPrimaryReference");
            entity.Property(e => e.KProcessParameter).HasColumnName("kProcessParameter");
            entity.Property(e => e.NDefaultValueInt).HasColumnName("nDefaultValueInt");
            entity.Property(e => e.NDeleted).HasColumnName("nDeleted");
            entity.Property(e => e.NIsRequired).HasColumnName("nIsRequired");
            entity.Property(e => e.NUsageType).HasColumnName("nUsageType");

            entity.HasOne(d => d.KLinkedProcessParameterNavigation).WithMany(p => p.TProcessParameterAssignmentKLinkedProcessParameterNavigations)
                .HasForeignKey(d => d.KLinkedProcessParameter)
                .HasConstraintName("FK_Deprecated_tProcessParameterAssignment_kLinkedProcessParameter");

            entity.HasOne(d => d.KProcessParameterNavigation).WithMany(p => p.TProcessParameterAssignmentKProcessParameterNavigations)
                .HasForeignKey(d => d.KProcessParameter)
                .HasConstraintName("FK_Deprecated_tProcessParameterAssignment_kProcessParameter");
        });

        modelBuilder.Entity<TProcessParameterAssignment1>(entity =>
        {
            entity.HasKey(e => e.KProcessParameterAssignment).HasName("PK_PParams_tProcessParameterAssignment");

            entity.ToTable("tProcessParameterAssignment", "PParams");

            entity.HasIndex(e => new { e.KProcessParameter, e.KAssignmentObject }, "UQ_PParams_tProcessParameterAssignment_kProcessParameter_kAssignmentObject").IsUnique();

            entity.Property(e => e.KProcessParameterAssignment).HasColumnName("kProcessParameterAssignment");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KAssignmentObject).HasColumnName("kAssignmentObject");
            entity.Property(e => e.KProcessParameter).HasColumnName("kProcessParameter");
            entity.Property(e => e.KProcessParameterActualValueObjectType).HasColumnName("kProcessParameterActualValueObjectType");
            entity.Property(e => e.NIsActualValueRequired).HasColumnName("nIsActualValueRequired");
            entity.Property(e => e.NUsageType).HasColumnName("nUsageType");

            entity.HasOne(d => d.KProcessParameterNavigation).WithMany(p => p.TProcessParameterAssignment1s)
                .HasForeignKey(d => d.KProcessParameter)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PParams_tProcessParameterAssignment_kProcessParameter");

            entity.HasOne(d => d.KProcessParameterActualValueObjectTypeNavigation).WithMany(p => p.TProcessParameterAssignment1s)
                .HasForeignKey(d => d.KProcessParameterActualValueObjectType)
                .HasConstraintName("FK_PParams_tProcessParameterAssignment_kProcessParameterActualValueObjectType");
        });

        modelBuilder.Entity<TProcessParameterAssignmentTargetValueObjectType>(entity =>
        {
            entity.HasKey(e => e.KProcessParameterAssignmentTargetValueObjectType).HasName("PK_PParams_tProcessParameterAssignmentTargetValueObjectType");

            entity.ToTable("tProcessParameterAssignmentTargetValueObjectType", "PParams");

            entity.HasIndex(e => new { e.KProcessParameterAssignment, e.KProcessParameterTargetValueObjectType }, "UQ_PParams_tProcessParameterAssignmentTargetValueObjectType_kProcessParameterAssignment_kProcessParameterTargetValueObjectType").IsUnique();

            entity.Property(e => e.KProcessParameterAssignmentTargetValueObjectType).HasColumnName("kProcessParameterAssignmentTargetValueObjectType");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KProcessParameterAssignment).HasColumnName("kProcessParameterAssignment");
            entity.Property(e => e.KProcessParameterTargetValueObjectType).HasColumnName("kProcessParameterTargetValueObjectType");
            entity.Property(e => e.NIsTargetValueRequired).HasColumnName("nIsTargetValueRequired");

            entity.HasOne(d => d.KProcessParameterAssignmentNavigation).WithMany(p => p.TProcessParameterAssignmentTargetValueObjectTypes)
                .HasForeignKey(d => d.KProcessParameterAssignment)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PParams_tProcessParameterAssignmentTargetValueObjectType_kProcessParameterAssignment");

            entity.HasOne(d => d.KProcessParameterTargetValueObjectTypeNavigation).WithMany(p => p.TProcessParameterAssignmentTargetValueObjectTypes)
                .HasForeignKey(d => d.KProcessParameterTargetValueObjectType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PParams_tProcessParameterAssignmentTargetValueObjectType_kProcessParameterTargetValueObjectType");
        });

        modelBuilder.Entity<TProcessParameterGroup>(entity =>
        {
            entity.HasKey(e => e.KProcessParameterGroup).HasName("PK_PParams_tProcessParameterGroup");

            entity.ToTable("tProcessParameterGroup", "PParams");

            entity.Property(e => e.KProcessParameterGroup).HasColumnName("kProcessParameterGroup");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CInternalDescription).HasColumnName("cInternalDescription");
            entity.Property(e => e.IAssignmentObjectType).HasColumnName("iAssignmentObjectType");
        });

        modelBuilder.Entity<TProcessParameterGroupLanguage>(entity =>
        {
            entity.HasKey(e => new { e.KProcessParameterGroup, e.KSprache }).HasName("PK_PParams_tProcessParameterGroupLanguage");

            entity.ToTable("tProcessParameterGroupLanguage", "PParams");

            entity.Property(e => e.KProcessParameterGroup).HasColumnName("kProcessParameterGroup");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");

            entity.HasOne(d => d.KProcessParameterGroupNavigation).WithMany(p => p.TProcessParameterGroupLanguages)
                .HasForeignKey(d => d.KProcessParameterGroup)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PParams_tProcessParameterGroupLanguage_kProcessParameterGroup");
        });

        modelBuilder.Entity<TProcessParameterLanguage>(entity =>
        {
            entity.HasKey(e => new { e.KProcessParameter, e.KSprache }).HasName("PK_Deprecated_kProcessParameter_kSprache");

            entity.ToTable("tProcessParameterLanguage", "DEPRECATED");

            entity.HasIndex(e => e.KProcessParameter, "IX_Deprecated_tProcessParameterLanguage_kProcessParameter");

            entity.HasIndex(e => e.KSprache, "IX_Deprecated_tProcessParameterLanguage_kSprache");

            entity.Property(e => e.KProcessParameter).HasColumnName("kProcessParameter");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CDisplayName)
                .HasMaxLength(255)
                .HasColumnName("cDisplayName");
            entity.Property(e => e.CUnit)
                .HasMaxLength(20)
                .HasColumnName("cUnit");

            entity.HasOne(d => d.KProcessParameterNavigation).WithMany(p => p.TProcessParameterLanguages)
                .HasForeignKey(d => d.KProcessParameter)
                .HasConstraintName("FK_Deprecated_tProcessParameterLanguage_kProcessParameter");
        });

        modelBuilder.Entity<TProcessParameterLanguage1>(entity =>
        {
            entity.HasKey(e => new { e.KProcessParameter, e.KSprache }).HasName("PK_PParams_tProcessParameterLanguage");

            entity.ToTable("tProcessParameterLanguage", "PParams");

            entity.Property(e => e.KProcessParameter).HasColumnName("kProcessParameter");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");

            entity.HasOne(d => d.KProcessParameterNavigation).WithMany(p => p.TProcessParameterLanguage1s)
                .HasForeignKey(d => d.KProcessParameter)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PParams_tProcessParameterLanguage_kProcessParameter");
        });

        modelBuilder.Entity<TProcessParameterTargetValue>(entity =>
        {
            entity.HasKey(e => e.KProcessParameterTargetValue).HasName("PK_PParams_tProcessParameterTargetValue");

            entity.ToTable("tProcessParameterTargetValue", "PParams");

            entity.HasIndex(e => new { e.KProcessParameterAssignmentTargetValueObjectType, e.KTargetValueObject }, "UQ_PParams_tProcessParameterTargetValue_kProcessParameterAssignmentTargetValueObjectType_kTargetValueObject").IsUnique();

            entity.Property(e => e.KProcessParameterTargetValue).HasColumnName("kProcessParameterTargetValue");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CValueText).HasColumnName("cValueText");
            entity.Property(e => e.DValueDateTime).HasColumnName("dValueDateTime");
            entity.Property(e => e.KFile).HasColumnName("kFile");
            entity.Property(e => e.KProcessParameterAssignmentTargetValueObjectType).HasColumnName("kProcessParameterAssignmentTargetValueObjectType");
            entity.Property(e => e.KTargetValueObject).HasColumnName("kTargetValueObject");
            entity.Property(e => e.NValueDecimal)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nValueDecimal");
            entity.Property(e => e.NValueInt).HasColumnName("nValueInt");

            entity.HasOne(d => d.KProcessParameterAssignmentTargetValueObjectTypeNavigation).WithMany(p => p.TProcessParameterTargetValues)
                .HasForeignKey(d => d.KProcessParameterAssignmentTargetValueObjectType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PParams_tProcessParameterTargetValue_kProcessParameterAssignmentTargetValueObjectType");
        });

        modelBuilder.Entity<TProcessParameterTargetValueObjectType>(entity =>
        {
            entity.HasKey(e => e.KProcessParameterTargetValueObjectType).HasName("PK_PParams_tProcessParameterTargetValueObjectType");

            entity.ToTable("tProcessParameterTargetValueObjectType", "PParams");

            entity.HasIndex(e => new { e.KProcessParameter, e.ITargetValueObjectType }, "UQ_PParams_tProcessParameterTargetValueObjectType_kProcessParameter_iTargetValueObjectType").IsUnique();

            entity.Property(e => e.KProcessParameterTargetValueObjectType).HasColumnName("kProcessParameterTargetValueObjectType");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.ITargetValueObjectType).HasColumnName("iTargetValueObjectType");
            entity.Property(e => e.KProcessParameter).HasColumnName("kProcessParameter");

            entity.HasOne(d => d.KProcessParameterNavigation).WithMany(p => p.TProcessParameterTargetValueObjectTypes)
                .HasForeignKey(d => d.KProcessParameter)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PParams_tProcessParameterTargetValueObjectType_kProcessParameter");
        });

        modelBuilder.Entity<TProcessParameterValue>(entity =>
        {
            entity.HasKey(e => e.KProcessParameterValue).HasName("PK_Deprecated_kProcessParameterValue");

            entity.ToTable("tProcessParameterValue", "DEPRECATED");

            entity.HasIndex(e => e.ISecondaryReference, "IX_Deprecated_tProcessParameterValue_iSecondaryReference");

            entity.HasIndex(e => e.KFile, "IX_Deprecated_tProcessParameterValue_kFile");

            entity.HasIndex(e => e.KProcessParameterAssignment, "IX_Deprecated_tProcessParameterValue_kProcessParameterAssignment");

            entity.HasIndex(e => e.KSecondaryReference, "IX_Deprecated_tProcessParameterValue_kSecondaryReference");

            entity.HasIndex(e => new { e.KProcessParameterAssignment, e.KSecondaryReference }, "UQ_Deprecated_tProcessParameterValue_kProcessParameterAssignment_kSecondaryReference").IsUnique();

            entity.Property(e => e.KProcessParameterValue).HasColumnName("kProcessParameterValue");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CValueText).HasColumnName("cValueText");
            entity.Property(e => e.DValueDateTime).HasColumnName("dValueDateTime");
            entity.Property(e => e.FValueDecimal)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fValueDecimal");
            entity.Property(e => e.ISecondaryReference).HasColumnName("iSecondaryReference");
            entity.Property(e => e.KFile).HasColumnName("kFile");
            entity.Property(e => e.KLinkedProcessParameterAssignment).HasColumnName("kLinkedProcessParameterAssignment");
            entity.Property(e => e.KProcessParameterAssignment).HasColumnName("kProcessParameterAssignment");
            entity.Property(e => e.KSecondaryReference).HasColumnName("kSecondaryReference");
            entity.Property(e => e.NValueInt).HasColumnName("nValueInt");

            entity.HasOne(d => d.KFileNavigation).WithMany(p => p.TProcessParameterValues)
                .HasForeignKey(d => d.KFile)
                .HasConstraintName("FK_Deprecated_tProcessParameterValue_kFile");

            entity.HasOne(d => d.KLinkedProcessParameterAssignmentNavigation).WithMany(p => p.TProcessParameterValueKLinkedProcessParameterAssignmentNavigations)
                .HasForeignKey(d => d.KLinkedProcessParameterAssignment)
                .HasConstraintName("FK_Deprecated_tProcessParameterValue_kLinkedProcessParameterAssignment");

            entity.HasOne(d => d.KProcessParameterAssignmentNavigation).WithMany(p => p.TProcessParameterValueKProcessParameterAssignmentNavigations)
                .HasForeignKey(d => d.KProcessParameterAssignment)
                .HasConstraintName("FK_Deprecated_tProcessParameterValue_kProcessParameterAssignment");
        });

        modelBuilder.Entity<TProdCondition>(entity =>
        {
            entity.HasKey(e => new { e.KArtikel, e.KZustand }).HasName("PK_pps_tProdCondition");

            entity.ToTable("tProdCondition", "pps");

            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KZustand).HasColumnName("kZustand");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.NForDisassembly).HasColumnName("nForDisassembly");
            entity.Property(e => e.NRejectsRatio)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nRejectsRatio");

            entity.HasOne(d => d.KArtikelNavigation).WithMany(p => p.TProdConditions)
                .HasForeignKey(d => d.KArtikel)
                .HasConstraintName("FK_pps_tProdCondition_tArtikel");

            entity.HasOne(d => d.KZustandNavigation).WithMany(p => p.TProdConditions)
                .HasForeignKey(d => d.KZustand)
                .HasConstraintName("FK_pps_tProdCondition_tZustand");
        });

        modelBuilder.Entity<TProdItem>(entity =>
        {
            entity.HasKey(e => e.KArtikel).HasName("PK_pps_tProdItem");

            entity.ToTable("tProdItem", "pps");

            entity.Property(e => e.KArtikel)
                .ValueGeneratedNever()
                .HasColumnName("kArtikel");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DCreated)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("dCreated");
            entity.Property(e => e.DLastChanged)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("dLastChanged");
            entity.Property(e => e.KBenutzerLastChange).HasColumnName("kBenutzerLastChange");
            entity.Property(e => e.KItemLabelPrintTemplate).HasColumnName("kItemLabelPrintTemplate");
            entity.Property(e => e.KSharedLotSize).HasColumnName("kSharedLotSize");
            entity.Property(e => e.NCustomOverAmazonCustoms).HasColumnName("nCustomOverAmazonCustoms");
            entity.Property(e => e.NCustomOverKonfigurationen).HasColumnName("nCustomOverKonfigurationen");
            entity.Property(e => e.NCustomOverUpload).HasColumnName("nCustomOverUpload");
            entity.Property(e => e.NCustomOverVariationen).HasColumnName("nCustomOverVariationen");
            entity.Property(e => e.NDestructionMode).HasColumnName("nDestructionMode");
            entity.Property(e => e.NLotType).HasColumnName("nLotType");
            entity.Property(e => e.NProductType).HasColumnName("nProductType");
            entity.Property(e => e.NProductionLine).HasColumnName("nProductionLine");
            entity.Property(e => e.NSubsetDivision).HasColumnName("nSubsetDivision");
            entity.Property(e => e.NUndefinedResultAllowed).HasColumnName("nUndefinedResultAllowed");
            entity.Property(e => e.NVariable).HasColumnName("nVariable");

            entity.HasOne(d => d.KArtikelNavigation).WithOne(p => p.TProdItem)
                .HasForeignKey<TProdItem>(d => d.KArtikel)
                .HasConstraintName("FK_pps_tProdItem_tArtikel");

            entity.HasOne(d => d.KItemLabelPrintTemplateNavigation).WithMany(p => p.TProdItems)
                .HasForeignKey(d => d.KItemLabelPrintTemplate)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_pps_tProdItem_kItemLabelPrintTemplate");
        });

        modelBuilder.Entity<TProdItemCustomField>(entity =>
        {
            entity.HasKey(e => e.KProdItemCustomField).HasName("PK_pps_tProdItemCustomField");

            entity.ToTable("tProdItemCustomField", "pps");

            entity.HasIndex(e => new { e.KAttribut, e.KArtikel }, "UQ_pps_tProdItemCustomField_kAttribut_kProdItem").IsUnique();

            entity.Property(e => e.KProdItemCustomField).HasColumnName("kProdItemCustomField");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CWertVarchar).HasColumnName("cWertVarchar");
            entity.Property(e => e.DWertDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dWertDateTime");
            entity.Property(e => e.FWertDecimal)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertDecimal");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KAttribut).HasColumnName("kAttribut");
            entity.Property(e => e.NWertInt).HasColumnName("nWertInt");
        });

        modelBuilder.Entity<TProductPictureRef>(entity =>
        {
            entity.HasKey(e => e.KProductPictureRef).HasName("PK_FulfillmentNetwork_tProductPictureRef");

            entity.ToTable("tProductPictureRef", "FulfillmentNetwork");

            entity.HasIndex(e => e.COwnerId, "IX_FulfillmentNetwork_tProductPictureRef_cOwnerId").IsDescending();

            entity.HasIndex(e => e.KArtikelbildPlattform, "IX_FulfillmentNetwork_tProductPictureRef_kArtikelbildPlattform");

            entity.Property(e => e.KProductPictureRef).HasColumnName("kProductPictureRef");
            entity.Property(e => e.BBildRowVersion)
                .HasMaxLength(8)
                .IsFixedLength()
                .HasColumnName("bBildRowVersion");
            entity.Property(e => e.CFfnHash)
                .HasMaxLength(255)
                .HasColumnName("cFfnHash");
            entity.Property(e => e.CFfnPublicUrl)
                .HasMaxLength(255)
                .HasColumnName("cFfnPublicUrl");
            entity.Property(e => e.COwnerId)
                .HasMaxLength(10)
                .HasColumnName("cOwnerId");
            entity.Property(e => e.DCreatedAt).HasColumnName("dCreatedAt");
            entity.Property(e => e.DUpdatedAt).HasColumnName("dUpdatedAt");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KArtikelbildPlattform).HasColumnName("kArtikelbildPlattform");
            entity.Property(e => e.KBild).HasColumnName("kBild");
            entity.Property(e => e.NFfnNumber).HasColumnName("nFfnNumber");
            entity.Property(e => e.NType).HasColumnName("nType");

            entity.HasOne(d => d.KArtikelbildPlattformNavigation).WithMany(p => p.TProductPictureRefs)
                .HasForeignKey(d => d.KArtikelbildPlattform)
                .HasConstraintName("FK_FulfillmentNetwork_tProductPictureRef_kArtikelbildPlattform");
        });

        modelBuilder.Entity<TProductRef>(entity =>
        {
            entity.HasKey(e => e.KProductRef).HasName("PK_FulfillmentNetwork_tProductRef");

            entity.ToTable("tProductRef", "FulfillmentNetwork", tb =>
                {
                    tb.HasTrigger("trg_FulfillmentNetwork_tProductRef_DELETE");
                    tb.HasTrigger("trg_FulfillmentNetwork_tProductRef_INS");
                });

            entity.HasIndex(e => e.COwnerId, "IX_FulfillmentNetwork_tProductRef_cOwnerId").IsDescending();

            entity.HasIndex(e => e.KArtikel, "IX_FulfillmentNetwork_tProductRef_kArtikel");

            entity.HasIndex(e => e.NType, "IX_FulfillmentNetwork_tProductRef_nType");

            entity.HasIndex(e => e.CJfsku, "UQ_FulfillmentNetwork_tProductRef_cJfsku")
                .IsUnique()
                .IsDescending();

            entity.Property(e => e.KProductRef).HasColumnName("kProductRef");
            entity.Property(e => e.BRowVersion)
                .HasMaxLength(8)
                .IsFixedLength()
                .HasColumnName("bRowVersion");
            entity.Property(e => e.CJfsku)
                .HasMaxLength(255)
                .HasColumnName("cJfsku");
            entity.Property(e => e.COwnerId)
                .HasMaxLength(10)
                .HasColumnName("cOwnerId");
            entity.Property(e => e.DCreatedAt).HasColumnName("dCreatedAt");
            entity.Property(e => e.DUpdatedAt).HasColumnName("dUpdatedAt");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.NCondition).HasColumnName("nCondition");
            entity.Property(e => e.NType).HasColumnName("nType");

            entity.HasOne(d => d.KArtikelNavigation).WithMany(p => p.TProductRefs)
                .HasForeignKey(d => d.KArtikel)
                .HasConstraintName("FK_FulfillmentNetwork_tProductRef_kArtikel");
        });

        modelBuilder.Entity<TProductionOrder>(entity =>
        {
            entity.HasKey(e => e.KProductionOrder).HasName("PK_pps_tProductionOrder");

            entity.ToTable("tProductionOrder", "pps");

            entity.Property(e => e.KProductionOrder).HasColumnName("kProductionOrder");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CIssueNumber)
                .HasMaxLength(100)
                .HasColumnName("cIssueNumber");
            entity.Property(e => e.CNotice)
                .HasDefaultValueSql("('')")
                .HasColumnName("cNotice");
            entity.Property(e => e.CProjectNumber)
                .HasMaxLength(100)
                .HasDefaultValueSql("('')")
                .HasColumnName("cProjectNumber");
            entity.Property(e => e.CReferenceNumber)
                .HasMaxLength(100)
                .HasDefaultValueSql("('')")
                .HasColumnName("cReferenceNumber");
            entity.Property(e => e.CText)
                .HasDefaultValueSql("('')")
                .HasColumnName("cText");
            entity.Property(e => e.DActualCompletion).HasColumnName("dActualCompletion");
            entity.Property(e => e.DActualStart).HasColumnName("dActualStart");
            entity.Property(e => e.DDelivery).HasColumnName("dDelivery");
            entity.Property(e => e.DIssueDate).HasColumnName("dIssueDate");
            entity.Property(e => e.DLastModified).HasColumnName("dLastModified");
            entity.Property(e => e.DRelease).HasColumnName("dRelease");
            entity.Property(e => e.DTargetCompletion).HasColumnName("dTargetCompletion");
            entity.Property(e => e.DTargetStart).HasColumnName("dTargetStart");
            entity.Property(e => e.FProgress)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fProgress");
            entity.Property(e => e.KBenutzerCreated).HasColumnName("kBenutzerCreated");
            entity.Property(e => e.KBenutzerLastModified).HasColumnName("kBenutzerLastModified");
            entity.Property(e => e.KBenutzerReleased).HasColumnName("kBenutzerReleased");
            entity.Property(e => e.NCombinedLotSize).HasColumnName("nCombinedLotSize");
            entity.Property(e => e.NHasWarnings).HasColumnName("nHasWarnings");
            entity.Property(e => e.NLotCount)
                .HasDefaultValueSql("((1))")
                .HasColumnName("nLotCount");
            entity.Property(e => e.NLotSize)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nLotSize");
            entity.Property(e => e.NTargetTotalQuantityBelowLotSizeAllowed).HasColumnName("nTargetTotalQuantityBelowLotSizeAllowed");
        });

        modelBuilder.Entity<TProductionOrderCustomField>(entity =>
        {
            entity.HasKey(e => e.KProductionOrderCustomField).HasName("PK_pps_tProductionOrderCustomField");

            entity.ToTable("tProductionOrderCustomField", "pps");

            entity.HasIndex(e => new { e.KAttribut, e.KProductionOrder }, "UQ_pps_tProductionOrderCustomField_kAttribut_kProductionOrder").IsUnique();

            entity.Property(e => e.KProductionOrderCustomField).HasColumnName("kProductionOrderCustomField");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CWertVarchar).HasColumnName("cWertVarchar");
            entity.Property(e => e.DWertDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dWertDateTime");
            entity.Property(e => e.FWertDecimal)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertDecimal");
            entity.Property(e => e.KAttribut).HasColumnName("kAttribut");
            entity.Property(e => e.KProductionOrder).HasColumnName("kProductionOrder");
            entity.Property(e => e.NWertInt).HasColumnName("nWertInt");
        });

        modelBuilder.Entity<TProductionOrderFile>(entity =>
        {
            entity.HasKey(e => e.KProductionOrderFile).HasName("PK_pps_tProductionOrderFile");

            entity.ToTable("tProductionOrderFile", "pps");

            entity.HasIndex(e => new { e.KProductionOrder, e.KFile }, "UQ_pps_tProductionOrderFile_kProductionOrder_kFile").IsUnique();

            entity.Property(e => e.KProductionOrderFile).HasColumnName("kProductionOrderFile");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KFile).HasColumnName("kFile");
            entity.Property(e => e.KProductionOrder).HasColumnName("kProductionOrder");
            entity.Property(e => e.NSort).HasColumnName("nSort");

            entity.HasOne(d => d.KProductionOrderNavigation).WithMany(p => p.TProductionOrderFiles)
                .HasForeignKey(d => d.KProductionOrder)
                .HasConstraintName("FK_pps_tProductionOrderFile_kProductionOrder");
        });

        modelBuilder.Entity<TProductionOrderLabel>(entity =>
        {
            entity.HasKey(e => new { e.KProductionOrder, e.KLabel }).HasName("PK_pps_tProductionOrderLabel");

            entity.ToTable("tProductionOrderLabel", "pps");

            entity.Property(e => e.KProductionOrder).HasColumnName("kProductionOrder");
            entity.Property(e => e.KLabel).HasColumnName("kLabel");

            entity.HasOne(d => d.KProductionOrderNavigation).WithMany(p => p.TProductionOrderLabels)
                .HasForeignKey(d => d.KProductionOrder)
                .HasConstraintName("FK_pps_tProductionOrderLabel_kProductionOrder");
        });

        modelBuilder.Entity<TProductionOrderProducible>(entity =>
        {
            entity.HasKey(e => e.KProductionOrderProducible).HasName("PK_pps_tProductionOrderProducible");

            entity.ToTable("tProductionOrderProducible", "pps");

            entity.Property(e => e.KProductionOrderProducible).HasColumnName("kProductionOrderProducible");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.FActualQuantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fActualQuantity");
            entity.Property(e => e.FLotSize)
                .HasDefaultValueSql("((1))")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLotSize");
            entity.Property(e => e.FTargetTotalQuantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fTargetTotalQuantity");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBillOfMaterial).HasColumnName("kBillOfMaterial");
            entity.Property(e => e.KDisposition).HasColumnName("kDisposition");
            entity.Property(e => e.KProductionOrder).HasColumnName("kProductionOrder");

            entity.HasOne(d => d.KArtikelNavigation).WithMany(p => p.TProductionOrderProducibles)
                .HasForeignKey(d => d.KArtikel)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pps_tProductionOrderProducible_kArtikel");

            entity.HasOne(d => d.KBillOfMaterialNavigation).WithMany(p => p.TProductionOrderProducibles)
                .HasForeignKey(d => d.KBillOfMaterial)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pps_tProductionOrderProducible_kBillOfMaterial");

            entity.HasOne(d => d.KDispositionNavigation).WithMany(p => p.TProductionOrderProducibles)
                .HasForeignKey(d => d.KDisposition)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_pps_tProductionOrderProducible_kDisposition");

            entity.HasOne(d => d.KProductionOrderNavigation).WithMany(p => p.TProductionOrderProducibles)
                .HasForeignKey(d => d.KProductionOrder)
                .HasConstraintName("FK_pps_tProductionOrderProducible_kProductionOrder");
        });

        modelBuilder.Entity<TProductionOrderSearch>(entity =>
        {
            entity.HasKey(e => new { e.KProductionOrder, e.CNummer, e.NType }).HasName("PK_pps_tProductionOrderSearch");

            entity.ToTable("tProductionOrderSearch", "pps");

            entity.Property(e => e.KProductionOrder).HasColumnName("kProductionOrder");
            entity.Property(e => e.CNummer)
                .HasMaxLength(255)
                .HasColumnName("cNummer");
            entity.Property(e => e.NType).HasColumnName("nType");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");

            entity.HasOne(d => d.KProductionOrderNavigation).WithMany(p => p.TProductionOrderSearches)
                .HasForeignKey(d => d.KProductionOrder)
                .HasConstraintName("FK_pps_tProductionOrderSearch_kProductionOrder");
        });

        modelBuilder.Entity<TQueue>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tQueue");

            entity.HasIndex(e => new { e.CName, e.NAction }, "IX_dbo_tQueue_cName_nAction");

            entity.HasIndex(e => e.CName, "IX_tQueue_cName");

            entity.HasIndex(e => e.KShop, "IX_tQueue_kShop");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KOption1).HasColumnName("kOption1");
            entity.Property(e => e.KOption2).HasColumnName("kOption2");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KWert).HasColumnName("kWert");
            entity.Property(e => e.NAction).HasColumnName("nAction");
            entity.Property(e => e.NInBearbeitung).HasColumnName("nInBearbeitung");
        });

        modelBuilder.Entity<TQueue1>(entity =>
        {
            entity.HasKey(e => e.KQueue).HasName("PK_FulfillmentNetwork_tQueue");

            entity.ToTable("tQueue", "FulfillmentNetwork");

            entity.HasIndex(e => e.COwner, "IX_FulfillmentNetwork_tQueue_cOwner_INCL");

            entity.HasIndex(e => new { e.NRole, e.NType, e.NState, e.DProcessedAt, e.NPriority, e.DModificationDate }, "IX_FulfillmentNetwork_tQueue_nRole_nType_nState_dProcessedAt_nPriority_dModificationDate");

            entity.Property(e => e.KQueue).HasColumnName("kQueue");
            entity.Property(e => e.CData).HasColumnName("cData");
            entity.Property(e => e.CErrorMessage).HasColumnName("cErrorMessage");
            entity.Property(e => e.CFfnId)
                .HasMaxLength(255)
                .HasColumnName("cFfnId");
            entity.Property(e => e.COwner)
                .HasMaxLength(4)
                .HasColumnName("cOwner");
            entity.Property(e => e.CRequestId)
                .HasMaxLength(255)
                .HasColumnName("cRequestId");
            entity.Property(e => e.CSessionId)
                .HasMaxLength(255)
                .HasColumnName("cSessionId");
            entity.Property(e => e.DCreatedAt).HasColumnName("dCreatedAt");
            entity.Property(e => e.DModificationDate).HasColumnName("dModificationDate");
            entity.Property(e => e.DProcessedAt).HasColumnName("dProcessedAt");
            entity.Property(e => e.NEvent).HasColumnName("nEvent");
            entity.Property(e => e.NPriority).HasColumnName("nPriority");
            entity.Property(e => e.NRole).HasColumnName("nRole");
            entity.Property(e => e.NState).HasColumnName("nState");
            entity.Property(e => e.NTarget).HasColumnName("nTarget");
            entity.Property(e => e.NType).HasColumnName("nType");
        });

        modelBuilder.Entity<TQueue2>(entity =>
        {
            entity.HasKey(e => e.KQueue).HasName("PK_Pos_tQueue");

            entity.ToTable("tQueue", "Pos");

            entity.Property(e => e.KQueue).HasColumnName("kQueue");
            entity.Property(e => e.CFehler).HasColumnName("cFehler");
            entity.Property(e => e.CJson).HasColumnName("cJson");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KShopSubShop).HasColumnName("kShopSubShop");
            entity.Property(e => e.NCount).HasColumnName("nCount");
            entity.Property(e => e.NFailedStep).HasColumnName("nFailedStep");
            entity.Property(e => e.NInBearbeitung).HasColumnName("nInBearbeitung");
        });

        modelBuilder.Entity<TQueueTran>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tQueueTrans", "FulfillmentNetwork");

            entity.Property(e => e.CData).HasColumnName("cData");
            entity.Property(e => e.CErrorMessage).HasColumnName("cErrorMessage");
            entity.Property(e => e.CFfnId)
                .HasMaxLength(255)
                .HasColumnName("cFfnId");
            entity.Property(e => e.COwner)
                .HasMaxLength(4)
                .HasColumnName("cOwner");
            entity.Property(e => e.CRequestId)
                .HasMaxLength(255)
                .HasColumnName("cRequestId");
            entity.Property(e => e.CSessionId)
                .HasMaxLength(255)
                .HasColumnName("cSessionId");
            entity.Property(e => e.DCreatedAt).HasColumnName("dCreatedAt");
            entity.Property(e => e.DModificationDate).HasColumnName("dModificationDate");
            entity.Property(e => e.DProcessedAt).HasColumnName("dProcessedAt");
            entity.Property(e => e.NEvent).HasColumnName("nEvent");
            entity.Property(e => e.NPriority).HasColumnName("nPriority");
            entity.Property(e => e.NRole).HasColumnName("nRole");
            entity.Property(e => e.NState).HasColumnName("nState");
            entity.Property(e => e.NTarget).HasColumnName("nTarget");
            entity.Property(e => e.NType).HasColumnName("nType");
        });

        modelBuilder.Entity<TRechnung>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("tRechnung");

            entity.Property(e => e.CBezahlt)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("cBezahlt");
            entity.Property(e => e.CErloeskonto)
                .HasMaxLength(10)
                .HasColumnName("cErloeskonto");
            entity.Property(e => e.CRechnungsNr)
                .HasMaxLength(50)
                .HasColumnName("cRechnungsNr");
            entity.Property(e => e.CStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("cStatus");
            entity.Property(e => e.DDruckdatum)
                .HasColumnType("datetime")
                .HasColumnName("dDruckdatum");
            entity.Property(e => e.DEmailversandt)
                .HasColumnType("datetime")
                .HasColumnName("dEmailversandt");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.NInkassoStatus).HasColumnName("nInkassoStatus");
            entity.Property(e => e.NMahnstop).HasColumnName("nMahnstop");
            entity.Property(e => e.NZahlungsziel).HasColumnName("nZahlungsziel");
            entity.Property(e => e.TBenutzerKBenutzer).HasColumnName("tBenutzer_kBenutzer");
            entity.Property(e => e.TBestellungKBestellung).HasColumnName("tBestellung_kBestellung");
            entity.Property(e => e.TKundeKKunde).HasColumnName("tKunde_kKunde");
        });

        modelBuilder.Entity<TRechnung1>(entity =>
        {
            entity.HasKey(e => e.KRechnung).HasName("PK_Rechnung_tRechnung");

            entity.ToTable("tRechnung", "Rechnung", tb =>
                {
                    tb.HasTrigger("tgr_Rechnung_tRechnung_DELETE");
                    tb.HasTrigger("tgr_Rechnung_tRechnung_INSUP");
                });

            entity.HasIndex(e => e.DErstellt, "IX_Rechnung_tRechnung_dErstellt");

            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CEbayUsername)
                .HasMaxLength(255)
                .HasColumnName("cEbayUsername");
            entity.Property(e => e.CExterneAuftragsnummer)
                .HasMaxLength(50)
                .HasColumnName("cExterneAuftragsnummer");
            entity.Property(e => e.CFirma)
                .HasMaxLength(255)
                .HasColumnName("cFirma");
            entity.Property(e => e.CKundeUstId)
                .HasMaxLength(20)
                .HasColumnName("cKundeUstId");
            entity.Property(e => e.CKundengruppe)
                .HasMaxLength(255)
                .HasColumnName("cKundengruppe");
            entity.Property(e => e.CKundennr)
                .HasMaxLength(30)
                .HasColumnName("cKundennr");
            entity.Property(e => e.CRechnungsnr)
                .HasMaxLength(50)
                .HasColumnName("cRechnungsnr");
            entity.Property(e => e.CUstId)
                .HasMaxLength(25)
                .HasColumnName("cUstId");
            entity.Property(e => e.CVersandart)
                .HasMaxLength(255)
                .HasColumnName("cVersandart");
            entity.Property(e => e.CVersandlandBundeslandkuerzel)
                .HasMaxLength(5)
                .HasColumnName("cVersandlandBundeslandkuerzel");
            entity.Property(e => e.CVersandlandIso)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cVersandlandISO");
            entity.Property(e => e.CVersandlandWaehrung)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cVersandlandWaehrung");
            entity.Property(e => e.CWaehrung)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWaehrung");
            entity.Property(e => e.CZahlungsart)
                .HasMaxLength(255)
                .HasColumnName("cZahlungsart");
            entity.Property(e => e.DErstellt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DErstelltWawi)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dErstelltWawi");
            entity.Property(e => e.DLeistungsdatum)
                .HasColumnType("datetime")
                .HasColumnName("dLeistungsdatum");
            entity.Property(e => e.DValutadatum)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dValutadatum");
            entity.Property(e => e.FSkonto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fSkonto");
            entity.Property(e => e.FVersandlandWaehrungsfaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVersandlandWaehrungsfaktor");
            entity.Property(e => e.FWaehrungsfaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWaehrungsfaktor");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KFarbe).HasColumnName("kFarbe");
            entity.Property(e => e.KFirmaHistory).HasColumnName("kFirmaHistory");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KKundengruppe).HasColumnName("kKundengruppe");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.KVersandArt).HasColumnName("kVersandArt");
            entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");
            entity.Property(e => e.NArchiv).HasColumnName("nArchiv");
            entity.Property(e => e.NDebitorennr).HasColumnName("nDebitorennr");
            entity.Property(e => e.NExistierendeRechnungDrucken).HasColumnName("nExistierendeRechnungDrucken");
            entity.Property(e => e.NIstEntwurf).HasColumnName("nIstEntwurf");
            entity.Property(e => e.NIstExterneRechnung).HasColumnName("nIstExterneRechnung");
            entity.Property(e => e.NIstProforma).HasColumnName("nIstProforma");
            entity.Property(e => e.NMahnstop).HasColumnName("nMahnstop");
            entity.Property(e => e.NRechnungStatus).HasColumnName("nRechnungStatus");
            entity.Property(e => e.NSkontoInTage).HasColumnName("nSkontoInTage");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
            entity.Property(e => e.NSteuereinstellung).HasColumnName("nSteuereinstellung");
            entity.Property(e => e.NStorno).HasColumnName("nStorno");
            entity.Property(e => e.NZahlungszielTage).HasColumnName("nZahlungszielTage");

            entity.HasOne(d => d.KPlattformNavigation).WithMany(p => p.TRechnung1s)
                .HasForeignKey(d => d.KPlattform)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Rechnung_tRechnung_kPlattform");

            entity.HasOne(d => d.KVersandArtNavigation).WithMany(p => p.TRechnung1s)
                .HasForeignKey(d => d.KVersandArt)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Rechnung_tRechnung_kVersandArt");
        });

        modelBuilder.Entity<TRechnungAdresse1>(entity =>
        {
            entity.HasKey(e => new { e.KRechnung, e.NTyp }).HasName("PK_Rechnung_tRechnungAdresse");

            entity.ToTable("tRechnungAdresse", "Rechnung");

            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAdresszusatz)
                .HasMaxLength(255)
                .HasColumnName("cAdresszusatz");
            entity.Property(e => e.CAnrede)
                .HasMaxLength(30)
                .HasColumnName("cAnrede");
            entity.Property(e => e.CBundesland)
                .HasMaxLength(255)
                .HasColumnName("cBundesland");
            entity.Property(e => e.CFax)
                .HasMaxLength(30)
                .HasColumnName("cFax");
            entity.Property(e => e.CFirma)
                .HasMaxLength(128)
                .HasColumnName("cFirma");
            entity.Property(e => e.CIso)
                .HasMaxLength(5)
                .HasColumnName("cISO");
            entity.Property(e => e.CLand)
                .HasMaxLength(255)
                .HasColumnName("cLand");
            entity.Property(e => e.CMail)
                .HasMaxLength(255)
                .HasColumnName("cMail");
            entity.Property(e => e.CMobil)
                .HasMaxLength(30)
                .HasColumnName("cMobil");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPlz)
                .HasMaxLength(24)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CPostId)
                .HasMaxLength(255)
                .HasColumnName("cPostID");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTel)
                .HasMaxLength(30)
                .HasColumnName("cTel");
            entity.Property(e => e.CTitel)
                .HasMaxLength(64)
                .HasColumnName("cTitel");
            entity.Property(e => e.CVorname)
                .HasMaxLength(255)
                .HasColumnName("cVorname");
            entity.Property(e => e.CZusatz)
                .HasMaxLength(60)
                .HasColumnName("cZusatz");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.NZolldokumenteErforderlich).HasColumnName("nZolldokumenteErforderlich");

            entity.HasOne(d => d.KRechnungNavigation).WithMany(p => p.TRechnungAdresse1s)
                .HasForeignKey(d => d.KRechnung)
                .HasConstraintName("FK_Rechnung_tRechnungAdresse_kRechnung");
        });

        modelBuilder.Entity<TRechnungAusgabeDateien>(entity =>
        {
            entity.HasKey(e => e.KRechnungAusgabeDateien).HasName("PK_Rechnung_tRechnungAusgabeDateien_kRechnungAusgabeDateien");

            entity.ToTable("tRechnungAusgabeDateien", "Rechnung");

            entity.Property(e => e.KRechnungAusgabeDateien).HasColumnName("kRechnungAusgabeDateien");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CFehlermeldung)
                .HasMaxLength(2000)
                .HasColumnName("cFehlermeldung");
            entity.Property(e => e.DAusgabedatum)
                .HasColumnType("datetime")
                .HasColumnName("dAusgabedatum");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.KVorlage).HasColumnName("kVorlage");
            entity.Property(e => e.NAusgabeart).HasColumnName("nAusgabeart");

            entity.HasOne(d => d.KRechnungNavigation).WithMany(p => p.TRechnungAusgabeDateiens)
                .HasForeignKey(d => d.KRechnung)
                .HasConstraintName("FK_Rechnung_tRechnungAusgabeDateien_kRechnung");
        });

        modelBuilder.Entity<TRechnungBackup>(entity =>
        {
            entity.HasKey(e => e.KRechnung).HasName("PK_dbo_tRechnungBackup");

            entity.ToTable("tRechnungBackup");

            entity.Property(e => e.KRechnung)
                .ValueGeneratedNever()
                .HasColumnName("kRechnung");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBezahlt)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cBezahlt");
            entity.Property(e => e.CErloeskonto)
                .HasMaxLength(64)
                .HasColumnName("cErloeskonto");
            entity.Property(e => e.CRechnungsNr)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsNr");
            entity.Property(e => e.CStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cStatus");
            entity.Property(e => e.DDruckdatum)
                .HasColumnType("datetime")
                .HasColumnName("dDruckdatum");
            entity.Property(e => e.DEmailversandt)
                .HasColumnType("datetime")
                .HasColumnName("dEmailversandt");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.NInkassoStatus).HasColumnName("nInkassoStatus");
            entity.Property(e => e.NMahnstopp).HasColumnName("nMahnstopp");
            entity.Property(e => e.NZahlungsziel).HasColumnName("nZahlungsziel");
            entity.Property(e => e.TBenutzerKBenutzer).HasColumnName("tBenutzer_kBenutzer");
            entity.Property(e => e.TBestellungKBestellung).HasColumnName("tBestellung_kBestellung");
            entity.Property(e => e.TKundeKKunde).HasColumnName("tKunde_kKunde");
        });

        modelBuilder.Entity<TRechnungEckdaten>(entity =>
        {
            entity.HasKey(e => e.KRechnung).HasName("PK_Rechnung_tRechnungEckdaten");

            entity.ToTable("tRechnungEckdaten", "Rechnung");

            entity.Property(e => e.KRechnung)
                .ValueGeneratedNever()
                .HasColumnName("kRechnung");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAuftragsnummern)
                .HasMaxLength(200)
                .HasColumnName("cAuftragsnummern");
            entity.Property(e => e.DBezahlt)
                .HasColumnType("datetime")
                .HasColumnName("dBezahlt");
            entity.Property(e => e.DDruckdatum)
                .HasColumnType("datetime")
                .HasColumnName("dDruckdatum");
            entity.Property(e => e.DMahndatum)
                .HasColumnType("datetime")
                .HasColumnName("dMahndatum");
            entity.Property(e => e.DMaildatum)
                .HasColumnType("datetime")
                .HasColumnName("dMaildatum");
            entity.Property(e => e.DZahlungsMail)
                .HasColumnType("datetime")
                .HasColumnName("dZahlungsMail");
            entity.Property(e => e.DZahlungsziel)
                .HasColumnType("datetime")
                .HasColumnName("dZahlungsziel");
            entity.Property(e => e.FGutschrift)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGutschrift");
            entity.Property(e => e.FMahngebuehr)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMahngebuehr");
            entity.Property(e => e.FOffeneMahngebuehr)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fOffeneMahngebuehr");
            entity.Property(e => e.FOffenerWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fOffenerWert");
            entity.Property(e => e.FVkBruttoGesamt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVkBruttoGesamt");
            entity.Property(e => e.FVkNettoGesamt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVkNettoGesamt");
            entity.Property(e => e.FZahlung)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZahlung");
            entity.Property(e => e.NHasRechnungskorrektur).HasColumnName("nHasRechnungskorrektur");
            entity.Property(e => e.NIstAngemahnt).HasColumnName("nIstAngemahnt");
            entity.Property(e => e.NKorrigiert).HasColumnName("nKorrigiert");
            entity.Property(e => e.NMahnstufe).HasColumnName("nMahnstufe");
            entity.Property(e => e.NRechnungTyp).HasColumnName("nRechnungTyp");
            entity.Property(e => e.NZahlungStatus).HasColumnName("nZahlungStatus");

            entity.HasOne(d => d.KRechnungNavigation).WithOne(p => p.TRechnungEckdaten)
                .HasForeignKey<TRechnungEckdaten>(d => d.KRechnung)
                .HasConstraintName("FK_Rechnung_tRechnungEckdaten_kRechnung");
        });

        modelBuilder.Entity<TRechnungFile>(entity =>
        {
            entity.HasKey(e => e.KRechnungFile).HasName("PK_Rechnung_tRechnungFile");

            entity.ToTable("tRechnungFile", "Rechnung");

            entity.Property(e => e.KRechnungFile).HasColumnName("kRechnungFile");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CFilename)
                .HasMaxLength(255)
                .HasColumnName("cFilename");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KFile).HasColumnName("kFile");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.NDokumentTyp).HasColumnName("nDokumentTyp");

            entity.HasOne(d => d.KFileNavigation).WithMany(p => p.TRechnungFiles)
                .HasForeignKey(d => d.KFile)
                .HasConstraintName("FK_Rechnung_tRechnungFile_kFile");

            entity.HasOne(d => d.KRechnungNavigation).WithMany(p => p.TRechnungFiles)
                .HasForeignKey(d => d.KRechnung)
                .HasConstraintName("FK_Rechnung_tRechnungFile_kRechnung");
        });

        modelBuilder.Entity<TRechnungKorrektur>(entity =>
        {
            entity.HasKey(e => new { e.KRechnung, e.KRechnungskorrektur }).HasName("PK_Rechnung_tRechnungKorrektur");

            entity.ToTable("tRechnungKorrektur", "Rechnung");

            entity.HasIndex(e => new { e.KRechnungNeu, e.KRechnung }, "IX_Rechnung_tRechnungKorrektur_kRechnungNeu_kRechnung").IsDescending(true, false);

            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.KRechnungskorrektur).HasColumnName("kRechnungskorrektur");
            entity.Property(e => e.KRechnungNeu).HasColumnName("kRechnungNeu");

            entity.HasOne(d => d.KRechnungNavigation).WithMany(p => p.TRechnungKorrekturKRechnungNavigations)
                .HasForeignKey(d => d.KRechnung)
                .HasConstraintName("FK_Rechnung_tRechnung_kRechnung");

            entity.HasOne(d => d.KRechnungNeuNavigation).WithMany(p => p.TRechnungKorrekturKRechnungNeuNavigations)
                .HasForeignKey(d => d.KRechnungNeu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Rechnung_tRechnung_kRechnungNeu");

            entity.HasOne(d => d.KRechnungskorrekturNavigation).WithMany(p => p.TRechnungKorrekturs)
                .HasForeignKey(d => d.KRechnungskorrektur)
                .HasConstraintName("FK_tGutschrift_kRechnungskorrektur");
        });

        modelBuilder.Entity<TRechnungLabel>(entity =>
        {
            entity.HasKey(e => new { e.KRechnung, e.KLabel }).HasName("PK_dbo_tRechnungLabel");

            entity.ToTable("tRechnungLabel");

            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.KLabel).HasColumnName("kLabel");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");

            entity.HasOne(d => d.KRechnungNavigation).WithMany(p => p.TRechnungLabels)
                .HasForeignKey(d => d.KRechnung)
                .HasConstraintName("FK_dbo_tRechnungLabel_kRechnung");
        });

        modelBuilder.Entity<TRechnungLieferscheinPosition>(entity =>
        {
            entity.HasKey(e => new { e.KRechnungPosition, e.KLieferscheinPosition }).HasName("PK_Rechnung_tRechnungLieferscheinPosition");

            entity.ToTable("tRechnungLieferscheinPosition", "Rechnung", tb => tb.HasTrigger("tgr_Rechnung_tRechnungLieferscheinPosition_INSUPDEL"));

            entity.HasIndex(e => e.KLieferscheinPosition, "IX_Rechnung_tRechnungLieferscheinPosition_kLieferscheinPosition_INCL");

            entity.Property(e => e.KRechnungPosition).HasColumnName("kRechnungPosition");
            entity.Property(e => e.KLieferscheinPosition).HasColumnName("kLieferscheinPosition");
            entity.Property(e => e.FAnzahlAufRechnung)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahlAufRechnung");

            entity.HasOne(d => d.KLieferscheinPositionNavigation).WithMany(p => p.TRechnungLieferscheinPositions)
                .HasForeignKey(d => d.KLieferscheinPosition)
                .HasConstraintName("FK_Rechnung_tRechnungLieferscheinPosition_kLieferscheinPosition");

            entity.HasOne(d => d.KRechnungPositionNavigation).WithMany(p => p.TRechnungLieferscheinPositions)
                .HasForeignKey(d => d.KRechnungPosition)
                .HasConstraintName("FK_Rechnung_tRechnungLieferscheinPosition_kRechnungPosition");
        });

        modelBuilder.Entity<TRechnungLog>(entity =>
        {
            entity.HasKey(e => e.KRechnungLog)
                .HasName("PK_Logging_tRechnungLog")
                .IsClustered(false);

            entity.ToTable("tRechnungLog", "Logging", tb =>
                {
                    tb.HasTrigger("tgr_Logging_tRechnungLog_INS");
                    tb.HasTrigger("tgr_Logging_tRechnungLog_UPDEL");
                });

            entity.HasIndex(e => e.KRechnung, "IX_Logging_tRechnungLog_kRechnung");

            entity.HasIndex(e => new { e.DErstelltUtc, e.KRechnungLog }, "UCX_Logging_tRechnungLog_dErstelltUtc_kAuftragLog").IsUnique();

            entity.Property(e => e.KRechnungLog).HasColumnName("kRechnungLog");
            entity.Property(e => e.BLastRowVersion)
                .HasMaxLength(8)
                .IsFixedLength()
                .HasColumnName("bLastRowVersion");
            entity.Property(e => e.BRowVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowVersion");
            entity.Property(e => e.BXml).HasColumnName("bXML");
            entity.Property(e => e.CAppName)
                .HasMaxLength(128)
                .HasColumnName("cAppName");
            entity.Property(e => e.CRechnungsNr)
                .HasMaxLength(50)
                .HasColumnName("cRechnungsNr");
            entity.Property(e => e.DErstelltUtc).HasColumnName("dErstelltUtc");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.NLogTyp).HasColumnName("nLogTyp");
        });

        modelBuilder.Entity<TRechnungPosition>(entity =>
        {
            entity.HasKey(e => e.KRechnungPosition).HasName("PK_Rechnung_tRechnungPosition");

            entity.ToTable("tRechnungPosition", "Rechnung", tb => tb.HasTrigger("tgr_Rechnung_tRechnungPosition_INSUPDEL"));

            entity.HasIndex(e => e.KAuftragPosition, "IX_Rechnung_tRechnungPosition_kAuftragPosition");

            entity.HasIndex(e => new { e.KAuftrag, e.KAuftragPosition }, "IX_Rechnung_tRechnungPosition_kAuftrag_kAuftragPosition");

            entity.HasIndex(e => new { e.KRechnung, e.KRechnungPosition }, "IX_Rechnung_tRechnungPosition_kRechnung_kRechnungPosition");

            entity.Property(e => e.KRechnungPosition).HasColumnName("kRechnungPosition");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CEinheit)
                .HasMaxLength(255)
                .HasColumnName("cEinheit");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.FEkNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEkNetto");
            entity.Property(e => e.FGewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGewicht");
            entity.Property(e => e.FMwSt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwSt");
            entity.Property(e => e.FRabatt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabatt");
            entity.Property(e => e.FVersandgewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVersandgewicht");
            entity.Property(e => e.FVkNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVkNetto");
            entity.Property(e => e.FWertBruttoGesamtFixiert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertBruttoGesamtFixiert");
            entity.Property(e => e.FWertNettoGesamtFixiert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertNettoGesamtFixiert");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KAuftragPosition).HasColumnName("kAuftragPosition");
            entity.Property(e => e.KKonfigVaterRechnungPos).HasColumnName("kKonfigVaterRechnungPos");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");
            entity.Property(e => e.KSteuerschluessel).HasColumnName("kSteuerschluessel");
            entity.Property(e => e.KStuecklisteRechnungPos).HasColumnName("kStuecklisteRechnungPos");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NType).HasColumnName("nType");

            entity.HasOne(d => d.KAuftragPositionNavigation).WithMany(p => p.TRechnungPositions)
                .HasForeignKey(d => d.KAuftragPosition)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Rechnung_tRechnungPosition_kAuftragPosition");

            entity.HasOne(d => d.KRechnungNavigation).WithMany(p => p.TRechnungPositions)
                .HasForeignKey(d => d.KRechnung)
                .HasConstraintName("FK_Rechnung_tRechnungPosition_kRechnung");

            entity.HasOne(d => d.KSteuerklasseNavigation).WithMany(p => p.TRechnungPositions)
                .HasForeignKey(d => d.KSteuerklasse)
                .HasConstraintName("FK_Rechnung_tRechnungPosition_kSteuerklasse");

            entity.HasOne(d => d.KSteuerschluesselNavigation).WithMany(p => p.TRechnungPositions)
                .HasForeignKey(d => d.KSteuerschluessel)
                .HasConstraintName("FK_Rechnung_tRechnungPosition_kSteuerschluessel");
        });

        modelBuilder.Entity<TRechnungPositionEckdaten>(entity =>
        {
            entity.HasKey(e => e.KRechnungPosition).HasName("PK_Rechnung_tRechnungPositionEckdaten");

            entity.ToTable("tRechnungPositionEckdaten", "Rechnung");

            entity.Property(e => e.KRechnungPosition)
                .ValueGeneratedNever()
                .HasColumnName("kRechnungPosition");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.FGewichtGesamt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGewichtGesamt");
            entity.Property(e => e.FMwStBetrag)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwStBetrag");
            entity.Property(e => e.FRabattbetrag)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabattbetrag");
            entity.Property(e => e.FVersandgewichtGesamt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVersandgewichtGesamt");
            entity.Property(e => e.FVkbrutto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVKBrutto");
            entity.Property(e => e.FVkbruttoGesamt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVKBruttoGesamt");
            entity.Property(e => e.FVknettoGesamt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVKNettoGesamt");

            entity.HasOne(d => d.KRechnungPositionNavigation).WithOne(p => p.TRechnungPositionEckdaten)
                .HasForeignKey<TRechnungPositionEckdaten>(d => d.KRechnungPosition)
                .HasConstraintName("FK_Rechnung_tRechnungPositionEckdaten_kRechnungPosition");
        });

        modelBuilder.Entity<TRechnungPositionEigenschaft>(entity =>
        {
            entity.HasKey(e => e.KRechnungPositionEigenschaft).HasName("PK_Rechnung_tRechnungPositionEigenschaft");

            entity.ToTable("tRechnungPositionEigenschaft", "Rechnung");

            entity.Property(e => e.KRechnungPositionEigenschaft).HasColumnName("kRechnungPositionEigenschaft");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CWert)
                .HasMaxLength(255)
                .HasColumnName("cWert");
            entity.Property(e => e.FAufpreisNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAufpreisNetto");
            entity.Property(e => e.FZusatzgewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZusatzgewicht");
            entity.Property(e => e.KEigenschaft).HasColumnName("kEigenschaft");
            entity.Property(e => e.KEigenschaftWert).HasColumnName("kEigenschaftWert");
            entity.Property(e => e.KRechnungPosition).HasColumnName("kRechnungPosition");
        });

        modelBuilder.Entity<TRechnungPositionFile>(entity =>
        {
            entity.HasKey(e => e.KRechnungPositionFile).HasName("PK_Rechnung_tRechnungPositionFile");

            entity.ToTable("tRechnungPositionFile", "Rechnung");

            entity.Property(e => e.KRechnungPositionFile).HasColumnName("kRechnungPositionFile");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CFilename)
                .HasMaxLength(255)
                .HasColumnName("cFilename");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KFile).HasColumnName("kFile");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.KRechnungPosition).HasColumnName("kRechnungPosition");

            entity.HasOne(d => d.KFileNavigation).WithMany(p => p.TRechnungPositionFiles)
                .HasForeignKey(d => d.KFile)
                .HasConstraintName("FK_Rechnung_tRechnungPositionFile_kFile");

            entity.HasOne(d => d.KRechnungNavigation).WithMany(p => p.TRechnungPositionFiles)
                .HasForeignKey(d => d.KRechnung)
                .HasConstraintName("FK_Rechnung_tRechnungPositionFile_kRechnung");

            entity.HasOne(d => d.KRechnungPositionNavigation).WithMany(p => p.TRechnungPositionFiles)
                .HasForeignKey(d => d.KRechnungPosition)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Rechnung_tRechnungPositionFile_kRechnungPosition");
        });

        modelBuilder.Entity<TRechnungPositionTeilmengen>(entity =>
        {
            entity.HasKey(e => e.KRechnungPosition).HasName("PK_Rechnung_tRechnungPositionTeilmengen");

            entity.ToTable("tRechnungPositionTeilmengen", "Rechnung");

            entity.Property(e => e.KRechnungPosition)
                .ValueGeneratedNever()
                .HasColumnName("kRechnungPosition");
            entity.Property(e => e.FLagerFactor)
                .HasDefaultValueSql("((1.0))")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLagerFactor");
            entity.Property(e => e.FPreisFactor)
                .HasDefaultValueSql("((1.0))")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPreisFactor");
            entity.Property(e => e.KDefinition).HasColumnName("kDefinition");

            entity.HasOne(d => d.KRechnungPositionNavigation).WithOne(p => p.TRechnungPositionTeilmengen)
                .HasForeignKey<TRechnungPositionTeilmengen>(d => d.KRechnungPosition)
                .HasConstraintName("FK_Rechnung_tRechnungPositionTeilmengen_kRechnungPosition");
        });

        modelBuilder.Entity<TRechnungPositionTeilmengenKonfiguration>(entity =>
        {
            entity.HasKey(e => new { e.KRechnungPosition, e.KDimension }).HasName("PK_Rechnung_tRechnungPositionTeilmengenKonfiguration");

            entity.ToTable("tRechnungPositionTeilmengenKonfiguration", "Rechnung");

            entity.Property(e => e.KRechnungPosition).HasColumnName("kRechnungPosition");
            entity.Property(e => e.KDimension).HasColumnName("kDimension");
            entity.Property(e => e.FGroundValue)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGroundValue");
            entity.Property(e => e.FValue)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fValue");
            entity.Property(e => e.KMassEinheit).HasColumnName("kMassEinheit");

            entity.HasOne(d => d.KDimensionNavigation).WithMany(p => p.TRechnungPositionTeilmengenKonfigurations)
                .HasForeignKey(d => d.KDimension)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Rechnung_tRechnungPositionTeilmengenKonfiguration_kDimension");

            entity.HasOne(d => d.KMassEinheitNavigation).WithMany(p => p.TRechnungPositionTeilmengenKonfigurations)
                .HasForeignKey(d => d.KMassEinheit)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Rechnung_tRechnungPositionTeilmengenKonfiguration_kMassEinheit");

            entity.HasOne(d => d.KRechnungPositionNavigation).WithMany(p => p.TRechnungPositionTeilmengenKonfigurations)
                .HasForeignKey(d => d.KRechnungPosition)
                .HasConstraintName("FK_Rechnung_tRechnungPositionTeilmengenKonfiguration_kRechnungPosition");
        });

        modelBuilder.Entity<TRechnungPositionText>(entity =>
        {
            entity.HasKey(e => e.KRechnungPosition).HasName("PK_Rechnung_tRechnungPositionText");

            entity.ToTable("tRechnungPositionText", "Rechnung");

            entity.Property(e => e.KRechnungPosition)
                .ValueGeneratedNever()
                .HasColumnName("kRechnungPosition");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CHinweis).HasColumnName("cHinweis");

            entity.HasOne(d => d.KRechnungPositionNavigation).WithOne(p => p.TRechnungPositionText)
                .HasForeignKey<TRechnungPositionText>(d => d.KRechnungPosition)
                .HasConstraintName("FK_Rechnung_tRechnungPositionText_kRechnungPosition");
        });

        modelBuilder.Entity<TRechnungStorno>(entity =>
        {
            entity.HasKey(e => e.KRechnung).HasName("PK_Rechnung_tRechnungStorno");

            entity.ToTable("tRechnungStorno", "Rechnung", tb => tb.HasTrigger("tgr_Rechnung_tRechnungStorno_INSUPDEL"));

            entity.Property(e => e.KRechnung)
                .ValueGeneratedNever()
                .HasColumnName("kRechnung");
            entity.Property(e => e.CKommentar)
                .HasMaxLength(100)
                .HasColumnName("cKommentar");
            entity.Property(e => e.DStorniert)
                .HasColumnType("datetime")
                .HasColumnName("dStorniert");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KRechnungStornogrund).HasColumnName("kRechnungStornogrund");
            entity.Property(e => e.KStornoGutschrift).HasColumnName("kStornoGutschrift");

            entity.HasOne(d => d.KStornoGutschriftNavigation).WithMany(p => p.TRechnungStornos)
                .HasForeignKey(d => d.KStornoGutschrift)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Rechnung_tRechnungStorno_kStornoGutschrift");
        });

        modelBuilder.Entity<TRechnungStornogrund>(entity =>
        {
            entity.HasKey(e => e.KRechnungStornogrund).HasName("PK_Rechnung_tRechnungStornogrund");

            entity.ToTable("tRechnungStornogrund", "Rechnung");

            entity.Property(e => e.KRechnungStornogrund).HasColumnName("kRechnungStornogrund");
            entity.Property(e => e.CStornogrund)
                .HasMaxLength(50)
                .HasColumnName("cStornogrund");
        });

        modelBuilder.Entity<TRechnungText>(entity =>
        {
            entity.HasKey(e => e.KRechnung).HasName("PK_Rechnung_tRechnungText");

            entity.ToTable("tRechnungText", "Rechnung");

            entity.Property(e => e.KRechnung)
                .ValueGeneratedNever()
                .HasColumnName("kRechnung");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAnmerkung).HasColumnName("cAnmerkung");
            entity.Property(e => e.CHinweis).HasColumnName("cHinweis");
            entity.Property(e => e.CRechnungstext).HasColumnName("cRechnungstext");

            entity.HasOne(d => d.KRechnungNavigation).WithOne(p => p.TRechnungText)
                .HasForeignKey<TRechnungText>(d => d.KRechnung)
                .HasConstraintName("FK_Rechnung_tRechnungText_kRechnung");
        });

        modelBuilder.Entity<TRechnungZahlungsinfo>(entity =>
        {
            entity.HasKey(e => e.KRechnung).HasName("PK_Rechnung_tRechnungZahlungsinfo");

            entity.ToTable("tRechnungZahlungsinfo", "Rechnung");

            entity.Property(e => e.KRechnung)
                .ValueGeneratedNever()
                .HasColumnName("kRechnung");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBankname)
                .HasMaxLength(255)
                .HasColumnName("cBankname");
            entity.Property(e => e.CBic)
                .HasMaxLength(32)
                .HasColumnName("cBIC");
            entity.Property(e => e.CEndToEndId)
                .HasMaxLength(35)
                .HasColumnName("cEndToEndID");
            entity.Property(e => e.CGlaeubigerId)
                .HasMaxLength(35)
                .HasColumnName("cGlaeubigerID");
            entity.Property(e => e.CIban)
                .HasMaxLength(34)
                .HasColumnName("cIBAN");
            entity.Property(e => e.CKontoInhaber)
                .HasMaxLength(255)
                .HasColumnName("cKontoInhaber");
            entity.Property(e => e.CMandatsReferenz)
                .HasMaxLength(100)
                .HasColumnName("cMandatsReferenz");
            entity.Property(e => e.CPuiZahlungsinfo).HasColumnName("cPuiZahlungsinfo");
            entity.Property(e => e.CReferenzEmail)
                .HasMaxLength(255)
                .HasColumnName("cReferenzEmail");
            entity.Property(e => e.CVerwendungszweck)
                .HasMaxLength(1000)
                .HasColumnName("cVerwendungszweck");
            entity.Property(e => e.DFaelligkeitsdatum)
                .HasColumnType("datetime")
                .HasColumnName("dFaelligkeitsdatum");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");

            entity.HasOne(d => d.KRechnungNavigation).WithOne(p => p.TRechnungZahlungsinfo)
                .HasForeignKey<TRechnungZahlungsinfo>(d => d.KRechnung)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Rechnung_tRechnungZahlungsinfo_kRechnung");
        });

        modelBuilder.Entity<TRechnungadresse>(entity =>
        {
            entity.HasKey(e => new { e.KInetBestellung, e.KShop }).HasName("PK_DbeS_tRechnungadresse");

            entity.ToTable("tRechnungadresse", "DbeS");

            entity.Property(e => e.KInetBestellung).HasColumnName("kInetBestellung");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAdressZusatz)
                .HasMaxLength(255)
                .HasColumnName("cAdressZusatz");
            entity.Property(e => e.CAnrede)
                .HasMaxLength(30)
                .HasColumnName("cAnrede");
            entity.Property(e => e.CBundesland)
                .HasMaxLength(255)
                .HasColumnName("cBundesland");
            entity.Property(e => e.CFax)
                .HasMaxLength(45)
                .HasColumnName("cFax");
            entity.Property(e => e.CFirma)
                .HasMaxLength(128)
                .HasColumnName("cFirma");
            entity.Property(e => e.CLand)
                .HasMaxLength(255)
                .HasColumnName("cLand");
            entity.Property(e => e.CLandIso)
                .HasMaxLength(5)
                .HasColumnName("cLandISO");
            entity.Property(e => e.CMail)
                .HasMaxLength(255)
                .HasColumnName("cMail");
            entity.Property(e => e.CMobil)
                .HasMaxLength(30)
                .HasColumnName("cMobil");
            entity.Property(e => e.CNachname)
                .HasMaxLength(255)
                .HasColumnName("cNachname");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPlz)
                .HasMaxLength(20)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTel)
                .HasMaxLength(45)
                .HasColumnName("cTel");
            entity.Property(e => e.CTitel)
                .HasMaxLength(64)
                .HasColumnName("cTitel");
            entity.Property(e => e.CUstid)
                .HasMaxLength(20)
                .HasColumnName("cUSTID");
            entity.Property(e => e.CVorname)
                .HasMaxLength(255)
                .HasColumnName("cVorname");
            entity.Property(e => e.CWww)
                .HasMaxLength(255)
                .HasColumnName("cWWW");
            entity.Property(e => e.CZusatz)
                .HasMaxLength(60)
                .HasColumnName("cZusatz");
            entity.Property(e => e.KInetKunde).HasColumnName("kInetKunde");
            entity.Property(e => e.KRechnungadresse).HasColumnName("kRechnungadresse");
        });

        modelBuilder.Entity<TRecht>(entity =>
        {
            entity.HasKey(e => e.KRecht).HasName("PK_dbo_tRecht");

            entity.ToTable("tRecht");

            entity.Property(e => e.KRecht)
                .ValueGeneratedNever()
                .HasColumnName("kRecht");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAnzeigeName)
                .HasMaxLength(50)
                .HasColumnName("cAnzeigeName");
            entity.Property(e => e.CBeschreibung).HasColumnName("cBeschreibung");
            entity.Property(e => e.CResourceKey)
                .HasMaxLength(80)
                .HasColumnName("cResourceKey");
            entity.Property(e => e.KRechtVater).HasColumnName("kRechtVater");
            entity.Property(e => e.NIstLabel).HasColumnName("nIstLabel");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<TRechtBenutzerGruppe>(entity =>
        {
            entity.HasKey(e => e.KRechtBenutzerGruppe).HasName("PK_dbo_tRechtBenutzerGruppe");

            entity.ToTable("tRechtBenutzerGruppe", tb => tb.HasTrigger("jtlActionValidator_tRechtBenutzerGruppe"));

            entity.Property(e => e.KRechtBenutzerGruppe).HasColumnName("kRechtBenutzerGruppe");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBeschreibung)
                .HasMaxLength(255)
                .HasColumnName("cBeschreibung");
            entity.Property(e => e.CName)
                .HasMaxLength(30)
                .HasColumnName("cName");
            entity.Property(e => e.NIsAdmin).HasColumnName("nIsAdmin");
        });

        modelBuilder.Entity<TRechtBenutzerGruppenZuordnung>(entity =>
        {
            entity.HasKey(e => new { e.KRechtBenutzerGruppe, e.KBenutzer }).HasName("PK_dbo_tRechtBenutzerGruppenZuordnung");

            entity.ToTable("tRechtBenutzerGruppenZuordnung");

            entity.Property(e => e.KRechtBenutzerGruppe).HasColumnName("kRechtBenutzerGruppe");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
        });

        modelBuilder.Entity<TRechte>(entity =>
        {
            entity.HasKey(e => e.KRechte).HasName("PK_dbo_tRechte");

            entity.ToTable("tRechte");

            entity.Property(e => e.KRechte).HasColumnName("kRechte");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KRecht).HasColumnName("kRecht");
            entity.Property(e => e.KRechtBenutzerGruppe).HasColumnName("kRechtBenutzerGruppe");
            entity.Property(e => e.NAktiv).HasColumnName("nAktiv");
        });

        modelBuilder.Entity<TRefreshToken>(entity =>
        {
            entity.HasKey(e => e.KRefreshToken);

            entity.ToTable("tRefreshToken", "SCX");

            entity.Property(e => e.KRefreshToken).HasColumnName("kRefreshToken");
            entity.Property(e => e.CRefreshToken)
                .HasMaxLength(255)
                .HasColumnName("cRefreshToken");
            entity.Property(e => e.NType).HasColumnName("nType");
        });

        modelBuilder.Entity<TReplenishmentDestination>(entity =>
        {
            entity.HasKey(e => e.KAuftragPos).HasName("PK_WMS_tReplenishmentDestination");

            entity.ToTable("tReplenishmentDestination", "WMS");

            entity.Property(e => e.KAuftragPos)
                .ValueGeneratedNever()
                .HasColumnName("kAuftragPos");
            entity.Property(e => e.KResource).HasColumnName("kResource");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.KWarenlagerBereich).HasColumnName("kWarenlagerBereich");
            entity.Property(e => e.KWarenlagerPlatz).HasColumnName("kWarenlagerPlatz");
        });

        modelBuilder.Entity<TReport>(entity =>
        {
            entity.HasKey(e => e.KReports).HasName("PK_dbo_tReports");

            entity.ToTable("tReports");

            entity.Property(e => e.KReports)
                .ValueGeneratedNever()
                .HasColumnName("kReports");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CData).HasColumnName("cData");
            entity.Property(e => e.CDataSet)
                .HasMaxLength(3000)
                .HasColumnName("cDataSet");
            entity.Property(e => e.CName)
                .HasMaxLength(128)
                .HasColumnName("cName");
            entity.Property(e => e.CTyp)
                .HasMaxLength(128)
                .HasColumnName("cTyp");
        });

        modelBuilder.Entity<TReport1>(entity =>
        {
            entity.HasKey(e => e.KReport).HasName("PK_SCX_tReport");

            entity.ToTable("tReport", "SCX");

            entity.Property(e => e.KReport).HasColumnName("kReport");
            entity.Property(e => e.BDaten).HasColumnName("bDaten");
            entity.Property(e => e.CReportId)
                .HasMaxLength(255)
                .HasColumnName("cReportId");
            entity.Property(e => e.CReportType)
                .HasMaxLength(255)
                .HasColumnName("cReportType");
            entity.Property(e => e.CResource).HasColumnName("cResource");
            entity.Property(e => e.DCreated)
                .HasColumnType("datetime")
                .HasColumnName("dCreated");
            entity.Property(e => e.DEndDate)
                .HasColumnType("datetime")
                .HasColumnName("dEndDate");
            entity.Property(e => e.DRequested)
                .HasColumnType("datetime")
                .HasColumnName("dRequested");
            entity.Property(e => e.DStartDate)
                .HasColumnType("datetime")
                .HasColumnName("dStartDate");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<TReportsDataSet>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tReportsDataSet");

            entity.HasIndex(e => e.KReports, "IX_tReportsDataSet_kReports");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CDataSet)
                .HasMaxLength(3000)
                .HasColumnName("cDataSet");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KReports).HasColumnName("kReports");
        });

        modelBuilder.Entity<TRepricerProcess>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tRepricerProcess");

            entity.HasIndex(e => e.CMandant, "IX_tRepricerProcess_cMandant");

            entity.HasIndex(e => e.NId, "IX_tRepricerProcess_nId");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CMandant)
                .HasMaxLength(255)
                .HasColumnName("cMandant");
            entity.Property(e => e.DUpdated)
                .HasColumnType("datetime")
                .HasColumnName("dUpdated");
            entity.Property(e => e.NId).HasColumnName("nId");
        });

        modelBuilder.Entity<TResource>(entity =>
        {
            entity.HasKey(e => e.KResource).HasName("PK_ResPl_tResource");

            entity.ToTable("tResource", "ResPl");

            entity.Property(e => e.KResource).HasColumnName("kResource");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CDescription).HasColumnName("cDescription");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CNumber)
                .HasMaxLength(100)
                .HasColumnName("cNumber");
            entity.Property(e => e.DCreated).HasColumnName("dCreated");
            entity.Property(e => e.DLastModified).HasColumnName("dLastModified");
            entity.Property(e => e.FCost)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fCost");
            entity.Property(e => e.KResourceType).HasColumnName("kResourceType");
            entity.Property(e => e.KTimeModel).HasColumnName("kTimeModel");
            entity.Property(e => e.NInactive).HasColumnName("nInactive");
            entity.Property(e => e.NTimeUnit).HasColumnName("nTimeUnit");

            entity.HasOne(d => d.KResourceTypeNavigation).WithMany(p => p.TResources)
                .HasForeignKey(d => d.KResourceType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ResPl_tResource_kResourceType");

            entity.HasOne(d => d.KTimeModelNavigation).WithMany(p => p.TResources)
                .HasForeignKey(d => d.KTimeModel)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_ResPl_tResource_kTimeModel");
        });

        modelBuilder.Entity<TResourceAbsenteeism>(entity =>
        {
            entity.HasKey(e => e.KResourceAbsenteeism).HasName("PK_ResPl_tResourceAbsenteeism");

            entity.ToTable("tResourceAbsenteeism", "ResPl");

            entity.Property(e => e.KResourceAbsenteeism).HasColumnName("kResourceAbsenteeism");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CDescription)
                .HasMaxLength(255)
                .HasColumnName("cDescription");
            entity.Property(e => e.DCreated).HasColumnName("dCreated");
            entity.Property(e => e.DFrom).HasColumnName("dFrom");
            entity.Property(e => e.DLastModified).HasColumnName("dLastModified");
            entity.Property(e => e.DTo).HasColumnName("dTo");
            entity.Property(e => e.KAbsenteeismType).HasColumnName("kAbsenteeismType");
            entity.Property(e => e.KResource).HasColumnName("kResource");

            entity.HasOne(d => d.KAbsenteeismTypeNavigation).WithMany(p => p.TResourceAbsenteeisms)
                .HasForeignKey(d => d.KAbsenteeismType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ResPl_tResourceAbsenteeism_kAbsenteeismType");

            entity.HasOne(d => d.KResourceNavigation).WithMany(p => p.TResourceAbsenteeisms)
                .HasForeignKey(d => d.KResource)
                .HasConstraintName("FK_ResPl_tResourceAbsenteeism_kResource");
        });

        modelBuilder.Entity<TResourceCustomField>(entity =>
        {
            entity.HasKey(e => e.KResourceCustomField).HasName("PK_ResPl_tResourceCustomField");

            entity.ToTable("tResourceCustomField", "ResPl");

            entity.HasIndex(e => new { e.KResource, e.KAttribut }, "UQ_ResPl_tResourceCustomField_kResource_kAttribut").IsUnique();

            entity.Property(e => e.KResourceCustomField).HasColumnName("kResourceCustomField");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CWertVarchar).HasColumnName("cWertVarchar");
            entity.Property(e => e.DWertDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dWertDateTime");
            entity.Property(e => e.FWertDecimal)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertDecimal");
            entity.Property(e => e.KAttribut).HasColumnName("kAttribut");
            entity.Property(e => e.KResource).HasColumnName("kResource");
            entity.Property(e => e.NWertInt).HasColumnName("nWertInt");

            entity.HasOne(d => d.KAttributNavigation).WithMany(p => p.TResourceCustomFields)
                .HasForeignKey(d => d.KAttribut)
                .HasConstraintName("FK_ResPl_tResourceCustomField_kAttribut");

            entity.HasOne(d => d.KResourceNavigation).WithMany(p => p.TResourceCustomFields)
                .HasForeignKey(d => d.KResource)
                .HasConstraintName("FK_ResPl_tResourceCustomField_kResource");
        });

        modelBuilder.Entity<TResourceGroup>(entity =>
        {
            entity.HasKey(e => e.KResourceGroup).HasName("PK_ResPl_tResourceGroup");

            entity.ToTable("tResourceGroup", "ResPl");

            entity.Property(e => e.KResourceGroup).HasColumnName("kResourceGroup");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.DCreated).HasColumnName("dCreated");
            entity.Property(e => e.DLastModified).HasColumnName("dLastModified");
            entity.Property(e => e.KResourceType).HasColumnName("kResourceType");

            entity.HasOne(d => d.KResourceTypeNavigation).WithMany(p => p.TResourceGroups)
                .HasForeignKey(d => d.KResourceType)
                .HasConstraintName("FK_ResPl_tResourceGroup_kResourceType");
        });

        modelBuilder.Entity<TResourceLabel>(entity =>
        {
            entity.HasKey(e => new { e.KResource, e.KLabel }).HasName("PK_ResPl_tResourceLabel");

            entity.ToTable("tResourceLabel", "ResPl");

            entity.Property(e => e.KResource).HasColumnName("kResource");
            entity.Property(e => e.KLabel).HasColumnName("kLabel");

            entity.HasOne(d => d.KResourceNavigation).WithMany(p => p.TResourceLabels)
                .HasForeignKey(d => d.KResource)
                .HasConstraintName("FK_ResPl_tResourceLabel_kResource");
        });

        modelBuilder.Entity<TResourceSub>(entity =>
        {
            entity.HasKey(e => new { e.KResource, e.KSubResource }).HasName("PK_ResPl_tResourceSub");

            entity.ToTable("tResourceSub", "ResPl");

            entity.Property(e => e.KResource).HasColumnName("kResource");
            entity.Property(e => e.KSubResource).HasColumnName("kSubResource");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");

            entity.HasOne(d => d.KResourceNavigation).WithMany(p => p.TResourceSubKResourceNavigations)
                .HasForeignKey(d => d.KResource)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ResPl_tResourceSub_kResource");

            entity.HasOne(d => d.KSubResourceNavigation).WithMany(p => p.TResourceSubKSubResourceNavigations)
                .HasForeignKey(d => d.KSubResource)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ResPl_tResourceSub_kSubResource");
        });

        modelBuilder.Entity<TResourceType>(entity =>
        {
            entity.HasKey(e => e.KResourceType).HasName("PK_ResPl_tResourceType");

            entity.ToTable("tResourceType", "ResPl");

            entity.Property(e => e.KResourceType).HasColumnName("kResourceType");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.DCreated).HasColumnName("dCreated");
            entity.Property(e => e.DLastModified).HasColumnName("dLastModified");
            entity.Property(e => e.KTimeModel).HasColumnName("kTimeModel");
            entity.Property(e => e.NAppoitmentRequestAutomatic).HasColumnName("nAppoitmentRequestAutomatic");
            entity.Property(e => e.NDivisible).HasColumnName("nDivisible");
            entity.Property(e => e.NTimeUnit).HasColumnName("nTimeUnit");
            entity.Property(e => e.USpecialType).HasColumnName("uSpecialType");
        });

        modelBuilder.Entity<TResourceUser>(entity =>
        {
            entity.HasKey(e => new { e.KResource, e.KBenutzer }).HasName("PK_ResPl_tResourceUser");

            entity.ToTable("tResourceUser", "ResPl");

            entity.Property(e => e.KResource).HasColumnName("kResource");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");

            entity.HasOne(d => d.KResourceNavigation).WithMany(p => p.TResourceUsers)
                .HasForeignKey(d => d.KResource)
                .HasConstraintName("FK_ResPl_tResourceUser_kResource");
        });

        modelBuilder.Entity<TResourcesGroup>(entity =>
        {
            entity.HasKey(e => new { e.KResource, e.KResourceGroup }).HasName("PK_ResPl_tResourcesGroups");

            entity.ToTable("tResourcesGroups", "ResPl");

            entity.Property(e => e.KResource).HasColumnName("kResource");
            entity.Property(e => e.KResourceGroup).HasColumnName("kResourceGroup");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");

            entity.HasOne(d => d.KResourceNavigation).WithMany(p => p.TResourcesGroups)
                .HasForeignKey(d => d.KResource)
                .HasConstraintName("FK_ResPl_tResourcesGroups_kResource");

            entity.HasOne(d => d.KResourceGroupNavigation).WithMany(p => p.TResourcesGroups)
                .HasForeignKey(d => d.KResourceGroup)
                .HasConstraintName("FK_ResPl_tResourcesGroups_kSubResource");
        });

        modelBuilder.Entity<TRetourPosGutschriftMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tRetourPosGutschriftMapping", "Amazon");

            entity.HasIndex(e => new { e.KAmazonRetourPos, e.KGutschrift }, "UQ_Amazon_tRetourPosGutschriftMapping_kAmazonRetourPos_kGutschrift").IsUnique();

            entity.Property(e => e.KAmazonRetourPos).HasColumnName("kAmazonRetourPos");
            entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");
        });

        modelBuilder.Entity<TReturnCommandQueue>(entity =>
        {
            entity.HasKey(e => e.KReturnCommandQueue).HasName("PK_FulfillmentNetwork_tReturnCommandQueue");

            entity.ToTable("tReturnCommandQueue", "FulfillmentNetwork");

            entity.Property(e => e.KReturnCommandQueue).HasColumnName("kReturnCommandQueue");
            entity.Property(e => e.CData).HasColumnName("cData");
            entity.Property(e => e.CDataType)
                .HasMaxLength(255)
                .HasColumnName("cDataType");
            entity.Property(e => e.CErrorMessage).HasColumnName("cErrorMessage");
            entity.Property(e => e.CRequestId)
                .HasMaxLength(255)
                .HasColumnName("cRequestId");
            entity.Property(e => e.CReturnId)
                .HasMaxLength(255)
                .HasColumnName("cReturnId");
            entity.Property(e => e.CSessionId)
                .HasMaxLength(255)
                .HasColumnName("cSessionId");
            entity.Property(e => e.DCreatedAt).HasColumnName("dCreatedAt");
            entity.Property(e => e.DModificationDate).HasColumnName("dModificationDate");
            entity.Property(e => e.DProcessedAt).HasColumnName("dProcessedAt");
            entity.Property(e => e.KRmRetoure).HasColumnName("kRmRetoure");
            entity.Property(e => e.NEvent).HasColumnName("nEvent");
            entity.Property(e => e.NPriority).HasColumnName("nPriority");
            entity.Property(e => e.NRole).HasColumnName("nRole");
            entity.Property(e => e.NState).HasColumnName("nState");
            entity.Property(e => e.NTarget).HasColumnName("nTarget");
            entity.Property(e => e.NType).HasColumnName("nType");
        });

        modelBuilder.Entity<TReturnItemRef>(entity =>
        {
            entity.HasKey(e => e.KReturnItemRef).HasName("PK_FulfillmentNetwork_tReturnItemRef");

            entity.ToTable("tReturnItemRef", "FulfillmentNetwork");

            entity.Property(e => e.KReturnItemRef).HasColumnName("kReturnItemRef");
            entity.Property(e => e.BRowVersion)
                .HasMaxLength(8)
                .IsFixedLength()
                .HasColumnName("bRowVersion");
            entity.Property(e => e.COwnerId)
                .HasMaxLength(10)
                .HasColumnName("cOwnerId");
            entity.Property(e => e.CReturnItemId)
                .HasMaxLength(255)
                .HasColumnName("cReturnItemId");
            entity.Property(e => e.DCreatedAt).HasColumnName("dCreatedAt");
            entity.Property(e => e.DUpdatedAt).HasColumnName("dUpdatedAt");
            entity.Property(e => e.FQuantity)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fQuantity");
            entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");
            entity.Property(e => e.KReturnRef).HasColumnName("kReturnRef");
            entity.Property(e => e.KRmRetoure).HasColumnName("kRmRetoure");
            entity.Property(e => e.KRmRetourePos).HasColumnName("kRmRetourePos");
            entity.Property(e => e.NType).HasColumnName("nType");
        });

        modelBuilder.Entity<TReturnReason>(entity =>
        {
            entity.HasKey(e => e.KReturnReason).HasName("PK_SCX_tReturnReason");

            entity.ToTable("tReturnReason", "SCX");

            entity.Property(e => e.KReturnReason).HasColumnName("kReturnReason");
            entity.Property(e => e.CReturnReason)
                .HasMaxLength(255)
                .HasColumnName("cReturnReason");
        });

        modelBuilder.Entity<TReturnRef>(entity =>
        {
            entity.HasKey(e => e.KReturnRef).HasName("PK_FulfillmentNetwork_tReturnRef");

            entity.ToTable("tReturnRef", "FulfillmentNetwork");

            entity.HasIndex(e => e.KRmRetoure, "IX_FulfillmentNetwork_tReturnRef_kRmRetoure")
                .IsUnique()
                .HasFilter("([kRmRetoure] IS NOT NULL)");

            entity.Property(e => e.KReturnRef).HasColumnName("kReturnRef");
            entity.Property(e => e.BRowVersion)
                .HasMaxLength(8)
                .IsFixedLength()
                .HasColumnName("bRowVersion");
            entity.Property(e => e.COwnerId)
                .HasMaxLength(10)
                .HasColumnName("cOwnerId");
            entity.Property(e => e.CReturnId)
                .HasMaxLength(255)
                .HasColumnName("cReturnId");
            entity.Property(e => e.CWarehouseId)
                .HasMaxLength(255)
                .HasColumnName("cWarehouseId");
            entity.Property(e => e.DCreatedAt).HasColumnName("dCreatedAt");
            entity.Property(e => e.DLastWawiUpdate).HasColumnName("dLastWawiUpdate");
            entity.Property(e => e.DUpdatedAt).HasColumnName("dUpdatedAt");
            entity.Property(e => e.KRmRetoure).HasColumnName("kRmRetoure");
            entity.Property(e => e.NChangeState).HasColumnName("nChangeState");
            entity.Property(e => e.NType).HasColumnName("nType");

            entity.HasOne(d => d.KRmRetoureNavigation).WithOne(p => p.TReturnRef)
                .HasForeignKey<TReturnRef>(d => d.KRmRetoure)
                .HasConstraintName("FK_FulfillmentNetwork_tReturnRef_kRmRetoure");
        });

        modelBuilder.Entity<TReturnStatusMapping>(entity =>
        {
            entity.HasKey(e => e.KReturnStatusMapping).HasName("PK_SCX_tReturnStatusMapping");

            entity.ToTable("tReturnStatusMapping", "SCX");

            entity.Property(e => e.KReturnStatusMapping).HasColumnName("kReturnStatusMapping");
            entity.Property(e => e.KRmstatus).HasColumnName("kRMStatus");
            entity.Property(e => e.NAccepted).HasColumnName("nAccepted");
        });

        modelBuilder.Entity<TRmgrund>(entity =>
        {
            entity.HasKey(e => e.KRmgrund).HasName("PK_dbo_tRMGrund");

            entity.ToTable("tRMGrund");

            entity.Property(e => e.KRmgrund).HasColumnName("kRMGrund");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CColor)
                .HasMaxLength(8)
                .HasColumnName("cColor");
            entity.Property(e => e.KScxreason).HasColumnName("kSCXReason");
            entity.Property(e => e.NAktiv).HasColumnName("nAktiv");
            entity.Property(e => e.NEinschraenkung).HasColumnName("nEinschraenkung");
            entity.Property(e => e.NFfnDefaultMapping).HasColumnName("nFfnDefaultMapping");
            entity.Property(e => e.NFfncode).HasColumnName("nFFNCode");
            entity.Property(e => e.NSort)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nSort");
            entity.Property(e => e.NWmsVisible)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nWmsVisible");

            entity.HasOne(d => d.KScxreasonNavigation).WithMany(p => p.TRmgrunds)
                .HasForeignKey(d => d.KScxreason)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_SCX_tRMGrund_kReturnReason");
        });

        modelBuilder.Entity<TRmgrundKategorie>(entity =>
        {
            entity.HasKey(e => e.KRmgrundKategorie).HasName("PK_dbo_tRMGrundKategorie");

            entity.ToTable("tRMGrundKategorie");

            entity.Property(e => e.KRmgrundKategorie).HasColumnName("kRMGrundKategorie");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KKategorie).HasColumnName("kKategorie");
            entity.Property(e => e.KRmgrund).HasColumnName("kRMGrund");
            entity.Property(e => e.NIstMarkiert).HasColumnName("nIstMarkiert");
        });

        modelBuilder.Entity<TRmgrundSprache>(entity =>
        {
            entity.HasKey(e => new { e.KRmgrund, e.KSprache }).HasName("PK_dbo_tRMGrundSprache");

            entity.ToTable("tRMGrundSprache");

            entity.Property(e => e.KRmgrund).HasColumnName("kRMGrund");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBeschreibung)
                .HasMaxLength(255)
                .HasColumnName("cBeschreibung");
            entity.Property(e => e.CName)
                .HasMaxLength(50)
                .HasColumnName("cName");
        });

        modelBuilder.Entity<TRmgrundWarengruppe>(entity =>
        {
            entity.HasKey(e => e.KRmgrundWarengruppe).HasName("PK_dbo_tRMGrundWarengruppe");

            entity.ToTable("tRMGrundWarengruppe");

            entity.Property(e => e.KRmgrundWarengruppe).HasColumnName("kRMGrundWarengruppe");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KRmgrund).HasColumnName("kRMGrund");
            entity.Property(e => e.KWarengruppe).HasColumnName("kWarengruppe");
        });

        modelBuilder.Entity<TRmretoure>(entity =>
        {
            entity.HasKey(e => e.KRmretoure).HasName("PK_dbo_tRMRetoure");

            entity.ToTable("tRMRetoure", tb =>
                {
                    tb.HasTrigger("jtlActionValidator_tRMRetoure");
                    tb.HasTrigger("tgr_tRMRetoure_INSERT");
                    tb.HasTrigger("tgr_tRMRetoure_INSUP");
                });

            entity.HasIndex(e => e.DErstellt, "IX_tRMRetoure_dErstellt");

            entity.HasIndex(e => e.KBestellung, "IX_tRMRetoure_kBestellung");

            entity.Property(e => e.KRmretoure).HasColumnName("kRMRetoure");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAnsprechpartner)
                .HasMaxLength(255)
                .HasColumnName("cAnsprechpartner");
            entity.Property(e => e.CExternalNumber)
                .HasMaxLength(255)
                .HasColumnName("cExternalNumber");
            entity.Property(e => e.CFfnReturnId)
                .HasMaxLength(255)
                .HasColumnName("cFfnReturnId");
            entity.Property(e => e.CKommentarExtern).HasColumnName("cKommentarExtern");
            entity.Property(e => e.CKommentarIntern).HasColumnName("cKommentarIntern");
            entity.Property(e => e.CKorrekturBetragKommentar).HasColumnName("cKorrekturBetragKommentar");
            entity.Property(e => e.CRetoureNr)
                .HasMaxLength(255)
                .HasColumnName("cRetoureNr");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.FKorrekturBetrag)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fKorrekturBetrag");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KBestellungUmtausch).HasColumnName("kBestellungUmtausch");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KRmretoureAbholAdresse).HasColumnName("kRMRetoureAbholAdresse");
            entity.Property(e => e.KRmstatus).HasColumnName("kRMStatus");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.NHerkunft).HasColumnName("nHerkunft");
            entity.Property(e => e.NKuponGutschriftGutschreiben).HasColumnName("nKuponGutschriftGutschreiben");
            entity.Property(e => e.NVersandkostenErstatten).HasColumnName("nVersandkostenErstatten");
        });

        modelBuilder.Entity<TRmretoureAbholAdresse>(entity =>
        {
            entity.HasKey(e => e.KRmretoureAbholAdresse).HasName("PK_dbo_tRMRetoureAbholAdresse");

            entity.ToTable("tRMRetoureAbholAdresse");

            entity.Property(e => e.KRmretoureAbholAdresse).HasColumnName("kRMRetoureAbholAdresse");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAdressZusatz)
                .HasMaxLength(255)
                .HasColumnName("cAdressZusatz");
            entity.Property(e => e.CAnrede)
                .HasMaxLength(30)
                .HasColumnName("cAnrede");
            entity.Property(e => e.CBundesland)
                .HasMaxLength(255)
                .HasColumnName("cBundesland");
            entity.Property(e => e.CFax)
                .HasMaxLength(30)
                .HasColumnName("cFax");
            entity.Property(e => e.CFirma)
                .HasMaxLength(128)
                .HasColumnName("cFirma");
            entity.Property(e => e.CIso)
                .HasMaxLength(5)
                .HasColumnName("cISO");
            entity.Property(e => e.CLand)
                .HasMaxLength(255)
                .HasColumnName("cLand");
            entity.Property(e => e.CMail)
                .HasMaxLength(255)
                .HasColumnName("cMail");
            entity.Property(e => e.CMobil)
                .HasMaxLength(30)
                .HasColumnName("cMobil");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPlz)
                .HasMaxLength(24)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CPostId)
                .HasMaxLength(255)
                .HasColumnName("cPostID");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTel)
                .HasMaxLength(30)
                .HasColumnName("cTel");
            entity.Property(e => e.CTitel)
                .HasMaxLength(64)
                .HasColumnName("cTitel");
            entity.Property(e => e.CVorname)
                .HasMaxLength(255)
                .HasColumnName("cVorname");
            entity.Property(e => e.CZusatz)
                .HasMaxLength(60)
                .HasColumnName("cZusatz");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
        });

        modelBuilder.Entity<TRmretoureAustauschArtikel>(entity =>
        {
            entity.HasKey(e => e.KRmretoureAustauschArtikel).HasName("PK_dbo_tRMRetoureAustauschArtikel");

            entity.ToTable("tRMRetoureAustauschArtikel");

            entity.Property(e => e.KRmretoureAustauschArtikel).HasColumnName("kRMRetoureAustauschArtikel");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CHinweis).HasColumnName("cHinweis");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.FMwSt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwSt");
            entity.Property(e => e.FRabatt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabatt");
            entity.Property(e => e.FVkNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVkNetto");
            entity.Property(e => e.FVkPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVkPreis");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KRmretoure).HasColumnName("kRMRetoure");
        });

        modelBuilder.Entity<TRmretourePo>(entity =>
        {
            entity.HasKey(e => e.KRmretourePos).HasName("PK_dbo_tRMRetourePos");

            entity.ToTable("tRMRetourePos");

            entity.HasIndex(e => e.KRmretoure, "IX_dbo_tRMRetourePos_kRmRetoure");

            entity.HasIndex(e => e.KLieferscheinPos, "IX_tRMRetourePos_kLieferscheinPos");

            entity.Property(e => e.KRmretourePos).HasColumnName("kRMRetourePos");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CFfnReturnPosId)
                .HasMaxLength(255)
                .HasColumnName("cFfnReturnPosId");
            entity.Property(e => e.CGrundKommentar).HasColumnName("cGrundKommentar");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CZustandKommentar).HasColumnName("cZustandKommentar");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");
            entity.Property(e => e.KRmgrund).HasColumnName("kRMGrund");
            entity.Property(e => e.KRmretoure).HasColumnName("kRMRetoure");
            entity.Property(e => e.KRmstatusVerlauf).HasColumnName("kRMStatusVerlauf");
            entity.Property(e => e.KZustand).HasColumnName("kZustand");
            entity.Property(e => e.NGutschreiben).HasColumnName("nGutschreiben");
        });

        modelBuilder.Entity<TRmretourenEtikett>(entity =>
        {
            entity.HasKey(e => e.KRmretourenEtikett).HasName("PK_dbo_tRMRetourenEtikett");

            entity.ToTable("tRMRetourenEtikett");

            entity.Property(e => e.KRmretourenEtikett).HasColumnName("kRMRetourenEtikett");
            entity.Property(e => e.BLabel)
                .HasColumnType("image")
                .HasColumnName("bLabel");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CHash)
                .HasMaxLength(255)
                .HasColumnName("cHash");
            entity.Property(e => e.CIdentCode)
                .HasMaxLength(255)
                .HasColumnName("cIdentCode");
            entity.Property(e => e.CVersandArtManuell)
                .HasMaxLength(255)
                .HasColumnName("cVersandArtManuell");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KRmretoure).HasColumnName("kRMRetoure");
            entity.Property(e => e.KVersandArt).HasColumnName("kVersandArt");
        });

        modelBuilder.Entity<TRmstatus>(entity =>
        {
            entity.HasKey(e => e.KRmstatus).HasName("PK_dbo_tRMStatus");

            entity.ToTable("tRMStatus");

            entity.Property(e => e.KRmstatus).HasColumnName("kRMStatus");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KRmstatusParent).HasColumnName("kRMStatusParent");
            entity.Property(e => e.NAktiv).HasColumnName("nAktiv");
            entity.Property(e => e.NPos).HasColumnName("nPos");
            entity.Property(e => e.NStatusTyp).HasColumnName("nStatusTyp");
            entity.Property(e => e.NVisibleMode).HasColumnName("nVisibleMode");
        });

        modelBuilder.Entity<TRmstatusBerechtigung>(entity =>
        {
            entity.HasKey(e => new { e.KRmstatus, e.KRechtBenutzerGruppe }).HasName("PK_dbo_tRMStatusBerechtigung");

            entity.ToTable("tRMStatusBerechtigung");

            entity.Property(e => e.KRmstatus).HasColumnName("kRMStatus");
            entity.Property(e => e.KRechtBenutzerGruppe).HasColumnName("kRechtBenutzerGruppe");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.NStatusSetzen).HasColumnName("nStatusSetzen");
            entity.Property(e => e.NStatusVerlassen).HasColumnName("nStatusVerlassen");
        });

        modelBuilder.Entity<TRmstatusSprache>(entity =>
        {
            entity.HasKey(e => new { e.KRmstatus, e.KSprache }).HasName("PK_dbo_tRMStatusSprache");

            entity.ToTable("tRMStatusSprache");

            entity.Property(e => e.KRmstatus).HasColumnName("kRMStatus");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
        });

        modelBuilder.Entity<TRmstatusVerlauf>(entity =>
        {
            entity.HasKey(e => e.KRmstatusVerlauf).HasName("PK_dbo_tRMStatusVerlauf");

            entity.ToTable("tRMStatusVerlauf");

            entity.Property(e => e.KRmstatusVerlauf).HasColumnName("kRMStatusVerlauf");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CKommentar)
                .HasMaxLength(255)
                .HasColumnName("cKommentar");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KRmretourePos).HasColumnName("kRMRetourePos");
            entity.Property(e => e.KRmstatus).HasColumnName("kRMStatus");
        });

        modelBuilder.Entity<TRmstatusWorkflow>(entity =>
        {
            entity.HasKey(e => e.KRmstatusWorkflow).HasName("PK_dbo_tRMStatusWorkflow");

            entity.ToTable("tRMStatusWorkflow");

            entity.Property(e => e.KRmstatusWorkflow).HasColumnName("kRMStatusWorkflow");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KRmstatus).HasColumnName("kRMStatus");
            entity.Property(e => e.KWorkflow).HasColumnName("kWorkflow");
            entity.Property(e => e.NEvent).HasColumnName("nEvent");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<TRueckhalteGrund>(entity =>
        {
            entity.HasKey(e => e.KRueckhalteGrund).HasName("PK_dbo_tRueckhalteGrund");

            entity.ToTable("tRueckhalteGrund");

            entity.Property(e => e.KRueckhalteGrund).HasColumnName("kRueckhalteGrund");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(30)
                .HasColumnName("cName");
            entity.Property(e => e.NEinkaufslisteGesperrt).HasColumnName("nEinkaufslisteGesperrt");
            entity.Property(e => e.NZusammenfassbar).HasColumnName("nZusammenfassbar");
        });

        modelBuilder.Entity<TSalesChannelAttribute>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tSalesChannelAttribute", "SCX");

            entity.Property(e => e.CAttribute)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("cAttribute");
            entity.Property(e => e.CChannel)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("cChannel");
            entity.Property(e => e.CValue)
                .IsUnicode(false)
                .HasColumnName("cValue");
        });

        modelBuilder.Entity<TSchedule>(entity =>
        {
            entity.HasKey(e => new { e.NWochentag, e.NMinute }).HasName("PK_Worker_tSchedule");

            entity.ToTable("tSchedule", "Worker");

            entity.Property(e => e.NWochentag).HasColumnName("nWochentag");
            entity.Property(e => e.NMinute).HasColumnName("nMinute");
        });

        modelBuilder.Entity<TScopeType>(entity =>
        {
            entity.HasKey(e => e.KScopeType).HasName("PK_FulfillmentNetwork.tScopeType");

            entity.ToTable("tScopeType", "FulfillmentNetwork");

            entity.Property(e => e.KScopeType)
                .ValueGeneratedNever()
                .HasColumnName("kScopeType");
            entity.Property(e => e.CId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("cId");
        });

        modelBuilder.Entity<TScript>(entity =>
        {
            entity.HasKey(e => e.KScript).HasName("PK_Blockly_tScript");

            entity.ToTable("tScript", "Blockly");

            entity.HasIndex(e => new { e.CName, e.KDirectory }, "UQ_Blockly_tScript_cName_kDirectory").IsUnique();

            entity.Property(e => e.KScript).HasColumnName("kScript");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CData).HasColumnName("cData");
            entity.Property(e => e.CName)
                .HasMaxLength(100)
                .HasColumnName("cName");
            entity.Property(e => e.DCreated)
                .HasColumnType("datetime")
                .HasColumnName("dCreated");
            entity.Property(e => e.DModified)
                .HasColumnType("datetime")
                .HasColumnName("dModified");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KDirectory).HasColumnName("kDirectory");
            entity.Property(e => e.NDebug).HasColumnName("nDebug");
            entity.Property(e => e.NEnabled).HasColumnName("nEnabled");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NVerbose).HasColumnName("nVerbose");

            entity.HasOne(d => d.KDirectoryNavigation).WithMany(p => p.TScripts)
                .HasForeignKey(d => d.KDirectory)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Blockly_tScript_kDirectory");
        });

        modelBuilder.Entity<TScxLogeintrag>(entity =>
        {
            entity.HasKey(e => e.KScxLogeintrag).HasName("PK_Sync_tScxLogeintrag");

            entity.ToTable("tScxLogeintrag", "Sync");

            entity.Property(e => e.KScxLogeintrag).HasColumnName("kScxLogeintrag");
            entity.Property(e => e.CErweiterteMeldung).HasColumnName("cErweiterteMeldung");
            entity.Property(e => e.CMeldung)
                .HasMaxLength(2048)
                .HasColumnName("cMeldung");
            entity.Property(e => e.DZeitpunkt)
                .HasColumnType("datetime")
                .HasColumnName("dZeitpunkt");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KSyncLogsitzung).HasColumnName("kSyncLogsitzung");
            entity.Property(e => e.NCallType).HasColumnName("nCallType");
            entity.Property(e => e.NErweiterterInhalt).HasColumnName("nErweiterterInhalt");
            entity.Property(e => e.NSchweregrad).HasColumnName("nSchweregrad");

            entity.HasOne(d => d.KSyncLogsitzungNavigation).WithMany(p => p.TScxLogeintrags)
                .HasForeignKey(d => d.KSyncLogsitzung)
                .HasConstraintName("FK_Sync_tScxLogeintrag_kSyncLogsitzung");
        });

        modelBuilder.Entity<TSellerAttribute>(entity =>
        {
            entity.HasKey(e => e.KSellerAttribute).HasName("PK_SCX_tSellerAttribute");

            entity.ToTable("tSellerAttribute", "SCX");

            entity.Property(e => e.KSellerAttribute).HasColumnName("kSellerAttribute");
            entity.Property(e => e.CAttributeId)
                .HasMaxLength(512)
                .HasColumnName("cAttributeId");
            entity.Property(e => e.CAttributeValueValidation)
                .HasMaxLength(1024)
                .HasColumnName("cAttributeValueValidation");
            entity.Property(e => e.CDescription).HasColumnName("cDescription");
            entity.Property(e => e.CDisplayName)
                .HasMaxLength(150)
                .HasColumnName("cDisplayName");
            entity.Property(e => e.CSection)
                .HasMaxLength(255)
                .HasColumnName("cSection");
            entity.Property(e => e.CSellerId)
                .HasMaxLength(255)
                .HasColumnName("cSellerId");
            entity.Property(e => e.CSubSection)
                .HasMaxLength(255)
                .HasColumnName("cSubSection");
            entity.Property(e => e.CType)
                .HasMaxLength(100)
                .HasColumnName("cType");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NIsMultipleAllowed).HasColumnName("nIsMultipleAllowed");
            entity.Property(e => e.NIsRepeatableSubSection).HasColumnName("nIsRepeatableSubSection");
            entity.Property(e => e.NIsVariationDimension).HasColumnName("nIsVariationDimension");
            entity.Property(e => e.NRecommended).HasColumnName("nRecommended");
            entity.Property(e => e.NRequired).HasColumnName("nRequired");
            entity.Property(e => e.NSectionPosition).HasColumnName("nSectionPosition");
            entity.Property(e => e.NSubSectionPosition).HasColumnName("nSubSectionPosition");

            entity.HasOne(d => d.KShopNavigation).WithMany(p => p.TSellerAttributes)
                .HasForeignKey(d => d.KShop)
                .HasConstraintName("FK_SCX_tSellerAttribute_kShop");
        });

        modelBuilder.Entity<TSellerAttributeConditionalMandatory>(entity =>
        {
            entity.HasKey(e => e.KSellerAttributeConditionalMandatory).HasName("PK_SCX_tSellerAttributeConditionalMandatory");

            entity.ToTable("tSellerAttributeConditionalMandatory", "SCX");

            entity.Property(e => e.KSellerAttributeConditionalMandatory).HasColumnName("kSellerAttributeConditionalMandatory");
            entity.Property(e => e.CValue)
                .HasMaxLength(255)
                .HasColumnName("cValue");
            entity.Property(e => e.KSellerAttribute).HasColumnName("kSellerAttribute");

            entity.HasOne(d => d.KSellerAttributeNavigation).WithMany(p => p.TSellerAttributeConditionalMandatories)
                .HasForeignKey(d => d.KSellerAttribute)
                .HasConstraintName("FK_SCX_tSellerAttributeConditionalMandatory_kSellerAttribute");
        });

        modelBuilder.Entity<TSellerAttributeConditionalOptional>(entity =>
        {
            entity.HasKey(e => e.KSellerAttributeConditionalOptional).HasName("PK_SCX_tSellerAttributeConditionalOptional");

            entity.ToTable("tSellerAttributeConditionalOptional", "SCX");

            entity.Property(e => e.KSellerAttributeConditionalOptional).HasColumnName("kSellerAttributeConditionalOptional");
            entity.Property(e => e.CValue)
                .HasMaxLength(255)
                .HasColumnName("cValue");
            entity.Property(e => e.KSellerAttribute).HasColumnName("kSellerAttribute");

            entity.HasOne(d => d.KSellerAttributeNavigation).WithMany(p => p.TSellerAttributeConditionalOptionals)
                .HasForeignKey(d => d.KSellerAttribute)
                .HasConstraintName("FK_SCX_tSellerAttributeConditionalOptional_kSellerAttribute");
        });

        modelBuilder.Entity<TSellerAttributeListVersion>(entity =>
        {
            entity.HasKey(e => e.KSellerAttributeListVersion).HasName("PK_SCX_tSellerAttributeListVersion");

            entity.ToTable("tSellerAttributeListVersion", "SCX");

            entity.Property(e => e.KSellerAttributeListVersion).HasColumnName("kSellerAttributeListVersion");
            entity.Property(e => e.CAttributeListVersion)
                .HasMaxLength(255)
                .HasColumnName("cAttributeListVersion");
            entity.Property(e => e.CChannel)
                .HasMaxLength(32)
                .HasColumnName("cChannel");
        });

        modelBuilder.Entity<TSellerAttributeValue>(entity =>
        {
            entity.HasKey(e => e.KSellerAttributeValue).HasName("PK_SCX_tSellerAttributeValue");

            entity.ToTable("tSellerAttributeValue", "SCX");

            entity.Property(e => e.KSellerAttributeValue).HasColumnName("kSellerAttributeValue");
            entity.Property(e => e.CDisplayName).HasColumnName("cDisplayName");
            entity.Property(e => e.CValue).HasColumnName("cValue");
            entity.Property(e => e.KSellerAttribute).HasColumnName("kSellerAttribute");
            entity.Property(e => e.NSort).HasColumnName("nSort");

            entity.HasOne(d => d.KSellerAttributeNavigation).WithMany(p => p.TSellerAttributeValues)
                .HasForeignKey(d => d.KSellerAttribute)
                .HasConstraintName("FK_SCX_tSellerAttributeValue_kSellerAttribute");
        });

        modelBuilder.Entity<TSendungsdatenaustausch>(entity =>
        {
            entity.HasKey(e => e.KVorlage).HasName("PK_dbo_tSendungsdatenaustausch");

            entity.ToTable("tSendungsdatenaustausch");

            entity.Property(e => e.KVorlage).HasColumnName("kVorlage");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CSpeicherpfad)
                .HasMaxLength(255)
                .HasColumnName("cSpeicherpfad");
            entity.Property(e => e.CVorlagenName)
                .HasMaxLength(255)
                .HasColumnName("cVorlagenName");
            entity.Property(e => e.KVersanddatenVorlage).HasColumnName("kVersanddatenVorlage");
            entity.Property(e => e.NImportServiceActive).HasColumnName("nImportServiceActive");
            entity.Property(e => e.NIsActive).HasColumnName("nIsActive");
            entity.Property(e => e.NVorlagenTyp).HasColumnName("nVorlagenTyp");
        });

        modelBuilder.Entity<TServerConfig>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tServerConfig", "Pos");

            entity.Property(e => e.CCertificateFingerprint)
                .HasMaxLength(255)
                .HasDefaultValueSql("('')")
                .HasColumnName("cCertificateFingerprint");
            entity.Property(e => e.CCertificateSerialNumber)
                .HasMaxLength(255)
                .HasDefaultValueSql("('')")
                .HasColumnName("cCertificateSerialNumber");
            entity.Property(e => e.CIpAddress)
                .HasMaxLength(50)
                .HasColumnName("cIpAddress");
            entity.Property(e => e.NPort).HasColumnName("nPort");
        });

        modelBuilder.Entity<TSessionId>(entity =>
        {
            entity.HasKey(e => e.KSessionId).HasName("PK_dbo_tSessionId");

            entity.ToTable("tSessionId");

            entity.Property(e => e.KSessionId).HasColumnName("kSessionId");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CRechnername)
                .HasMaxLength(255)
                .HasColumnName("cRechnername");
            entity.Property(e => e.DLastAction)
                .HasColumnType("datetime")
                .HasColumnName("dLastAction");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
        });

        modelBuilder.Entity<TSetting>(entity =>
        {
            entity.HasKey(e => e.KSetting).HasName("PK_dbo_tSetting");

            entity.ToTable("tSetting", tb => tb.HasTrigger("tgr_tSetting_INSUP"));

            entity.HasIndex(e => e.CHostname, "IX_tSetting_cHostName");

            entity.HasIndex(e => e.CSection, "IX_tSetting_cSection");

            entity.HasIndex(e => e.CVersion, "IX_tSetting_cVersion");

            entity.HasIndex(e => e.KBenutzer, "IX_tSetting_kBenutzer");

            entity.HasIndex(e => new { e.CApplicationName, e.CHostname, e.CName, e.CSection, e.CVersion, e.KBenutzer }, "UQ_dbo_tSetting_cApplicationName_cHostname_cName_cSection_cVersion_kBenutzer").IsUnique();

            entity.Property(e => e.KSetting).HasColumnName("kSetting");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CApplicationName)
                .HasMaxLength(50)
                .HasColumnName("cApplicationName");
            entity.Property(e => e.CDescription)
                .HasMaxLength(2048)
                .HasColumnName("cDescription");
            entity.Property(e => e.CHostname)
                .HasMaxLength(80)
                .HasColumnName("cHostname");
            entity.Property(e => e.CName)
                .HasMaxLength(50)
                .HasColumnName("cName");
            entity.Property(e => e.CSection)
                .HasMaxLength(230)
                .HasColumnName("cSection");
            entity.Property(e => e.CValue).HasColumnName("cValue");
            entity.Property(e => e.CVersion)
                .HasMaxLength(30)
                .HasColumnName("cVersion");
            entity.Property(e => e.DLetzteAenderung)
                .HasColumnType("datetime")
                .HasColumnName("dLetzteAenderung");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBenutzerLetzteAenderung).HasColumnName("kBenutzerLetzteAenderung");
            entity.Property(e => e.NScope).HasColumnName("nScope");
        });

        modelBuilder.Entity<TSetting1>(entity =>
        {
            entity.HasKey(e => e.CKey).HasName("PK_FulfillmentNetwork_tSettings");

            entity.ToTable("tSettings", "FulfillmentNetwork");

            entity.Property(e => e.CKey)
                .HasMaxLength(64)
                .HasColumnName("cKey");
            entity.Property(e => e.CStringValue).HasColumnName("cStringValue");
            entity.Property(e => e.DDateValue).HasColumnName("dDateValue");
            entity.Property(e => e.FDoubleValue)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fDoubleValue");
            entity.Property(e => e.NIntValue).HasColumnName("nIntValue");
        });

        modelBuilder.Entity<TSetting2>(entity =>
        {
            entity.HasKey(e => e.KSetting).HasName("PK_pps_tSetting");

            entity.ToTable("tSetting", "pps", tb => tb.HasTrigger("tgr_tSetting_INSUP"));

            entity.HasIndex(e => e.CHostname, "IX_pps_tSetting_cHostName");

            entity.HasIndex(e => e.CSection, "IX_pps_tSetting_cSection");

            entity.HasIndex(e => e.CVersion, "IX_pps_tSetting_cVersion");

            entity.HasIndex(e => e.KBenutzer, "IX_pps_tSetting_kBenutzer");

            entity.HasIndex(e => new { e.CApplicationName, e.CSection, e.CHostname, e.KBenutzer, e.CName, e.CVersion }, "UQ_pps_tSetting_cApplicationName_cHostname_cName_cSection_cVersion_kBenutzer").IsUnique();

            entity.Property(e => e.KSetting).HasColumnName("kSetting");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CApplicationName)
                .HasMaxLength(50)
                .HasColumnName("cApplicationName");
            entity.Property(e => e.CDescription)
                .HasMaxLength(2048)
                .HasColumnName("cDescription");
            entity.Property(e => e.CHostname)
                .HasMaxLength(80)
                .HasColumnName("cHostname");
            entity.Property(e => e.CName)
                .HasMaxLength(50)
                .HasColumnName("cName");
            entity.Property(e => e.CSection)
                .HasMaxLength(230)
                .HasColumnName("cSection");
            entity.Property(e => e.CValue).HasColumnName("cValue");
            entity.Property(e => e.CVersion)
                .HasMaxLength(30)
                .HasColumnName("cVersion");
            entity.Property(e => e.DLetzteAenderung)
                .HasColumnType("datetime")
                .HasColumnName("dLetzteAenderung");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBenutzerLetzteAenderung).HasColumnName("kBenutzerLetzteAenderung");
            entity.Property(e => e.NScope).HasColumnName("nScope");
        });

        modelBuilder.Entity<TSetting3>(entity =>
        {
            entity.HasKey(e => e.KSetting).HasName("PK_Ticketsystem_tSetting");

            entity.ToTable("tSetting", "Ticketsystem");

            entity.HasIndex(e => new { e.CKey, e.CValue }, "UQ_Ticketsystem_tSetting_cKey_cValue").IsUnique();

            entity.Property(e => e.KSetting).HasColumnName("kSetting");
            entity.Property(e => e.CKey)
                .HasMaxLength(200)
                .HasColumnName("cKey");
            entity.Property(e => e.CValue)
                .HasMaxLength(200)
                .HasColumnName("cValue");
        });

        modelBuilder.Entity<TSettlementPosKostentypen>(entity =>
        {
            entity.HasKey(e => new { e.CAmountType, e.CAmountDescription }).HasName("PK_Amazon_tSettlementPosKostentypen");

            entity.ToTable("tSettlementPosKostentypen", "Amazon");

            entity.Property(e => e.CAmountType)
                .HasMaxLength(30)
                .HasColumnName("cAmountType");
            entity.Property(e => e.CAmountDescription)
                .HasMaxLength(50)
                .HasColumnName("cAmountDescription");
            entity.Property(e => e.NKostentyp).HasColumnName("nKostentyp");
        });

        modelBuilder.Entity<TSetup>(entity =>
        {
            entity.HasKey(e => new { e.KMandant, e.NAbgleichstyp, e.KZiel }).HasName("PK_Worker_tSetup");

            entity.ToTable("tSetup", "Worker");

            entity.Property(e => e.KMandant).HasColumnName("kMandant");
            entity.Property(e => e.NAbgleichstyp).HasColumnName("nAbgleichstyp");
            entity.Property(e => e.KZiel).HasColumnName("kZiel");
            entity.Property(e => e.NIntervall).HasColumnName("nIntervall");
            entity.Property(e => e.NRequestStatus).HasColumnName("nRequestStatus");
        });

        modelBuilder.Entity<TSfpversand>(entity =>
        {
            entity.HasKey(e => e.KSfpversand).HasName("PK_Amazon_tSFPVersand");

            entity.ToTable("tSFPVersand", "Amazon");

            entity.Property(e => e.KSfpversand).HasColumnName("kSFPVersand");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CShippingOption)
                .HasMaxLength(50)
                .HasColumnName("cShippingOption");
            entity.Property(e => e.FWarnIfLabelCostExceeds)
                .HasDefaultValueSql("((10))")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWarnIfLabelCostExceeds");
            entity.Property(e => e.KVersandArt).HasColumnName("kVersandArt");
            entity.Property(e => e.NPrintErrorLabel).HasColumnName("nPrintErrorLabel");

            entity.HasOne(d => d.KVersandArtNavigation).WithMany(p => p.TSfpversands)
                .HasForeignKey(d => d.KVersandArt)
                .HasConstraintName("FK_Amazon_tSFPVersand_kVersandArt");
        });

        modelBuilder.Entity<TShipperAccount>(entity =>
        {
            entity.HasKey(e => e.KShipperAccount).HasName("PK_dbo_tShipperAccount");

            entity.ToTable("tShipperAccount");

            entity.Property(e => e.KShipperAccount).HasColumnName("kShipperAccount");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAccessLicenceNumber)
                .HasMaxLength(20)
                .HasColumnName("cAccessLicenceNumber");
            entity.Property(e => e.CAddressadd)
                .HasMaxLength(255)
                .HasColumnName("cAddressadd");
            entity.Property(e => e.CBankAccountOwner)
                .HasMaxLength(255)
                .HasColumnName("cBankAccountOwner");
            entity.Property(e => e.CBankName)
                .HasMaxLength(255)
                .HasColumnName("cBankName");
            entity.Property(e => e.CBic)
                .HasMaxLength(20)
                .HasColumnName("cBic");
            entity.Property(e => e.CCity)
                .HasMaxLength(255)
                .HasColumnName("cCity");
            entity.Property(e => e.CCompany)
                .HasMaxLength(128)
                .HasColumnName("cCompany");
            entity.Property(e => e.CCompanyAdd)
                .HasMaxLength(255)
                .HasColumnName("cCompanyAdd");
            entity.Property(e => e.CConsignerId)
                .HasMaxLength(20)
                .HasColumnName("cConsignerId");
            entity.Property(e => e.CCountry)
                .HasMaxLength(255)
                .HasColumnName("cCountry");
            entity.Property(e => e.CCountryIso)
                .HasMaxLength(5)
                .HasColumnName("cCountryIso");
            entity.Property(e => e.CDisplayName)
                .HasMaxLength(255)
                .HasColumnName("cDisplayName");
            entity.Property(e => e.CEkp)
                .HasMaxLength(20)
                .HasColumnName("cEkp");
            entity.Property(e => e.CFirstname)
                .HasMaxLength(255)
                .HasColumnName("cFirstname");
            entity.Property(e => e.CGlsContactId)
                .HasMaxLength(25)
                .HasColumnName("cGlsContactId");
            entity.Property(e => e.CGlsCustomerId)
                .HasMaxLength(25)
                .HasColumnName("cGlsCustomerId");
            entity.Property(e => e.CIban)
                .HasMaxLength(50)
                .HasColumnName("cIban");
            entity.Property(e => e.CInternationalEkp)
                .HasMaxLength(20)
                .HasColumnName("cInternationalEkp");
            entity.Property(e => e.CLastname)
                .HasMaxLength(255)
                .HasColumnName("cLastname");
            entity.Property(e => e.CMail)
                .HasMaxLength(255)
                .HasColumnName("cMail");
            entity.Property(e => e.CMandatorId)
                .HasMaxLength(20)
                .HasColumnName("cMandatorId");
            entity.Property(e => e.CMobil)
                .HasMaxLength(30)
                .HasColumnName("cMobil");
            entity.Property(e => e.COrgUnitGuid)
                .HasMaxLength(128)
                .HasColumnName("cOrgUnitGuid");
            entity.Property(e => e.CPassword)
                .HasMaxLength(1000)
                .HasColumnName("cPassword");
            entity.Property(e => e.CPhone)
                .HasMaxLength(30)
                .HasColumnName("cPhone");
            entity.Property(e => e.CRetourenEkp)
                .HasMaxLength(14)
                .HasColumnName("cRetourenEkp");
            entity.Property(e => e.CSalutation)
                .HasMaxLength(30)
                .HasColumnName("cSalutation");
            entity.Property(e => e.CShipperNumber)
                .HasMaxLength(20)
                .HasColumnName("cShipperNumber");
            entity.Property(e => e.CShipperReference)
                .HasMaxLength(255)
                .HasColumnName("cShipperReference");
            entity.Property(e => e.CStreetname)
                .HasMaxLength(255)
                .HasColumnName("cStreetname");
            entity.Property(e => e.CStreetnumber)
                .HasMaxLength(20)
                .HasColumnName("cStreetnumber");
            entity.Property(e => e.CTitle)
                .HasMaxLength(64)
                .HasColumnName("cTitle");
            entity.Property(e => e.CUserName)
                .HasMaxLength(255)
                .HasColumnName("cUserName");
            entity.Property(e => e.CZipCode)
                .HasMaxLength(25)
                .HasColumnName("cZipCode");
            entity.Property(e => e.FCodFee)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fCodFee");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KOauthToken).HasColumnName("kOAuthToken");
            entity.Property(e => e.KShipperAccountParent).HasColumnName("kShipperAccountParent");
            entity.Property(e => e.KShippingServiceProviderType).HasColumnName("kShippingServiceProviderType");
            entity.Property(e => e.NAccountType).HasColumnName("nAccountType");
            entity.Property(e => e.NAddressSourceType).HasColumnName("nAddressSourceType");
            entity.Property(e => e.NTestAccount).HasColumnName("nTestAccount");
        });

        modelBuilder.Entity<TShippingDocument>(entity =>
        {
            entity.HasKey(e => e.KShippingDocument).HasName("PK_Shipping_tShippingDocument");

            entity.ToTable("tShippingDocument", "Shipping");

            entity.Property(e => e.KShippingDocument).HasColumnName("kShippingDocument");
            entity.Property(e => e.BData)
                .HasColumnType("image")
                .HasColumnName("bData");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CHash)
                .HasMaxLength(255)
                .HasColumnName("cHash");
            entity.Property(e => e.DDate)
                .HasColumnType("datetime")
                .HasColumnName("dDate");
            entity.Property(e => e.KVersand).HasColumnName("kVersand");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<TShippingMessage>(entity =>
        {
            entity.HasKey(e => e.KShippingMessage).HasName("PK_Shipping_tShippingMessage");

            entity.ToTable("tShippingMessage", "Shipping");

            entity.Property(e => e.KShippingMessage).HasColumnName("kShippingMessage");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CCode)
                .HasMaxLength(64)
                .HasColumnName("cCode");
            entity.Property(e => e.CMessageContent).HasColumnName("cMessageContent");
            entity.Property(e => e.CMessageShort)
                .HasMaxLength(256)
                .HasColumnName("cMessageShort");
            entity.Property(e => e.CRequestId)
                .HasMaxLength(36)
                .HasColumnName("cRequestId");
            entity.Property(e => e.DZeitstempel)
                .HasColumnType("datetime")
                .HasColumnName("dZeitstempel");
            entity.Property(e => e.KVersand).HasColumnName("kVersand");
            entity.Property(e => e.NIsTranslated).HasColumnName("nIsTranslated");
            entity.Property(e => e.NMessageSource).HasColumnName("nMessageSource");
            entity.Property(e => e.NMessageType).HasColumnName("nMessageType");
        });

        modelBuilder.Entity<TShippingMethodMapping>(entity =>
        {
            entity.HasKey(e => e.KShippingMethodMapping).HasName("PK_FulfillmentNetwork_tShippingMethodMapping");

            entity.ToTable("tShippingMethodMapping", "FulfillmentNetwork");

            entity.HasIndex(e => e.CShippingMethodId, "IX_FulfillmentNetwork_tShippingMethodMapping_cShippingMethodId");

            entity.HasIndex(e => new { e.NType, e.NDefault, e.NActive, e.KWarenlager, e.KVersandart }, "IX_FulfillmentNetwork_tShippingMethodMapping_nType_nDefault_nActive_kWarenlager_kVersandart");

            entity.HasIndex(e => new { e.CShippingMethodId, e.KVersandart, e.KWarenlager, e.NActive, e.NType }, "UQ_FulfillmentNetwork_tShippingMethodMapping_cShippingMethodId_kVersandart_kWarenlager_nActive_nType").IsUnique();

            entity.Property(e => e.KShippingMethodMapping).HasColumnName("kShippingMethodMapping");
            entity.Property(e => e.CShippingMethodId)
                .HasMaxLength(255)
                .HasColumnName("cShippingMethodId");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KVersandart).HasColumnName("kVersandart");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.NActive).HasColumnName("nActive");
            entity.Property(e => e.NDefault).HasColumnName("nDefault");
            entity.Property(e => e.NShippingType).HasColumnName("nShippingType");
            entity.Property(e => e.NType).HasColumnName("nType");

            entity.HasOne(d => d.KKundeNavigation).WithMany(p => p.TShippingMethodMappings)
                .HasForeignKey(d => d.KKunde)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_FulfillmentNetwork_tShippingMethodMapping_kKunde");

            entity.HasOne(d => d.KVersandartNavigation).WithMany(p => p.TShippingMethodMappings)
                .HasForeignKey(d => d.KVersandart)
                .HasConstraintName("FK_FulfillmentNetwork_tShippingMethodMapping_kVersandart");

            entity.HasOne(d => d.KWarenlagerNavigation).WithMany(p => p.TShippingMethodMappings)
                .HasForeignKey(d => d.KWarenlager)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_FulfillmentNetwork_tShippingMethodMapping_kWarenlager");
        });

        modelBuilder.Entity<TShippingPrinterConfiguration>(entity =>
        {
            entity.HasKey(e => e.KShippingDruckDetaileinstellung).HasName("PK_Shipping_tShippingPrinterConfiguration");

            entity.ToTable("tShippingPrinterConfiguration", "Shipping");

            entity.Property(e => e.KShippingDruckDetaileinstellung).HasColumnName("kShippingDruckDetaileinstellung");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CDruckerName)
                .HasMaxLength(255)
                .HasColumnName("cDruckerName");
            entity.Property(e => e.CRechnername)
                .HasMaxLength(255)
                .HasColumnName("cRechnername");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KPrintDocumentType).HasColumnName("kPrintDocumentType");
            entity.Property(e => e.NExemplare).HasColumnName("nExemplare");
            entity.Property(e => e.NOrientation).HasColumnName("nOrientation");
            entity.Property(e => e.NPageScaling).HasColumnName("nPageScaling");
            entity.Property(e => e.NShippingServiceProviderType).HasColumnName("nShippingServiceProviderType");
        });

        modelBuilder.Entity<TShippingRule>(entity =>
        {
            entity.HasKey(e => e.KShippingRule).HasName("PK_SCX_tShippingRule");

            entity.ToTable("tShippingRule", "SCX");

            entity.HasIndex(e => new { e.KChannel, e.CCarrierId }, "UQ_SCX_tShippingRule_kChannel_cCarrierId").IsUnique();

            entity.Property(e => e.KShippingRule).HasColumnName("kShippingRule");
            entity.Property(e => e.CCarrierId)
                .HasMaxLength(100)
                .HasColumnName("cCarrierId");
            entity.Property(e => e.CDisplayName)
                .HasMaxLength(150)
                .HasColumnName("cDisplayName");
            entity.Property(e => e.KChannel).HasColumnName("kChannel");

            entity.HasOne(d => d.KChannelNavigation).WithMany(p => p.TShippingRules)
                .HasForeignKey(d => d.KChannel)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SCX_tShippingRule_kChannel");
        });

        modelBuilder.Entity<TShippingRuleMapping>(entity =>
        {
            entity.HasKey(e => new { e.KVersandart, e.KShop }).HasName("PK_SCX_tShippingRuleMapping");

            entity.ToTable("tShippingRuleMapping", "SCX");

            entity.Property(e => e.KVersandart).HasColumnName("kVersandart");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KShippingRule).HasColumnName("kShippingRule");
        });

        modelBuilder.Entity<TShippingServiceProvider>(entity =>
        {
            entity.HasKey(e => e.KShippingServiceProvider).HasName("PK_Shipping_tShippingServiceProvider");

            entity.ToTable("tShippingServiceProvider", "Shipping");

            entity.Property(e => e.KShippingServiceProvider).HasColumnName("kShippingServiceProvider");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(64)
                .HasColumnName("cName");
            entity.Property(e => e.NBeta).HasColumnName("nBeta");
            entity.Property(e => e.NOrderNo).HasColumnName("nOrderNo");
            entity.Property(e => e.NShippingServiceProviderType).HasColumnName("nShippingServiceProviderType");
            entity.Property(e => e.NTrackingServiceProviderType).HasColumnName("nTrackingServiceProviderType");
            entity.Property(e => e.NVisible).HasColumnName("nVisible");
        });

        modelBuilder.Entity<TShop>(entity =>
        {
            entity.HasKey(e => e.KShop).HasName("PK_dbo_tShop");

            entity.ToTable("tShop", tb =>
                {
                    tb.HasTrigger("jtlActionValidator_tShop");
                    tb.HasTrigger("tgr_tShop_DEL");
                    tb.HasTrigger("tgr_tShop_INSUP");
                });

            entity.Property(e => e.KShop)
                .ValueGeneratedNever()
                .HasColumnName("kShop");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CApikey)
                .HasMaxLength(64)
                .HasColumnName("cAPIKey");
            entity.Property(e => e.CBelegDrucker)
                .HasMaxLength(128)
                .HasColumnName("cBelegDrucker");
            entity.Property(e => e.CBenutzerWeb)
                .HasMaxLength(32)
                .HasColumnName("cBenutzerWeb");
            entity.Property(e => e.CGutscheinDrucker)
                .HasMaxLength(128)
                .HasColumnName("cGutscheinDrucker");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CPasswortWeb)
                .HasMaxLength(255)
                .HasColumnName("cPasswortWeb");
            entity.Property(e => e.CServerWeb)
                .HasMaxLength(255)
                .HasColumnName("cServerWeb");
            entity.Property(e => e.KAlterShop).HasColumnName("kAlterShop");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KKategorie).HasColumnName("kKategorie");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.KWarenlagerPlatz).HasColumnName("kWarenlagerPlatz");
            entity.Property(e => e.KWarenlagerRetoure).HasColumnName("kWarenlagerRetoure");
            entity.Property(e => e.KWarenlagerRetourePlatz).HasColumnName("kWarenlagerRetourePlatz");
            entity.Property(e => e.NAktiv)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("nAktiv");
            entity.Property(e => e.NAngebot).HasColumnName("nAngebot");
            entity.Property(e => e.NGesperrt).HasColumnName("nGesperrt");
            entity.Property(e => e.NHttpPut).HasColumnName("nHttpPut");
            entity.Property(e => e.NShopAuftragsNr).HasColumnName("nShopAuftragsNr");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
            entity.Property(e => e.NWarenlagerPlatztyp).HasColumnName("nWarenlagerPlatztyp");
            entity.Property(e => e.NWarenlagerRetourePlatztyp).HasColumnName("nWarenlagerRetourePlatztyp");
        });

        modelBuilder.Entity<TShopConnectorFunktion>(entity =>
        {
            entity.HasKey(e => e.KShop).HasName("PK_dbo_tShopConnectorFunktion");

            entity.ToTable("tShopConnectorFunktion");

            entity.Property(e => e.KShop)
                .ValueGeneratedNever()
                .HasColumnName("kShop");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<TShopConnectorSynchronisierung>(entity =>
        {
            entity.HasKey(e => new { e.KShop, e.NEntity }).HasName("PK_dbo_tShopConnectorSynchronisierung");

            entity.ToTable("tShopConnectorSynchronisierung");

            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NEntity).HasColumnName("nEntity");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.NDelete).HasColumnName("nDelete");
            entity.Property(e => e.NPull).HasColumnName("nPull");
            entity.Property(e => e.NPush).HasColumnName("nPush");
        });

        modelBuilder.Entity<TShopKonfiguration>(entity =>
        {
            entity.HasKey(e => e.KShop).HasName("PK_dbo_tShopKonfiguration");

            entity.ToTable("tShopKonfiguration");

            entity.Property(e => e.KShop)
                .ValueGeneratedNever()
                .HasColumnName("kShop");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CVersandlandIso)
                .HasMaxLength(5)
                .HasColumnName("cVersandlandISO");
            entity.Property(e => e.NArtikelMergen).HasColumnName("nArtikelMergen");
            entity.Property(e => e.NBilderBeiImportLoeschen).HasColumnName("nBilderBeiImportLoeschen");
            entity.Property(e => e.NHerstellerGefiltertSenden).HasColumnName("nHerstellerGefiltertSenden");
            entity.Property(e => e.NImport).HasColumnName("nImport");
            entity.Property(e => e.NImportArtikelKategorien).HasColumnName("nImportArtikelKategorien");
            entity.Property(e => e.NImportBestellungenKunden).HasColumnName("nImportBestellungenKunden");
            entity.Property(e => e.NImportBilder).HasColumnName("nImportBilder");
            entity.Property(e => e.NKundendatenAktualisieren).HasColumnName("nKundendatenAktualisieren");
            entity.Property(e => e.NMaxBilder)
                .HasDefaultValueSql("((10))")
                .HasColumnName("nMaxBilder");
            entity.Property(e => e.NMaxEntities)
                .HasDefaultValueSql("((10))")
                .HasColumnName("nMaxEntities");
            entity.Property(e => e.NMaxMb)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nMaxMB");
            entity.Property(e => e.NMaxPull)
                .HasDefaultValueSql("((50))")
                .HasColumnName("nMaxPull");
            entity.Property(e => e.NMaxQuickSync)
                .HasDefaultValueSql("((10))")
                .HasColumnName("nMaxQuickSync");
            entity.Property(e => e.NSteuerDurchWawiBerechnen).HasColumnName("nSteuerDurchWawiBerechnen");
            entity.Property(e => e.NUpload).HasColumnName("nUpload");
            entity.Property(e => e.NUploadArtikelBestand).HasColumnName("nUploadArtikelBestand");
            entity.Property(e => e.NUploadArtikelKomplett).HasColumnName("nUploadArtikelKomplett");
            entity.Property(e => e.NUploadArtikelPreise).HasColumnName("nUploadArtikelPreise");
            entity.Property(e => e.NUploadBilder).HasColumnName("nUploadBilder");
            entity.Property(e => e.NUploadKundendaten).HasColumnName("nUploadKundendaten");
            entity.Property(e => e.NVersandSteuernDurchWawiBerechnen).HasColumnName("nVersandSteuernDurchWawiBerechnen");
        });

        modelBuilder.Entity<TShopKundenGruppe>(entity =>
        {
            entity.HasKey(e => e.KShopKundengruppe).HasName("PK_dbo_tShopKundenGruppe");

            entity.ToTable("tShopKundenGruppe", tb =>
                {
                    tb.HasTrigger("tgr_tShopKundenGruppe_DEL");
                    tb.HasTrigger("tgr_tShopKundenGruppe_INSUP");
                });

            entity.HasIndex(e => new { e.KKundenGruppe, e.KWebShop }, "IX_dbo_tShopKundenGruppe_kKundengruppe_kWebshop").IsUnique();

            entity.Property(e => e.KShopKundengruppe).HasColumnName("kShopKundengruppe");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");
            entity.Property(e => e.KWebShop).HasColumnName("kWebShop");
            entity.Property(e => e.NStandard).HasColumnName("nStandard");

            entity.HasOne(d => d.KKundenGruppeNavigation).WithMany(p => p.TShopKundenGruppes)
                .HasForeignKey(d => d.KKundenGruppe)
                .HasConstraintName("FK_dbo_tShopKundengruppe_kKundenGruppe");

            entity.HasOne(d => d.KWebShopNavigation).WithMany(p => p.TShopKundenGruppes)
                .HasForeignKey(d => d.KWebShop)
                .HasConstraintName("FK_dbo_tShopKundengruppe_kWebShop");
        });

        modelBuilder.Entity<TShopMappingKundengruppe>(entity =>
        {
            entity.HasKey(e => new { e.KKundengruppe, e.KShop }).HasName("PK_dbo_tShopMappingKundengruppe");

            entity.ToTable("tShopMappingKundengruppe", tb => tb.HasTrigger("tgr_tShopMappingKundengruppe_Connector"));

            entity.Property(e => e.KKundengruppe).HasColumnName("kKundengruppe");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CNameShop)
                .HasMaxLength(255)
                .HasColumnName("cNameShop");
            entity.Property(e => e.CPkshop)
                .HasMaxLength(50)
                .HasColumnName("cPKShop");
        });

        modelBuilder.Entity<TShopScx>(entity =>
        {
            entity.HasKey(e => e.KShopScx).HasName("PK_dbo_tShopScx");

            entity.ToTable("tShopScx");

            entity.HasIndex(e => new { e.CSellerId, e.KChannel }, "UQ_dbo_tShopScx_cSellerId_kChannel").IsUnique();

            entity.Property(e => e.KShopScx).HasColumnName("kShopScx");
            entity.Property(e => e.CChannel)
                .HasMaxLength(15)
                .HasColumnName("cChannel");
            entity.Property(e => e.CReason)
                .HasMaxLength(250)
                .HasColumnName("cReason");
            entity.Property(e => e.CSellerId)
                .HasMaxLength(50)
                .HasColumnName("cSellerId");
            entity.Property(e => e.DCreated)
                .HasColumnType("datetime")
                .HasColumnName("dCreated");
            entity.Property(e => e.DSellerAttributeAktualisierungUtc).HasColumnName("dSellerAttributeAktualisierungUtc");
            entity.Property(e => e.DUpdated)
                .HasColumnType("datetime")
                .HasColumnName("dUpdated");
            entity.Property(e => e.KChannel).HasColumnName("kChannel");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KVersandart).HasColumnName("kVersandart");
            entity.Property(e => e.NLoeschintervallBeendetAngebot)
                .HasDefaultValueSql("((14))")
                .HasColumnName("nLoeschintervallBeendetAngebot");
            entity.Property(e => e.NLoeschintervallSchwebendAngebot)
                .HasDefaultValueSql("((3))")
                .HasColumnName("nLoeschintervallSchwebendAngebot");

            entity.HasOne(d => d.KChannelNavigation).WithMany(p => p.TShopScxes)
                .HasForeignKey(d => d.KChannel)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo_tShopScx_kChannel");
        });

        modelBuilder.Entity<TShopSprache>(entity =>
        {
            entity.HasKey(e => new { e.KWebShop, e.KSprache }).HasName("PK_dbo_tShopSprache");

            entity.ToTable("tShopSprache");

            entity.Property(e => e.KWebShop).HasColumnName("kWebShop");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.NStandard).HasColumnName("nStandard");
        });

        modelBuilder.Entity<TShopSubshop>(entity =>
        {
            entity.HasKey(e => e.KShopSubshop).HasName("PK_dbo_tShopSubshop");

            entity.ToTable("tShopSubshop");

            entity.Property(e => e.KShopSubshop).HasColumnName("kShopSubshop");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAuthToken)
                .HasMaxLength(255)
                .HasColumnName("cAuthToken");
            entity.Property(e => e.CIdentifier)
                .HasMaxLength(50)
                .HasColumnName("cIdentifier");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NGesperrt).HasColumnName("nGesperrt");
            entity.Property(e => e.NMaxLastChanged).HasColumnName("nMaxLastChanged");
        });

        modelBuilder.Entity<TShopUeberverkaeufeMoeglich>(entity =>
        {
            entity.HasKey(e => e.KShopUeberverkaeufeMoeglich).HasName("PK_dbo_tShopUeberverkaeufeMoeglich");

            entity.ToTable("tShopUeberverkaeufeMoeglich", tb => tb.HasTrigger("tgr_tShopUeberverkaeufeMoeglich_Connector"));

            entity.HasIndex(e => new { e.KArtikel, e.KShop, e.NPlattform }, "UQ_dbo_tShopUeberverkaeufeMoeglich_kArtikel_kShop_nPlattform").IsUnique();

            entity.Property(e => e.KShopUeberverkaeufeMoeglich).HasColumnName("kShopUeberverkaeufeMoeglich");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NPlattform).HasColumnName("nPlattform");

            entity.HasOne(d => d.KArtikelNavigation).WithMany(p => p.TShopUeberverkaeufeMoegliches)
                .HasForeignKey(d => d.KArtikel)
                .HasConstraintName("FK_dbo_tShopUeberverkaeufeMoeglich_kArtikel");

            entity.HasOne(d => d.KShopNavigation).WithMany(p => p.TShopUeberverkaeufeMoegliches)
                .HasForeignKey(d => d.KShop)
                .HasConstraintName("FK_dbo_tShopUeberverkaeufeMoeglich_kShop");

            entity.HasOne(d => d.NPlattformNavigation).WithMany(p => p.TShopUeberverkaeufeMoegliches)
                .HasForeignKey(d => d.NPlattform)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo_tShopUeberverkaeufeMoeglich_nPlattform");
        });

        modelBuilder.Entity<TShopWaehrung>(entity =>
        {
            entity.HasKey(e => new { e.KWebShop, e.KWaehrung }).HasName("PK_dbo_tShopWaehrung");

            entity.ToTable("tShopWaehrung");

            entity.Property(e => e.KWebShop).HasColumnName("kWebShop");
            entity.Property(e => e.KWaehrung).HasColumnName("kWaehrung");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.NStandard).HasColumnName("nStandard");
        });

        modelBuilder.Entity<TSonderpreise>(entity =>
        {
            entity.HasKey(e => new { e.KArtikelSonderpreis, e.KKundenGruppe, e.KShop }).HasName("PK_dbo_tSonderpreise");

            entity.ToTable("tSonderpreise", tb =>
                {
                    tb.HasTrigger("tgr_tSonderpreise_DEL");
                    tb.HasTrigger("tgr_tSonderpreise_INSUP");
                });

            entity.Property(e => e.KArtikelSonderpreis).HasColumnName("kArtikelSonderpreis");
            entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.FNettoPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fNettoPreis");
        });

        modelBuilder.Entity<TSpracheUsed>(entity =>
        {
            entity.HasKey(e => e.KSprache).HasName("PK_dbo_tSpracheUsed");

            entity.ToTable("tSpracheUsed", tb =>
                {
                    tb.HasTrigger("jtlActionValidator_tSpracheUsed");
                    tb.HasTrigger("tgr_tSpracheUsed_UPDATE");
                });

            entity.HasIndex(e => new { e.NStandard, e.KSprache }, "IX_tSpracheUsed_kSprache_nStandard");

            entity.Property(e => e.KSprache)
                .ValueGeneratedNever()
                .HasColumnName("kSprache");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CIso)
                .HasMaxLength(10)
                .HasColumnName("cISO");
            entity.Property(e => e.CIso2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cISO2");
            entity.Property(e => e.CKultur)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("cKultur");
            entity.Property(e => e.CNameDeu)
                .HasMaxLength(255)
                .HasColumnName("cNameDeu");
            entity.Property(e => e.CNameEng)
                .HasMaxLength(255)
                .HasColumnName("cNameEng");
            entity.Property(e => e.NStandard).HasColumnName("nStandard");
        });

        modelBuilder.Entity<TSprachen>(entity =>
        {
            entity.HasKey(e => e.KSprache).HasName("PK_dbo_tSprachen");

            entity.ToTable("tSprachen");

            entity.HasIndex(e => e.CIso, "UQ_dbo_tSprachen_cISO").IsUnique();

            entity.HasIndex(e => e.CIso2, "UQ_dbo_tSprachen_cISO2").IsUnique();

            entity.Property(e => e.KSprache)
                .ValueGeneratedNever()
                .HasColumnName("kSprache");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CIso)
                .HasMaxLength(10)
                .HasColumnName("cISO");
            entity.Property(e => e.CIso2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cISO2");
            entity.Property(e => e.CKultur)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("cKultur");
            entity.Property(e => e.CNameDeu)
                .HasMaxLength(255)
                .HasColumnName("cNameDeu");
            entity.Property(e => e.CNameEng)
                .HasMaxLength(255)
                .HasColumnName("cNameEng");
        });

        modelBuilder.Entity<TSqlError>(entity =>
        {
            entity.HasKey(e => e.KSqlError).HasName("PK_dbo_tSqlError");

            entity.ToTable("tSqlError");

            entity.Property(e => e.KSqlError).HasColumnName("kSqlError");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CErrorData)
                .HasColumnType("xml")
                .HasColumnName("cErrorData");
            entity.Property(e => e.KErrorMessage).HasColumnName("kErrorMessage");

            entity.HasOne(d => d.KErrorMessageNavigation).WithMany(p => p.TSqlErrors)
                .HasForeignKey(d => d.KErrorMessage)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo_tSqlError_kErrorMessage");
        });

        modelBuilder.Entity<TSqlErrorMessage>(entity =>
        {
            entity.HasKey(e => e.KErrorMessage).HasName("PK_dbo_tSqlErrorMessages");

            entity.ToTable("tSqlErrorMessages");

            entity.Property(e => e.KErrorMessage).HasColumnName("kErrorMessage");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CErrorMessage).HasColumnName("cErrorMessage");
            entity.Property(e => e.CExceptionName)
                .HasMaxLength(512)
                .HasColumnName("cExceptionName");
            entity.Property(e => e.CSpName)
                .HasMaxLength(255)
                .HasColumnName("cSpName");
        });

        modelBuilder.Entity<TStampit>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tStampit");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.NAktiv).HasColumnName("nAktiv");
        });

        modelBuilder.Entity<TState>(entity =>
        {
            entity.HasKey(e => e.KState).HasName("PK_Shipping_tState");

            entity.ToTable("tState", "Shipping");

            entity.HasIndex(e => e.KPackage, "IX_tState_kPackage");

            entity.Property(e => e.KState).HasColumnName("kState");
            entity.Property(e => e.CCountry)
                .HasMaxLength(100)
                .HasColumnName("cCountry");
            entity.Property(e => e.CLocation)
                .HasMaxLength(100)
                .HasColumnName("cLocation");
            entity.Property(e => e.CProviderState)
                .HasMaxLength(512)
                .HasColumnName("cProviderState");
            entity.Property(e => e.CText).HasColumnName("cText");
            entity.Property(e => e.DDate)
                .HasColumnType("datetime")
                .HasColumnName("dDate");
            entity.Property(e => e.KPackage).HasColumnName("kPackage");
            entity.Property(e => e.KStateServer).HasColumnName("kStateServer");
            entity.Property(e => e.NStateType).HasColumnName("nStateType");

            entity.HasOne(d => d.KPackageNavigation).WithMany(p => p.TStates)
                .HasForeignKey(d => d.KPackage)
                .HasConstraintName("FK_Shipping_tState_kPackage");
        });

        modelBuilder.Entity<TStatistic>(entity =>
        {
            entity.HasKey(e => e.KStatistics).HasName("PK_Mobile_tStatistics");

            entity.ToTable("tStatistics", "Mobile");

            entity.Property(e => e.KStatistics).HasColumnName("kStatistics");
            entity.Property(e => e.CDescription)
                .HasMaxLength(1000)
                .HasColumnName("cDescription");
            entity.Property(e => e.CName)
                .HasMaxLength(100)
                .HasColumnName("cName");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KStatistikVorlage).HasColumnName("kStatistikVorlage");
            entity.Property(e => e.NDiagramType).HasColumnName("nDiagramType");
            entity.Property(e => e.NKeyLabelsVisible).HasColumnName("nKeyLabelsVisible");
            entity.Property(e => e.NMajorLinesVisibility).HasColumnName("nMajorLinesVisibility");
            entity.Property(e => e.NRotateLabels).HasColumnName("nRotateLabels");
            entity.Property(e => e.NStripLinesVisibility).HasColumnName("nStripLinesVisibility");
            entity.Property(e => e.NValueLabelsVisible).HasColumnName("nValueLabelsVisible");
        });

        modelBuilder.Entity<TStatistikAuswertungstyp>(entity =>
        {
            entity.HasKey(e => e.KStatistikAuswertungstyp).HasName("PK_dbo_tStatistikAuswertungstyp");

            entity.ToTable("tStatistikAuswertungstyp");

            entity.Property(e => e.KStatistikAuswertungstyp)
                .ValueGeneratedNever()
                .HasColumnName("kStatistikAuswertungstyp");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<TStatistikBenutzerordner>(entity =>
        {
            entity.HasKey(e => e.KStatistikBenutzerordner).HasName("PK_dbo_tStatistikBenutzerordner");

            entity.ToTable("tStatistikBenutzerordner");

            entity.Property(e => e.KStatistikBenutzerordner).HasColumnName("kStatistikBenutzerordner");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(100)
                .HasColumnName("cName");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KStatistikBenutzerordnerVater).HasColumnName("kStatistikBenutzerordnerVater");
        });

        modelBuilder.Entity<TStatistikEazyShipping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tStatistikEazyShipping", "WMS");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DEndZeit)
                .HasColumnType("datetime")
                .HasColumnName("dEndZeit");
            entity.Property(e => e.DMilliSec).HasColumnName("dMilliSec");
            entity.Property(e => e.DSekunden).HasColumnName("dSekunden");
            entity.Property(e => e.DStartZeit)
                .HasColumnType("datetime")
                .HasColumnName("dStartZeit");
            entity.Property(e => e.DTimeStamp)
                .HasColumnType("datetime")
                .HasColumnName("dTimeStamp");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.NAnzahlWarenlagerAusgaenge).HasColumnName("nAnzahlWarenlagerAusgaenge");
            entity.Property(e => e.NAnzahlWmspackItem).HasColumnName("nAnzahlWMSPackItem");
            entity.Property(e => e.NAnzahlWmspackItemData).HasColumnName("nAnzahlWMSPackItemData");
        });

        modelBuilder.Entity<TStatistikPicklisten>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tStatistikPicklisten", "WMS");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.DEndZeit)
                .HasColumnType("datetime")
                .HasColumnName("dEndZeit");
            entity.Property(e => e.DMilliSec).HasColumnName("dMilliSec");
            entity.Property(e => e.DSekunden).HasColumnName("dSekunden");
            entity.Property(e => e.DStartZeit)
                .HasColumnType("datetime")
                .HasColumnName("dStartZeit");
            entity.Property(e => e.DTimeStamp)
                .HasColumnType("datetime")
                .HasColumnName("dTimeStamp");
            entity.Property(e => e.KPicklisteVorlage).HasColumnName("kPicklisteVorlage");
            entity.Property(e => e.NAnzahlAuftraege).HasColumnName("nAnzahlAuftraege");
        });

        modelBuilder.Entity<TStatistikSteuerelement>(entity =>
        {
            entity.HasKey(e => new { e.KStatistikVorlage, e.CName }).HasName("PK_dbo_tStatistikSteuerelement");

            entity.ToTable("tStatistikSteuerelement");

            entity.Property(e => e.KStatistikVorlage).HasColumnName("kStatistikVorlage");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CValue).HasColumnName("cValue");
        });

        modelBuilder.Entity<TStatistikVorlage>(entity =>
        {
            entity.HasKey(e => e.KStatistikVorlage).HasName("PK_dbo_tStatistikVorlage");

            entity.ToTable("tStatistikVorlage");

            entity.HasIndex(e => e.KStatistikAuswertungstyp, "IX_tStatistikVorlage_kStatistikAuswertungstyp");

            entity.HasIndex(e => e.KStatistikVorlageOrdner, "IX_tStatistikVorlage_kStatistikVorlageOrdner");

            entity.Property(e => e.KStatistikVorlage).HasColumnName("kStatistikVorlage");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBeschreibung).HasColumnName("cBeschreibung");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CSpaltennameSeries)
                .HasMaxLength(255)
                .HasColumnName("cSpaltennameSeries");
            entity.Property(e => e.CSpaltennameX)
                .HasMaxLength(255)
                .HasColumnName("cSpaltennameX");
            entity.Property(e => e.CSql).HasColumnName("cSQL");
            entity.Property(e => e.CZeitraum)
                .HasMaxLength(30)
                .HasColumnName("cZeitraum");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KStatistikAuswertungstyp).HasColumnName("kStatistikAuswertungstyp");
            entity.Property(e => e.KStatistikVorlageOrdner).HasColumnName("kStatistikVorlageOrdner");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<TStatistikVorlageChartEinstellung>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tStatistikVorlageChartEinstellung");

            entity.HasIndex(e => e.KStatistikVorlage, "IX_tStatistikVorlageChartEinstellung_kStatistikVorlage");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CValue)
                .HasMaxLength(255)
                .HasColumnName("cValue");
            entity.Property(e => e.KStatistikVorlage).HasColumnName("kStatistikVorlage");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<TStatistikVorlageOrdner>(entity =>
        {
            entity.HasKey(e => e.KStatistikVorlageOrdner).HasName("PK_dbo_tStatistikVorlageOrdner");

            entity.ToTable("tStatistikVorlageOrdner");

            entity.HasIndex(e => e.KStatistikVorlageOrdnerParent, "IX_tStatistikVorlageOrdner_kStatistikVorlageOrdnerParent");

            entity.Property(e => e.KStatistikVorlageOrdner).HasColumnName("kStatistikVorlageOrdner");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KStatistikVorlageOrdnerParent).HasColumnName("kStatistikVorlageOrdnerParent");
            entity.Property(e => e.NIntern).HasColumnName("nIntern");
        });

        modelBuilder.Entity<TStatistikvorlagenOrdnerzuordnung>(entity =>
        {
            entity.HasKey(e => new { e.KStatistikBenutzerordner, e.KStatistikvorlagenserialisierung }).HasName("PK_dbo_tStatistikvorlagenOrdnerzuordnung");

            entity.ToTable("tStatistikvorlagenOrdnerzuordnung");

            entity.Property(e => e.KStatistikBenutzerordner).HasColumnName("kStatistikBenutzerordner");
            entity.Property(e => e.KStatistikvorlagenserialisierung).HasColumnName("kStatistikvorlagenserialisierung");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
        });

        modelBuilder.Entity<TStatistikvorlagenserialisierung>(entity =>
        {
            entity.HasKey(e => e.KStatistikvorlagenserialisierung).HasName("PK_dbo_tStatistikvorlagenserialisierung");

            entity.ToTable("tStatistikvorlagenserialisierung");

            entity.Property(e => e.KStatistikvorlagenserialisierung).HasColumnName("kStatistikvorlagenserialisierung");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAuswertungsvorlage).HasColumnName("cAuswertungsvorlage");
            entity.Property(e => e.CBeschreibung)
                .HasMaxLength(1000)
                .HasColumnName("cBeschreibung");
            entity.Property(e => e.CDarstellungsvorlage).HasColumnName("cDarstellungsvorlage");
            entity.Property(e => e.CName)
                .HasMaxLength(100)
                .HasColumnName("cName");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
        });

        modelBuilder.Entity<TStatus>(entity =>
        {
            entity.HasKey(e => e.KStatus).HasName("PK_Ticketsystem_tStatus");

            entity.ToTable("tStatus", "Ticketsystem");

            entity.HasIndex(e => e.CName, "UQ_Ticketsystem_tStatus_cName").IsUnique();

            entity.Property(e => e.KStatus).HasColumnName("kStatus");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.NIsDefault).HasColumnName("nIsDefault");
        });

        modelBuilder.Entity<TStatus1>(entity =>
        {
            entity.HasKey(e => new { e.KMandant, e.NAbgleichstyp, e.KZiel }).HasName("PK_Worker_tStatus");

            entity.ToTable("tStatus", "Worker");

            entity.Property(e => e.KMandant).HasColumnName("kMandant");
            entity.Property(e => e.NAbgleichstyp).HasColumnName("nAbgleichstyp");
            entity.Property(e => e.KZiel).HasColumnName("kZiel");
            entity.Property(e => e.CProgressText)
                .HasMaxLength(256)
                .HasColumnName("cProgressText");
            entity.Property(e => e.DZeitstempelUtc)
                .HasColumnType("datetime")
                .HasColumnName("dZeitstempelUtc");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<TStepLimit>(entity =>
        {
            entity.HasKey(e => e.KStepLimit).HasName("PK_Sync_tStepLimit");

            entity.ToTable("tStepLimit", "Sync");

            entity.HasIndex(e => new { e.KShop, e.BStepId }, "UQ_Sync_tStepLimit_kShop_bStepId").IsUnique();

            entity.Property(e => e.KStepLimit).HasColumnName("kStepLimit");
            entity.Property(e => e.BStepId).HasColumnName("bStepId");
            entity.Property(e => e.CStepName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cStepName");
            entity.Property(e => e.DErrorTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dErrorTime");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NCurrentLimit).HasColumnName("nCurrentLimit");
            entity.Property(e => e.NErrorCounter).HasColumnName("nErrorCounter");
        });

        modelBuilder.Entity<TSteuerSammelkonten>(entity =>
        {
            entity.HasKey(e => e.KSteuerSammelkonten).HasName("PK_dbo_tSteuerSammelkonten");

            entity.ToTable("tSteuerSammelkonten");

            entity.Property(e => e.KSteuerSammelkonten).HasColumnName("kSteuerSammelkonten");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CSammelkonto)
                .HasMaxLength(8)
                .HasColumnName("cSammelkonto");
        });

        modelBuilder.Entity<TSteuercache>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tSteuercache");

            entity.HasIndex(e => new { e.KFirma, e.KSteuerklasse }, "IX_tSteuerCache_kSteuerklasse_kFirma_INCL");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.FSteuersatz)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fSteuersatz");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");
            entity.Property(e => e.KSteuerzone).HasColumnName("kSteuerzone");
        });

        modelBuilder.Entity<TSteuerklasse>(entity =>
        {
            entity.HasKey(e => e.KSteuerklasse).HasName("PK_dbo_tSteuerklasse");

            entity.ToTable("tSteuerklasse", tb => tb.HasTrigger("tgr_tSteuerklasse_Connector"));

            entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.NStandard).HasColumnName("nStandard");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<TSteuersatz>(entity =>
        {
            entity.HasKey(e => e.KSteuersatz).HasName("PK_dbo_tSteuersatz");

            entity.ToTable("tSteuersatz", tb =>
                {
                    tb.HasTrigger("jtlActionValidator_tSteuersatz");
                    tb.HasTrigger("tgr_tSteuersatz_Connector");
                });

            entity.HasIndex(e => e.KSteuerzone, "IX_dbo_tSteuersatz_kSteuerzone_INCL");

            entity.HasIndex(e => new { e.KSteuerklasse, e.KSteuerzone }, "UQ_dbo_tSteuersatz_kSteuerklasse_kSteuerzone").IsUnique();

            entity.Property(e => e.KSteuersatz).HasColumnName("kSteuersatz");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.FSteuersatz)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fSteuersatz");
            entity.Property(e => e.KStSchl).HasColumnName("kStSchl");
            entity.Property(e => e.KStSchlIgl).HasColumnName("kStSchlIGL");
            entity.Property(e => e.KStSchlReverse).HasColumnName("kStSchlReverse");
            entity.Property(e => e.KStSchlUstIgl).HasColumnName("kStSchlUStIGL");
            entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");
            entity.Property(e => e.KSteuerzone).HasColumnName("kSteuerzone");
            entity.Property(e => e.NPrio).HasColumnName("nPrio");
        });

        modelBuilder.Entity<TSteuersatzschluessel>(entity =>
        {
            entity.HasKey(e => new { e.KSteuersatz, e.KWarengruppe, e.KVersandart, e.NPositionstyp }).HasName("PK_dbo_tSteuersatzschluessel");

            entity.ToTable("tSteuersatzschluessel", tb => tb.HasTrigger("tgr_tSteuersatzschluessel_Connector"));

            entity.Property(e => e.KSteuersatz).HasColumnName("kSteuersatz");
            entity.Property(e => e.KWarengruppe).HasColumnName("kWarengruppe");
            entity.Property(e => e.KVersandart).HasColumnName("kVersandart");
            entity.Property(e => e.NPositionstyp).HasColumnName("nPositionstyp");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KStSchlIgl).HasColumnName("kStSchlIGL");
            entity.Property(e => e.KStSchlReverse).HasColumnName("kStSchlReverse");
            entity.Property(e => e.KStSchlUstIgl).HasColumnName("kStSchlUStIGL");
            entity.Property(e => e.KSteuerschluessel).HasColumnName("kSteuerschluessel");
        });

        modelBuilder.Entity<TSteuerschluessel>(entity =>
        {
            entity.HasKey(e => e.KSteuerschluessel).HasName("PK_dbo_tSteuerschluessel");

            entity.ToTable("tSteuerschluessel", tb => tb.HasTrigger("tgr_tSteuerschluessel_Connector"));

            entity.HasIndex(e => e.NSchluesselnummer, "UQ_dbo_tSteuerschluessel_nSchluesselnummer").IsUnique();

            entity.Property(e => e.KSteuerschluessel).HasColumnName("kSteuerschluessel");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAnzahlungskonto)
                .HasMaxLength(10)
                .HasColumnName("cAnzahlungskonto");
            entity.Property(e => e.CAusbuchungskonto)
                .HasMaxLength(10)
                .HasColumnName("cAusbuchungskonto");
            entity.Property(e => e.CBonuskonto)
                .HasMaxLength(10)
                .HasColumnName("cBonuskonto");
            entity.Property(e => e.CErloeskonto)
                .HasMaxLength(10)
                .HasColumnName("cErloeskonto");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CSkontokonto)
                .HasMaxLength(10)
                .HasColumnName("cSkontokonto");
            entity.Property(e => e.CSteuerkonto)
                .HasMaxLength(10)
                .HasColumnName("cSteuerkonto");
            entity.Property(e => e.NAnzahlung).HasColumnName("nAnzahlung");
            entity.Property(e => e.NAutomatik).HasColumnName("nAutomatik");
            entity.Property(e => e.NSchluesselnummer).HasColumnName("nSchluesselnummer");
        });

        modelBuilder.Entity<TSteuerzone>(entity =>
        {
            entity.HasKey(e => e.KSteuerzone).HasName("PK_dbo_tSteuerzone");

            entity.ToTable("tSteuerzone", tb => tb.HasTrigger("jtlActionValidator_tSteuerzone"));

            entity.Property(e => e.KSteuerzone).HasColumnName("kSteuerzone");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CLandIso)
                .HasMaxLength(5)
                .HasColumnName("cLandISO");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.NUstIdB2b).HasColumnName("nUstIdB2B");
            entity.Property(e => e.NUstIdB2c).HasColumnName("nUstIdB2C");
        });

        modelBuilder.Entity<TSteuerzoneLand>(entity =>
        {
            entity.HasKey(e => new { e.KSteuerzone, e.CIso, e.CKuerzelBundesland }).HasName("PK_dbo_tSteuerzoneLand");

            entity.ToTable("tSteuerzoneLand", tb => tb.HasTrigger("tgr_tSteuerzoneLand_Connector"));

            entity.Property(e => e.KSteuerzone).HasColumnName("kSteuerzone");
            entity.Property(e => e.CIso)
                .HasMaxLength(5)
                .HasColumnName("cISO");
            entity.Property(e => e.CKuerzelBundesland)
                .HasMaxLength(5)
                .HasColumnName("cKuerzelBundesland");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
        });

        modelBuilder.Entity<TStockRef>(entity =>
        {
            entity.HasKey(e => e.KStockRef).HasName("PK_FulfillmentNetwork_tStockRef");

            entity.ToTable("tStockRef", "FulfillmentNetwork");

            entity.HasIndex(e => e.KArtikel, "IX_FulfillmentNetwork_tStockRef_kArtikel");

            entity.HasIndex(e => e.KLieferantenBestellungPos, "IX_FulfillmentNetwork_tStockRef_kLieferantenBestellungPos");

            entity.HasIndex(e => e.KWarenLagerPlatz, "IX_FulfillmentNetwork_tStockRef_kWarenLagerPlatz");

            entity.Property(e => e.KStockRef).HasColumnName("kStockRef");
            entity.Property(e => e.BRowVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowVersion");
            entity.Property(e => e.CCharge)
                .HasMaxLength(255)
                .HasColumnName("cCharge");
            entity.Property(e => e.CFulfillerStockChangeId).HasColumnName("cFulfillerStockChangeId");
            entity.Property(e => e.CKommentar)
                .HasMaxLength(255)
                .HasColumnName("cKommentar");
            entity.Property(e => e.CLieferscheinNr)
                .HasMaxLength(255)
                .HasColumnName("cLieferscheinNr");
            entity.Property(e => e.COwnerId)
                .HasMaxLength(10)
                .HasColumnName("cOwnerId");
            entity.Property(e => e.DCreatedAt).HasColumnName("dCreatedAt");
            entity.Property(e => e.DMhd)
                .HasColumnType("datetime")
                .HasColumnName("dMHD");
            entity.Property(e => e.DUpdatedAt).HasColumnName("dUpdatedAt");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBuchungsart).HasColumnName("kBuchungsart");
            entity.Property(e => e.KLieferantenBestellungPos).HasColumnName("kLieferantenBestellungPos");
            entity.Property(e => e.KSessionId).HasColumnName("kSessionId");
            entity.Property(e => e.KWarenLagerEingang).HasColumnName("kWarenLagerEingang");
            entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");
            entity.Property(e => e.NBlocked).HasColumnName("nBlocked");
            entity.Property(e => e.NChangeState).HasColumnName("nChangeState");
            entity.Property(e => e.NType).HasColumnName("nType");

            entity.HasOne(d => d.KArtikelNavigation).WithMany(p => p.TStockRefs)
                .HasForeignKey(d => d.KArtikel)
                .HasConstraintName("FK_FulfillmentNetwork_tStockRef_kArtikel");
        });

        modelBuilder.Entity<TStueckliste>(entity =>
        {
            entity.HasKey(e => new { e.KStueckliste, e.KArtikel }).HasName("PK_dbo_tStueckliste");

            entity.ToTable("tStueckliste", tb =>
                {
                    tb.HasTrigger("tgr_tStueckliste_DEL");
                    tb.HasTrigger("tgr_tStueckliste_INSUP");
                });

            entity.HasIndex(e => e.KArtikel, "IX_tStueckliste_kArtikel");

            entity.HasIndex(e => e.KStueckliste, "IX_tStueckliste_kStueckliste");

            entity.HasIndex(e => new { e.KArtikel, e.KStueckliste, e.NSort }, "UQ_dbo_tStueckliste_kArtikel_kStueckliste_nSort").IsUnique();

            entity.Property(e => e.KStueckliste).HasColumnName("kStueckliste");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CKommentar)
                .HasMaxLength(255)
                .HasDefaultValueSql("('')")
                .HasColumnName("cKommentar");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.KVaterArtikel)
                .HasDefaultValueSql("((-1))")
                .HasColumnName("kVaterArtikel");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<TSubStatistikZustand>(entity =>
        {
            entity.HasKey(e => new { e.KBenutzer, e.KSubStatistik }).HasName("PK_dbo_tSubStatistikZustand");

            entity.ToTable("tSubStatistikZustand");

            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KSubStatistik).HasColumnName("kSubStatistik");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CWert).HasColumnName("cWert");
        });

        modelBuilder.Entity<TSubscriptionInformation>(entity =>
        {
            entity.HasKey(e => e.NShippingProduct).HasName("PK_Shipping_tSubscriptionInformation");

            entity.ToTable("tSubscriptionInformation", "Shipping");

            entity.Property(e => e.NShippingProduct)
                .ValueGeneratedNever()
                .HasColumnName("nShippingProduct");
            entity.Property(e => e.CSubscription)
                .HasMaxLength(255)
                .HasColumnName("cSubscription");
            entity.Property(e => e.DNextUpdate)
                .HasColumnType("datetime")
                .HasColumnName("dNextUpdate");
            entity.Property(e => e.NValid).HasColumnName("nValid");
        });

        modelBuilder.Entity<TSyncDelete>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tSyncDelete", "Sync");

            entity.Property(e => e.BRowversion)
                .HasMaxLength(8)
                .IsFixedLength()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CTabelle)
                .HasMaxLength(255)
                .HasColumnName("cTabelle");
            entity.Property(e => e.KKey).HasColumnName("kKey");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KShop).HasColumnName("kShop");
        });

        modelBuilder.Entity<TSyncLogsitzung>(entity =>
        {
            entity.HasKey(e => e.KSyncLogsitzung).HasName("PK_Sync_tSyncLogsitzung");

            entity.ToTable("tSyncLogsitzung", "Sync");

            entity.Property(e => e.KSyncLogsitzung).HasColumnName("kSyncLogsitzung");
            entity.Property(e => e.CRechnername)
                .HasMaxLength(64)
                .HasColumnName("cRechnername");
            entity.Property(e => e.CStatusMeldung)
                .HasMaxLength(2048)
                .HasColumnName("cStatusMeldung");
            entity.Property(e => e.DEnde)
                .HasColumnType("datetime")
                .HasColumnName("dEnde");
            entity.Property(e => e.DStart)
                .HasColumnType("datetime")
                .HasColumnName("dStart");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<TSyncStatus>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tSyncStatus", "Sync");

            entity.Property(e => e.BStartRowversion)
                .HasMaxLength(8)
                .IsFixedLength()
                .HasColumnName("bStartRowversion");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KSyncType).HasColumnName("kSyncType");
        });

        modelBuilder.Entity<TSyncType>(entity =>
        {
            entity.HasKey(e => e.KSyncType).HasName("PK_Sync_tSyncType");

            entity.ToTable("tSyncType", "Sync");

            entity.Property(e => e.KSyncType)
                .ValueGeneratedNever()
                .HasColumnName("kSyncType");
            entity.Property(e => e.CBeschreibung)
                .HasMaxLength(500)
                .HasColumnName("cBeschreibung");
            entity.Property(e => e.CName)
                .HasMaxLength(100)
                .HasColumnName("cName");
        });

        modelBuilder.Entity<TTelefonat>(entity =>
        {
            entity.HasKey(e => e.KTelefonat).HasName("PK_Ticketsystem_tTelefonat");

            entity.ToTable("tTelefonat", "Ticketsystem");

            entity.Property(e => e.KTelefonat).HasColumnName("kTelefonat");
            entity.Property(e => e.CTelefonnummer)
                .HasMaxLength(20)
                .HasColumnName("cTelefonnummer");
            entity.Property(e => e.DErstellung)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dErstellung");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KFileHtmlInhalt).HasColumnName("kFile_HtmlInhalt");
            entity.Property(e => e.KTicket).HasColumnName("kTicket");
            entity.Property(e => e.NRichtung).HasColumnName("nRichtung");

            entity.HasOne(d => d.KFileHtmlInhaltNavigation).WithMany(p => p.TTelefonats)
                .HasForeignKey(d => d.KFileHtmlInhalt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Ticketsystem_tTelefonat_kFile_HtmlInhalt");

            entity.HasOne(d => d.KTicketNavigation).WithMany(p => p.TTelefonats)
                .HasForeignKey(d => d.KTicket)
                .HasConstraintName("FK_Ticketsystem_tTelefonat_kTicket");
        });

        modelBuilder.Entity<TTelefonatAnhang>(entity =>
        {
            entity.HasKey(e => e.KTelefonatAnhang).HasName("PK_Ticketsystem_tTelefonatAnhang");

            entity.ToTable("tTelefonatAnhang", "Ticketsystem");

            entity.HasIndex(e => new { e.KTelefonat, e.KAnhang }, "UQ_Ticketsystem_tTelefonatAnhang_kAnhang_kTelefonat").IsUnique();

            entity.Property(e => e.KTelefonatAnhang).HasColumnName("kTelefonatAnhang");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KAnhang).HasColumnName("kAnhang");
            entity.Property(e => e.KTelefonat).HasColumnName("kTelefonat");

            entity.HasOne(d => d.KAnhangNavigation).WithMany(p => p.TTelefonatAnhangs)
                .HasForeignKey(d => d.KAnhang)
                .HasConstraintName("FK_Ticketsystem_tTelefonatAnhang_kAnhang");

            entity.HasOne(d => d.KTelefonatNavigation).WithMany(p => p.TTelefonatAnhangs)
                .HasForeignKey(d => d.KTelefonat)
                .HasConstraintName("FK_Ticketsystem_tTelefonatAnhang_kTelefonat");
        });

        modelBuilder.Entity<TTelefonatEntwurf>(entity =>
        {
            entity.HasKey(e => e.KTelefonatEntwurf).HasName("PK_Ticketsystem_tTelefonatEntwurf");

            entity.ToTable("tTelefonatEntwurf", "Ticketsystem");

            entity.HasIndex(e => new { e.KTicket, e.KBenutzer }, "UQ_Ticketsystem_tTelefonatEntwurf_kTicket_kBenutzer").IsUnique();

            entity.Property(e => e.KTelefonatEntwurf).HasColumnName("kTelefonatEntwurf");
            entity.Property(e => e.CTelefonnummer)
                .HasMaxLength(20)
                .HasColumnName("cTelefonnummer");
            entity.Property(e => e.DErstellung)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dErstellung");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KFileHtmlInhalt).HasColumnName("kFile_HtmlInhalt");
            entity.Property(e => e.KTicket).HasColumnName("kTicket");
            entity.Property(e => e.NRichtung).HasColumnName("nRichtung");

            entity.HasOne(d => d.KFileHtmlInhaltNavigation).WithMany(p => p.TTelefonatEntwurves)
                .HasForeignKey(d => d.KFileHtmlInhalt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Ticketsystem_tTelefonatEntwurf_kFile_HtmlInhalt");

            entity.HasOne(d => d.KTicketNavigation).WithMany(p => p.TTelefonatEntwurves)
                .HasForeignKey(d => d.KTicket)
                .HasConstraintName("FK_Ticketsystem_tTelefonatEntwurf_kTicket");
        });

        modelBuilder.Entity<TTelefonatEntwurfAnhang>(entity =>
        {
            entity.HasKey(e => e.KTelefonatEntwurfAnhang).HasName("PK_Ticketsystem_tTelefonatEntwurfAnhang");

            entity.ToTable("tTelefonatEntwurfAnhang", "Ticketsystem");

            entity.Property(e => e.KTelefonatEntwurfAnhang).HasColumnName("kTelefonatEntwurfAnhang");
            entity.Property(e => e.KAnhang).HasColumnName("kAnhang");
            entity.Property(e => e.KTelefonatEntwurf).HasColumnName("kTelefonatEntwurf");

            entity.HasOne(d => d.KAnhangNavigation).WithMany(p => p.TTelefonatEntwurfAnhangs)
                .HasForeignKey(d => d.KAnhang)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Ticketsystem_tTelefonatEntwurfAnhang_kAnhang");

            entity.HasOne(d => d.KTelefonatEntwurfNavigation).WithMany(p => p.TTelefonatEntwurfAnhangs)
                .HasForeignKey(d => d.KTelefonatEntwurf)
                .HasConstraintName("FK_Ticketsystem_tTelefonatEntwurfAnhang_kTelefonatEntwurf");
        });

        modelBuilder.Entity<TText>(entity =>
        {
            entity.HasKey(e => e.KText).HasName("PK_dbo_tText");

            entity.ToTable("tText");

            entity.Property(e => e.KText).HasColumnName("kText");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAktiv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAktiv");
            entity.Property(e => e.CFontName)
                .HasMaxLength(50)
                .HasColumnName("cFontName");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CText).HasColumnName("cText");
            entity.Property(e => e.CType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cType");
            entity.Property(e => e.NFontSize).HasColumnName("nFontSize");
        });

        modelBuilder.Entity<TTextFiltersSplitStreetException>(entity =>
        {
            entity.HasKey(e => new { e.CIso, e.CException }).HasName("PK_dbo_tTextFiltersSplitStreetExceptions");

            entity.ToTable("tTextFiltersSplitStreetExceptions");

            entity.Property(e => e.CIso)
                .HasMaxLength(2)
                .HasColumnName("cIso");
            entity.Property(e => e.CException)
                .HasMaxLength(800)
                .HasColumnName("cException");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
        });

        modelBuilder.Entity<TTextFiltersSplitStreetExpression>(entity =>
        {
            entity.HasKey(e => e.CIso).HasName("PK_dbo_tTextFiltersSplitStreetExpressions");

            entity.ToTable("tTextFiltersSplitStreetExpressions");

            entity.Property(e => e.CIso)
                .HasMaxLength(2)
                .HasColumnName("cIso");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CRegEx).HasColumnName("cRegEx");
        });

        modelBuilder.Entity<TTextbaustein>(entity =>
        {
            entity.HasKey(e => e.KTextbaustein).HasName("PK_Nachrichten_tTextbaustein");

            entity.ToTable("tTextbaustein", "Nachrichten");

            entity.Property(e => e.KTextbaustein).HasColumnName("kTextbaustein");
            entity.Property(e => e.CAutotext)
                .HasMaxLength(255)
                .HasColumnName("cAutotext");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CTastenkombination)
                .HasMaxLength(255)
                .HasColumnName("cTastenkombination");
            entity.Property(e => e.KTextbausteinGruppe).HasColumnName("kTextbausteinGruppe");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");

            entity.HasOne(d => d.KTextbausteinGruppeNavigation).WithMany(p => p.TTextbausteins)
                .HasForeignKey(d => d.KTextbausteinGruppe)
                .HasConstraintName("FK_Nachrichten_tTextbaustein_kTextbausteinGruppe");
        });

        modelBuilder.Entity<TTextbausteinGruppe>(entity =>
        {
            entity.HasKey(e => e.KTextbausteinGruppe).HasName("PK_Nachrichten_tTextbausteinGruppe");

            entity.ToTable("tTextbausteinGruppe", "Nachrichten");

            entity.Property(e => e.KTextbausteinGruppe).HasColumnName("kTextbausteinGruppe");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
        });

        modelBuilder.Entity<TTextbausteinInhaltSprache>(entity =>
        {
            entity.HasKey(e => e.KTextbausteinInhaltSprache).HasName("PK_Nachrichten_tTextbausteinInhaltSprache");

            entity.ToTable("tTextbausteinInhaltSprache", "Nachrichten");

            entity.Property(e => e.KTextbausteinInhaltSprache).HasColumnName("kTextbausteinInhaltSprache");
            entity.Property(e => e.KFile).HasColumnName("kFile");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.KTextbaustein).HasColumnName("kTextbaustein");

            entity.HasOne(d => d.KFileNavigation).WithMany(p => p.TTextbausteinInhaltSpraches)
                .HasForeignKey(d => d.KFile)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Nachrichten_tTextbausteinInhaltSprache_kFile");

            entity.HasOne(d => d.KSpracheNavigation).WithMany(p => p.TTextbausteinInhaltSpraches)
                .HasForeignKey(d => d.KSprache)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Nachrichten_tTextbausteinInhaltSprache_kSprache");

            entity.HasOne(d => d.KTextbausteinNavigation).WithMany(p => p.TTextbausteinInhaltSpraches)
                .HasForeignKey(d => d.KTextbaustein)
                .HasConstraintName("FK_Nachrichten_tTextbausteinInhaltSprache_kTextbaustein");
        });

        modelBuilder.Entity<TTexteMitValue>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tTexteMitValues", "WMS");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CValue1)
                .HasMaxLength(255)
                .HasColumnName("cValue1");
            entity.Property(e => e.CValue2)
                .HasMaxLength(255)
                .HasColumnName("cValue2");
            entity.Property(e => e.CValue3)
                .HasMaxLength(255)
                .HasColumnName("cValue3");
            entity.Property(e => e.CValue4)
                .HasMaxLength(255)
                .HasColumnName("cValue4");
            entity.Property(e => e.CValue5)
                .HasMaxLength(255)
                .HasColumnName("cValue5");
            entity.Property(e => e.DZeitstempel)
                .HasColumnType("datetime")
                .HasColumnName("dZeitstempel");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KSessionId).HasColumnName("kSessionID");
            entity.Property(e => e.NTextId).HasColumnName("nTextID");
            entity.Property(e => e.NValue1).HasColumnName("nValue1");
            entity.Property(e => e.NValue2).HasColumnName("nValue2");
        });

        modelBuilder.Entity<TTicket>(entity =>
        {
            entity.HasKey(e => e.KTicket).HasName("PK_Ticketsystem_tTicket");

            entity.ToTable("tTicket", "Ticketsystem", tb => tb.HasTrigger("TRG_Ticketsystem_tTicket_INSUP"));

            entity.HasIndex(e => e.KBenutzerBearbeiter, "IX_Ticketsystem_tTicket_kBenutzerBearbeiter");

            entity.HasIndex(e => e.KBenutzerErsteller, "IX_Ticketsystem_tTicket_kBenutzerErsteller");

            entity.HasIndex(e => e.KKunde, "IX_Ticketsystem_tTicket_kKunde");

            entity.HasIndex(e => e.NIstInPapierkorb, "IX_Ticketsystem_tTicket_nIstInPapierkorb");

            entity.Property(e => e.KTicket).HasColumnName("kTicket");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CEindeutigeId)
                .HasMaxLength(255)
                .HasColumnName("cEindeutigeId");
            entity.Property(e => e.DAenderung)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dAenderung");
            entity.Property(e => e.DFaelligAm)
                .HasColumnType("datetime")
                .HasColumnName("dFaelligAm");
            entity.Property(e => e.DLoesung)
                .HasColumnType("datetime")
                .HasColumnName("dLoesung");
            entity.Property(e => e.DWiedervorlage)
                .HasColumnType("datetime")
                .HasColumnName("dWiedervorlage");
            entity.Property(e => e.KBenutzerBearbeiter).HasColumnName("kBenutzer_Bearbeiter");
            entity.Property(e => e.KBenutzerErsteller).HasColumnName("kBenutzer_Ersteller");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.KStatus).HasColumnName("kStatus");
            entity.Property(e => e.NBenutzererstellt).HasColumnName("nBenutzererstellt");
            entity.Property(e => e.NIstInPapierkorb).HasColumnName("nIstInPapierkorb");
            entity.Property(e => e.NPrioritaet).HasColumnName("nPrioritaet");
            entity.Property(e => e.NVollstaendigAngelegt).HasColumnName("nVollstaendigAngelegt");

            entity.HasOne(d => d.KKundeNavigation).WithMany(p => p.TTickets)
                .HasForeignKey(d => d.KKunde)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Ticketsystem_tTicket_kKunde");

            entity.HasOne(d => d.KLieferantNavigation).WithMany(p => p.TTickets)
                .HasForeignKey(d => d.KLieferant)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Ticketsystem_tTicket_kLieferant");

            entity.HasOne(d => d.KStatusNavigation).WithMany(p => p.TTickets)
                .HasForeignKey(d => d.KStatus)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Ticketsystem_tTicket_kStatus");
        });

        modelBuilder.Entity<TTicketBeobachter>(entity =>
        {
            entity.HasKey(e => e.KTicketBeobachter).HasName("PK_Ticketsystem_tTicketBeobachter");

            entity.ToTable("tTicketBeobachter", "Ticketsystem");

            entity.HasIndex(e => e.KBenutzer, "IX_Ticketsystem_tTicketBeobachter_kBenutzer");

            entity.HasIndex(e => e.KTicket, "IX_Ticketsystem_tTicketBeobachter_kTicket");

            entity.HasIndex(e => new { e.KBenutzer, e.KTicket }, "UQ_Ticketsystem_tTicketBeobachter_kBenutzer_kTicket").IsUnique();

            entity.Property(e => e.KTicketBeobachter).HasColumnName("kTicketBeobachter");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KTicket).HasColumnName("kTicket");

            entity.HasOne(d => d.KTicketNavigation).WithMany(p => p.TTicketBeobachters)
                .HasForeignKey(d => d.KTicket)
                .HasConstraintName("FK_Ticketsystem_tTicketBeobachter_kTicket");
        });

        modelBuilder.Entity<TTicketEckdaten>(entity =>
        {
            entity.HasKey(e => e.KTicket).HasName("PK_Ticketsystem_tTicketEckdaten");

            entity.ToTable("tTicketEckdaten", "Ticketsystem");

            entity.Property(e => e.KTicket)
                .ValueGeneratedNever()
                .HasColumnName("kTicket");
            entity.Property(e => e.CAbsenderErsteNachricht)
                .HasMaxLength(255)
                .HasColumnName("cAbsenderErsteNachricht");
            entity.Property(e => e.CInhaltErsteNachricht).HasColumnName("cInhaltErsteNachricht");
            entity.Property(e => e.CTitelErsteNachricht)
                .HasMaxLength(998)
                .HasColumnName("cTitelErsteNachricht");
            entity.Property(e => e.DEmpfangLetzteNachricht)
                .HasColumnType("datetime")
                .HasColumnName("dEmpfangLetzteNachricht");
            entity.Property(e => e.NAnzahlAnhaenge).HasColumnName("nAnzahlAnhaenge");
            entity.Property(e => e.NAnzahlNachrichten).HasColumnName("nAnzahlNachrichten");
            entity.Property(e => e.NRichtungLetzteNachricht).HasColumnName("nRichtungLetzteNachricht");

            entity.HasOne(d => d.KTicketNavigation).WithOne(p => p.TTicketEckdaten)
                .HasForeignKey<TTicketEckdaten>(d => d.KTicket)
                .HasConstraintName("FK_Ticketsystem_tTicketEckdaten_kTicket");
        });

        modelBuilder.Entity<TTicketLabel>(entity =>
        {
            entity.HasKey(e => e.KTicketLabel).HasName("PK_Ticketsystem_tTicketLabel");

            entity.ToTable("tTicketLabel", "Ticketsystem");

            entity.HasIndex(e => e.KLabel, "IX_Ticketsystem_tTicketLabel_kLabel");

            entity.HasIndex(e => e.KTicket, "IX_Ticketsystem_tTicketLabel_kTicket");

            entity.HasIndex(e => new { e.KLabel, e.KTicket }, "UQ_Ticketsystem_tTicketLabel_kLabel_kTicket").IsUnique();

            entity.Property(e => e.KTicketLabel).HasColumnName("kTicketLabel");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KLabel).HasColumnName("kLabel");
            entity.Property(e => e.KTicket).HasColumnName("kTicket");

            entity.HasOne(d => d.KLabelNavigation).WithMany(p => p.TTicketLabels)
                .HasForeignKey(d => d.KLabel)
                .HasConstraintName("FK_Ticketsystem_tTicketLabel_kLabel");

            entity.HasOne(d => d.KTicketNavigation).WithMany(p => p.TTicketLabels)
                .HasForeignKey(d => d.KTicket)
                .HasConstraintName("FK_Ticketsystem_tTicketLabel_kTicket");
        });

        modelBuilder.Entity<TTicketRelation>(entity =>
        {
            entity.HasKey(e => e.KTicketRelation).HasName("PK_Ticketsystem_tTicketRelation");

            entity.ToTable("tTicketRelation", "Ticketsystem");

            entity.HasIndex(e => e.KBasisticket, "IX_Ticketsystem_tTicketRelation_kBasisticket");

            entity.HasIndex(e => e.KBenutzer, "IX_Ticketsystem_tTicketRelation_kBenutzer");

            entity.HasIndex(e => e.KVerknuepftesTicket, "IX_Ticketsystem_tTicketRelation_kVerknuepftesTicket");

            entity.Property(e => e.KTicketRelation).HasColumnName("kTicketRelation");
            entity.Property(e => e.DErstelldatum)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dErstelldatum");
            entity.Property(e => e.KBasisticket).HasColumnName("kBasisticket");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KVerknuepftesTicket).HasColumnName("kVerknuepftesTicket");

            entity.HasOne(d => d.KBasisticketNavigation).WithMany(p => p.TTicketRelationKBasisticketNavigations)
                .HasForeignKey(d => d.KBasisticket)
                .HasConstraintName("FK_Ticketsystem_tTicketRelation_kBasisticket");

            entity.HasOne(d => d.KVerknuepftesTicketNavigation).WithMany(p => p.TTicketRelationKVerknuepftesTicketNavigations)
                .HasForeignKey(d => d.KVerknuepftesTicket)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Ticketsystem_tTicketRelation_kVerknuepftesTicket");
        });

        modelBuilder.Entity<TTimeModel>(entity =>
        {
            entity.HasKey(e => e.KTimeModel).HasName("PK_ResPl_tTimeModel");

            entity.ToTable("tTimeModel", "ResPl");

            entity.Property(e => e.KTimeModel).HasColumnName("kTimeModel");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.DCreated).HasColumnName("dCreated");
            entity.Property(e => e.DLastModified).HasColumnName("dLastModified");
        });

        modelBuilder.Entity<TTimeModelEntry>(entity =>
        {
            entity.HasKey(e => e.KTimeModelEntry).HasName("PK_ResPl_tTimeModelEntry");

            entity.ToTable("tTimeModelEntry", "ResPl");

            entity.Property(e => e.KTimeModelEntry).HasColumnName("kTimeModelEntry");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DCreated).HasColumnName("dCreated");
            entity.Property(e => e.DLastModified).HasColumnName("dLastModified");
            entity.Property(e => e.KTimeModel).HasColumnName("kTimeModel");
            entity.Property(e => e.KTimeModelType).HasColumnName("kTimeModelType");
            entity.Property(e => e.NFromTime)
                .HasDefaultValueSql("('00:00:01')")
                .HasColumnName("nFromTime");
            entity.Property(e => e.NToTime)
                .HasDefaultValueSql("('23:59:59')")
                .HasColumnName("nToTime");
            entity.Property(e => e.NWeekDay).HasColumnName("nWeekDay");

            entity.HasOne(d => d.KTimeModelNavigation).WithMany(p => p.TTimeModelEntries)
                .HasForeignKey(d => d.KTimeModel)
                .HasConstraintName("FK_ResPl_tTimeModelEntry_kTimeModel");

            entity.HasOne(d => d.KTimeModelTypeNavigation).WithMany(p => p.TTimeModelEntries)
                .HasForeignKey(d => d.KTimeModelType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ResPl_tTimeModelEntry_kTimeModelType");
        });

        modelBuilder.Entity<TTimeModelHoliday>(entity =>
        {
            entity.HasKey(e => e.KTimeModelHoliday).HasName("PK_ResPl_tTimeModelHoliday");

            entity.ToTable("tTimeModelHoliday", "ResPl");

            entity.Property(e => e.KTimeModelHoliday).HasColumnName("kTimeModelHoliday");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.DCreated).HasColumnName("dCreated");
            entity.Property(e => e.DDate)
                .HasColumnType("date")
                .HasColumnName("dDate");
            entity.Property(e => e.DLastModified).HasColumnName("dLastModified");
            entity.Property(e => e.KTimeModel).HasColumnName("kTimeModel");
            entity.Property(e => e.KTimeModelType).HasColumnName("kTimeModelType");
            entity.Property(e => e.NFromTime)
                .HasDefaultValueSql("('0:0:0')")
                .HasColumnName("nFromTime");
            entity.Property(e => e.NToTime)
                .HasDefaultValueSql("('23:59:59')")
                .HasColumnName("nToTime");
            entity.Property(e => e.NYearly).HasColumnName("nYearly");

            entity.HasOne(d => d.KTimeModelNavigation).WithMany(p => p.TTimeModelHolidays)
                .HasForeignKey(d => d.KTimeModel)
                .HasConstraintName("FK_ResPl_tTimeModelHoliday_kTimeModel");

            entity.HasOne(d => d.KTimeModelTypeNavigation).WithMany(p => p.TTimeModelHolidays)
                .HasForeignKey(d => d.KTimeModelType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ResPl_tTimeModelHoliday_kTimeModelType");
        });

        modelBuilder.Entity<TTimeModelReplacement>(entity =>
        {
            entity.HasKey(e => e.KTimeModelReplacement).HasName("PK_ResPl_tTimeModelReplacement");

            entity.ToTable("tTimeModelReplacement", "ResPl");

            entity.Property(e => e.KTimeModelReplacement).HasColumnName("kTimeModelReplacement");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CReason)
                .HasMaxLength(255)
                .HasColumnName("cReason");
            entity.Property(e => e.DCreated).HasColumnName("dCreated");
            entity.Property(e => e.DFrom)
                .HasColumnType("date")
                .HasColumnName("dFrom");
            entity.Property(e => e.DLastModified).HasColumnName("dLastModified");
            entity.Property(e => e.DTo)
                .HasColumnType("date")
                .HasColumnName("dTo");
            entity.Property(e => e.KTimeModel).HasColumnName("kTimeModel");
            entity.Property(e => e.KTimeModelReplaced).HasColumnName("kTimeModelReplaced");

            entity.HasOne(d => d.KTimeModelNavigation).WithMany(p => p.TTimeModelReplacementKTimeModelNavigations)
                .HasForeignKey(d => d.KTimeModel)
                .HasConstraintName("FK_ResPl_tTimeModelReplacement_kTimeModel");

            entity.HasOne(d => d.KTimeModelReplacedNavigation).WithMany(p => p.TTimeModelReplacementKTimeModelReplacedNavigations)
                .HasForeignKey(d => d.KTimeModelReplaced)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ResPl_tTimeModelReplacement_kTimeModelReplaced");
        });

        modelBuilder.Entity<TTimeModelType>(entity =>
        {
            entity.HasKey(e => e.KTimeModelType).HasName("PK_ResPl_tTimeModelType");

            entity.ToTable("tTimeModelType", "ResPl");

            entity.Property(e => e.KTimeModelType).HasColumnName("kTimeModelType");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.DCreated).HasColumnName("dCreated");
            entity.Property(e => e.DLastModified).HasColumnName("dLastModified");
            entity.Property(e => e.NAvailable).HasColumnName("nAvailable");
        });

        modelBuilder.Entity<TTrackAndTraceConfiguration>(entity =>
        {
            entity.HasKey(e => e.KVersandart).HasName("PK_Shipping_tTrackAndTraceConfiguration");

            entity.ToTable("tTrackAndTraceConfiguration", "Shipping");

            entity.Property(e => e.KVersandart)
                .ValueGeneratedNever()
                .HasColumnName("kVersandart");
            entity.Property(e => e.NIsEnabled).HasColumnName("nIsEnabled");
            entity.Property(e => e.NTrackAndTraceProviderType).HasColumnName("nTrackAndTraceProviderType");

            entity.HasOne(d => d.KVersandartNavigation).WithOne(p => p.TTrackAndTraceConfiguration)
                .HasForeignKey<TTrackAndTraceConfiguration>(d => d.KVersandart)
                .HasConstraintName("FK_Shipping_tTrackAndTraceConfiguration_tversandart");
        });

        modelBuilder.Entity<TTrackAndTraceDpdConfiguration>(entity =>
        {
            entity.HasKey(e => e.KVersandart).HasName("PK_Shipping_tTrackAndTraceDpdConfiguration");

            entity.ToTable("tTrackAndTraceDpdConfiguration", "Shipping");

            entity.Property(e => e.KVersandart)
                .ValueGeneratedNever()
                .HasColumnName("kVersandart");
            entity.Property(e => e.CDelisId)
                .HasMaxLength(255)
                .HasColumnName("cDelisId");

            entity.HasOne(d => d.KVersandartNavigation).WithOne(p => p.TTrackAndTraceDpdConfiguration)
                .HasForeignKey<TTrackAndTraceDpdConfiguration>(d => d.KVersandart)
                .HasConstraintName("FK_Shipping_tTrackAndTraceDpdConfiguration_tversandart");
        });

        modelBuilder.Entity<TTrackingLog>(entity =>
        {
            entity.HasKey(e => e.KTrackingLog).HasName("PK_Shipping_tTrackingLogs");

            entity.ToTable("tTrackingLogs", "Shipping");

            entity.Property(e => e.KTrackingLog).HasColumnName("kTrackingLog");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CMessage)
                .HasMaxLength(255)
                .HasColumnName("cMessage");
            entity.Property(e => e.CStackTrace).HasColumnName("cStackTrace");
            entity.Property(e => e.DDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dDateTime");
        });

        modelBuilder.Entity<TUmlagerung>(entity =>
        {
            entity.HasKey(e => e.KUmlagerung).HasName("PK_dbo_tUmlagerung");

            entity.ToTable("tUmlagerung", tb => tb.HasTrigger("jtlActionValidator_tUmlagerung"));

            entity.HasIndex(e => new { e.KBestellung, e.KQuellLager }, "IX_tUmlagerung_kBestellung_kQuellLager");

            entity.Property(e => e.KUmlagerung).HasColumnName("kUmlagerung");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");
            entity.Property(e => e.KQuellLager).HasColumnName("kQuellLager");
            entity.Property(e => e.KStreckenLager).HasColumnName("kStreckenLager");
            entity.Property(e => e.KZielLager).HasColumnName("kZielLager");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<TUmlagerungPo>(entity =>
        {
            entity.HasKey(e => e.KUmlagerungPos).HasName("PK_dbo_tUmlagerungPos");

            entity.ToTable("tUmlagerungPos");

            entity.Property(e => e.KUmlagerungPos).HasColumnName("kUmlagerungPos");
            entity.Property(e => e.CSellerSku)
                .HasMaxLength(100)
                .HasColumnName("cSellerSku");
            entity.Property(e => e.KAuftragPosition).HasColumnName("kAuftragPosition");
            entity.Property(e => e.KUmlagerung).HasColumnName("kUmlagerung");
        });

        modelBuilder.Entity<TUmlagerungVersandartenMapping>(entity =>
        {
            entity.HasKey(e => new { e.KStartlager, e.KZiellager }).HasName("PK_Beschaffung_tUmlagerungVersandartenMapping");

            entity.ToTable("tUmlagerungVersandartenMapping", "Beschaffung");

            entity.Property(e => e.KStartlager).HasColumnName("kStartlager");
            entity.Property(e => e.KZiellager).HasColumnName("kZiellager");
            entity.Property(e => e.KVersandart).HasColumnName("kVersandart");
        });

        modelBuilder.Entity<TUmsatzSteuerPruefung>(entity =>
        {
            entity.HasKey(e => new { e.KKunde, e.CUstid }).HasName("PK_Kunde_tUmsatzSteuerPruefung");

            entity.ToTable("tUmsatzSteuerPruefung", "Kunde");

            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.CUstid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("cUSTID");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CPruefdaten).HasColumnName("cPruefdaten");
            entity.Property(e => e.DErfolgreichGerpueft)
                .HasColumnType("datetime")
                .HasColumnName("dErfolgreichGerpueft");
        });

        modelBuilder.Entity<TUmsatzzuordnungLog>(entity =>
        {
            entity.HasKey(e => e.KUmsatzzuordnungLog).HasName("PK_dbo_tUmsatzzuordnungLog");

            entity.ToTable("tUmsatzzuordnungLog");

            entity.Property(e => e.KUmsatzzuordnungLog).HasColumnName("kUmsatzzuordnungLog");
            entity.Property(e => e.CDaten).HasColumnName("cDaten");
            entity.Property(e => e.DDatum)
                .HasColumnType("datetime")
                .HasColumnName("dDatum");
        });

        modelBuilder.Entity<TUniqueSession>(entity =>
        {
            entity.HasKey(e => e.KSession).HasName("PK_dbo_tUniqueSession");

            entity.ToTable("tUniqueSession");

            entity.Property(e => e.KSession).HasColumnName("kSession");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CContext)
                .HasMaxLength(50)
                .HasColumnName("cContext");
            entity.Property(e => e.CInfo)
                .HasMaxLength(100)
                .HasColumnName("cInfo");
            entity.Property(e => e.CRechnername)
                .HasMaxLength(64)
                .HasColumnName("cRechnername");
            entity.Property(e => e.DLastCallback)
                .HasColumnType("datetime")
                .HasColumnName("dLastCallback");
        });

        modelBuilder.Entity<TUpdateInfo>(entity =>
        {
            entity.HasKey(e => e.KUpdateInfo).HasName("PK_dbo_tUpdateInfo");

            entity.ToTable("tUpdateInfo");

            entity.Property(e => e.KUpdateInfo).HasColumnName("kUpdateInfo");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CKey).HasColumnName("cKey");
            entity.Property(e => e.CValueNew).HasColumnName("cValueNew");
            entity.Property(e => e.CValueOld).HasColumnName("cValueOld");
            entity.Property(e => e.NVorgang).HasColumnName("nVorgang");
        });

        modelBuilder.Entity<TUpdateLog>(entity =>
        {
            entity.HasKey(e => e.KUpdateLog).HasName("PK_dbo_tUpdateLog");

            entity.ToTable("tUpdateLog");

            entity.Property(e => e.KUpdateLog).HasColumnName("kUpdateLog");
            entity.Property(e => e.CMeldung).HasColumnName("cMeldung");
            entity.Property(e => e.CModul)
                .HasMaxLength(50)
                .HasColumnName("cModul");
            entity.Property(e => e.DZeitstempel)
                .HasColumnType("datetime")
                .HasColumnName("dZeitstempel");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.NSchweregrad).HasColumnName("nSchweregrad");
        });

        modelBuilder.Entity<TUpdateMigration>(entity =>
        {
            entity.HasKey(e => e.KUpdateMigration).HasName("PK_dbo_tUpdateMigration");

            entity.ToTable("tUpdateMigration");

            entity.HasIndex(e => e.CSqlId, "UQ_dbo_tUpdateMigration_cSqlId").IsUnique();

            entity.Property(e => e.KUpdateMigration).HasColumnName("kUpdateMigration");
            entity.Property(e => e.BHash).HasColumnName("bHash");
            entity.Property(e => e.CError).HasColumnName("cError");
            entity.Property(e => e.CObjectname)
                .HasMaxLength(250)
                .HasColumnName("cObjectname");
            entity.Property(e => e.CSqlId)
                .HasMaxLength(150)
                .HasColumnName("cSqlId");
            entity.Property(e => e.CVersion)
                .HasMaxLength(20)
                .HasColumnName("cVersion");
        });

        modelBuilder.Entity<TUploadDatum>(entity =>
        {
            entity.HasKey(e => e.KUploadData).HasName("PK_SCX_tUploadData");

            entity.ToTable("tUploadData", "SCX");

            entity.HasIndex(e => e.KRechnung, "IX_SCX_tUploadData_kRechnung");

            entity.Property(e => e.KUploadData).HasColumnName("kUploadData");
            entity.Property(e => e.BData).HasColumnName("bData");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.NCount).HasColumnName("nCount");
            entity.Property(e => e.NFileSizeKb).HasColumnName("nFileSizeKB");
            entity.Property(e => e.NType).HasColumnName("nType");
        });

        modelBuilder.Entity<TUserControlSetting>(entity =>
        {
            entity.HasKey(e => new { e.KBenutzer, e.CName, e.CNameTopLevelControl }).HasName("PK_dbo_tUserControlSetting");

            entity.ToTable("tUserControlSetting");

            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CNameTopLevelControl)
                .HasMaxLength(255)
                .HasColumnName("cNameTopLevelControl");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.NSetting).HasColumnName("nSetting");
        });

        modelBuilder.Entity<TUserLayout>(entity =>
        {
            entity.HasKey(e => e.KUserLayout).HasName("PK_dbo_tUserLayout");

            entity.ToTable("tUserLayout");

            entity.HasIndex(e => new { e.CName, e.KBenutzer }, "IX_tUserLayout_cName_kBenutzer");

            entity.Property(e => e.KUserLayout).HasColumnName("kUserLayout");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CWert).HasColumnName("cWert");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
        });

        modelBuilder.Entity<TUserResource>(entity =>
        {
            entity.HasKey(e => e.KUserResource).HasName("PK_ResPl_tUserResource");

            entity.ToTable("tUserResource", "ResPl");

            entity.Property(e => e.KUserResource).HasColumnName("kUserResource");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KResource).HasColumnName("kResource");

            entity.HasOne(d => d.KResourceNavigation).WithMany(p => p.TUserResources)
                .HasForeignKey(d => d.KResource)
                .HasConstraintName("FK_ResPl_tUserResource_kResource");
        });

        modelBuilder.Entity<TUserSession>(entity =>
        {
            entity.HasKey(e => e.KUserSession).HasName("PK_dbo_tUserSession");

            entity.ToTable("tUserSession");

            entity.HasIndex(e => e.IApplicationId, "IX_dbo_tUserSession_iApplicationId");

            entity.HasIndex(e => e.KBenutzer, "IX_dbo_tUserSession_kBenutzer");

            entity.HasIndex(e => e.KMandant, "IX_dbo_tUserSession_kMandant");

            entity.HasIndex(e => e.KOwnerUserSession, "IX_dbo_tUserSession_kOwnerUserSession");

            entity.HasIndex(e => e.IUserSessionId, "UQ_dbo_tUserSession_iUserSessionId").IsUnique();

            entity.Property(e => e.KUserSession).HasColumnName("kUserSession");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CCustomIdentifier).HasColumnName("cCustomIdentifier");
            entity.Property(e => e.CHostname)
                .HasMaxLength(255)
                .HasColumnName("cHostname");
            entity.Property(e => e.CSessionInterruptHostname)
                .HasMaxLength(255)
                .HasColumnName("cSessionInterruptHostname");
            entity.Property(e => e.DLastHeartbeat).HasColumnName("dLastHeartbeat");
            entity.Property(e => e.DLoggedIn).HasColumnName("dLoggedIn");
            entity.Property(e => e.DSessionInterruptRequestTimestamp).HasColumnName("dSessionInterruptRequestTimestamp");
            entity.Property(e => e.IApplicationId).HasColumnName("iApplicationId");
            entity.Property(e => e.ISessionInterruptMessage).HasColumnName("iSessionInterruptMessage");
            entity.Property(e => e.IUserSessionId)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("iUserSessionId");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KMandant).HasColumnName("kMandant");
            entity.Property(e => e.KOwnerUserSession).HasColumnName("kOwnerUserSession");
            entity.Property(e => e.KSessionInterruptBenutzer).HasColumnName("kSessionInterruptBenutzer");
            entity.Property(e => e.NIsSessionInterruptible).HasColumnName("nIsSessionInterruptible");
            entity.Property(e => e.NProcessId).HasColumnName("nProcessId");
            entity.Property(e => e.NSessionInterruptRequested).HasColumnName("nSessionInterruptRequested");

            entity.HasOne(d => d.KOwnerUserSessionNavigation).WithMany(p => p.InverseKOwnerUserSessionNavigation)
                .HasForeignKey(d => d.KOwnerUserSession)
                .HasConstraintName("FK_dbo_tUserSession_kOwnerUserSession");
        });

        modelBuilder.Entity<TUserSetting>(entity =>
        {
            entity.HasKey(e => e.KUserSetting).HasName("PK_dbo_tUserSetting");

            entity.ToTable("tUserSetting");

            entity.HasIndex(e => new { e.CName, e.KBenutzer }, "IX_tUserSetting_cName_kBenutzer");

            entity.HasIndex(e => new { e.KBenutzer, e.CName }, "UQ_tUserSetting_Id");

            entity.Property(e => e.KUserSetting).HasColumnName("kUserSetting");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CWert).HasColumnName("cWert");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
        });

        modelBuilder.Entity<TUserType>(entity =>
        {
            entity.HasKey(e => e.KUserType).HasName("PK_FulfillmentNetwork.tUserType");

            entity.ToTable("tUserType", "FulfillmentNetwork");

            entity.Property(e => e.KUserType)
                .ValueGeneratedNever()
                .HasColumnName("kUserType");
            entity.Property(e => e.CId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("cId");
        });

        modelBuilder.Entity<TVariationMapping>(entity =>
        {
            entity.HasKey(e => e.KVariationMapping).HasName("PK_SCX_tVariationMapping");

            entity.ToTable("tVariationMapping", "SCX");

            entity.HasIndex(e => new { e.KChannel, e.KCategory, e.CWawiVariationName }, "UQ_SCX_tVariationMapping_kChannel_kCategory_cWawiVariationName").IsUnique();

            entity.Property(e => e.KVariationMapping).HasColumnName("kVariationMapping");
            entity.Property(e => e.CScxVariationName)
                .HasMaxLength(128)
                .HasColumnName("cScxVariationName");
            entity.Property(e => e.CWawiVariationName)
                .HasMaxLength(128)
                .HasColumnName("cWawiVariationName");
            entity.Property(e => e.KCategory).HasColumnName("kCategory");
            entity.Property(e => e.KChannel).HasColumnName("kChannel");
        });

        modelBuilder.Entity<TVariationWertMapping>(entity =>
        {
            entity.HasKey(e => e.KVariationWertMapping).HasName("PK_SCX_tVariationWertMapping");

            entity.ToTable("tVariationWertMapping", "SCX");

            entity.HasIndex(e => new { e.KChannel, e.KCategory, e.CWawiVariationWert }, "UQ_SCX_tVariationWertMapping_kChannel_kCategory_cScxVariationWert").IsUnique();

            entity.Property(e => e.KVariationWertMapping).HasColumnName("kVariationWertMapping");
            entity.Property(e => e.CScxVariationWert)
                .HasMaxLength(128)
                .HasColumnName("cScxVariationWert");
            entity.Property(e => e.CWawiVariationWert)
                .HasMaxLength(128)
                .HasColumnName("cWawiVariationWert");
            entity.Property(e => e.KCategory).HasColumnName("kCategory");
            entity.Property(e => e.KChannel).HasColumnName("kChannel");
        });

        modelBuilder.Entity<TVaterLabelLabel>(entity =>
        {
            entity.HasKey(e => e.KVaterLabelLabel).HasName("PK_Ticketsystem_tVaterLabelLabel");

            entity.ToTable("tVaterLabelLabel", "Ticketsystem");

            entity.HasIndex(e => e.KLabel, "IX_Ticketsystem_tVaterLabelLabel_kLabel");

            entity.HasIndex(e => e.KVater, "IX_Ticketsystem_tVaterLabelLabel_kVater");

            entity.HasIndex(e => new { e.KLabel, e.KVater }, "UQ_Ticketsystem_tVaterLabelLabel_kLabel_kVater").IsUnique();

            entity.Property(e => e.KVaterLabelLabel).HasColumnName("kVaterLabelLabel");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KLabel).HasColumnName("kLabel");
            entity.Property(e => e.KVater).HasColumnName("kVater");

            entity.HasOne(d => d.KLabelNavigation).WithMany(p => p.TVaterLabelLabelKLabelNavigations)
                .HasForeignKey(d => d.KLabel)
                .HasConstraintName("FK_Ticketsystem_tVaterLabelLabel_kLabel");

            entity.HasOne(d => d.KVaterNavigation).WithMany(p => p.TVaterLabelLabelKVaterNavigations)
                .HasForeignKey(d => d.KVater)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Ticketsystem_tVaterLabelLabel_kVater");
        });

        modelBuilder.Entity<TVc>(entity =>
        {
            entity.HasKey(e => e.KMessageId).HasName("PK_Amazon_tVcs");

            entity.ToTable("tVcs", "Amazon");

            entity.Property(e => e.KMessageId)
                .ValueGeneratedNever()
                .HasColumnName("kMessageId");
            entity.Property(e => e.Asin)
                .HasMaxLength(30)
                .HasColumnName("ASIN");
            entity.Property(e => e.BuyerEinvoiceAccountId)
                .HasMaxLength(30)
                .HasColumnName("BuyerEInvoiceAccountId");
            entity.Property(e => e.BuyerTaxRegistration).HasMaxLength(30);
            entity.Property(e => e.BuyerTaxRegistrationJurisdiction).HasMaxLength(20);
            entity.Property(e => e.BuyerTaxRegistrationType).HasMaxLength(30);
            entity.Property(e => e.ConvertedTaxAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Currency).HasMaxLength(10);
            entity.Property(e => e.DAktualisiertUtc)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("dAktualisiertUtc");
            entity.Property(e => e.DErstelltUtc)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("dErstelltUtc");
            entity.Property(e => e.DStatusAktualisiertUtc).HasColumnName("dStatusAktualisiertUtc");
            entity.Property(e => e.DVerarbeitetUtc).HasColumnName("dVerarbeitetUtc");
            entity.Property(e => e.EinvoiceUrl)
                .HasMaxLength(500)
                .HasColumnName("EInvoiceUrl");
            entity.Property(e => e.ExportOutsideEu)
                .HasMaxLength(20)
                .HasColumnName("ExportOutsideEU");
            entity.Property(e => e.GiftwraptaxAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("GIFTWRAPTaxAmount");
            entity.Property(e => e.GiftwraptaxAmountPromo)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("GIFTWRAPTaxAmountPromo");
            entity.Property(e => e.GiftwraptaxExclusivePromoAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("GIFTWRAPTaxExclusivePromoAmount");
            entity.Property(e => e.GiftwraptaxExclusiveSellingPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("GIFTWRAPTaxExclusiveSellingPrice");
            entity.Property(e => e.GiftwraptaxInclusivePromoAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("GIFTWRAPTaxInclusivePromoAmount");
            entity.Property(e => e.GiftwraptaxInclusiveSellingPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("GIFTWRAPTaxInclusiveSellingPrice");
            entity.Property(e => e.InvoiceLevelCurrencyCode).HasMaxLength(20);
            entity.Property(e => e.InvoiceLevelExchangeRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.InvoiceLevelExchangeRateDate).HasColumnType("date");
            entity.Property(e => e.InvoiceUrl).HasMaxLength(500);
            entity.Property(e => e.IsAmazonInvoiced)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.JurisdictionLevel).HasMaxLength(30);
            entity.Property(e => e.JurisdictionName).HasMaxLength(80);
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.MarketplaceId)
                .HasMaxLength(20)
                .HasColumnName("MarketplaceID");
            entity.Property(e => e.MerchantId)
                .HasMaxLength(50)
                .HasColumnName("MerchantID");
            entity.Property(e => e.OrderDate).HasColumnType("date");
            entity.Property(e => e.OrderId)
                .HasMaxLength(30)
                .HasColumnName("OrderID");
            entity.Property(e => e.OriginalVatinvoiceNumber)
                .HasMaxLength(100)
                .HasColumnName("OriginalVATInvoiceNumber");
            entity.Property(e => e.OurPricetaxAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("OUR_PRICETaxAmount");
            entity.Property(e => e.OurPricetaxAmountPromo)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("OUR_PRICETaxAmountPromo");
            entity.Property(e => e.OurPricetaxExclusivePromoAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("OUR_PRICETaxExclusivePromoAmount");
            entity.Property(e => e.OurPricetaxExclusiveSellingPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("OUR_PRICETaxExclusiveSellingPrice");
            entity.Property(e => e.OurPricetaxInclusivePromoAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("OUR_PRICETaxInclusivePromoAmount");
            entity.Property(e => e.OurPricetaxInclusiveSellingPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("OUR_PRICETaxInclusiveSellingPrice");
            entity.Property(e => e.ProductTaxCode).HasMaxLength(30);
            entity.Property(e => e.ReturnFcCountry).HasMaxLength(10);
            entity.Property(e => e.SdiinvoiceDeliveryStatus)
                .HasMaxLength(100)
                .HasColumnName("SDIInvoiceDeliveryStatus");
            entity.Property(e => e.SdiinvoiceErrorCode)
                .HasMaxLength(30)
                .HasColumnName("SDIInvoiceErrorCode");
            entity.Property(e => e.SdiinvoiceErrorDescription).HasColumnName("SDIInvoiceErrorDescription");
            entity.Property(e => e.SdiinvoiceStatusLastUpdatedDate)
                .HasColumnType("date")
                .HasColumnName("SDIInvoiceStatusLastUpdatedDate");
            entity.Property(e => e.SellerTaxRegistration).HasMaxLength(30);
            entity.Property(e => e.SellerTaxRegistrationJurisdiction).HasMaxLength(20);
            entity.Property(e => e.ShipFromCity).HasMaxLength(300);
            entity.Property(e => e.ShipFromCountry).HasMaxLength(10);
            entity.Property(e => e.ShipFromPostalCode).HasMaxLength(30);
            entity.Property(e => e.ShipFromState).HasMaxLength(100);
            entity.Property(e => e.ShipFromTaxLocationCode).HasMaxLength(30);
            entity.Property(e => e.ShipToCity).HasMaxLength(300);
            entity.Property(e => e.ShipToCountry).HasMaxLength(10);
            entity.Property(e => e.ShipToLocationCode).HasMaxLength(30);
            entity.Property(e => e.ShipToPostalCode).HasMaxLength(30);
            entity.Property(e => e.ShipToState).HasMaxLength(100);
            entity.Property(e => e.ShipmentDate).HasColumnType("date");
            entity.Property(e => e.ShipmentId)
                .HasMaxLength(30)
                .HasColumnName("ShipmentID");
            entity.Property(e => e.ShippingtaxAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SHIPPINGTaxAmount");
            entity.Property(e => e.ShippingtaxAmountPromo)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SHIPPINGTaxAmountPromo");
            entity.Property(e => e.ShippingtaxExclusivePromoAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SHIPPINGTaxExclusivePromoAmount");
            entity.Property(e => e.ShippingtaxExclusiveSellingPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SHIPPINGTaxExclusiveSellingPrice");
            entity.Property(e => e.ShippingtaxInclusivePromoAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SHIPPINGTaxInclusivePromoAmount");
            entity.Property(e => e.ShippingtaxInclusiveSellingPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SHIPPINGTaxInclusiveSellingPrice");
            entity.Property(e => e.Sku)
                .HasMaxLength(100)
                .HasColumnName("SKU");
            entity.Property(e => e.TaxAddressRole).HasMaxLength(30);
            entity.Property(e => e.TaxCalculationDate).HasColumnType("date");
            entity.Property(e => e.TaxCalculationReasonCode).HasMaxLength(30);
            entity.Property(e => e.TaxCollectionResponsibility).HasMaxLength(30);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.TaxReportingScheme).HasMaxLength(30);
            entity.Property(e => e.TaxType).HasMaxLength(30);
            entity.Property(e => e.TransactionId)
                .HasMaxLength(50)
                .HasColumnName("TransactionID");
            entity.Property(e => e.TransactionType).HasMaxLength(50);
            entity.Property(e => e.VatinvoiceNumber)
                .HasMaxLength(100)
                .HasColumnName("VATInvoiceNumber");
        });

        modelBuilder.Entity<TVcsHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tVcsHistory", "Amazon");

            entity.Property(e => e.Asin)
                .HasMaxLength(30)
                .HasColumnName("ASIN");
            entity.Property(e => e.BuyerEinvoiceAccountId)
                .HasMaxLength(30)
                .HasColumnName("BuyerEInvoiceAccountId");
            entity.Property(e => e.BuyerTaxRegistration).HasMaxLength(30);
            entity.Property(e => e.BuyerTaxRegistrationJurisdiction).HasMaxLength(20);
            entity.Property(e => e.BuyerTaxRegistrationType).HasMaxLength(30);
            entity.Property(e => e.ConvertedTaxAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Currency).HasMaxLength(10);
            entity.Property(e => e.DAktualisiertUtc).HasColumnName("dAktualisiertUtc");
            entity.Property(e => e.DErstelltUtc).HasColumnName("dErstelltUtc");
            entity.Property(e => e.DStatusAktualisiertUtc).HasColumnName("dStatusAktualisiertUtc");
            entity.Property(e => e.DVerarbeitetUtc).HasColumnName("dVerarbeitetUtc");
            entity.Property(e => e.EinvoiceUrl)
                .HasMaxLength(500)
                .HasColumnName("EInvoiceUrl");
            entity.Property(e => e.ExportOutsideEu)
                .HasMaxLength(20)
                .HasColumnName("ExportOutsideEU");
            entity.Property(e => e.GiftwraptaxAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("GIFTWRAPTaxAmount");
            entity.Property(e => e.GiftwraptaxAmountPromo)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("GIFTWRAPTaxAmountPromo");
            entity.Property(e => e.GiftwraptaxExclusivePromoAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("GIFTWRAPTaxExclusivePromoAmount");
            entity.Property(e => e.GiftwraptaxExclusiveSellingPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("GIFTWRAPTaxExclusiveSellingPrice");
            entity.Property(e => e.GiftwraptaxInclusivePromoAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("GIFTWRAPTaxInclusivePromoAmount");
            entity.Property(e => e.GiftwraptaxInclusiveSellingPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("GIFTWRAPTaxInclusiveSellingPrice");
            entity.Property(e => e.InvoiceLevelCurrencyCode).HasMaxLength(20);
            entity.Property(e => e.InvoiceLevelExchangeRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.InvoiceLevelExchangeRateDate).HasColumnType("date");
            entity.Property(e => e.InvoiceUrl).HasMaxLength(500);
            entity.Property(e => e.JurisdictionLevel).HasMaxLength(30);
            entity.Property(e => e.JurisdictionName).HasMaxLength(80);
            entity.Property(e => e.KMessageId).HasColumnName("kMessageId");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.MarketplaceId)
                .HasMaxLength(20)
                .HasColumnName("MarketplaceID");
            entity.Property(e => e.MerchantId)
                .HasMaxLength(50)
                .HasColumnName("MerchantID");
            entity.Property(e => e.OrderDate).HasColumnType("date");
            entity.Property(e => e.OrderId)
                .HasMaxLength(30)
                .HasColumnName("OrderID");
            entity.Property(e => e.OriginalVatinvoiceNumber)
                .HasMaxLength(100)
                .HasColumnName("OriginalVATInvoiceNumber");
            entity.Property(e => e.OurPricetaxAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("OUR_PRICETaxAmount");
            entity.Property(e => e.OurPricetaxAmountPromo)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("OUR_PRICETaxAmountPromo");
            entity.Property(e => e.OurPricetaxExclusivePromoAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("OUR_PRICETaxExclusivePromoAmount");
            entity.Property(e => e.OurPricetaxExclusiveSellingPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("OUR_PRICETaxExclusiveSellingPrice");
            entity.Property(e => e.OurPricetaxInclusivePromoAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("OUR_PRICETaxInclusivePromoAmount");
            entity.Property(e => e.OurPricetaxInclusiveSellingPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("OUR_PRICETaxInclusiveSellingPrice");
            entity.Property(e => e.ProductTaxCode).HasMaxLength(30);
            entity.Property(e => e.ReturnFcCountry).HasMaxLength(10);
            entity.Property(e => e.SdiinvoiceDeliveryStatus)
                .HasMaxLength(100)
                .HasColumnName("SDIInvoiceDeliveryStatus");
            entity.Property(e => e.SdiinvoiceErrorCode)
                .HasMaxLength(30)
                .HasColumnName("SDIInvoiceErrorCode");
            entity.Property(e => e.SdiinvoiceErrorDescription).HasColumnName("SDIInvoiceErrorDescription");
            entity.Property(e => e.SdiinvoiceStatusLastUpdatedDate)
                .HasColumnType("date")
                .HasColumnName("SDIInvoiceStatusLastUpdatedDate");
            entity.Property(e => e.SellerTaxRegistration).HasMaxLength(30);
            entity.Property(e => e.SellerTaxRegistrationJurisdiction).HasMaxLength(20);
            entity.Property(e => e.ShipFromCity).HasMaxLength(300);
            entity.Property(e => e.ShipFromCountry).HasMaxLength(10);
            entity.Property(e => e.ShipFromPostalCode).HasMaxLength(30);
            entity.Property(e => e.ShipFromState).HasMaxLength(100);
            entity.Property(e => e.ShipFromTaxLocationCode).HasMaxLength(30);
            entity.Property(e => e.ShipToCity).HasMaxLength(300);
            entity.Property(e => e.ShipToCountry).HasMaxLength(10);
            entity.Property(e => e.ShipToLocationCode).HasMaxLength(30);
            entity.Property(e => e.ShipToPostalCode).HasMaxLength(30);
            entity.Property(e => e.ShipToState).HasMaxLength(100);
            entity.Property(e => e.ShipmentDate).HasColumnType("date");
            entity.Property(e => e.ShipmentId)
                .HasMaxLength(30)
                .HasColumnName("ShipmentID");
            entity.Property(e => e.ShippingtaxAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SHIPPINGTaxAmount");
            entity.Property(e => e.ShippingtaxAmountPromo)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SHIPPINGTaxAmountPromo");
            entity.Property(e => e.ShippingtaxExclusivePromoAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SHIPPINGTaxExclusivePromoAmount");
            entity.Property(e => e.ShippingtaxExclusiveSellingPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SHIPPINGTaxExclusiveSellingPrice");
            entity.Property(e => e.ShippingtaxInclusivePromoAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SHIPPINGTaxInclusivePromoAmount");
            entity.Property(e => e.ShippingtaxInclusiveSellingPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("SHIPPINGTaxInclusiveSellingPrice");
            entity.Property(e => e.Sku)
                .HasMaxLength(100)
                .HasColumnName("SKU");
            entity.Property(e => e.TaxAddressRole).HasMaxLength(30);
            entity.Property(e => e.TaxCalculationDate).HasColumnType("date");
            entity.Property(e => e.TaxCalculationReasonCode).HasMaxLength(30);
            entity.Property(e => e.TaxCollectionResponsibility).HasMaxLength(30);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.TaxReportingScheme).HasMaxLength(30);
            entity.Property(e => e.TaxType).HasMaxLength(30);
            entity.Property(e => e.TransactionId)
                .HasMaxLength(50)
                .HasColumnName("TransactionID");
            entity.Property(e => e.TransactionType).HasMaxLength(50);
            entity.Property(e => e.VatinvoiceNumber)
                .HasMaxLength(100)
                .HasColumnName("VATInvoiceNumber");
        });

        modelBuilder.Entity<TVcsLite>(entity =>
        {
            entity.HasKey(e => e.KVcsLite).HasName("PK_Amazon_tVcsLite");

            entity.ToTable("tVcsLite", "Amazon");

            entity.Property(e => e.KVcsLite).HasColumnName("kVcsLite");
            entity.Property(e => e.Asin)
                .HasMaxLength(10)
                .HasColumnName("ASIN");
            entity.Property(e => e.BillAddress1).HasMaxLength(255);
            entity.Property(e => e.BillAddress2).HasMaxLength(255);
            entity.Property(e => e.BillAddress3).HasMaxLength(255);
            entity.Property(e => e.BillCity).HasMaxLength(100);
            entity.Property(e => e.BillCountry).HasMaxLength(5);
            entity.Property(e => e.BillPostalCode).HasMaxLength(20);
            entity.Property(e => e.BillState).HasMaxLength(100);
            entity.Property(e => e.BillingName).HasMaxLength(255);
            entity.Property(e => e.BillingPhoneNumber).HasMaxLength(100);
            entity.Property(e => e.BuyerCompanyName).HasMaxLength(255);
            entity.Property(e => e.BuyerEinvoiceAccountId)
                .HasMaxLength(30)
                .HasColumnName("BuyerEInvoiceAccountId");
            entity.Property(e => e.BuyerName).HasMaxLength(255);
            entity.Property(e => e.BuyerTaxRegistrationType).HasMaxLength(30);
            entity.Property(e => e.BuyerVatNumber).HasMaxLength(30);
            entity.Property(e => e.Currency).HasMaxLength(10);
            entity.Property(e => e.DAktualisiertUtc).HasColumnName("dAktualisiertUtc");
            entity.Property(e => e.DErstelltUtc).HasColumnName("dErstelltUtc");
            entity.Property(e => e.DStatusAktualisiertUtc).HasColumnName("dStatusAktualisiertUtc");
            entity.Property(e => e.DVerarbeitetUtc).HasColumnName("dVerarbeitetUtc");
            entity.Property(e => e.FulfilledBy).HasMaxLength(30);
            entity.Property(e => e.GiftPromoVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftPromoVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftPromoVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftPromoVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftPromotionId)
                .HasMaxLength(50)
                .HasColumnName("GiftPromotionID");
            entity.Property(e => e.GiftWrapVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftWrapVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftWrapVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftWrapVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.InvoiceNumber).HasMaxLength(100);
            entity.Property(e => e.InvoiceStatus).HasMaxLength(100);
            entity.Property(e => e.InvoiceStatusDescription).HasMaxLength(255);
            entity.Property(e => e.IsBusinessOrder).HasMaxLength(5);
            entity.Property(e => e.ItemPromoVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemPromoVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemPromoVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemPromoVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemPromotionId)
                .HasMaxLength(50)
                .HasColumnName("ItemPromotionID");
            entity.Property(e => e.ItemVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.LegacyCustomerOrderItemId).HasMaxLength(255);
            entity.Property(e => e.MarketplaceId)
                .HasMaxLength(20)
                .HasColumnName("MarketplaceID");
            entity.Property(e => e.OrderId)
                .HasMaxLength(50)
                .HasColumnName("OrderID");
            entity.Property(e => e.OrderItemId)
                .HasMaxLength(50)
                .HasColumnName("OrderItemID");
            entity.Property(e => e.OriginalVatInvoiceNumber).HasMaxLength(100);
            entity.Property(e => e.PriceDesignation).HasMaxLength(5);
            entity.Property(e => e.ProductName).HasMaxLength(255);
            entity.Property(e => e.PurchaseOrderNumber).HasMaxLength(255);
            entity.Property(e => e.QuantityPurchased).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.RecipientName).HasMaxLength(255);
            entity.Property(e => e.RecommendedInvoiceFormat).HasMaxLength(50);
            entity.Property(e => e.SellerVatNumber).HasMaxLength(30);
            entity.Property(e => e.ShipAddress1).HasMaxLength(255);
            entity.Property(e => e.ShipAddress2).HasMaxLength(255);
            entity.Property(e => e.ShipAddress3).HasMaxLength(255);
            entity.Property(e => e.ShipCity).HasMaxLength(100);
            entity.Property(e => e.ShipCountry).HasMaxLength(5);
            entity.Property(e => e.ShipFromCity).HasMaxLength(100);
            entity.Property(e => e.ShipFromCountry).HasMaxLength(5);
            entity.Property(e => e.ShipFromPostalCode).HasMaxLength(20);
            entity.Property(e => e.ShipFromState).HasMaxLength(100);
            entity.Property(e => e.ShipPhoneNumber).HasMaxLength(100);
            entity.Property(e => e.ShipPostalCode).HasMaxLength(20);
            entity.Property(e => e.ShipPromotionId)
                .HasMaxLength(50)
                .HasColumnName("ShipPromotionID");
            entity.Property(e => e.ShipServiceLevel).HasMaxLength(30);
            entity.Property(e => e.ShipState).HasMaxLength(100);
            entity.Property(e => e.ShippingId)
                .HasMaxLength(50)
                .HasColumnName("ShippingID");
            entity.Property(e => e.ShippingPromoVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingPromoVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingPromoVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingPromoVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Sku)
                .HasMaxLength(100)
                .HasColumnName("SKU");
            entity.Property(e => e.TransactionId)
                .HasMaxLength(50)
                .HasColumnName("TransactionID");
            entity.Property(e => e.TransactionType).HasMaxLength(50);
        });

        modelBuilder.Entity<TVcsLiteHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tVcsLiteHistory", "Amazon");

            entity.Property(e => e.Asin)
                .HasMaxLength(10)
                .HasColumnName("ASIN");
            entity.Property(e => e.BillAddress1).HasMaxLength(255);
            entity.Property(e => e.BillAddress2).HasMaxLength(255);
            entity.Property(e => e.BillAddress3).HasMaxLength(255);
            entity.Property(e => e.BillCity).HasMaxLength(100);
            entity.Property(e => e.BillCountry).HasMaxLength(5);
            entity.Property(e => e.BillPostalCode).HasMaxLength(20);
            entity.Property(e => e.BillState).HasMaxLength(100);
            entity.Property(e => e.BillingName).HasMaxLength(255);
            entity.Property(e => e.BillingPhoneNumber).HasMaxLength(100);
            entity.Property(e => e.BuyerCompanyName).HasMaxLength(255);
            entity.Property(e => e.BuyerEinvoiceAccountId)
                .HasMaxLength(30)
                .HasColumnName("BuyerEInvoiceAccountId");
            entity.Property(e => e.BuyerName).HasMaxLength(255);
            entity.Property(e => e.BuyerTaxRegistrationType).HasMaxLength(30);
            entity.Property(e => e.BuyerVatNumber).HasMaxLength(30);
            entity.Property(e => e.Currency).HasMaxLength(10);
            entity.Property(e => e.DAktualisiertUtc).HasColumnName("dAktualisiertUtc");
            entity.Property(e => e.DErstelltUtc).HasColumnName("dErstelltUtc");
            entity.Property(e => e.DStatusAktualisiertUtc).HasColumnName("dStatusAktualisiertUtc");
            entity.Property(e => e.DVerarbeitetUtc).HasColumnName("dVerarbeitetUtc");
            entity.Property(e => e.FulfilledBy).HasMaxLength(30);
            entity.Property(e => e.GiftPromoVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftPromoVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftPromoVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftPromoVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftPromotionId)
                .HasMaxLength(50)
                .HasColumnName("GiftPromotionID");
            entity.Property(e => e.GiftWrapVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftWrapVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftWrapVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftWrapVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.InvoiceNumber).HasMaxLength(100);
            entity.Property(e => e.InvoiceStatus).HasMaxLength(100);
            entity.Property(e => e.InvoiceStatusDescription).HasMaxLength(255);
            entity.Property(e => e.IsBusinessOrder).HasMaxLength(5);
            entity.Property(e => e.ItemPromoVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemPromoVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemPromoVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemPromoVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemPromotionId)
                .HasMaxLength(50)
                .HasColumnName("ItemPromotionID");
            entity.Property(e => e.ItemVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.KVcsLite).HasColumnName("kVcsLite");
            entity.Property(e => e.LegacyCustomerOrderItemId).HasMaxLength(255);
            entity.Property(e => e.MarketplaceId)
                .HasMaxLength(20)
                .HasColumnName("MarketplaceID");
            entity.Property(e => e.OrderId)
                .HasMaxLength(50)
                .HasColumnName("OrderID");
            entity.Property(e => e.OrderItemId)
                .HasMaxLength(50)
                .HasColumnName("OrderItemID");
            entity.Property(e => e.OriginalVatInvoiceNumber).HasMaxLength(100);
            entity.Property(e => e.PriceDesignation).HasMaxLength(5);
            entity.Property(e => e.ProductName).HasMaxLength(255);
            entity.Property(e => e.PurchaseOrderNumber).HasMaxLength(255);
            entity.Property(e => e.QuantityPurchased).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.RecipientName).HasMaxLength(255);
            entity.Property(e => e.RecommendedInvoiceFormat).HasMaxLength(50);
            entity.Property(e => e.SellerVatNumber).HasMaxLength(30);
            entity.Property(e => e.ShipAddress1).HasMaxLength(255);
            entity.Property(e => e.ShipAddress2).HasMaxLength(255);
            entity.Property(e => e.ShipAddress3).HasMaxLength(255);
            entity.Property(e => e.ShipCity).HasMaxLength(100);
            entity.Property(e => e.ShipCountry).HasMaxLength(5);
            entity.Property(e => e.ShipFromCity).HasMaxLength(100);
            entity.Property(e => e.ShipFromCountry).HasMaxLength(5);
            entity.Property(e => e.ShipFromPostalCode).HasMaxLength(20);
            entity.Property(e => e.ShipFromState).HasMaxLength(100);
            entity.Property(e => e.ShipPhoneNumber).HasMaxLength(100);
            entity.Property(e => e.ShipPostalCode).HasMaxLength(20);
            entity.Property(e => e.ShipPromotionId)
                .HasMaxLength(50)
                .HasColumnName("ShipPromotionID");
            entity.Property(e => e.ShipServiceLevel).HasMaxLength(30);
            entity.Property(e => e.ShipState).HasMaxLength(100);
            entity.Property(e => e.ShippingId)
                .HasMaxLength(50)
                .HasColumnName("ShippingID");
            entity.Property(e => e.ShippingPromoVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingPromoVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingPromoVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingPromoVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Sku)
                .HasMaxLength(100)
                .HasColumnName("SKU");
            entity.Property(e => e.TransactionId)
                .HasMaxLength(50)
                .HasColumnName("TransactionID");
            entity.Property(e => e.TransactionType).HasMaxLength(10);
        });

        modelBuilder.Entity<TVcsLiteUploadQueue>(entity =>
        {
            entity.HasKey(e => e.KVcsLiteUploadQueue).HasName("PK_Amazon_tVcsLiteUploadQueue");

            entity.ToTable("tVcsLiteUploadQueue", "Amazon");

            entity.Property(e => e.KVcsLiteUploadQueue).HasColumnName("kVcsLiteUploadQueue");
            entity.Property(e => e.CBelegnummer)
                .HasMaxLength(50)
                .HasColumnName("cBelegnummer");
            entity.Property(e => e.CBezugsbelegnummer)
                .HasMaxLength(50)
                .HasColumnName("cBezugsbelegnummer");
            entity.Property(e => e.CMeldung)
                .HasMaxLength(4000)
                .HasColumnName("cMeldung");
            entity.Property(e => e.COrderId)
                .HasMaxLength(30)
                .HasColumnName("cOrderId");
            entity.Property(e => e.CShippingId)
                .HasMaxLength(50)
                .HasColumnName("cShippingID");
            entity.Property(e => e.CTransactionId)
                .HasMaxLength(50)
                .HasColumnName("cTransactionId");
            entity.Property(e => e.DAusgabeBeendetUtc).HasColumnName("dAusgabeBeendetUtc");
            entity.Property(e => e.DAusgabeGestartetUtc).HasColumnName("dAusgabeGestartetUtc");
            entity.Property(e => e.DBelegdatum).HasColumnName("dBelegdatum");
            entity.Property(e => e.DErstelltUtc)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("dErstelltUtc");
            entity.Property(e => e.DUploadErfolgtUtc).HasColumnName("dUploadErfolgtUtc");
            entity.Property(e => e.KExternerBeleg).HasColumnName("kExternerBeleg");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.NAusgabeVersuche).HasColumnName("nAusgabeVersuche");
            entity.Property(e => e.NBelegtyp).HasColumnName("nBelegtyp");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
            entity.Property(e => e.NUploadVersuche).HasColumnName("nUploadVersuche");
        });

        modelBuilder.Entity<TVcsRechnungsherkunft>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tVcsRechnungsherkunft", "Amazon");

            entity.HasIndex(e => new { e.COrderId, e.KUser }, "UQ_Amazon_tVcsRechnungsherkunft_cOrderId_kUser").IsUnique();

            entity.Property(e => e.COrderId)
                .HasMaxLength(19)
                .HasColumnName("cOrderId");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.NVcsTyp).HasColumnName("nVcsTyp");
        });

        modelBuilder.Entity<TVcsRechnungskorrekturherkunft>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tVcsRechnungskorrekturherkunft", "Amazon");

            entity.HasIndex(e => new { e.COrderId, e.KUser }, "UQ_Amazon_tVcsRechnungskorrekturherkunft_cOrderId_kUser").IsUnique();

            entity.Property(e => e.COrderId)
                .HasMaxLength(19)
                .HasColumnName("cOrderId");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.NVcsTyp).HasColumnName("nVcsTyp");
        });

        modelBuilder.Entity<TVcsSelfInvoice>(entity =>
        {
            entity.HasKey(e => e.KVcsdata).HasName("PK_Amazon_tVcsSelfInvoice");

            entity.ToTable("tVcsSelfInvoice", "Amazon");

            entity.HasIndex(e => new { e.KUser, e.ShippingId, e.Asin, e.OrderId, e.TransactionId, e.OrderItemId }, "IX_tVcsSelfInvoice_kUser_ShippingID_ASIN_OrderID_TransactionID_OrderItemID");

            entity.Property(e => e.KVcsdata).HasColumnName("kVCSData");
            entity.Property(e => e.Asin)
                .HasMaxLength(10)
                .HasColumnName("ASIN");
            entity.Property(e => e.BillAddress1).HasMaxLength(255);
            entity.Property(e => e.BillAddress2).HasMaxLength(255);
            entity.Property(e => e.BillAddress3).HasMaxLength(255);
            entity.Property(e => e.BillCity).HasMaxLength(100);
            entity.Property(e => e.BillCountry).HasMaxLength(5);
            entity.Property(e => e.BillPostalCode).HasMaxLength(20);
            entity.Property(e => e.BillState).HasMaxLength(100);
            entity.Property(e => e.BillingName).HasMaxLength(255);
            entity.Property(e => e.BillingPhoneNumber).HasMaxLength(100);
            entity.Property(e => e.BuyerCompanyName).HasMaxLength(255);
            entity.Property(e => e.BuyerEinvoiceAccountId)
                .HasMaxLength(30)
                .HasColumnName("buyerEInvoiceAccountId");
            entity.Property(e => e.BuyerName).HasMaxLength(255);
            entity.Property(e => e.BuyerTaxRegistrationType)
                .HasMaxLength(30)
                .HasColumnName("buyerTaxRegistrationType");
            entity.Property(e => e.BuyerVatNumber).HasMaxLength(30);
            entity.Property(e => e.CWawiRechnungskorrekturnummer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cWawiRechnungskorrekturnummer");
            entity.Property(e => e.CWawiRechnungsnummer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cWawiRechnungsnummer");
            entity.Property(e => e.CitationDe).HasColumnName("citationDe");
            entity.Property(e => e.CitationEn).HasColumnName("citationEn");
            entity.Property(e => e.CitationEs).HasColumnName("citationEs");
            entity.Property(e => e.CitationFr).HasColumnName("citationFr");
            entity.Property(e => e.CitationIt).HasColumnName("citationIt");
            entity.Property(e => e.CreationDate).HasColumnType("datetime");
            entity.Property(e => e.Currency).HasMaxLength(10);
            entity.Property(e => e.ExportOutsideEu).HasColumnName("exportOutsideEu");
            entity.Property(e => e.FulfilledBy).HasMaxLength(30);
            entity.Property(e => e.GiftPromoVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftPromoVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftPromoVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftPromoVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftPromotionId)
                .HasMaxLength(50)
                .HasColumnName("GiftPromotionID");
            entity.Property(e => e.GiftWrapVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftWrapVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftWrapVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftWrapVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.InvoiceCorrectionDetails).HasColumnName("invoiceCorrectionDetails");
            entity.Property(e => e.InvoiceNumber).HasMaxLength(100);
            entity.Property(e => e.InvoiceStatus).HasMaxLength(100);
            entity.Property(e => e.InvoiceStatusDescription).HasMaxLength(255);
            entity.Property(e => e.IsBusinessOrder).HasMaxLength(5);
            entity.Property(e => e.IsBuyerPhysicallyPresent).HasColumnName("isBuyerPhysicallyPresent");
            entity.Property(e => e.IsInvoiceCorrected).HasColumnName("isInvoiceCorrected");
            entity.Property(e => e.IsSellerPhysicallyPresent).HasColumnName("isSellerPhysicallyPresent");
            entity.Property(e => e.ItemPromoVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemPromoVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemPromoVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemPromoVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemPromotionId)
                .HasMaxLength(50)
                .HasColumnName("ItemPromotionID");
            entity.Property(e => e.ItemVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");
            entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");
            entity.Property(e => e.KGutschriftPos).HasColumnName("kGutschriftPos");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.LegacyCustomerOrderItemId).HasMaxLength(255);
            entity.Property(e => e.MarketplaceId)
                .HasMaxLength(20)
                .HasColumnName("MarketplaceID");
            entity.Property(e => e.NInProgress).HasColumnName("nInProgress");
            entity.Property(e => e.NProcessed).HasColumnName("nProcessed");
            entity.Property(e => e.NUploadVersuche).HasColumnName("nUploadVersuche");
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.OrderId)
                .HasMaxLength(50)
                .HasColumnName("OrderID");
            entity.Property(e => e.OrderItemId)
                .HasMaxLength(50)
                .HasColumnName("OrderItemID");
            entity.Property(e => e.OriginalVatinvoiceNumber)
                .HasMaxLength(100)
                .HasColumnName("originalVATInvoiceNumber");
            entity.Property(e => e.PriceDesignation).HasMaxLength(5);
            entity.Property(e => e.ProductName).HasMaxLength(255);
            entity.Property(e => e.PurchaseOrderNumber).HasMaxLength(255);
            entity.Property(e => e.QuantityPurchased).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.RecipientName).HasMaxLength(255);
            entity.Property(e => e.RecommendedInvoiceFormat).HasMaxLength(50);
            entity.Property(e => e.SellerVatNumber).HasMaxLength(30);
            entity.Property(e => e.ShipAddress1).HasMaxLength(255);
            entity.Property(e => e.ShipAddress2).HasMaxLength(255);
            entity.Property(e => e.ShipAddress3).HasMaxLength(255);
            entity.Property(e => e.ShipCity).HasMaxLength(100);
            entity.Property(e => e.ShipCountry).HasMaxLength(5);
            entity.Property(e => e.ShipFromCity).HasMaxLength(100);
            entity.Property(e => e.ShipFromCountry).HasMaxLength(5);
            entity.Property(e => e.ShipFromPostalCode).HasMaxLength(20);
            entity.Property(e => e.ShipFromState).HasMaxLength(100);
            entity.Property(e => e.ShipPhoneNumber).HasMaxLength(100);
            entity.Property(e => e.ShipPostalCode).HasMaxLength(20);
            entity.Property(e => e.ShipPromotionId)
                .HasMaxLength(50)
                .HasColumnName("ShipPromotionID");
            entity.Property(e => e.ShipServiceLevel).HasMaxLength(30);
            entity.Property(e => e.ShipState).HasMaxLength(100);
            entity.Property(e => e.ShippingDate).HasColumnType("datetime");
            entity.Property(e => e.ShippingId)
                .HasMaxLength(50)
                .HasColumnName("ShippingID");
            entity.Property(e => e.ShippingPromoVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingPromoVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingPromoVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingPromoVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Sku)
                .HasMaxLength(100)
                .HasColumnName("SKU");
            entity.Property(e => e.TransactionId)
                .HasMaxLength(50)
                .HasColumnName("TransactionID");
            entity.Property(e => e.TransactionType).HasMaxLength(10);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TVcsSelfInvoiceHistory>(entity =>
        {
            entity.HasKey(e => e.KVcsdata).HasName("PK_Amazon_tVcsSelfInvoiceHistory");

            entity.ToTable("tVcsSelfInvoiceHistory", "Amazon");

            entity.Property(e => e.KVcsdata)
                .ValueGeneratedNever()
                .HasColumnName("kVCSData");
            entity.Property(e => e.Asin)
                .HasMaxLength(10)
                .HasColumnName("ASIN");
            entity.Property(e => e.BillAddress1).HasMaxLength(255);
            entity.Property(e => e.BillAddress2).HasMaxLength(255);
            entity.Property(e => e.BillAddress3).HasMaxLength(255);
            entity.Property(e => e.BillCity).HasMaxLength(100);
            entity.Property(e => e.BillCountry).HasMaxLength(5);
            entity.Property(e => e.BillPostalCode).HasMaxLength(20);
            entity.Property(e => e.BillState).HasMaxLength(100);
            entity.Property(e => e.BillingName).HasMaxLength(255);
            entity.Property(e => e.BillingPhoneNumber).HasMaxLength(100);
            entity.Property(e => e.BuyerCompanyName).HasMaxLength(255);
            entity.Property(e => e.BuyerEinvoiceAccountId)
                .HasMaxLength(30)
                .HasColumnName("buyerEInvoiceAccountId");
            entity.Property(e => e.BuyerName).HasMaxLength(255);
            entity.Property(e => e.BuyerTaxRegistrationType)
                .HasMaxLength(30)
                .HasColumnName("buyerTaxRegistrationType");
            entity.Property(e => e.BuyerVatNumber).HasMaxLength(30);
            entity.Property(e => e.CWawiRechnungskorrekturnummer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cWawiRechnungskorrekturnummer");
            entity.Property(e => e.CWawiRechnungsnummer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cWawiRechnungsnummer");
            entity.Property(e => e.CitationDe).HasColumnName("citationDe");
            entity.Property(e => e.CitationEn).HasColumnName("citationEn");
            entity.Property(e => e.CitationEs).HasColumnName("citationEs");
            entity.Property(e => e.CitationFr).HasColumnName("citationFr");
            entity.Property(e => e.CitationIt).HasColumnName("citationIt");
            entity.Property(e => e.CreationDate).HasColumnType("datetime");
            entity.Property(e => e.Currency).HasMaxLength(10);
            entity.Property(e => e.ExportOutsideEu).HasColumnName("exportOutsideEu");
            entity.Property(e => e.FulfilledBy).HasMaxLength(30);
            entity.Property(e => e.GiftPromoVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftPromoVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftPromoVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftPromoVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftPromotionId)
                .HasMaxLength(50)
                .HasColumnName("GiftPromotionID");
            entity.Property(e => e.GiftWrapVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftWrapVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftWrapVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftWrapVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.InvoiceCorrectionDetails).HasColumnName("invoiceCorrectionDetails");
            entity.Property(e => e.InvoiceNumber).HasMaxLength(100);
            entity.Property(e => e.InvoiceStatus).HasMaxLength(100);
            entity.Property(e => e.InvoiceStatusDescription).HasMaxLength(255);
            entity.Property(e => e.IsBusinessOrder).HasMaxLength(5);
            entity.Property(e => e.IsBuyerPhysicallyPresent).HasColumnName("isBuyerPhysicallyPresent");
            entity.Property(e => e.IsInvoiceCorrected).HasColumnName("isInvoiceCorrected");
            entity.Property(e => e.IsSellerPhysicallyPresent).HasColumnName("isSellerPhysicallyPresent");
            entity.Property(e => e.ItemPromoVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemPromoVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemPromoVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemPromoVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemPromotionId)
                .HasMaxLength(50)
                .HasColumnName("ItemPromotionID");
            entity.Property(e => e.ItemVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");
            entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");
            entity.Property(e => e.KGutschriftPos).HasColumnName("kGutschriftPos");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.LegacyCustomerOrderItemId).HasMaxLength(255);
            entity.Property(e => e.MarketplaceId)
                .HasMaxLength(20)
                .HasColumnName("MarketplaceID");
            entity.Property(e => e.NInProgress).HasColumnName("nInProgress");
            entity.Property(e => e.NProcessed)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("nProcessed");
            entity.Property(e => e.NUploadVersuche).HasColumnName("nUploadVersuche");
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.OrderId)
                .HasMaxLength(50)
                .HasColumnName("OrderID");
            entity.Property(e => e.OrderItemId)
                .HasMaxLength(50)
                .HasColumnName("OrderItemID");
            entity.Property(e => e.OriginalVatinvoiceNumber)
                .HasMaxLength(100)
                .HasColumnName("originalVATInvoiceNumber");
            entity.Property(e => e.PriceDesignation).HasMaxLength(5);
            entity.Property(e => e.ProductName).HasMaxLength(255);
            entity.Property(e => e.PurchaseOrderNumber).HasMaxLength(255);
            entity.Property(e => e.QuantityPurchased).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.RecipientName).HasMaxLength(255);
            entity.Property(e => e.RecommendedInvoiceFormat).HasMaxLength(50);
            entity.Property(e => e.SellerVatNumber).HasMaxLength(30);
            entity.Property(e => e.ShipAddress1).HasMaxLength(255);
            entity.Property(e => e.ShipAddress2).HasMaxLength(255);
            entity.Property(e => e.ShipAddress3).HasMaxLength(255);
            entity.Property(e => e.ShipCity).HasMaxLength(100);
            entity.Property(e => e.ShipCountry).HasMaxLength(5);
            entity.Property(e => e.ShipFromCity).HasMaxLength(100);
            entity.Property(e => e.ShipFromCountry).HasMaxLength(5);
            entity.Property(e => e.ShipFromPostalCode).HasMaxLength(20);
            entity.Property(e => e.ShipFromState).HasMaxLength(100);
            entity.Property(e => e.ShipPhoneNumber).HasMaxLength(100);
            entity.Property(e => e.ShipPostalCode).HasMaxLength(20);
            entity.Property(e => e.ShipPromotionId)
                .HasMaxLength(50)
                .HasColumnName("ShipPromotionID");
            entity.Property(e => e.ShipServiceLevel).HasMaxLength(30);
            entity.Property(e => e.ShipState).HasMaxLength(100);
            entity.Property(e => e.ShippingDate).HasColumnType("datetime");
            entity.Property(e => e.ShippingId)
                .HasMaxLength(50)
                .HasColumnName("ShippingID");
            entity.Property(e => e.ShippingPromoVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingPromoVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingPromoVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingPromoVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Sku)
                .HasMaxLength(100)
                .HasColumnName("SKU");
            entity.Property(e => e.TransactionId)
                .HasMaxLength(50)
                .HasColumnName("TransactionID");
            entity.Property(e => e.TransactionType).HasMaxLength(10);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TVcsSelfInvoicePosMapping>(entity =>
        {
            entity.HasKey(e => new { e.KAmazonBestellungPos, e.KBestellPos, e.KVcsdata }).HasName("PK_Amazon_tVcsSelfInvoicePosMapping");

            entity.ToTable("tVcsSelfInvoicePosMapping", "Amazon");

            entity.Property(e => e.KAmazonBestellungPos).HasColumnName("kAmazonBestellungPos");
            entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");
            entity.Property(e => e.KVcsdata).HasColumnName("kVCSData");
            entity.Property(e => e.NQuantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nQuantity");
        });

        modelBuilder.Entity<TVcsUploadDataQueue>(entity =>
        {
            entity.HasKey(e => e.KVcsUploadDataQueue).HasName("PK_Amazon_tVcsUploadDataQueue");

            entity.ToTable("tVcsUploadDataQueue", "Amazon");

            entity.Property(e => e.KVcsUploadDataQueue).HasColumnName("kVcsUploadDataQueue");
            entity.Property(e => e.CShippingId)
                .HasMaxLength(50)
                .HasColumnName("cShippingID");
            entity.Property(e => e.CTransactionId)
                .HasMaxLength(50)
                .HasColumnName("cTransactionId");
            entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
            entity.Property(e => e.NVersuche).HasColumnName("nVersuche");
        });

        modelBuilder.Entity<TVcsUploadDatum>(entity =>
        {
            entity.HasKey(e => e.KVcsUploadData).HasName("PK_Amazon_tVcsUploadData");

            entity.ToTable("tVcsUploadData", "Amazon");

            entity.Property(e => e.KVcsUploadData).HasColumnName("kVcsUploadData");
            entity.Property(e => e.BData).HasColumnName("bData");
            entity.Property(e => e.CFileHash)
                .HasMaxLength(255)
                .HasColumnName("cFileHash");
            entity.Property(e => e.CFileName)
                .HasMaxLength(255)
                .HasColumnName("cFileName");
            entity.Property(e => e.DErstellDatum)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dErstellDatum");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.NFileSizeKb).HasColumnName("nFileSizeKB");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<TVcsselfInvoiceLogeintrag>(entity =>
        {
            entity.HasKey(e => e.KVcsselfInvoiceLogeintrag).HasName("PK_Amazon_tVCSSelfInvoiceLogeintrag");

            entity.ToTable("tVCSSelfInvoiceLogeintrag", "Amazon");

            entity.Property(e => e.KVcsselfInvoiceLogeintrag).HasColumnName("kVCSSelfInvoiceLogeintrag");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CMeldung)
                .HasMaxLength(2048)
                .HasColumnName("cMeldung");
            entity.Property(e => e.DZeitpunkt)
                .HasColumnType("datetime")
                .HasColumnName("dZeitpunkt");
            entity.Property(e => e.KAmazonabgleichLogsitzung).HasColumnName("kAmazonabgleichLogsitzung");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.NSchweregrad).HasColumnName("nSchweregrad");
            entity.Property(e => e.NVorgang).HasColumnName("nVorgang");

            entity.HasOne(d => d.KAmazonabgleichLogsitzungNavigation).WithMany(p => p.TVcsselfInvoiceLogeintrags)
                .HasForeignKey(d => d.KAmazonabgleichLogsitzung)
                .HasConstraintName("FK_Amazon_tVCSSelfInvoiceLogeintrag_kAmazonabgleichLogsitzung");
        });

        modelBuilder.Entity<TVerfuegbarkeitsAnfrage>(entity =>
        {
            entity.HasKey(e => e.KVerfuegbarkeitsanfrage).HasName("PK_dbo_tVerfuegbarkeitsAnfrage");

            entity.ToTable("tVerfuegbarkeitsAnfrage");

            entity.HasIndex(e => e.KArtikel, "IX_tVerfuegbarkeitsAnfrage_kArtikel");

            entity.Property(e => e.KVerfuegbarkeitsanfrage).HasColumnName("kVerfuegbarkeitsanfrage");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAnrede)
                .HasMaxLength(255)
                .HasColumnName("cAnrede");
            entity.Property(e => e.CEmail)
                .HasMaxLength(255)
                .HasColumnName("cEMail");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CVorname)
                .HasMaxLength(255)
                .HasColumnName("cVorname");
            entity.Property(e => e.DBenachrichtigtAm)
                .HasColumnType("datetime")
                .HasColumnName("dBenachrichtigtAm");
            entity.Property(e => e.DDatum)
                .HasColumnType("datetime")
                .HasColumnName("dDatum");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KInetVerfuegbarkeit).HasColumnName("kInetVerfuegbarkeit");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<TVerkaufskanalArtikelDatum>(entity =>
        {
            entity.HasKey(e => e.KVerkaufskanalArtikelData).HasName("PK_SCX_tVerkaufskanalArtikelData");

            entity.ToTable("tVerkaufskanalArtikelData", "SCX", tb => tb.HasTrigger("tgr_tVerkaufskanalArtikelData_INSUP"));

            entity.HasIndex(e => new { e.KArtikel, e.KShopScx }, "UQ_SCX_tVerkaufskanalArtikelData_kArtikel_kShopScx").IsUnique();

            entity.Property(e => e.KVerkaufskanalArtikelData).HasColumnName("kVerkaufskanalArtikelData");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KCategory).HasColumnName("kCategory");
            entity.Property(e => e.KShopScx).HasColumnName("kShopScx");
            entity.Property(e => e.NMaximalerBestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nMaximalerBestand");
            entity.Property(e => e.NMindestbestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nMindestbestand");

            entity.HasOne(d => d.KArtikelNavigation).WithMany(p => p.TVerkaufskanalArtikelData)
                .HasForeignKey(d => d.KArtikel)
                .HasConstraintName("FK_SCX_tVerkaufskanalArtikelData_kArtikel");

            entity.HasOne(d => d.KShopScxNavigation).WithMany(p => p.TVerkaufskanalArtikelData)
                .HasForeignKey(d => d.KShopScx)
                .HasConstraintName("FK_SCX_tVerkaufskanalArtikelData_kShopScx");
        });

        modelBuilder.Entity<TVerkaufskanalCategoryFeldWert>(entity =>
        {
            entity.HasKey(e => e.KVerkaufskanalCategoryFeldWert).HasName("PK_SCX_tVerkaufskanalCategoryFeldWert");

            entity.ToTable("tVerkaufskanalCategoryFeldWert", "SCX", tb => tb.HasTrigger("tgr_tVerkaufskanalCategoryFeldWert_INSUP"));

            entity.Property(e => e.KVerkaufskanalCategoryFeldWert).HasColumnName("kVerkaufskanalCategoryFeldWert");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAttributeId)
                .HasMaxLength(512)
                .HasColumnName("cAttributeId");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CWert).HasColumnName("cWert");
            entity.Property(e => e.KCategory).HasColumnName("kCategory");
            entity.Property(e => e.KShopScx).HasColumnName("kShopScx");
            entity.Property(e => e.Kfile).HasColumnName("kfile");
            entity.Property(e => e.NIsDotLiquidValue).HasColumnName("nIsDotLiquidValue");
            entity.Property(e => e.NReferenzGruppe).HasColumnName("nReferenzGruppe");

            entity.HasOne(d => d.KShopScxNavigation).WithMany(p => p.TVerkaufskanalCategoryFeldWerts)
                .HasForeignKey(d => d.KShopScx)
                .HasConstraintName("FK_SCX_tVerkaufskanalCategoryFeldWert_kShopScx");

            entity.HasOne(d => d.KfileNavigation).WithMany(p => p.TVerkaufskanalCategoryFeldWerts)
                .HasForeignKey(d => d.Kfile)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SCX_tVerkaufskanalCategoryFeldWert_kfile");
        });

        modelBuilder.Entity<TVerkaufskanalChannelFeldWert>(entity =>
        {
            entity.HasKey(e => e.KVerkaufskanalChannelFeldWert).HasName("PK_SCX_tVerkaufskanalChannelFeldWert");

            entity.ToTable("tVerkaufskanalChannelFeldWert", "SCX", tb => tb.HasTrigger("tgr_tVerkaufskanalChannelFeldWert_INSUP"));

            entity.Property(e => e.KVerkaufskanalChannelFeldWert).HasColumnName("kVerkaufskanalChannelFeldWert");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAttributeId)
                .HasMaxLength(512)
                .HasColumnName("cAttributeId");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CWert).HasColumnName("cWert");
            entity.Property(e => e.KShopScx).HasColumnName("kShopScx");
            entity.Property(e => e.Kfile).HasColumnName("kfile");
            entity.Property(e => e.NIsDotLiquidValue).HasColumnName("nIsDotLiquidValue");
            entity.Property(e => e.NReferenzGruppe).HasColumnName("nReferenzGruppe");

            entity.HasOne(d => d.KShopScxNavigation).WithMany(p => p.TVerkaufskanalChannelFeldWerts)
                .HasForeignKey(d => d.KShopScx)
                .HasConstraintName("FK_SCX_tVerkaufskanalChannelFeldWert_kShopScx");

            entity.HasOne(d => d.KfileNavigation).WithMany(p => p.TVerkaufskanalChannelFeldWerts)
                .HasForeignKey(d => d.Kfile)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SCX_tVerkaufskanalChannelFeldWert_kfile");
        });

        modelBuilder.Entity<TVerkaufskanalKategoriemapping>(entity =>
        {
            entity.HasKey(e => e.KVerkaufskanalKategoriemapping).HasName("PK_SCX_tVerkaufskanalKategoriemapping");

            entity.ToTable("tVerkaufskanalKategoriemapping", "SCX");

            entity.HasIndex(e => new { e.KWawiKategorie, e.KShopScx }, "IX_SCX_tVerkaufskanalKategoriemapping_kWawiKategorie_kShopScx").IsUnique();

            entity.Property(e => e.KVerkaufskanalKategoriemapping).HasColumnName("kVerkaufskanalKategoriemapping");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KCategory).HasColumnName("kCategory");
            entity.Property(e => e.KShopScx).HasColumnName("kShopScx");
            entity.Property(e => e.KWawiKategorie).HasColumnName("kWawiKategorie");

            entity.HasOne(d => d.KShopScxNavigation).WithMany(p => p.TVerkaufskanalKategoriemappings)
                .HasForeignKey(d => d.KShopScx)
                .HasConstraintName("FK_SCX_tVerkaufskanalKategoriemapping_kShopScx");

            entity.HasOne(d => d.KWawiKategorieNavigation).WithMany(p => p.TVerkaufskanalKategoriemappings)
                .HasForeignKey(d => d.KWawiKategorie)
                .HasConstraintName("FK_SCX_tVerkaufskanalKategoriemapping_kWawiKategorie");
        });

        modelBuilder.Entity<TVerpackenSubset>(entity =>
        {
            entity.HasKey(e => e.KVerpackenSubset).HasName("PK_WMS_tVerpackenSubset");

            entity.ToTable("tVerpackenSubset", "WMS");

            entity.Property(e => e.KVerpackenSubset).HasColumnName("kVerpackenSubset");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CSubsetNumber)
                .HasMaxLength(100)
                .HasColumnName("cSubsetNumber");
            entity.Property(e => e.FFactor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fFactor");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KAuftragsPos).HasColumnName("kAuftragsPos");
            entity.Property(e => e.KPickliste).HasColumnName("kPickliste");
            entity.Property(e => e.KWarenLagerEingangSubset).HasColumnName("kWarenLagerEingangSubset");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<TVerpackenSubsetDetail>(entity =>
        {
            entity.HasKey(e => new { e.KVerpackenSubset, e.KDimension }).HasName("PK_WMS_tVerpackenSubsetDetails");

            entity.ToTable("tVerpackenSubsetDetails", "WMS");

            entity.Property(e => e.KVerpackenSubset).HasColumnName("kVerpackenSubset");
            entity.Property(e => e.KDimension).HasColumnName("kDimension");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.FGroundValue)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGroundValue");
            entity.Property(e => e.FValue)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fValue");
            entity.Property(e => e.KMassEinheit).HasColumnName("kMassEinheit");
        });

        modelBuilder.Entity<TVersand>(entity =>
        {
            entity.HasKey(e => e.KVersand).HasName("PK_dbo_tVersand");

            entity.ToTable("tVersand", tb =>
                {
                    tb.HasTrigger("jtlActionValidator_tVersand");
                    tb.HasTrigger("tgr_dbo_tVersand_INSUPDEL");
                });

            entity.HasIndex(e => e.CIdentCode, "IX_Versand_cIdentCode");

            entity.HasIndex(e => e.DVersendet, "IX_tVersand_dVersendet");

            entity.HasIndex(e => e.KLieferschein, "IX_tVersand_kLieferschein");

            entity.Property(e => e.KVersand).HasColumnName("kVersand");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CEnclosedReturnIdentCode)
                .HasMaxLength(255)
                .HasColumnName("cEnclosedReturnIdentCode");
            entity.Property(e => e.CFulfillmentCenter)
                .HasMaxLength(50)
                .HasColumnName("cFulfillmentCenter");
            entity.Property(e => e.CHinweis)
                .HasMaxLength(255)
                .HasColumnName("cHinweis");
            entity.Property(e => e.CIdentCode)
                .HasMaxLength(255)
                .HasColumnName("cIdentCode");
            entity.Property(e => e.CLogistiker)
                .HasMaxLength(50)
                .HasColumnName("cLogistiker");
            entity.Property(e => e.CReference)
                .HasMaxLength(255)
                .HasColumnName("cReference");
            entity.Property(e => e.CShipmentId)
                .HasMaxLength(50)
                .HasColumnName("cShipmentId");
            entity.Property(e => e.CShipmentOrderId)
                .HasMaxLength(100)
                .HasColumnName("cShipmentOrderId");
            entity.Property(e => e.DAnkunftszeit)
                .HasColumnType("datetime")
                .HasColumnName("dAnkunftszeit");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DVersendet)
                .HasColumnType("datetime")
                .HasColumnName("dVersendet");
            entity.Property(e => e.FGewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGewicht");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KKartonAuftragPos).HasColumnName("kKartonAuftragPos");
            entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");
            entity.Property(e => e.KLogistik).HasColumnName("kLogistik");
            entity.Property(e => e.KReturnVersandart).HasColumnName("kReturnVersandart");
            entity.Property(e => e.KVersandArt).HasColumnName("kVersandArt");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
            entity.Property(e => e.NVerpackZeitSek).HasColumnName("nVerpackZeitSek");
            entity.Property(e => e.NViaAmazonMws).HasColumnName("nViaAmazonMWS");
        });

        modelBuilder.Entity<TVersandInfo>(entity =>
        {
            entity.HasKey(e => e.KBestellung).HasName("PK_dbo_tVersandInfo");

            entity.ToTable("tVersandInfo");

            entity.Property(e => e.KBestellung)
                .ValueGeneratedNever()
                .HasColumnName("kBestellung");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DVersanddatum)
                .HasColumnType("datetime")
                .HasColumnName("dVersanddatum");
            entity.Property(e => e.NAnzahlPakete).HasColumnName("nAnzahlPakete");
            entity.Property(e => e.NAnzahlVersendetePakete).HasColumnName("nAnzahlVersendetePakete");
        });

        modelBuilder.Entity<TVersandKartonage>(entity =>
        {
            entity.HasKey(e => new { e.KVersand, e.KAuftragPosition }).HasName("PK_WMS_tVersandKartonage");

            entity.ToTable("tVersandKartonage", "WMS");

            entity.Property(e => e.KVersand).HasColumnName("kVersand");
            entity.Property(e => e.KAuftragPosition).HasColumnName("kAuftragPosition");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
        });

        modelBuilder.Entity<TVersandKonfiguration>(entity =>
        {
            entity.HasKey(e => e.KVersandKonfiguration).HasName("PK_dbo_tVersandKonfiguration");

            entity.ToTable("tVersandKonfiguration", tb => tb.HasTrigger("jtlActionValidator_tVersandkonfiguration"));

            entity.Property(e => e.KVersandKonfiguration).HasColumnName("kVersandKonfiguration");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBenutzer)
                .HasMaxLength(3000)
                .HasColumnName("cBenutzer");
            entity.Property(e => e.CFirmen)
                .HasMaxLength(1000)
                .HasColumnName("cFirmen");
            entity.Property(e => e.CKundengruppen)
                .HasMaxLength(3000)
                .HasColumnName("cKundengruppen");
            entity.Property(e => e.CLaenderListeIso).HasColumnName("cLaenderListeISO");
            entity.Property(e => e.CName)
                .HasMaxLength(60)
                .HasColumnName("cName");
            entity.Property(e => e.CPlattformen)
                .HasMaxLength(3000)
                .HasColumnName("cPlattformen");
            entity.Property(e => e.CShops)
                .HasMaxLength(3000)
                .HasColumnName("cShops");
            entity.Property(e => e.CText)
                .HasMaxLength(3000)
                .HasColumnName("cText");
            entity.Property(e => e.CVersandartListe)
                .HasMaxLength(4000)
                .HasColumnName("cVersandartListe");
            entity.Property(e => e.CVersandklassen)
                .HasMaxLength(3000)
                .HasColumnName("cVersandklassen");
            entity.Property(e => e.CWarengruppen)
                .HasMaxLength(3000)
                .HasColumnName("cWarengruppen");
            entity.Property(e => e.CZahlungsarten)
                .HasMaxLength(3000)
                .HasColumnName("cZahlungsarten");
            entity.Property(e => e.FGewichtMax)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGewichtMax");
            entity.Property(e => e.FGewichtMin)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGewichtMin");
            entity.Property(e => e.FWertBis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertBis");
            entity.Property(e => e.FWertVon)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertVon");
            entity.Property(e => e.KFormular).HasColumnName("kFormular");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.NAlleOhneVersandart).HasColumnName("nAlleOhneVersandart");
            entity.Property(e => e.NAlleOhneWarengruppe).HasColumnName("nAlleOhneWarengruppe");
            entity.Property(e => e.NAlleOhneZahlungsart).HasColumnName("nAlleOhneZahlungsart");
            entity.Property(e => e.NAnzahl).HasColumnName("nAnzahl");
            entity.Property(e => e.NAnzahlProPaket).HasColumnName("nAnzahlProPaket");
            entity.Property(e => e.NArt).HasColumnName("nArt");
            entity.Property(e => e.NArtikelBreiteBis).HasColumnName("nArtikelBreiteBis");
            entity.Property(e => e.NArtikelBreiteVon).HasColumnName("nArtikelBreiteVon");
            entity.Property(e => e.NArtikelHoeheBis).HasColumnName("nArtikelHoeheBis");
            entity.Property(e => e.NArtikelHoeheVon).HasColumnName("nArtikelHoeheVon");
            entity.Property(e => e.NArtikelLaengeBis).HasColumnName("nArtikelLaengeBis");
            entity.Property(e => e.NArtikelLaengeVon).HasColumnName("nArtikelLaengeVon");
            entity.Property(e => e.NArtikelZustandFilter).HasColumnName("nArtikelZustandFilter");
            entity.Property(e => e.NAuftragsArt).HasColumnName("nAuftragsArt");
            entity.Property(e => e.NAusfuehrungBei).HasColumnName("nAusfuehrungBei");
            entity.Property(e => e.NDiffAdressRechnungLieferschein).HasColumnName("nDiffAdressRechnungLieferschein");
            entity.Property(e => e.NEigeneFelderFilter).HasColumnName("nEigeneFelderFilter");
            entity.Property(e => e.NEnthaeltArtAusWarengruppe).HasColumnName("nEnthaeltArtAusWarengruppe");
            entity.Property(e => e.NLandTyp).HasColumnName("nLandTyp");
            entity.Property(e => e.NVorgang)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nVorgang");
        });

        modelBuilder.Entity<TVersandKonfigurationArtikelZustand>(entity =>
        {
            entity.HasKey(e => new { e.KVersandKonfiguration, e.KZustand }).HasName("PK_dbo_tVersandKonfigurationArtikelZustand");

            entity.ToTable("tVersandKonfigurationArtikelZustand");

            entity.Property(e => e.KVersandKonfiguration).HasColumnName("kVersandKonfiguration");
            entity.Property(e => e.KZustand).HasColumnName("kZustand");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
        });

        modelBuilder.Entity<TVersandKonfigurationEigeneFelder>(entity =>
        {
            entity.HasKey(e => new { e.KVersandKonfiguration, e.KAttribut }).HasName("PK_dbo_tVersandKonfigurationEigeneFelder");

            entity.ToTable("tVersandKonfigurationEigeneFelder");

            entity.Property(e => e.KVersandKonfiguration).HasColumnName("kVersandKonfiguration");
            entity.Property(e => e.KAttribut).HasColumnName("kAttribut");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CWert).HasColumnName("cWert");
            entity.Property(e => e.DWertDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dWertDateTime");
            entity.Property(e => e.FWertDecimal)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertDecimal");
            entity.Property(e => e.NWertInt).HasColumnName("nWertInt");
        });

        modelBuilder.Entity<TVersandPo>(entity =>
        {
            entity.HasKey(e => new { e.KVersand, e.KLieferscheinPos }).HasName("PK_dbo_tVersandPos");

            entity.ToTable("tVersandPos");

            entity.Property(e => e.KVersand).HasColumnName("kVersand");
            entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
        });

        modelBuilder.Entity<TVersandVorlage>(entity =>
        {
            entity.HasKey(e => e.KVersandVorlage).HasName("PK_dbo_tVersandVorlage");

            entity.ToTable("tVersandVorlage");

            entity.Property(e => e.KVersandVorlage)
                .ValueGeneratedNever()
                .HasColumnName("kVersandVorlage");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBeschreibung)
                .HasMaxLength(255)
                .HasColumnName("cBeschreibung");
            entity.Property(e => e.CDateFormat)
                .HasMaxLength(255)
                .HasColumnName("cDateFormat");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CTrennzeichen)
                .HasMaxLength(4)
                .HasColumnName("cTrennzeichen");
            entity.Property(e => e.DErstellt)
                .HasMaxLength(24)
                .HasColumnName("dErstellt");
            entity.Property(e => e.KLogistik).HasColumnName("kLogistik");
            entity.Property(e => e.NAbZeile).HasColumnName("nAbZeile");
            entity.Property(e => e.NIdentcode).HasColumnName("nIdentcode");
            entity.Property(e => e.NIntKey).HasColumnName("nIntKey");
            entity.Property(e => e.NLieferscheinNr).HasColumnName("nLieferscheinNr");
            entity.Property(e => e.NReserved).HasColumnName("nReserved");
            entity.Property(e => e.NStandard).HasColumnName("nStandard");
            entity.Property(e => e.NVersandInfo).HasColumnName("nVersandInfo");
            entity.Property(e => e.NVersandt).HasColumnName("nVersandt");
        });

        modelBuilder.Entity<TVersandartSprache>(entity =>
        {
            entity.HasKey(e => new { e.KVersandart, e.KSprache }).HasName("PK_dbo_tVersandartSprache");

            entity.ToTable("tVersandartSprache");

            entity.Property(e => e.KVersandart).HasColumnName("kVersandart");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAuftragsText)
                .HasMaxLength(255)
                .HasColumnName("cAuftragsText");
            entity.Property(e => e.CDruckText)
                .HasMaxLength(255)
                .HasColumnName("cDruckText");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
        });

        modelBuilder.Entity<TVersanddatenExportVorlage>(entity =>
        {
            entity.HasKey(e => e.KVersanddatenExportVorlage).HasName("PK_dbo_tVersanddatenExportVorlage");

            entity.ToTable("tVersanddatenExportVorlage");

            entity.Property(e => e.KVersanddatenExportVorlage).HasColumnName("kVersanddatenExportVorlage");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CContentXml).HasColumnName("cContentXml");
            entity.Property(e => e.CFilenameTemplate)
                .HasMaxLength(255)
                .HasDefaultValueSql("('')")
                .HasColumnName("cFilenameTemplate");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CPathTemplate)
                .HasMaxLength(255)
                .HasDefaultValueSql("('')")
                .HasColumnName("cPathTemplate");
            entity.Property(e => e.KAdressExportVorlage).HasColumnName("kAdressExportVorlage");
            entity.Property(e => e.NExistingFileAction).HasColumnName("nExistingFileAction");
            entity.Property(e => e.NExpertenmodus).HasColumnName("nExpertenmodus");
        });

        modelBuilder.Entity<TVersanddatenImportVorlage>(entity =>
        {
            entity.HasKey(e => e.KVersanddatenImportVorlage).HasName("PK_dbo_tVersanddatenImportVorlage");

            entity.ToTable("tVersanddatenImportVorlage");

            entity.Property(e => e.KVersanddatenImportVorlage).HasColumnName("kVersanddatenImportVorlage");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CDatumsFormat)
                .HasMaxLength(255)
                .HasColumnName("cDatumsFormat");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CTrennzeichen)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cTrennzeichen");
            entity.Property(e => e.NKopfzeilen).HasColumnName("nKopfzeilen");
            entity.Property(e => e.NSpalteId).HasColumnName("nSpalteId");
            entity.Property(e => e.NSpalteTrackingNummer).HasColumnName("nSpalteTrackingNummer");
            entity.Property(e => e.NSpalteVersandDatum).HasColumnName("nSpalteVersandDatum");
            entity.Property(e => e.NSpalteVersandInfo).HasColumnName("nSpalteVersandInfo");
        });

        modelBuilder.Entity<TVersandklasse>(entity =>
        {
            entity.HasKey(e => e.KVersandklasse).HasName("PK_dbo_tVersandklasse");

            entity.ToTable("tVersandklasse", tb => tb.HasTrigger("tgr_tVersandklasse_INSUPDEL"));

            entity.Property(e => e.KVersandklasse).HasColumnName("kVersandklasse");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasDefaultValueSql("('')")
                .HasColumnName("cName");
        });

        modelBuilder.Entity<TVersandlager>(entity =>
        {
            entity.HasKey(e => e.KWarenlager).HasName("PK_Versand_tVersandlager");

            entity.ToTable("tVersandlager", "Versand");

            entity.Property(e => e.KWarenlager)
                .ValueGeneratedNever()
                .HasColumnName("kWarenlager");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<TVersandschnittstellenKonfiguration>(entity =>
        {
            entity.HasKey(e => new { e.KVersandArt, e.CKey }).HasName("PK_dbo_tVersandschnittstellenKonfiguration");

            entity.ToTable("tVersandschnittstellenKonfiguration");

            entity.Property(e => e.KVersandArt).HasColumnName("kVersandArt");
            entity.Property(e => e.CKey)
                .HasMaxLength(255)
                .HasColumnName("cKey");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CValue)
                .HasMaxLength(4000)
                .HasColumnName("cValue");
        });

        modelBuilder.Entity<TVersandtoolDruckEinstellung>(entity =>
        {
            entity.HasKey(e => e.KVersandtoolDruckEinstellung).HasName("PK_dbo_tVersandtoolDruckEinstellung");

            entity.ToTable("tVersandtoolDruckEinstellung");

            entity.Property(e => e.KVersandtoolDruckEinstellung).HasColumnName("kVersandtoolDruckEinstellung");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CDruckername).HasColumnName("cDruckername");
            entity.Property(e => e.CRechnername).HasColumnName("cRechnername");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.NOrientation).HasColumnName("nOrientation");
            entity.Property(e => e.NPageScaling).HasColumnName("nPageScaling");
            entity.Property(e => e.NVersandSchnittstelle).HasColumnName("nVersandSchnittstelle");
        });

        modelBuilder.Entity<TVertrauenswuerdigerAbsender>(entity =>
        {
            entity.HasKey(e => e.KVertrauenswuerdigerAbsender).HasName("PK_Ticketsystem_tVertrauenswuerdigerAbsender");

            entity.ToTable("tVertrauenswuerdigerAbsender", "Ticketsystem");

            entity.Property(e => e.KVertrauenswuerdigerAbsender).HasColumnName("kVertrauenswuerdigerAbsender");
            entity.Property(e => e.CAbsender)
                .HasMaxLength(255)
                .HasColumnName("cAbsender");
            entity.Property(e => e.DErstelldatum)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dErstelldatum");
            entity.Property(e => e.KBenutzerErsteller).HasColumnName("kBenutzer_Ersteller");
            entity.Property(e => e.NAbsenderTyp).HasColumnName("nAbsenderTyp");
        });

        modelBuilder.Entity<TVordefinierteAntwort>(entity =>
        {
            entity.HasKey(e => e.KVordefinierteAntwort).HasName("PK_Ticketsystem_tVordefinierteAntwort");

            entity.ToTable("tVordefinierteAntwort", "Ticketsystem");

            entity.HasIndex(e => e.KBenutzer, "IX_Ticketsystem_tVordefinierteAntwort_kBenutzer");

            entity.Property(e => e.KVordefinierteAntwort).HasColumnName("kVordefinierteAntwort");
            entity.Property(e => e.CBeschreibung).HasColumnName("cBeschreibung");
            entity.Property(e => e.CName)
                .HasMaxLength(50)
                .HasColumnName("cName");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KFileHtmlInhalt).HasColumnName("kFile_HtmlInhalt");
            entity.Property(e => e.NIndex).HasColumnName("nIndex");

            entity.HasOne(d => d.KFileHtmlInhaltNavigation).WithMany(p => p.TVordefinierteAntworts)
                .HasForeignKey(d => d.KFileHtmlInhalt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Ticketsystem_tVordefinierteAntwort_kFile_HtmlInhalt");
        });

        modelBuilder.Entity<TVorgang>(entity =>
        {
            entity.HasKey(e => e.KVorgang).HasName("PK_FulfillmentNetwork.tVorgang");

            entity.ToTable("tVorgang", "FulfillmentNetwork");

            entity.HasIndex(e => new { e.KWawiKey, e.CFfnKey, e.KVorgangType }, "UQ_FulfillmentNetwork_tVorgang_kWawiKey_cFfnKey_kVorgangType").IsUnique();

            entity.Property(e => e.KVorgang).HasColumnName("kVorgang");
            entity.Property(e => e.CComment)
                .IsUnicode(false)
                .HasColumnName("cComment");
            entity.Property(e => e.CFfnKey)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("cFfnKey");
            entity.Property(e => e.CWawiNumber)
                .HasMaxLength(128)
                .HasColumnName("cWawiNumber");
            entity.Property(e => e.DErrorSince).HasColumnName("dErrorSince");
            entity.Property(e => e.DUpdatedAt).HasColumnName("dUpdatedAt");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KArtikelHistory).HasColumnName("kArtikelHistory");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KFulfillmentAuftrag).HasColumnName("kFulfillmentAuftrag");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");
            entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");
            entity.Property(e => e.KVorgangType).HasColumnName("kVorgangType");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.KWawiKey).HasColumnName("kWawiKey");
            entity.Property(e => e.NErrorCount).HasColumnName("nErrorCount");

            entity.HasOne(d => d.KVorgangTypeNavigation).WithMany(p => p.TVorgangs)
                .HasForeignKey(d => d.KVorgangType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FulfillmentNetwork_tVorgang_kVorgangType");
        });

        modelBuilder.Entity<TVorgangFulfillmentLog>(entity =>
        {
            entity.HasKey(e => e.KVorgangFulfillmentLog).HasName("PK_FulfillmentNetwork.tVorgang_FulfillmentLog");

            entity.ToTable("tVorgang_FulfillmentLog", "FulfillmentNetwork");

            entity.HasIndex(e => new { e.KVorgang, e.KFulfillmentLog }, "UQ_FulfillmentNetwork_tVorgang_FulfillmentLog_kVorgang_kFulfillmentLog").IsUnique();

            entity.Property(e => e.KVorgangFulfillmentLog).HasColumnName("kVorgang_FulfillmentLog");
            entity.Property(e => e.KFulfillmentLog).HasColumnName("kFulfillmentLog");
            entity.Property(e => e.KVorgang).HasColumnName("kVorgang");
        });

        modelBuilder.Entity<TVorgangQueue>(entity =>
        {
            entity.HasKey(e => e.KVorgangQueue).HasName("PK_FulfillmentNetwork.tVorgang_Queue");

            entity.ToTable("tVorgang_Queue", "FulfillmentNetwork");

            entity.HasIndex(e => new { e.KVorgang, e.KQueue }, "UQ_FulfillmentNetwork_tVorgang_Queue_kVorgang_kQueue").IsUnique();

            entity.Property(e => e.KVorgangQueue).HasColumnName("kVorgang_queue");
            entity.Property(e => e.KQueue).HasColumnName("kQueue");
            entity.Property(e => e.KVorgang).HasColumnName("kVorgang");

            entity.HasOne(d => d.KQueueNavigation).WithMany(p => p.TVorgangQueues)
                .HasForeignKey(d => d.KQueue)
                .HasConstraintName("FK_FulfillmentNetwork_tVorgang_Queue_kQueue");

            entity.HasOne(d => d.KVorgangNavigation).WithMany(p => p.TVorgangQueues)
                .HasForeignKey(d => d.KVorgang)
                .HasConstraintName("FK_FulfillmentNetwork_tVorgang_Queue_kVorgang");
        });

        modelBuilder.Entity<TVorgangType>(entity =>
        {
            entity.HasKey(e => e.KVorgangType).HasName("PK_FulfillmentNetwork.tVorgangType");

            entity.ToTable("tVorgangType", "FulfillmentNetwork");

            entity.Property(e => e.KVorgangType)
                .ValueGeneratedNever()
                .HasColumnName("kVorgangType");
            entity.Property(e => e.CFfnKeyType)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("cFfnKeyType");
            entity.Property(e => e.CId)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("cId");
            entity.Property(e => e.CWawiKeyType)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("cWawiKeyType");
            entity.Property(e => e.KScopeType).HasColumnName("kScopeType");
            entity.Property(e => e.KUserType).HasColumnName("kUserType");

            entity.HasOne(d => d.KScopeTypeNavigation).WithMany(p => p.TVorgangTypes)
                .HasForeignKey(d => d.KScopeType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FulfillmentNetwork_tVorgangType_kScopeType");

            entity.HasOne(d => d.KUserTypeNavigation).WithMany(p => p.TVorgangTypes)
                .HasForeignKey(d => d.KUserType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FulfillmentNetwork_tVorgangType_kUserType");
        });

        modelBuilder.Entity<TVorgangsfarbe>(entity =>
        {
            entity.HasKey(e => e.KVorgangsfarbe).HasName("PK_Einstellung_tVorgangsfarbe");

            entity.ToTable("tVorgangsfarbe", "Einstellung");

            entity.Property(e => e.KVorgangsfarbe).HasColumnName("kVorgangsfarbe");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBedeutung)
                .HasMaxLength(255)
                .HasColumnName("cBedeutung");
            entity.Property(e => e.NAktiv).HasColumnName("nAktiv");
            entity.Property(e => e.NAlphawert).HasColumnName("nAlphawert");
            entity.Property(e => e.NAngebot).HasColumnName("nAngebot");
            entity.Property(e => e.NAuftrag).HasColumnName("nAuftrag");
            entity.Property(e => e.NBlauwert).HasColumnName("nBlauwert");
            entity.Property(e => e.NGruenwert).HasColumnName("nGruenwert");
            entity.Property(e => e.NRechnung).HasColumnName("nRechnung");
            entity.Property(e => e.NRechnungskorrektur).HasColumnName("nRechnungskorrektur");
            entity.Property(e => e.NRotwert).HasColumnName("nRotwert");
        });

        modelBuilder.Entity<TVorgangsstatus>(entity =>
        {
            entity.HasKey(e => e.KVorgangsstatus).HasName("PK_Verkauf_tVorgangsstatus");

            entity.ToTable("tVorgangsstatus", "Verkauf");

            entity.Property(e => e.KVorgangsstatus).HasColumnName("kVorgangsstatus");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.NAbonnement).HasColumnName("nAbonnement");
            entity.Property(e => e.NAngebot).HasColumnName("nAngebot");
            entity.Property(e => e.NAuftrag).HasColumnName("nAuftrag");
            entity.Property(e => e.NRechnung).HasColumnName("nRechnung");
        });

        modelBuilder.Entity<TVorlage>(entity =>
        {
            entity.HasKey(e => e.KVorlage).HasName("PK_Report_tVorlage");

            entity.ToTable("tVorlage", "Report");

            entity.HasIndex(e => e.BItemId, "UQ_Report_tVorlage_bItemId").IsUnique();

            entity.Property(e => e.KVorlage).HasColumnName("kVorlage");
            entity.Property(e => e.BDaten).HasColumnName("bDaten");
            entity.Property(e => e.BItemId).HasColumnName("bItemId");
            entity.Property(e => e.BOriginItemId).HasColumnName("bOriginItemId");
            entity.Property(e => e.BParentItemId).HasColumnName("bParentItemId");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CDescriptor).HasColumnName("cDescriptor");
            entity.Property(e => e.CMahnstufe)
                .HasMaxLength(64)
                .HasColumnName("cMahnstufe");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.COriginDescription)
                .HasMaxLength(128)
                .HasColumnName("cOriginDescription");
            entity.Property(e => e.COriginVersion)
                .HasMaxLength(32)
                .HasColumnName("cOriginVersion");
            entity.Property(e => e.CTyp)
                .HasMaxLength(64)
                .HasColumnName("cTyp");
            entity.Property(e => e.DLastModification)
                .HasColumnType("datetime")
                .HasColumnName("dLastModification");
            entity.Property(e => e.DOriginLastModification)
                .HasColumnType("datetime")
                .HasColumnName("dOriginLastModification");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KKundengruppe).HasColumnName("kKundengruppe");
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.KVersandart).HasColumnName("kVersandart");
            entity.Property(e => e.KVorlagenset).HasColumnName("kVorlagenset");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.NVorlagensettypId).HasColumnName("nVorlagensettypId");
            entity.Property(e => e.NVorlagentyp).HasColumnName("nVorlagentyp");

            entity.HasOne(d => d.KVorlagensetNavigation).WithMany(p => p.TVorlages)
                .HasForeignKey(d => d.KVorlagenset)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Report_tVorlage_kVorlagenset");
        });

        modelBuilder.Entity<TVorlage1>(entity =>
        {
            entity.HasKey(e => e.KVorlage).HasName("PK_Repricer_tVorlage");

            entity.ToTable("tVorlage", "Repricer");

            entity.HasIndex(e => e.CName, "UQ_Repricer_tVorlage_cName").IsUnique();

            entity.HasIndex(e => e.KAmazonStrategieAuswahl, "UQ_Repricer_tVorlage_kAmazonStrategieAuswahl").IsUnique();

            entity.Property(e => e.KVorlage).HasColumnName("kVorlage");
            entity.Property(e => e.CName)
                .HasMaxLength(100)
                .HasColumnName("cName");
            entity.Property(e => e.KAmazonStrategieAuswahl).HasColumnName("kAmazonStrategieAuswahl");

            entity.HasOne(d => d.KAmazonStrategieAuswahlNavigation).WithOne(p => p.TVorlage1)
                .HasForeignKey<TVorlage1>(d => d.KAmazonStrategieAuswahl)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Repricer_tVorlage_kAmazonStrategieAuswahl");
        });

        modelBuilder.Entity<TVorlagenset>(entity =>
        {
            entity.HasKey(e => e.KVorlagenset).HasName("PK_Report_tVorlagenset");

            entity.ToTable("tVorlagenset", "Report");

            entity.Property(e => e.KVorlagenset).HasColumnName("kVorlagenset");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(64)
                .HasColumnName("cName");
            entity.Property(e => e.NFlags).HasColumnName("nFlags");
            entity.Property(e => e.NIstGlobal).HasColumnName("nIstGlobal");
            entity.Property(e => e.NIstStandard).HasColumnName("nIstStandard");
            entity.Property(e => e.NVorlagensettyp).HasColumnName("nVorlagensettyp");
        });

        modelBuilder.Entity<TVorlagensetEinstellung>(entity =>
        {
            entity.HasKey(e => e.KVorlagensetEinstellung).HasName("PK_Report_tVorlagensetEinstellung");

            entity.ToTable("tVorlagensetEinstellung", "Report");

            entity.HasIndex(e => new { e.CRechnername, e.KBenutzer, e.KVorlagenset }, "UQ_Report_tVorlagensetEinstellung_cRechnername_kBenutzer_kVorlagenset").IsUnique();

            entity.Property(e => e.KVorlagensetEinstellung).HasColumnName("kVorlagensetEinstellung");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CDruckername1)
                .HasMaxLength(255)
                .HasColumnName("cDruckername1");
            entity.Property(e => e.CDruckername2)
                .HasMaxLength(255)
                .HasColumnName("cDruckername2");
            entity.Property(e => e.CFaxname)
                .HasMaxLength(255)
                .HasColumnName("cFaxname");
            entity.Property(e => e.CRechnername)
                .HasMaxLength(255)
                .HasColumnName("cRechnername");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KVorlagenset).HasColumnName("kVorlagenset");
            entity.Property(e => e.NKopien1).HasColumnName("nKopien1");
            entity.Property(e => e.NKopien2).HasColumnName("nKopien2");

            entity.HasOne(d => d.KVorlagensetNavigation).WithMany(p => p.TVorlagensetEinstellungs)
                .HasForeignKey(d => d.KVorlagenset)
                .HasConstraintName("FK_Report_tVorlagensetEinstellung_kVorlagenset");
        });

        modelBuilder.Entity<TVoucher>(entity =>
        {
            entity.HasKey(e => e.KVouchers);

            entity.ToTable("tVouchers");

            entity.Property(e => e.KVouchers).HasColumnName("kVouchers");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("cName");
            entity.Property(e => e.KArtikelGutschein).HasColumnName("kArtikelGutschein");
            entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");
            entity.Property(e => e.NApiTyp).HasColumnName("nApiTyp");
            entity.Property(e => e.NMonatsuebergreifend).HasColumnName("nMonatsuebergreifend");

            entity.HasOne(d => d.KArtikelGutscheinNavigation).WithMany(p => p.TVouchers)
                .HasForeignKey(d => d.KArtikelGutschein)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_dbo_tVouchers_kArtikelGutschein");

            entity.HasOne(d => d.KZahlungsartNavigation).WithMany(p => p.TVouchers)
                .HasForeignKey(d => d.KZahlungsart)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_dbo_tVouchers_kZahlungsart");
        });

        modelBuilder.Entity<TVoucherCloudLogeintrag>(entity =>
        {
            entity.HasKey(e => e.KVoucherCloudLogeintrag).HasName("PK_dbo_tVoucherCloudLogeintrag");

            entity.ToTable("tVoucherCloudLogeintrag");

            entity.Property(e => e.KVoucherCloudLogeintrag).HasColumnName("kVoucherCloudLogeintrag");
            entity.Property(e => e.CMeldung)
                .HasMaxLength(2048)
                .HasColumnName("cMeldung");
            entity.Property(e => e.DZeitpunkt)
                .HasColumnType("datetime")
                .HasColumnName("dZeitpunkt");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NSchweregrad).HasColumnName("nSchweregrad");
        });

        modelBuilder.Entity<TVoucherEinloesungen>(entity =>
        {
            entity.HasKey(e => e.KVoucherEinloesungen).HasName("PK_dbo_tVoucherEinloesungen");

            entity.ToTable("tVoucherEinloesungen");

            entity.Property(e => e.KVoucherEinloesungen).HasColumnName("kVoucherEinloesungen");
            entity.Property(e => e.CUsageId)
                .HasMaxLength(255)
                .HasColumnName("cUsageId");
            entity.Property(e => e.CVoucherId)
                .HasMaxLength(255)
                .HasColumnName("cVoucherId");
            entity.Property(e => e.DEingeloest)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dEingeloest");
            entity.Property(e => e.FAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAmount");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KAuftragPosition).HasColumnName("kAuftragPosition");
            entity.Property(e => e.KZahlung).HasColumnName("kZahlung");
            entity.Property(e => e.KZahlungGegenbuchung).HasColumnName("kZahlungGegenbuchung");
            entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");
            entity.Property(e => e.NStorno).HasColumnName("nStorno");

            entity.HasOne(d => d.KAuftragNavigation).WithMany(p => p.TVoucherEinloesungens)
                .HasForeignKey(d => d.KAuftrag)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo_tVoucherEinloesungen_kAuftrag");

            entity.HasOne(d => d.KAuftragPositionNavigation).WithMany(p => p.TVoucherEinloesungens)
                .HasForeignKey(d => d.KAuftragPosition)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_dbo_tVoucherEinloesungen_kAuftragPosition");

            entity.HasOne(d => d.KZahlungNavigation).WithMany(p => p.TVoucherEinloesungenKZahlungNavigations)
                .HasForeignKey(d => d.KZahlung)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_dbo_tVoucherEinloesungen_kZahlung");

            entity.HasOne(d => d.KZahlungGegenbuchungNavigation).WithMany(p => p.TVoucherEinloesungenKZahlungGegenbuchungNavigations)
                .HasForeignKey(d => d.KZahlungGegenbuchung)
                .HasConstraintName("FK_dbo_tVoucherEinloesungen_kZahlungGegenbuchung");

            entity.HasOne(d => d.KZahlungsartNavigation).WithMany(p => p.TVoucherEinloesungens)
                .HasForeignKey(d => d.KZahlungsart)
                .HasConstraintName("FK_dbo_tVoucherEinloesungen_kZahlungsart");
        });

        modelBuilder.Entity<TVouchersToken>(entity =>
        {
            entity.HasKey(e => e.KVouchers);

            entity.ToTable("tVouchersToken");

            entity.Property(e => e.KVouchers)
                .ValueGeneratedNever()
                .HasColumnName("kVouchers");
            entity.Property(e => e.CAccessToken).HasColumnName("cAccessToken");

            entity.HasOne(d => d.KVouchersNavigation).WithOne(p => p.TVouchersToken)
                .HasForeignKey<TVouchersToken>(d => d.KVouchers)
                .HasConstraintName("FK_dbo_tVouchersToken_kVouchers");
        });

        modelBuilder.Entity<TWaehrung>(entity =>
        {
            entity.HasKey(e => e.KWaehrung).HasName("PK_dbo_tWaehrung");

            entity.ToTable("tWaehrung", tb => tb.HasTrigger("tgr_tWaehrung_Connector"));

            entity.Property(e => e.KWaehrung)
                .ValueGeneratedNever()
                .HasColumnName("kWaehrung");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CEamapping)
                .HasMaxLength(20)
                .HasColumnName("cEAMapping");
            entity.Property(e => e.CName)
                .HasMaxLength(20)
                .HasColumnName("cName");
            entity.Property(e => e.CNameHtml)
                .HasMaxLength(255)
                .HasColumnName("cNameHTML");
            entity.Property(e => e.CTrennzeichenCent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cTrennzeichenCent");
            entity.Property(e => e.CTrennzeichenTausend)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cTrennzeichenTausend");
            entity.Property(e => e.DAktualisiert)
                .HasColumnType("datetime")
                .HasColumnName("dAktualisiert");
            entity.Property(e => e.FFaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fFaktor");
            entity.Property(e => e.NStandard).HasColumnName("nStandard");
            entity.Property(e => e.NVorBetrag).HasColumnName("nVorBetrag");
        });

        modelBuilder.Entity<TWaehrungAlt>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tWaehrungAlt");

            entity.HasIndex(e => e.KWaehrung, "IX_tWaehrungAlt_kWaehrung");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DAktualisiert)
                .HasColumnType("datetime")
                .HasColumnName("dAktualisiert");
            entity.Property(e => e.FFaktorAlt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fFaktorAlt");
            entity.Property(e => e.FFaktorNeu)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fFaktorNeu");
            entity.Property(e => e.KWaehrung).HasColumnName("kWaehrung");
        });

        modelBuilder.Entity<TWaehrungIso>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tWaehrungISO");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CIso)
                .HasMaxLength(10)
                .HasColumnName("cISO");
            entity.Property(e => e.CLand)
                .HasMaxLength(255)
                .HasColumnName("cLand");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
        });

        modelBuilder.Entity<TWarehouseBinDevice>(entity =>
        {
            entity.HasKey(e => e.KWarehouseBinDevice).HasName("PK_WMS_tWarehouseBinDevice");

            entity.ToTable("tWarehouseBinDevice", "WMS");

            entity.HasIndex(e => e.CName, "IX_WMS_tWarehouseBinDevice_cName");

            entity.HasIndex(e => e.KWarenLagerPlatz, "IX_WMS_tWarehouseBinDevice_kWarenLagerPlatz");

            entity.HasIndex(e => new { e.KWarenLagerPlatz, e.CName }, "UQ_WMS_tWarehouseBinDevice_kWarenLagerPlatz_cName").IsUnique();

            entity.Property(e => e.KWarehouseBinDevice).HasColumnName("kWarehouseBinDevice");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CValue)
                .HasColumnType("ntext")
                .HasColumnName("cValue");
            entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");

            entity.HasOne(d => d.KWarenLagerPlatzNavigation).WithMany(p => p.TWarehouseBinDevices)
                .HasForeignKey(d => d.KWarenLagerPlatz)
                .HasConstraintName("FK_WMS_tWarehouseBinDevice_kWarenLagerPlatz");
        });

        modelBuilder.Entity<TWarenLager>(entity =>
        {
            entity.HasKey(e => e.KWarenLager).HasName("PK_dbo_tWarenLager");

            entity.ToTable("tWarenLager", tb =>
                {
                    tb.HasTrigger("jtlActionValidator_tWarenLager");
                    tb.HasTrigger("tgr_tWarenLager_INSUPDEL");
                });

            entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAdresszusatz)
                .HasMaxLength(255)
                .HasColumnName("cAdresszusatz");
            entity.Property(e => e.CAnsprechpartnerAbteilung)
                .HasMaxLength(255)
                .HasColumnName("cAnsprechpartnerAbteilung");
            entity.Property(e => e.CAnsprechpartnerAnrede)
                .HasMaxLength(255)
                .HasColumnName("cAnsprechpartnerAnrede");
            entity.Property(e => e.CAnsprechpartnerEmail)
                .HasMaxLength(255)
                .HasColumnName("cAnsprechpartnerEMail");
            entity.Property(e => e.CAnsprechpartnerFax)
                .HasMaxLength(255)
                .HasColumnName("cAnsprechpartnerFax");
            entity.Property(e => e.CAnsprechpartnerName)
                .HasMaxLength(255)
                .HasColumnName("cAnsprechpartnerName");
            entity.Property(e => e.CAnsprechpartnerTel)
                .HasMaxLength(255)
                .HasColumnName("cAnsprechpartnerTel");
            entity.Property(e => e.CAnsprechpartnerVorname)
                .HasMaxLength(255)
                .HasColumnName("cAnsprechpartnerVorname");
            entity.Property(e => e.CBeschreibung)
                .HasMaxLength(1024)
                .HasColumnName("cBeschreibung");
            entity.Property(e => e.CBundesland)
                .HasMaxLength(100)
                .HasColumnName("cBundesland");
            entity.Property(e => e.CDimension1Name)
                .HasMaxLength(255)
                .HasColumnName("cDimension1Name");
            entity.Property(e => e.CDimension1Trennzeichen)
                .HasMaxLength(1)
                .HasColumnName("cDimension1Trennzeichen");
            entity.Property(e => e.CDimension2Name)
                .HasMaxLength(255)
                .HasColumnName("cDimension2Name");
            entity.Property(e => e.CDimension2Trennzeichen)
                .HasMaxLength(1)
                .HasColumnName("cDimension2Trennzeichen");
            entity.Property(e => e.CDimension3Name)
                .HasMaxLength(255)
                .HasColumnName("cDimension3Name");
            entity.Property(e => e.CDimension3Trennzeichen)
                .HasMaxLength(1)
                .HasColumnName("cDimension3Trennzeichen");
            entity.Property(e => e.CDimension4Name)
                .HasMaxLength(255)
                .HasColumnName("cDimension4Name");
            entity.Property(e => e.CDimension4Trennzeichen)
                .HasMaxLength(1)
                .HasColumnName("cDimension4Trennzeichen");
            entity.Property(e => e.CDimension5Name)
                .HasMaxLength(255)
                .HasColumnName("cDimension5Name");
            entity.Property(e => e.CDimension5Trennzeichen)
                .HasMaxLength(1)
                .HasColumnName("cDimension5Trennzeichen");
            entity.Property(e => e.CEmpfaengerFirma)
                .HasMaxLength(255)
                .HasColumnName("cEmpfaengerFirma");
            entity.Property(e => e.CFfnWarehouseId)
                .HasMaxLength(50)
                .HasColumnName("cFfnWarehouseId");
            entity.Property(e => e.CKuerzel)
                .HasMaxLength(255)
                .HasColumnName("cKuerzel");
            entity.Property(e => e.CLagerTyp)
                .HasMaxLength(255)
                .HasColumnName("cLagerTyp");
            entity.Property(e => e.CLand)
                .HasMaxLength(255)
                .HasColumnName("cLand");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPlz)
                .HasMaxLength(255)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KQuellLager).HasColumnName("kQuellLager");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.KZielLager).HasColumnName("kZielLager");
            entity.Property(e => e.NAktiv).HasColumnName("nAktiv");
            entity.Property(e => e.NAuslieferungsPrio)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nAuslieferungsPrio");
            entity.Property(e => e.NDimension1Laenge).HasColumnName("nDimension1Laenge");
            entity.Property(e => e.NDimension1Typ).HasColumnName("nDimension1Typ");
            entity.Property(e => e.NDimension2Laenge).HasColumnName("nDimension2Laenge");
            entity.Property(e => e.NDimension2Typ).HasColumnName("nDimension2Typ");
            entity.Property(e => e.NDimension3Laenge).HasColumnName("nDimension3Laenge");
            entity.Property(e => e.NDimension3Typ).HasColumnName("nDimension3Typ");
            entity.Property(e => e.NDimension4Laenge).HasColumnName("nDimension4Laenge");
            entity.Property(e => e.NDimension4Typ).HasColumnName("nDimension4Typ");
            entity.Property(e => e.NDimension5Laenge).HasColumnName("nDimension5Laenge");
            entity.Property(e => e.NDimension5Typ).HasColumnName("nDimension5Typ");
            entity.Property(e => e.NFulfillment).HasColumnName("nFulfillment");
            entity.Property(e => e.NLagerplatzVerwaltung).HasColumnName("nLagerplatzVerwaltung");
            entity.Property(e => e.NPackStationAktiv).HasColumnName("nPackStationAktiv");
        });

        modelBuilder.Entity<TWarenLagerAusgang>(entity =>
        {
            entity.HasKey(e => e.KWarenLagerAusgang).HasName("PK_dbo_tWarenLagerAusgang");

            entity.ToTable("tWarenLagerAusgang", tb => tb.HasTrigger("tgr_tWarenlagerAusgang_INSUPDEL"));

            entity.HasIndex(e => e.KWarenLagerEingang, "IX_dbo_tWarenLagerAusgang_kWarenLagerEingang");

            entity.HasIndex(e => new { e.KArtikel, e.DErstellt }, "IX_tWarenLagerAusgang_kArtikel_dErstellt");

            entity.HasIndex(e => e.KLieferscheinPos, "IX_tWarenLagerAusgang_kLieferscheinPos");

            entity.Property(e => e.KWarenLagerAusgang).HasColumnName("kWarenLagerAusgang");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CKommentar)
                .HasMaxLength(255)
                .HasColumnName("cKommentar");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBuchungsart)
                .HasDefaultValueSql("((20))")
                .HasColumnName("kBuchungsart");
            entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");
            entity.Property(e => e.KSessionId).HasColumnName("kSessionID");
            entity.Property(e => e.KWarenLagerEingang).HasColumnName("kWarenLagerEingang");
            entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");
        });

        modelBuilder.Entity<TWarenLagerDimensionTyp>(entity =>
        {
            entity.HasKey(e => e.KWarenLagerDimensionTyp).HasName("PK_dbo_tWarenLagerDimensionTyp");

            entity.ToTable("tWarenLagerDimensionTyp");

            entity.Property(e => e.KWarenLagerDimensionTyp).HasColumnName("kWarenLagerDimensionTyp");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
        });

        modelBuilder.Entity<TWarenLagerEingang>(entity =>
        {
            entity.HasKey(e => e.KWarenLagerEingang).HasName("PK_dbo_tWarenLagerEingang");

            entity.ToTable("tWarenLagerEingang", tb => tb.HasTrigger("tgr_tWarenlagerEingang_INSUPDEL"));

            entity.HasIndex(e => new { e.KSessionId, e.FAnzahlAktuell }, "IX_DBO_tWarenLagerEingang_kSessionID_fAnzahlAktuell");

            entity.HasIndex(e => new { e.KArtikel, e.DErstellt }, "IX_dbo_tWarenLagerEingang_kArtikel_dErstellt").IsDescending(false, true);

            entity.HasIndex(e => new { e.KArtikel, e.KWarenLagerPlatz }, "IX_dbo_tWarenLagerEingang_kArtikel_kWarenLagerPlatz_fAnzahlAktuell");

            entity.HasIndex(e => e.KArtikel, "IX_tWarenLagerEingang_kArtikel_INCL").HasFilter("([fAnzahlAktuell]>(0))");

            entity.HasIndex(e => new { e.KLhm, e.FAnzahlAktuell }, "IX_tWarenLagerEingang_kLhm_fAnzahlAktuell");

            entity.HasIndex(e => e.KLieferantenBestellungPos, "IX_tWarenLagerEingang_kLieferantenBestellungPos");

            entity.HasIndex(e => new { e.KWarenLagerPlatz, e.KArtikel, e.FAnzahlAktuell }, "IX_tWarenLagerEingang_kWarenLagerPlatz_kArtikel_fAnzahlAktuell_cChargenNr_dMHD_fAnzahlReserviertPickpos");

            entity.Property(e => e.KWarenLagerEingang).HasColumnName("kWarenLagerEingang");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CChargenNr)
                .HasMaxLength(255)
                .HasColumnName("cChargenNr");
            entity.Property(e => e.CKommentar)
                .HasMaxLength(255)
                .HasColumnName("cKommentar");
            entity.Property(e => e.CLieferscheinNr)
                .HasMaxLength(255)
                .HasColumnName("cLieferscheinNr");
            entity.Property(e => e.DAusgebuchtAm)
                .HasColumnType("datetime")
                .HasColumnName("dAusgebuchtAm");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DGeliefertAm)
                .HasColumnType("datetime")
                .HasColumnName("dGeliefertAM");
            entity.Property(e => e.DMhd)
                .HasColumnType("datetime")
                .HasColumnName("dMHD");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.FAnzahlAktuell)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahlAktuell");
            entity.Property(e => e.FAnzahlReserviertPickpos)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahlReserviertPickpos");
            entity.Property(e => e.FEkeinzel)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEKEinzel");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBestellPosUmlagerung).HasColumnName("kBestellPosUmlagerung");
            entity.Property(e => e.KBuchungsart)
                .HasDefaultValueSql("((10))")
                .HasColumnName("kBuchungsart");
            entity.Property(e => e.KGutschriftPos).HasColumnName("kGutschriftPos");
            entity.Property(e => e.KLhm).HasColumnName("kLHM");
            entity.Property(e => e.KLieferantenBestellungPos).HasColumnName("kLieferantenBestellungPos");
            entity.Property(e => e.KRmretourePos).HasColumnName("kRMRetourePos");
            entity.Property(e => e.KSessionId).HasColumnName("kSessionID");
            entity.Property(e => e.KWarenLagerAusgang).HasColumnName("kWarenLagerAusgang");
            entity.Property(e => e.KWarenLagerEingangUrsprung).HasColumnName("kWarenLagerEingang_Ursprung");
            entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");
            entity.Property(e => e.NGldberechnungMitEingangsrechnung).HasColumnName("nGLDBerechnungMitEingangsrechnung");
        });

        modelBuilder.Entity<TWarenLagerEingangHistorie>(entity =>
        {
            entity.HasKey(e => e.KWarenLagerEingangHistorie).HasName("PK_dbo_tWarenLagerEingangHistorie");

            entity.ToTable("tWarenLagerEingangHistorie");

            entity.HasIndex(e => e.KBuchungsArt, "IX_tWarenLagerEingangHistorie_kBuchungsArt");

            entity.HasIndex(e => new { e.KWarenLagerPlatzStart, e.KBuchungsArt }, "IX_tWarenLagerEingangHistorie_kWarenLagerPlatzStart_kBuchungsArt");

            entity.Property(e => e.KWarenLagerEingangHistorie).HasColumnName("kWarenLagerEingangHistorie");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CDimensionen)
                .HasMaxLength(255)
                .HasColumnName("cDimensionen");
            entity.Property(e => e.CKommentar)
                .HasMaxLength(255)
                .HasColumnName("cKommentar");
            entity.Property(e => e.CSubsetNumber)
                .HasMaxLength(100)
                .HasColumnName("cSubsetNumber");
            entity.Property(e => e.DZeitstempel)
                .HasColumnType("datetime")
                .HasColumnName("dZeitstempel");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBuchungsArt).HasColumnName("kBuchungsArt");
            entity.Property(e => e.KLhmstart).HasColumnName("kLHMStart");
            entity.Property(e => e.KLhmziel).HasColumnName("kLHMZiel");
            entity.Property(e => e.KSessionId).HasColumnName("kSessionID");
            entity.Property(e => e.KWarenLagerEingang).HasColumnName("kWarenLagerEingang");
            entity.Property(e => e.KWarenLagerPlatzStart).HasColumnName("kWarenLagerPlatzStart");
            entity.Property(e => e.KWarenLagerPlatzZiel).HasColumnName("kWarenLagerPlatzZiel");
        });

        modelBuilder.Entity<TWarenLagerEingangSubset>(entity =>
        {
            entity.HasKey(e => e.KWarenLagerEingangSubset).HasName("PK_dbo_tWarenLagerEingangSubsets");

            entity.ToTable("tWarenLagerEingangSubsets");

            entity.HasIndex(e => e.CSubsetNumber, "IX_tWarenLagerEingangSubsets_cSubsetNumber");

            entity.HasIndex(e => e.KWarenLagerEingang, "IX_tWarenLagerEingangSubsets_kWarenLagerEingang");

            entity.Property(e => e.KWarenLagerEingangSubset).HasColumnName("kWarenLagerEingangSubset");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CSubsetNumber)
                .HasMaxLength(100)
                .HasColumnName("cSubsetNumber");
            entity.Property(e => e.FFactor)
                .HasDefaultValueSql("((1))")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fFactor");
            entity.Property(e => e.FQuantity)
                .HasDefaultValueSql("((1))")
                .HasColumnName("fQuantity");
            entity.Property(e => e.KWarenLagerEingang).HasColumnName("kWarenLagerEingang");

            entity.HasOne(d => d.KWarenLagerEingangNavigation).WithMany(p => p.TWarenLagerEingangSubsets)
                .HasForeignKey(d => d.KWarenLagerEingang)
                .HasConstraintName("FK_dbo_tWarenLagerEingangSubsets_kWarenLagerEingang");
        });

        modelBuilder.Entity<TWarenLagerEingangSubsetDetail>(entity =>
        {
            entity.HasKey(e => new { e.KWarenLagerEingangSubset, e.KDimension }).HasName("PK_dbo_tWarenLagerEingangSubsetDetails");

            entity.ToTable("tWarenLagerEingangSubsetDetails");

            entity.HasIndex(e => e.KDimension, "IX_tWarenLagerEingangSubsetDetails_kDimension");

            entity.HasIndex(e => e.KWarenLagerEingangSubset, "IX_tWarenLagerEingangSubsetDetails_kWarenLagerEingangSubset");

            entity.Property(e => e.KWarenLagerEingangSubset).HasColumnName("kWarenLagerEingangSubset");
            entity.Property(e => e.KDimension).HasColumnName("kDimension");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.FGroundValue)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGroundValue");
            entity.Property(e => e.FValue)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fValue");
            entity.Property(e => e.KMassEinheit).HasColumnName("kMassEinheit");

            entity.HasOne(d => d.KDimensionNavigation).WithMany(p => p.TWarenLagerEingangSubsetDetails)
                .HasForeignKey(d => d.KDimension)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo_tWarenLagerEingangSubsetDetails_kDimension");

            entity.HasOne(d => d.KWarenLagerEingangSubsetNavigation).WithMany(p => p.TWarenLagerEingangSubsetDetails)
                .HasForeignKey(d => d.KWarenLagerEingangSubset)
                .HasConstraintName("FK_dbo_tWarenLagerEingangSubsetDetails_kWarenLagerEingangSubset");
        });

        modelBuilder.Entity<TWarenLagerFulFillmentDienstleister>(entity =>
        {
            entity.HasKey(e => e.KWarenLager).HasName("PK_dbo_tWarenLagerFulFillmentDienstleister");

            entity.ToTable("tWarenLagerFulFillmentDienstleister");

            entity.Property(e => e.KWarenLager)
                .ValueGeneratedNever()
                .HasColumnName("kWarenLager");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KFormularFfnLieferschein).HasColumnName("kFormularFfnLieferschein");
            entity.Property(e => e.KFormularFfnRechnung).HasColumnName("kFormularFfnRechnung");
            entity.Property(e => e.KFormularFulfillmentAuftrag).HasColumnName("kFormularFulfillmentAuftrag");
            entity.Property(e => e.KFormularLieferschein).HasColumnName("kFormularLieferschein");
            entity.Property(e => e.KFulfillmentDienstleister).HasColumnName("kFulfillmentDienstleister");
            entity.Property(e => e.NDruckFf).HasColumnName("nDruckFF");
            entity.Property(e => e.NDruckLieferschein).HasColumnName("nDruckLieferschein");
            entity.Property(e => e.NExportFf).HasColumnName("nExportFF");
            entity.Property(e => e.NFaxFf).HasColumnName("nFaxFF");
            entity.Property(e => e.NFaxLieferschein).HasColumnName("nFaxLieferschein");
            entity.Property(e => e.NMailFf).HasColumnName("nMailFF");
            entity.Property(e => e.NMailLieferschein).HasColumnName("nMailLieferschein");
            entity.Property(e => e.XFfnOptionen)
                .HasColumnType("xml")
                .HasColumnName("xFfnOptionen");
        });

        modelBuilder.Entity<TWarenLagerOptionen>(entity =>
        {
            entity.HasKey(e => e.KWarenLagerOptionen).HasName("PK_dbo_tWarenLagerOptionen");

            entity.ToTable("tWarenLagerOptionen");

            entity.HasIndex(e => e.KWarenLager, "UQ_dbo_tWarenLagerOptionen_kWarenLager").IsUnique();

            entity.Property(e => e.KWarenLagerOptionen).HasColumnName("kWarenLagerOptionen");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KKategorieNeuerArtikel).HasColumnName("kKategorieNeuerArtikel");
            entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");
            entity.Property(e => e.KWarenLagerPlatzEingang).HasColumnName("kWarenLagerPlatzEingang");
            entity.Property(e => e.KWarenLagerPlatzEingangDefaultMobile).HasColumnName("kWarenLagerPlatzEingangDefaultMobile");
            entity.Property(e => e.KWarenLagerPlatzRetoure).HasColumnName("kWarenLagerPlatzRetoure");
            entity.Property(e => e.KWarenlagerPlatzBoxen).HasColumnName("kWarenlagerPlatzBoxen");
            entity.Property(e => e.KWarenlagerPlatzInBearbeitung).HasColumnName("kWarenlagerPlatzInBearbeitung");
            entity.Property(e => e.NAbgelaufenesMhdnichtEinbuchen).HasColumnName("nAbgelaufenesMHDNichtEinbuchen");
            entity.Property(e => e.NAllePackHinweiseAlsPopUp).HasColumnName("nAllePackHinweiseAlsPopUp");
            entity.Property(e => e.NArtikelAnmerkungenPackhinweis).HasColumnName("nArtikelAnmerkungenPackhinweis");
            entity.Property(e => e.NArtikelAttributeBeachten)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nArtikelAttributeBeachten");
            entity.Property(e => e.NArtikelBezeichnungAusArtikel).HasColumnName("nArtikelBezeichnungAusArtikel");
            entity.Property(e => e.NAutoAbmelden).HasColumnName("nAutoAbmelden");
            entity.Property(e => e.NBesondereWeplaetze).HasColumnName("nBesondereWEPlaetze");
            entity.Property(e => e.NBoxenDirektTauschen)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nBoxenDirektTauschen");
            entity.Property(e => e.NBoxenDruckAusAuftragsVorlage)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nBoxenDruckAusAuftragsVorlage");
            entity.Property(e => e.NBoxenFuellenBestaetigen)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nBoxenFuellenBestaetigen");
            entity.Property(e => e.NBoxenKeineRechnungBeiNullEuro).HasColumnName("nBoxenKeineRechnungBeiNullEuro");
            entity.Property(e => e.NBoxenKeinenRechnungOhneDruck).HasColumnName("nBoxenKeinenRechnungOhneDruck");
            entity.Property(e => e.NBoxenSplittAuftrag).HasColumnName("nBoxenSplittAuftrag");
            entity.Property(e => e.NChargen).HasColumnName("nChargen");
            entity.Property(e => e.NCreateInventurMobile).HasColumnName("nCreateInventurMobile");
            entity.Property(e => e.NCreateInventurMobileInterval)
                .HasDefaultValueSql("((12))")
                .HasColumnName("nCreateInventurMobile_Interval");
            entity.Property(e => e.NCreateInventurMobileNumberOfPlatzDefault)
                .HasDefaultValueSql("((5))")
                .HasColumnName("nCreateInventurMobile_NumberOfPlatzDefault");
            entity.Property(e => e.NCreateInventurMobileNumberOfPlatzManuel)
                .HasDefaultValueSql("((1))")
                .HasColumnName("nCreateInventurMobile_NumberOfPlatzManuel");
            entity.Property(e => e.NCreateInventurMobilePeriod)
                .HasDefaultValueSql("((3))")
                .HasColumnName("nCreateInventurMobile_Period");
            entity.Property(e => e.NCreateInventurMobilePlatz).HasColumnName("nCreateInventurMobile_Platz");
            entity.Property(e => e.NEazyShipping).HasColumnName("nEazyShipping");
            entity.Property(e => e.NEazyShippingArtikelButtons).HasColumnName("nEazyShippingArtikelButtons");
            entity.Property(e => e.NEazyShippingArtikelDetails).HasColumnName("nEazyShippingArtikelDetails");
            entity.Property(e => e.NEazyShippingFreiposButtons).HasColumnName("nEazyShippingFreiposButtons");
            entity.Property(e => e.NEazyShippingKeineRechnungBeiNullEuro).HasColumnName("nEazyShippingKeineRechnungBeiNullEuro");
            entity.Property(e => e.NEazyShippingKeinenRechnungOhneDruck).HasColumnName("nEazyShippingKeinenRechnungOhneDruck");
            entity.Property(e => e.NEazyShippingSplittAuftrag).HasColumnName("nEazyShippingSplittAuftrag");
            entity.Property(e => e.NEinlagerwagenVerwenden)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nEinlagerwagenVerwenden");
            entity.Property(e => e.NFirstMobileAppPicklistenVorlageVerwenden)
                .HasDefaultValueSql("((1))")
                .HasColumnName("nFirstMobileAppPicklistenVorlageVerwenden");
            entity.Property(e => e.NFreierWeEkunbekanntHandling).HasColumnName("nFreierWeEKUnbekanntHandling");
            entity.Property(e => e.NFreierWeLieferantenArtikelAutoZuordnung).HasColumnName("nFreierWeLieferantenArtikelAutoZuordnung");
            entity.Property(e => e.NGanzeBestellungVerpackenInEazyShip).HasColumnName("nGanzeBestellungVerpackenInEazyShip");
            entity.Property(e => e.NGanzeBestellungVerpackenNurPickInEazyShip).HasColumnName("nGanzeBestellungVerpackenNurPickInEazyShip");
            entity.Property(e => e.NIdentischeAuftraegeMitTeillieferung).HasColumnName("nIdentischeAuftraegeMitTeillieferung");
            entity.Property(e => e.NKartonagenabfrageVerpflichtend).HasColumnName("nKartonagenabfrageVerpflichtend");
            entity.Property(e => e.NKeineLiefNachfrage).HasColumnName("nKeineLiefNachfrage");
            entity.Property(e => e.NKommentarPflichtArtikelZustandAendern).HasColumnName("nKommentarPflichtArtikelZustandAendern");
            entity.Property(e => e.NKommentarPflichtInventur).HasColumnName("nKommentarPflichtInventur");
            entity.Property(e => e.NKommentarPflichtKorrekturbuchung).HasColumnName("nKommentarPflichtKorrekturbuchung");
            entity.Property(e => e.NKundeEigenesFeld).HasColumnName("nKundeEigenesFeld");
            entity.Property(e => e.NLagerKleinerNullImWesetzen).HasColumnName("nLagerKleinerNullImWESetzen");
            entity.Property(e => e.NLagerplatzBestaetigen).HasColumnName("nLagerplatzBestaetigen");
            entity.Property(e => e.NMassenauslieferung).HasColumnName("nMassenauslieferung");
            entity.Property(e => e.NMassenauslieferungMinGleicheAuftraege)
                .HasDefaultValueSql("((2))")
                .HasColumnName("nMassenauslieferungMinGleicheAuftraege");
            entity.Property(e => e.NMassenauslieferungPicklisteDrucken).HasColumnName("nMassenauslieferungPicklisteDrucken");
            entity.Property(e => e.NMengeBestaetigen).HasColumnName("nMengeBestaetigen");
            entity.Property(e => e.NMhd).HasColumnName("nMHD");
            entity.Property(e => e.NMhdChargenOnDifferendPlatzen).HasColumnName("nMhdChargenOnDifferendPlatzen");
            entity.Property(e => e.NMhdchargeAnywhere).HasColumnName("nMHDChargeAnywhere");
            entity.Property(e => e.NMixMhdChargen)
                .HasDefaultValueSql("((1))")
                .HasColumnName("nMixMhdChargen");
            entity.Property(e => e.NMobileInventurOhneVorladen).HasColumnName("nMobileInventurOhneVorladen");
            entity.Property(e => e.NMobilerPacktisch).HasColumnName("nMobilerPacktisch");
            entity.Property(e => e.NMobilerPacktischGebindeScanForArtikel).HasColumnName("nMobilerPacktischGebindeScanForArtikel");
            entity.Property(e => e.NMobilerPacktischKeineRechnungBeiNullEuro).HasColumnName("nMobilerPacktischKeineRechnungBeiNullEuro");
            entity.Property(e => e.NMobilerPacktischKeinenRechnungOhneDruck).HasColumnName("nMobilerPacktischKeinenRechnungOhneDruck");
            entity.Property(e => e.NMobilerPacktischMengeBestaetigen).HasColumnName("nMobilerPacktischMengeBestaetigen");
            entity.Property(e => e.NNachschubNurBezahlteAuftraege).HasColumnName("nNachschubNurBezahlteAuftraege");
            entity.Property(e => e.NNachschubOhneScan).HasColumnName("nNachschubOhneScan");
            entity.Property(e => e.NNumPad).HasColumnName("nNumPad");
            entity.Property(e => e.NPackHinweisVorVerpacken)
                .HasDefaultValueSql("((1))")
                .HasColumnName("nPackHinweisVorVerpacken");
            entity.Property(e => e.NPacktischMhdchargeNichtScannen)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nPacktischMHDChargeNichtScannen");
            entity.Property(e => e.NPartialPickEnabled).HasColumnName("nPartialPickEnabled");
            entity.Property(e => e.NPickHinweisArtikelAnmerkung).HasColumnName("nPickHinweisArtikelAnmerkung");
            entity.Property(e => e.NPickHinweisArtikelEigenesFeld).HasColumnName("nPickHinweisArtikelEigenesFeld");
            entity.Property(e => e.NPickenOhneScan).HasColumnName("nPickenOhneScan");
            entity.Property(e => e.NPoolRoKo).HasColumnName("nPoolRoKo");
            entity.Property(e => e.NRetoureAufVorgabeplatz)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nRetoureAufVorgabeplatz");
            entity.Property(e => e.NRetourenPlatzManuellWaehlen).HasColumnName("nRetourenPlatzManuellWaehlen");
            entity.Property(e => e.NRollendeKommissionierung).HasColumnName("nRollendeKommissionierung");
            entity.Property(e => e.NScanInMehrereArtikel).HasColumnName("nScanInMehrereArtikel");
            entity.Property(e => e.NSelectPlatzByTouch).HasColumnName("nSelectPlatzByTouch");
            entity.Property(e => e.NTeillieferbarUmlagern).HasColumnName("nTeillieferbarUmlagern");
            entity.Property(e => e.NTeilmengen).HasColumnName("nTeilmengen");
            entity.Property(e => e.NTeilrechnungBoxen).HasColumnName("nTeilrechnungBoxen");
            entity.Property(e => e.NTeilrechnungEazyshipping).HasColumnName("nTeilrechnungEazyshipping");
            entity.Property(e => e.NTeilrechnungMoPa).HasColumnName("nTeilrechnungMoPa");
            entity.Property(e => e.NUeberlieferung).HasColumnName("nUeberlieferung");
            entity.Property(e => e.NUeberlieferungNachfragen).HasColumnName("nUeberlieferungNachfragen");
            entity.Property(e => e.NUseScannerImWe).HasColumnName("nUseScannerImWE");
            entity.Property(e => e.NVerpackenAnmerkung).HasColumnName("nVerpackenAnmerkung");
            entity.Property(e => e.NVerpackenBestellhinweis).HasColumnName("nVerpackenBestellhinweis");
            entity.Property(e => e.NVerpackenMehrMengeErlaubt).HasColumnName("nVerpackenMehrMengeErlaubt");
            entity.Property(e => e.NVersandBoxenButtons)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nVersandBoxenButtons");
            entity.Property(e => e.NVersandBoxenFreiPosButtons)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nVersandBoxenFreiPosButtons");
            entity.Property(e => e.NVersandBoxenScan)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nVersandBoxenScan");
            entity.Property(e => e.NVersandHinweisConfirmEnabled).HasColumnName("nVersandHinweisConfirmEnabled");
            entity.Property(e => e.NVersandboxenProzess).HasColumnName("nVersandboxenProzess");
            entity.Property(e => e.NVersandboxenProzessmitRoKo).HasColumnName("nVersandboxenProzessmitRoKo");
            entity.Property(e => e.NWadirektAusWe).HasColumnName("nWADirektAusWE");
            entity.Property(e => e.NWadirektAusWe1artikel).HasColumnName("nWADirektAusWE1Artikel");
            entity.Property(e => e.NWadirektAusWeauchLeereBoxenBelegen).HasColumnName("nWADirektAusWEAuchLeereBoxenBelegen");
            entity.Property(e => e.NWadirektAusWeauchLeereBoxenBelegenFreiProzent).HasColumnName("nWADirektAusWEAuchLeereBoxenBelegenFreiProzent");
            entity.Property(e => e.NWadirektAusWeauchLeereBoxenBelegenZulauf).HasColumnName("nWADirektAusWEAuchLeereBoxenBelegenZulauf");
            entity.Property(e => e.NWadirektWe1artikelMengenCheck).HasColumnName("nWADirektWE1ArtikelMengenCheck");
            entity.Property(e => e.NWahintDisappearAfterXseconds).HasColumnName("nWAHintDisappearAfterXSeconds");
            entity.Property(e => e.NWareingangBestellungAnzeigen).HasColumnName("nWareingangBestellungAnzeigen");
            entity.Property(e => e.NWareneingangOhneScan).HasColumnName("nWareneingangOhneScan");
            entity.Property(e => e.NWaverpackteArtikelNachUnten).HasColumnName("nWAVerpackteArtikelNachUnten");
            entity.Property(e => e.NWaversandartScan).HasColumnName("nWAVersandartScan");
            entity.Property(e => e.NWePlatzSortierung).HasColumnName("nWePlatzSortierung");
            entity.Property(e => e.NWeaufVorgabeplatz).HasColumnName("nWEAufVorgabeplatz");
            entity.Property(e => e.NWedirektBuchenAktiv)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nWEDirektBuchenAktiv");
            entity.Property(e => e.NWefremdeWarenlagerAnzeigen).HasColumnName("nWEFremdeWarenlagerAnzeigen");
            entity.Property(e => e.NWehinweisArtikelAnmerkung).HasColumnName("nWEHinweisArtikelAnmerkung");
            entity.Property(e => e.NWehinweisArtikelEigenesFeld).HasColumnName("nWEHinweisArtikelEigenesFeld");
            entity.Property(e => e.NWeinLeereBoxenNurBeiVorkomm).HasColumnName("nWEInLeereBoxenNurBeiVorkomm");
            entity.Property(e => e.NWemengeInArtField)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nWEMengeInArtField");
            entity.Property(e => e.NWeneuenArtikelAnlegen).HasColumnName("nWENeuenArtikelAnlegen");
            entity.Property(e => e.NWeoffeneBestellungsmengenZeigen).HasColumnName("nWEOffeneBestellungsmengenZeigen");
            entity.Property(e => e.NWesortArtikelByEinbuchdatum).HasColumnName("nWESortArtikelByEinbuchdatum");
        });

        modelBuilder.Entity<TWarenLagerPlatz>(entity =>
        {
            entity.HasKey(e => e.KWarenLagerPlatz).HasName("PK_dbo_tWarenLagerPlatz");

            entity.ToTable("tWarenLagerPlatz", tb =>
                {
                    tb.HasTrigger("jtlActionValidator_tWarenLagerPlatz");
                    tb.HasTrigger("tgr_tWarenLagerPlatz_INSUPDEL");
                });

            entity.HasIndex(e => new { e.KWarenLagerPlatzTyp, e.KWarenLager }, "IX_tWarenLagerPlatz_kWarenLagerPlatzTyp_kWarenLager");

            entity.HasIndex(e => new { e.KWarenLager, e.NStatus }, "IX_tWarenLagerPlatz_kWarenLager_nStatus");

            entity.HasIndex(e => new { e.NPrio, e.NSort, e.KWarenLager }, "IX_tWarenLagerPlatz_nPrio_nSort_kWarenlager");

            entity.HasIndex(e => new { e.NStatus, e.KWarenLagerPlatzTyp, e.CName }, "IX_tWarenLagerPlatz_nStatus_kWarenLagerPlatzTyp_cName");

            entity.HasIndex(e => new { e.CName, e.KWarenLager }, "UQ_dbo_tWarenLagerPlatz_cName_kWarenLager").IsUnique();

            entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CKommentar).HasColumnName("cKommentar");
            entity.Property(e => e.CName)
                .HasMaxLength(50)
                .HasColumnName("cName");
            entity.Property(e => e.DWmsInventurDatum)
                .HasColumnType("datetime")
                .HasColumnName("dWmsInventurDatum");
            entity.Property(e => e.FBreite)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBreite");
            entity.Property(e => e.FGewichtMax)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGewichtMax");
            entity.Property(e => e.FHoehe)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fHoehe");
            entity.Property(e => e.FLaenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLaenge");
            entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");
            entity.Property(e => e.KWarenLagerPlatzTyp).HasColumnName("kWarenLagerPlatzTyp");
            entity.Property(e => e.KWmsInventur).HasColumnName("kWmsInventur");
            entity.Property(e => e.NAuslieferungGesperrt).HasColumnName("nAuslieferungGesperrt");
            entity.Property(e => e.NGesperrt).HasColumnName("nGesperrt");
            entity.Property(e => e.NInvGezaehlt)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nInvGezaehlt");
            entity.Property(e => e.NPreInvStatus).HasColumnName("nPreInvStatus");
            entity.Property(e => e.NPrio).HasColumnName("nPrio");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<TWarenLagerPlatzArtikel>(entity =>
        {
            entity.HasKey(e => new { e.KWarenLagerPlatz, e.KArtikel }).HasName("PK_dbo_tWarenLagerPlatzArtikel");

            entity.ToTable("tWarenLagerPlatzArtikel", tb => tb.HasTrigger("tgr_tWarenLagerPlatzArtikel_DELETE"));

            entity.HasIndex(e => e.KArtikel, "IX_tWarenLagerPlatzArtikel_kArtikel");

            entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CKommentar1)
                .HasMaxLength(255)
                .HasColumnName("cKommentar_1");
            entity.Property(e => e.CKommentar2)
                .HasMaxLength(255)
                .HasColumnName("cKommentar_2");
        });

        modelBuilder.Entity<TWarenLagerPlatzDefault>(entity =>
        {
            entity.HasKey(e => new { e.KWarenLager, e.KWarenLagerGroesse }).HasName("PK_dbo_tWarenLagerPlatzDefault");

            entity.ToTable("tWarenLagerPlatzDefault");

            entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");
            entity.Property(e => e.KWarenLagerGroesse).HasColumnName("kWarenLagerGroesse");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CKommentar)
                .HasMaxLength(255)
                .HasColumnName("cKommentar");
            entity.Property(e => e.FBreite)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBreite");
            entity.Property(e => e.FGewichtMax)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGewichtMax");
            entity.Property(e => e.FHoehe)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fHoehe");
            entity.Property(e => e.FLaenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLaenge");
            entity.Property(e => e.NAnzahlMax).HasColumnName("nAnzahlMax");
        });

        modelBuilder.Entity<TWarenLagerPrioGlobal>(entity =>
        {
            entity.HasKey(e => new { e.KWarenLager, e.KVertriebsweg }).HasName("PK_dbo_tWarenLagerPrioGlobal");

            entity.ToTable("tWarenLagerPrioGlobal");

            entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");
            entity.Property(e => e.KVertriebsweg).HasColumnName("kVertriebsweg");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.NPrio).HasColumnName("nPrio");
        });

        modelBuilder.Entity<TWarengruppe>(entity =>
        {
            entity.HasKey(e => e.KWarengruppe).HasName("PK_dbo_tWarengruppe");

            entity.ToTable("tWarengruppe", tb => tb.HasTrigger("tgr_tWarengruppe_Shop"));

            entity.Property(e => e.KWarengruppe)
                .ValueGeneratedNever()
                .HasColumnName("kWarengruppe");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
        });

        modelBuilder.Entity<TWarenlagerArtikelOptionen>(entity =>
        {
            entity.HasKey(e => new { e.KArtikel, e.KWarenlager }).HasName("PK_dbo_tWarenlagerArtikelOptionen");

            entity.ToTable("tWarenlagerArtikelOptionen");

            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.FMindestMenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMindestMenge");
            entity.Property(e => e.FNachschiebenAb)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fNachschiebenAb");
            entity.Property(e => e.FVorschlag)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVorschlag");
            entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");
            entity.Property(e => e.KWmslagerBereich).HasColumnName("kWMSLagerBereich");
        });

        modelBuilder.Entity<TWarenlagerOptionenArtikelbild>(entity =>
        {
            entity.HasKey(e => e.KWarenlagerOptionenArtikelbild).HasName("PK_dbo_tWarenlagerOptionenArtikelbild");

            entity.ToTable("tWarenlagerOptionenArtikelbild");

            entity.Property(e => e.KWarenlagerOptionenArtikelbild).HasColumnName("kWarenlagerOptionenArtikelbild");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CCustomName)
                .HasMaxLength(255)
                .HasColumnName("cCustomName");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NSprache)
                .HasDefaultValueSql("((49))")
                .HasColumnName("nSprache");
        });

        modelBuilder.Entity<TWarenlagerOptionenAuftragDetail>(entity =>
        {
            entity.HasKey(e => e.KWarenlagerOptionenAuftragDetails).HasName("PK_dbo_tWarenlagerOptionenAuftragDetails");

            entity.ToTable("tWarenlagerOptionenAuftragDetails");

            entity.Property(e => e.KWarenlagerOptionenAuftragDetails).HasColumnName("kWarenlagerOptionenAuftragDetails");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CCustomName)
                .HasMaxLength(255)
                .HasColumnName("cCustomName");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NSprache)
                .HasDefaultValueSql("((49))")
                .HasColumnName("nSprache");
        });

        modelBuilder.Entity<TWartungsDaten>(entity =>
        {
            entity.HasKey(e => e.KWartungsDaten).HasName("PK_dbo_tWartungsDaten");

            entity.ToTable("tWartungsDaten");

            entity.Property(e => e.KWartungsDaten)
                .ValueGeneratedNever()
                .HasColumnName("kWartungsDaten");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CInhalt).HasColumnName("cInhalt");
            entity.Property(e => e.CKatalog)
                .HasMaxLength(128)
                .HasColumnName("cKatalog");
            entity.Property(e => e.DWartungsDatenTag)
                .HasColumnType("datetime")
                .HasColumnName("dWartungsDatenTag");
        });

        modelBuilder.Entity<TWawiAttribut>(entity =>
        {
            entity.HasKey(e => e.KWawiAttribut).HasName("PK_dbo_tWawiAttribut");

            entity.ToTable("tWawiAttribut", tb => tb.HasTrigger("jtlActionValidator_tWawiAttribut"));

            entity.HasIndex(e => e.KAttribut, "UQ_dbo_tWawiAttribut_kAttribut").IsUnique();

            entity.Property(e => e.KWawiAttribut).HasColumnName("kWawiAttribut");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KAttribut).HasColumnName("kAttribut");
        });

        modelBuilder.Entity<TWawiAttributSprache>(entity =>
        {
            entity.HasKey(e => new { e.KWawiAttribut, e.KSprache }).HasName("PK_dbo_tWawiAttributSprache");

            entity.ToTable("tWawiAttributSprache");

            entity.Property(e => e.KWawiAttribut).HasColumnName("kWawiAttribut");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CWertVarchar).HasColumnName("cWertVarchar");
            entity.Property(e => e.DWertDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dWertDateTime");
            entity.Property(e => e.FWertDecimal)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertDecimal");
            entity.Property(e => e.NWertInt).HasColumnName("nWertInt");
        });

        modelBuilder.Entity<TWebshopModule>(entity =>
        {
            entity.HasKey(e => new { e.CApikey, e.CLizenzkey }).HasName("PK_dbo_tWebshopModule");

            entity.ToTable("tWebshopModule", tb => tb.HasTrigger("tgr_tWebshopModule_INSERT"));

            entity.Property(e => e.CApikey)
                .HasMaxLength(255)
                .HasColumnName("cAPIKey");
            entity.Property(e => e.CLizenzkey)
                .HasMaxLength(255)
                .HasColumnName("cLizenzkey");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CId)
                .HasMaxLength(255)
                .HasColumnName("cID");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
        });

        modelBuilder.Entity<TWidget>(entity =>
        {
            entity.HasKey(e => e.KWidget).HasName("PK_dbo_tWidget");

            entity.ToTable("tWidget");

            entity.Property(e => e.KWidget).HasColumnName("kWidget");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CArbeitsplatz)
                .HasMaxLength(255)
                .HasColumnName("cArbeitsplatz");
            entity.Property(e => e.CTitel)
                .HasMaxLength(255)
                .HasColumnName("cTitel");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KWidgetTemplate).HasColumnName("kWidgetTemplate");
            entity.Property(e => e.NApplikation).HasColumnName("nApplikation");
        });

        modelBuilder.Entity<TWidgetBenutzer>(entity =>
        {
            entity.HasKey(e => e.KWidgetBenutzer).HasName("PK_dbo_tWidgetBenutzer");

            entity.ToTable("tWidgetBenutzer");

            entity.Property(e => e.KWidgetBenutzer).HasColumnName("kWidgetBenutzer");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KWidgetTemplate).HasColumnName("kWidgetTemplate");
        });

        modelBuilder.Entity<TWidgetDashboardPageMap>(entity =>
        {
            entity.HasKey(e => e.KWidgetDashboardPageMap).HasName("PK_Mobile_tWidgetDashboardPageMap");

            entity.ToTable("tWidgetDashboardPageMap", "Mobile");

            entity.Property(e => e.KWidgetDashboardPageMap).HasColumnName("kWidgetDashboardPageMap");
            entity.Property(e => e.KDashboardPage).HasColumnName("kDashboardPage");
            entity.Property(e => e.KWidget).HasColumnName("kWidget");
            entity.Property(e => e.NGridColumn).HasColumnName("nGridColumn");
            entity.Property(e => e.NGridRow).HasColumnName("nGridRow");
        });

        modelBuilder.Entity<TWidgetLayout>(entity =>
        {
            entity.HasKey(e => e.KWidgetLayout).HasName("PK_dbo_tWidgetLayout");

            entity.ToTable("tWidgetLayout");

            entity.Property(e => e.KWidgetLayout).HasColumnName("kWidgetLayout");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CArbeitsplatz)
                .HasMaxLength(255)
                .HasColumnName("cArbeitsplatz");
            entity.Property(e => e.CLayout).HasColumnName("cLayout");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.NApplikation).HasColumnName("nApplikation");
        });

        modelBuilder.Entity<TWidgetSetting>(entity =>
        {
            entity.HasKey(e => e.KWidgetSettings).HasName("PK_dbo_tWidgetSettings");

            entity.ToTable("tWidgetSettings");

            entity.Property(e => e.KWidgetSettings).HasColumnName("kWidgetSettings");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CArbeitsplatz)
                .HasMaxLength(255)
                .HasColumnName("cArbeitsplatz");
            entity.Property(e => e.CKey)
                .HasMaxLength(255)
                .HasColumnName("cKey");
            entity.Property(e => e.CValue)
                .HasMaxLength(255)
                .HasColumnName("cValue");
            entity.Property(e => e.KWidget).HasColumnName("kWidget");
            entity.Property(e => e.NApplikation).HasColumnName("nApplikation");
        });

        modelBuilder.Entity<TWidgetTemplate>(entity =>
        {
            entity.HasKey(e => e.KWidgetTemplate).HasName("PK_dbo_tWidgetTemplate");

            entity.ToTable("tWidgetTemplate");

            entity.Property(e => e.KWidgetTemplate).HasColumnName("kWidgetTemplate");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBeschreibung)
                .HasMaxLength(255)
                .HasColumnName("cBeschreibung");
            entity.Property(e => e.CKategorie)
                .HasMaxLength(255)
                .HasColumnName("cKategorie");
            entity.Property(e => e.CKlasse)
                .HasMaxLength(255)
                .HasColumnName("cKlasse");
            entity.Property(e => e.CTitel)
                .HasMaxLength(255)
                .HasColumnName("cTitel");
        });

        modelBuilder.Entity<TWidgetTemplateSetting>(entity =>
        {
            entity.HasKey(e => e.KWidgetTemplateSettings).HasName("PK_dbo_tWidgetTemplateSettings");

            entity.ToTable("tWidgetTemplateSettings");

            entity.Property(e => e.KWidgetTemplateSettings).HasColumnName("kWidgetTemplateSettings");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBeschreibung)
                .HasMaxLength(255)
                .HasColumnName("cBeschreibung");
            entity.Property(e => e.CKey)
                .HasMaxLength(255)
                .HasColumnName("cKey");
            entity.Property(e => e.CTitel)
                .HasMaxLength(255)
                .HasColumnName("cTitel");
            entity.Property(e => e.CValue).HasColumnName("cValue");
            entity.Property(e => e.KWidgetTemplate).HasColumnName("kWidgetTemplate");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NType).HasColumnName("nType");
        });

        modelBuilder.Entity<TWmsInventur>(entity =>
        {
            entity.HasKey(e => e.KWmsInventur).HasName("PK_dbo_tWmsInventur");

            entity.ToTable("tWmsInventur");

            entity.Property(e => e.KWmsInventur).HasColumnName("kWmsInventur");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CKommentar)
                .HasMaxLength(255)
                .HasColumnName("cKommentar");
            entity.Property(e => e.DAngelegt)
                .HasColumnType("datetime")
                .HasColumnName("dAngelegt");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.NCreatedMobile).HasColumnName("nCreatedMobile");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<TWmsInventurlog>(entity =>
        {
            entity.HasKey(e => e.KWmsInventurlog).HasName("PK_dbo_tWmsInventurlog");

            entity.ToTable("tWmsInventurlog", tb => tb.HasTrigger("jtlActionValidator_tWMSInventurLog"));

            entity.HasIndex(e => new { e.KWmsInventur, e.KWarenlagerPlatz }, "IX_tWmsInventurlog_kWmsInventur_kWarenlagerPlatz");

            entity.Property(e => e.KWmsInventurlog).HasColumnName("kWmsInventurlog");
            entity.Property(e => e.CCharge)
                .HasMaxLength(255)
                .HasColumnName("cCharge");
            entity.Property(e => e.DMhd)
                .HasColumnType("datetime")
                .HasColumnName("dMHD");
            entity.Property(e => e.DZeitstempel)
                .HasColumnType("datetime")
                .HasColumnName("dZeitstempel");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.FDifferenz)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fDifferenz");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KWarenLagerEingangSubset).HasColumnName("kWarenLagerEingangSubset");
            entity.Property(e => e.KWarenlagerPlatz).HasColumnName("kWarenlagerPlatz");
            entity.Property(e => e.KWmsInventur).HasColumnName("kWmsInventur");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<TWmsInventurlogSubset>(entity =>
        {
            entity.HasKey(e => e.KWmsInventurlogSubsets).HasName("PK_dbo_tWmsInventurlogSubsets");

            entity.ToTable("tWmsInventurlogSubsets", tb => tb.HasTrigger("jtlActionValidator_tWmsInventurlogSubsets"));

            entity.Property(e => e.KWmsInventurlogSubsets).HasColumnName("kWmsInventurlogSubsets");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CSubsetNumber)
                .HasMaxLength(100)
                .HasColumnName("cSubsetNumber");
            entity.Property(e => e.FFactor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fFactor");
            entity.Property(e => e.FQuantity).HasColumnName("fQuantity");
            entity.Property(e => e.KWmsInventurlog).HasColumnName("kWmsInventurlog");
        });

        modelBuilder.Entity<TWmsInventurlogSubsetDetail>(entity =>
        {
            entity.HasKey(e => new { e.KWmsInventurlogSubsets, e.KDimension }).HasName("PK_dbo_tWmsInventurlogSubsetDetails");

            entity.ToTable("tWmsInventurlogSubsetDetails");

            entity.Property(e => e.KWmsInventurlogSubsets).HasColumnName("kWmsInventurlogSubsets");
            entity.Property(e => e.KDimension).HasColumnName("kDimension");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.FGroundValue)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGroundValue");
            entity.Property(e => e.FValue)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fValue");
            entity.Property(e => e.KMassEinheit).HasColumnName("kMassEinheit");
        });

        modelBuilder.Entity<TWmsboxenPackVerpackteSerNo>(entity =>
        {
            entity.HasKey(e => e.KWmsboxenPackVerpackteSerNos).HasName("PK_dbo_tWMSBoxenPackVerpackteSerNos");

            entity.ToTable("tWMSBoxenPackVerpackteSerNos");

            entity.Property(e => e.KWmsboxenPackVerpackteSerNos).HasColumnName("kWMSBoxenPackVerpackteSerNos");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CSerNo)
                .HasMaxLength(128)
                .HasColumnName("cSerNo");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
        });

        modelBuilder.Entity<TWmsbyLight>(entity =>
        {
            entity.HasKey(e => e.KWmsbyLight).HasName("PK_dbo_tWMSByLight");

            entity.ToTable("tWMSByLight");

            entity.Property(e => e.KWmsbyLight).HasColumnName("kWMSByLight");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CArbeitsPlatz)
                .HasMaxLength(200)
                .HasColumnName("cArbeitsPlatz");
            entity.Property(e => e.CId)
                .HasMaxLength(20)
                .HasColumnName("cId");
            entity.Property(e => e.DZeitstempel)
                .HasColumnType("datetime")
                .HasColumnName("dZeitstempel");
            entity.Property(e => e.FPickAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPickAnzahl");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KPickliste).HasColumnName("kPickliste");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.NAktiv).HasColumnName("nAktiv");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<TWmserrorLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tWMSErrorLog", "WMS");

            entity.HasIndex(e => new { e.NProzess, e.CQuelle }, "IX_WMS_tWMSErrorLog_nProzess_cQuelle").IsClustered();

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CArbeitsPlatz)
                .HasMaxLength(4000)
                .HasColumnName("cArbeitsPlatz");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CQuelle)
                .HasMaxLength(255)
                .HasColumnName("cQuelle");
            entity.Property(e => e.CValue)
                .HasMaxLength(4000)
                .HasColumnName("cValue");
            entity.Property(e => e.CValueBig).HasColumnName("cValueBig");
            entity.Property(e => e.CValueXml)
                .HasColumnType("xml")
                .HasColumnName("cValueXML");
            entity.Property(e => e.DTimeStamp)
                .HasColumnType("datetime")
                .HasColumnName("dTimeStamp");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KKey1).HasColumnName("kKey1");
            entity.Property(e => e.KKey2).HasColumnName("kKey2");
            entity.Property(e => e.NLevel).HasColumnName("nLevel");
            entity.Property(e => e.NProzess).HasColumnName("nProzess");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<TWmserrorLogController>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tWMSErrorLogController", "WMS");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CArbeitsPlatz)
                .HasMaxLength(4000)
                .HasColumnName("cArbeitsPlatz");
            entity.Property(e => e.CQuelle)
                .HasMaxLength(255)
                .HasColumnName("cQuelle");
            entity.Property(e => e.DEndZeit)
                .HasColumnType("datetime")
                .HasColumnName("dEndZeit");
            entity.Property(e => e.DStartZeit)
                .HasColumnType("datetime")
                .HasColumnName("dStartZeit");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.NAktiv).HasColumnName("nAktiv");
            entity.Property(e => e.NLevel).HasColumnName("nLevel");
            entity.Property(e => e.NProzess).HasColumnName("nProzess");
            entity.Property(e => e.NSaveMethod).HasColumnName("nSaveMethod");
        });

        modelBuilder.Entity<TWmslagerBereich>(entity =>
        {
            entity.HasKey(e => e.KWmslagerBereich).HasName("PK_dbo_tWMSLagerBereich");

            entity.ToTable("tWMSLagerBereich", tb => tb.HasTrigger("jtlActionValidator_tWMSLagerbereich"));

            entity.HasIndex(e => new { e.CKuerzel, e.KWarenLager }, "UQ_dbo_tWMSLagerBereich_cKuerzel_kWarenLager").IsUnique();

            entity.Property(e => e.KWmslagerBereich).HasColumnName("kWMSLagerBereich");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBeschreibung)
                .HasMaxLength(255)
                .HasColumnName("cBeschreibung");
            entity.Property(e => e.CKuerzel)
                .HasMaxLength(100)
                .HasColumnName("cKuerzel");
            entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");
            entity.Property(e => e.NTyp)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nTyp");
        });

        modelBuilder.Entity<TWmslagerBereichPlatz>(entity =>
        {
            entity.HasKey(e => e.KWmslagerBereichPlatz).HasName("PK_dbo_tWMSLagerBereichPlatz");

            entity.ToTable("tWMSLagerBereichPlatz");

            entity.HasIndex(e => e.KWarenLagerPlatz, "IX_dbo_tWMSLagerBereichPlatz_kWarenLagerPlatz");

            entity.HasIndex(e => new { e.KWmslagerBereich, e.KWarenLagerPlatz }, "IX_tWMSLagerBereichPlatz_kWMSLagerBereich_kWarenLagerPlatz");

            entity.Property(e => e.KWmslagerBereichPlatz).HasColumnName("kWMSLagerBereichPlatz");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");
            entity.Property(e => e.KWmslagerBereich).HasColumnName("kWMSLagerBereich");
        });

        modelBuilder.Entity<TWmsoptionen>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tWMSOptionen");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(50)
                .HasColumnName("cName");
            entity.Property(e => e.CWert)
                .HasMaxLength(255)
                .HasColumnName("cWert");
        });

        modelBuilder.Entity<TWmspackItem>(entity =>
        {
            entity.HasKey(e => e.KWmspackItem).HasName("PK_dbo_tWMSPackItem");

            entity.ToTable("tWMSPackItem");

            entity.Property(e => e.KWmspackItem).HasColumnName("kWMSPackItem");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.FMenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMenge");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBestellStueckliste).HasColumnName("kBestellStueckliste");
            entity.Property(e => e.KBestellpos).HasColumnName("kBestellpos");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KKartonLagerPlatz).HasColumnName("kKartonLagerPlatz");
            entity.Property(e => e.KPickliste).HasColumnName("kPickliste");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<TWmspackItemDatum>(entity =>
        {
            entity.HasKey(e => e.KWmspackItemData).HasName("PK_dbo_tWMSPackItemData");

            entity.ToTable("tWMSPackItemData");

            entity.Property(e => e.KWmspackItemData).HasColumnName("kWMSPackItemData");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CChargenNr)
                .HasMaxLength(255)
                .HasColumnName("cChargenNr");
            entity.Property(e => e.CSerNo)
                .HasMaxLength(255)
                .HasColumnName("cSerNo");
            entity.Property(e => e.DMhd)
                .HasColumnType("datetime")
                .HasColumnName("dMHD");
            entity.Property(e => e.FMenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMenge");
            entity.Property(e => e.KWmspackItem).HasColumnName("kWMSPackItem");
        });

        modelBuilder.Entity<TWmsversandLock>(entity =>
        {
            entity.HasKey(e => e.KWmsversandLock).HasName("PK_dbo_tWMSVersandLock");

            entity.ToTable("tWMSVersandLock");

            entity.Property(e => e.KWmsversandLock).HasColumnName("kWMSVersandLock");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DDatum)
                .HasColumnType("datetime")
                .HasColumnName("dDatum");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KPickliste).HasColumnName("kPickliste");
            entity.Property(e => e.NSort)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nSort");
        });

        modelBuilder.Entity<TWorkJob>(entity =>
        {
            entity.HasKey(e => e.KWorkJob).HasName("PK_pps_tWorkJob");

            entity.ToTable("tWorkJob", "pps");

            entity.HasIndex(e => e.KArtikel, "IX_pps_tWorkJob_kArtikel");

            entity.HasIndex(e => e.KBenutzer, "IX_pps_tWorkJob_kBenutzer");

            entity.HasIndex(e => e.KBillOfMaterial, "IX_pps_tWorkJob_kBillOfMaterial");

            entity.HasIndex(e => e.KProductionOrderProducible, "IX_pps_tWorkJob_kProductionOrderProducible");

            entity.HasIndex(e => e.KSessionId, "IX_pps_tWorkJob_kSessionId");

            entity.HasIndex(e => e.KWorkProcessIteration, "IX_pps_tWorkJob_kWorkProcessIteration");

            entity.Property(e => e.KWorkJob).HasColumnName("kWorkJob");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DCreated)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("dCreated");
            entity.Property(e => e.FActualQuantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fActualQuantity");
            entity.Property(e => e.FEkNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEkNetto");
            entity.Property(e => e.FMultiplier)
                .HasDefaultValueSql("((1.0))")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMultiplier");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBillOfMaterial).HasColumnName("kBillOfMaterial");
            entity.Property(e => e.KProductionOrderProducible).HasColumnName("kProductionOrderProducible");
            entity.Property(e => e.KSessionId).HasColumnName("kSessionId");
            entity.Property(e => e.KWorkProcessIteration).HasColumnName("kWorkProcessIteration");
            entity.Property(e => e.NLotSize)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nLotSize");
            entity.Property(e => e.NType).HasColumnName("nType");

            entity.HasOne(d => d.KArtikelNavigation).WithMany(p => p.TWorkJobs)
                .HasForeignKey(d => d.KArtikel)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pps_tWorkJobResult_kArtikel");

            entity.HasOne(d => d.KBillOfMaterialNavigation).WithMany(p => p.TWorkJobs)
                .HasForeignKey(d => d.KBillOfMaterial)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pps_tWorkJobResult_kBillOfMaterial");

            entity.HasOne(d => d.KProductionOrderProducibleNavigation).WithMany(p => p.TWorkJobs)
                .HasForeignKey(d => d.KProductionOrderProducible)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_pps_tWorkJobResult_kProductionOrderProducible");

            entity.HasOne(d => d.KSession).WithMany(p => p.TWorkJobs)
                .HasForeignKey(d => d.KSessionId)
                .HasConstraintName("FK_pps_tWorkJobResult_kSessionId");

            entity.HasOne(d => d.KWorkProcessIterationNavigation).WithMany(p => p.TWorkJobs)
                .HasForeignKey(d => d.KWorkProcessIteration)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_pps_TWorkJobResult_kWorkProcessIteration");

            entity.HasMany(d => d.KDispositions).WithMany(p => p.KWorkJobs)
                .UsingEntity<Dictionary<string, object>>(
                    "TWorkJobDisposition",
                    r => r.HasOne<TDisposition>().WithMany()
                        .HasForeignKey("KDisposition")
                        .HasConstraintName("FK_pps_tWorkJobDisposition_kDisposition"),
                    l => l.HasOne<TWorkJob>().WithMany()
                        .HasForeignKey("KWorkJob")
                        .HasConstraintName("FK_pps_tWorkJobDisposition_kWorkJob"),
                    j =>
                    {
                        j.HasKey("KWorkJob", "KDisposition").HasName("PK_pps_tWorkJobDisposition");
                        j.ToTable("tWorkJobDisposition", "pps");
                        j.IndexerProperty<int>("KWorkJob").HasColumnName("kWorkJob");
                        j.IndexerProperty<int>("KDisposition").HasColumnName("kDisposition");
                    });
        });

        modelBuilder.Entity<TWorkJobBillOfMaterialsComponent>(entity =>
        {
            entity.HasKey(e => e.KWorkJobBillOfMaterialsComponent).HasName("PK_pps_tWorkJobBillOfMaterialsComponent");

            entity.ToTable("tWorkJobBillOfMaterialsComponent", "pps");

            entity.HasIndex(e => e.KArtikel, "IX_pps_tWorkJobBillOfMaterialsComponent_kArtikel");

            entity.HasIndex(e => e.KMasseinheit, "IX_pps_tWorkJobBillOfMaterialsComponent_kMasseinheit");

            entity.HasIndex(e => e.KOriginBillOfMaterialComponent, "IX_pps_tWorkJobBillOfMaterialsComponent_kOriginBillOfMaterialComponent");

            entity.HasIndex(e => e.KWorkJobOperation, "IX_pps_tWorkJobBillOfMaterialsComponent_kWorkJobOperation");

            entity.Property(e => e.KWorkJobBillOfMaterialsComponent).HasColumnName("kWorkJobBillOfMaterialsComponent");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.FActualQuantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fActualQuantity");
            entity.Property(e => e.FTargetQuantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fTargetQuantity");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KMasseinheit).HasColumnName("kMasseinheit");
            entity.Property(e => e.KOriginBillOfMaterialComponent).HasColumnName("kOriginBillOfMaterialComponent");
            entity.Property(e => e.KWorkJobOperation).HasColumnName("kWorkJobOperation");

            entity.HasOne(d => d.KOriginBillOfMaterialComponentNavigation).WithMany(p => p.TWorkJobBillOfMaterialsComponents)
                .HasForeignKey(d => d.KOriginBillOfMaterialComponent)
                .HasConstraintName("FK_pps_tWorkJobBillOfMaterialsComponent_kOriginBillOfMaterialComponent");

            entity.HasOne(d => d.KWorkJobOperationNavigation).WithMany(p => p.TWorkJobBillOfMaterialsComponents)
                .HasForeignKey(d => d.KWorkJobOperation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pps_tWorkJobBillOfMaterialsComponent_kWorkJobOperation");
        });

        modelBuilder.Entity<TWorkJobBillOfMaterialsComponentStock>(entity =>
        {
            entity.HasKey(e => e.KWorkJobBillOfMaterialsComponentStock).HasName("PK_pps_tWorkJobBillOfMaterialsComponentStock");

            entity.ToTable("tWorkJobBillOfMaterialsComponentStock", "pps");

            entity.HasIndex(e => e.KMasseinheit, "IX_pps_tWorkJobBillOfMaterialsComponentStock_kMasseinheit");

            entity.HasIndex(e => e.KPicklistePos, "IX_pps_tWorkJobBillOfMaterialsComponentStock_kPicklistePos");

            entity.HasIndex(e => e.KWorkJobBillOfMaterialsComponent, "IX_pps_tWorkJobBillOfMaterialsComponentStock_kWorkJobBillOfMaterialsComponent");

            entity.HasIndex(e => new { e.KWorkJobBillOfMaterialsComponent, e.KPicklistePos }, "UQ_pps_tWorkJobBillOfMaterialsComponentStock_kWorkJobBillOfMaterialsComponent_kPicklistePos").IsUnique();

            entity.Property(e => e.KWorkJobBillOfMaterialsComponentStock).HasColumnName("kWorkJobBillOfMaterialsComponentStock");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.FActualQuantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fActualQuantity");
            entity.Property(e => e.KMasseinheit).HasColumnName("kMasseinheit");
            entity.Property(e => e.KPicklistePos).HasColumnName("kPicklistePos");
            entity.Property(e => e.KWorkJobBillOfMaterialsComponent).HasColumnName("kWorkJobBillOfMaterialsComponent");
            entity.Property(e => e.KWorkbenchResource).HasColumnName("kWorkbenchResource");

            entity.HasOne(d => d.KWorkJobBillOfMaterialsComponentNavigation).WithMany(p => p.TWorkJobBillOfMaterialsComponentStocks)
                .HasForeignKey(d => d.KWorkJobBillOfMaterialsComponent)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pps_tWorkJobBillOfMaterialsComponentStock_kWorkJobBillOfMaterialsComponent");

            entity.HasOne(d => d.KWorkbenchResourceNavigation).WithMany(p => p.TWorkJobBillOfMaterialsComponentStocks)
                .HasForeignKey(d => d.KWorkbenchResource)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_pps_tWorkJobBillOfMaterialsComponentStock_kWorkbenchResource");
        });

        modelBuilder.Entity<TWorkJobOperation>(entity =>
        {
            entity.HasKey(e => e.KWorkJobOperation).HasName("PK_pps_tWorkJobOperation");

            entity.ToTable("tWorkJobOperation", "pps");

            entity.HasIndex(e => e.KBenutzer, "IX_pps_tWorkJobOperation_kBenutzer");

            entity.HasIndex(e => e.KOperation, "IX_pps_tWorkJobOperation_kOperation");

            entity.HasIndex(e => e.KWorkJob, "IX_pps_tWorkJobOperation_kWorkJob");

            entity.Property(e => e.KWorkJobOperation).HasColumnName("kWorkJobOperation");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DFinished).HasColumnName("dFinished");
            entity.Property(e => e.DStarted).HasColumnName("dStarted");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBillOfMaterialComponent).HasColumnName("kBillOfMaterialComponent");
            entity.Property(e => e.KCreatedWorkbenchResource).HasColumnName("kCreatedWorkbenchResource");
            entity.Property(e => e.KLastWorkbenchResource).HasColumnName("kLastWorkbenchResource");
            entity.Property(e => e.KOperation).HasColumnName("kOperation");
            entity.Property(e => e.KPickliste).HasColumnName("kPickliste");
            entity.Property(e => e.KWorkJob).HasColumnName("kWorkJob");

            entity.HasOne(d => d.KBillOfMaterialComponentNavigation).WithMany(p => p.TWorkJobOperations)
                .HasForeignKey(d => d.KBillOfMaterialComponent)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_pps_tWorkJobOperation_kBillOfMaterialComponent");

            entity.HasOne(d => d.KCreatedWorkbenchResourceNavigation).WithMany(p => p.TWorkJobOperationKCreatedWorkbenchResourceNavigations)
                .HasForeignKey(d => d.KCreatedWorkbenchResource)
                .HasConstraintName("FK_pps_tWorkJobOperation_kCreatedWorkbenchResource");

            entity.HasOne(d => d.KLastWorkbenchResourceNavigation).WithMany(p => p.TWorkJobOperationKLastWorkbenchResourceNavigations)
                .HasForeignKey(d => d.KLastWorkbenchResource)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_pps_tWorkJobOperation_kLastWorkbenchResource");

            entity.HasOne(d => d.KOperationNavigation).WithMany(p => p.TWorkJobOperations)
                .HasForeignKey(d => d.KOperation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pps_tWorkJobOperation_kOperation");

            entity.HasOne(d => d.KPicklisteNavigation).WithMany(p => p.TWorkJobOperations)
                .HasForeignKey(d => d.KPickliste)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_pps_tWorkJobOperation_kPickliste");

            entity.HasOne(d => d.KWorkJobNavigation).WithMany(p => p.TWorkJobOperations)
                .HasForeignKey(d => d.KWorkJob)
                .HasConstraintName("FK_pps_tWorkJobOperation_kWorkJob");
        });

        modelBuilder.Entity<TWorkJobOperationStep>(entity =>
        {
            entity.HasKey(e => e.KWorkJobOperationStep).HasName("PK_pps_tWorkJobOperationStep");

            entity.ToTable("tWorkJobOperationStep", "pps");

            entity.HasIndex(e => e.KBenutzer, "IX_pps_tWorkJobOperationStep_kBenutzer");

            entity.HasIndex(e => e.KOperationStep, "IX_pps_tWorkJobOperationStep_kOperationStep");

            entity.HasIndex(e => e.KWorkJobOperation, "IX_pps_tWorkJobOperationStep_kWorkJobOperation");

            entity.Property(e => e.KWorkJobOperationStep).HasColumnName("kWorkJobOperationStep");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DFinished).HasColumnName("dFinished");
            entity.Property(e => e.DStarted).HasColumnName("dStarted");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KOperationStep).HasColumnName("kOperationStep");
            entity.Property(e => e.KWorkJobOperation).HasColumnName("kWorkJobOperation");

            entity.HasOne(d => d.KOperationStepNavigation).WithMany(p => p.TWorkJobOperationSteps)
                .HasForeignKey(d => d.KOperationStep)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pps_tWorkJobOperationStep_kOperationStep");

            entity.HasOne(d => d.KWorkJobOperationNavigation).WithMany(p => p.TWorkJobOperationSteps)
                .HasForeignKey(d => d.KWorkJobOperation)
                .HasConstraintName("FK_pps_tWorkJobOperationStep_kWorkJobOperation");
        });

        modelBuilder.Entity<TWorkJobResult>(entity =>
        {
            entity.HasKey(e => e.KWorkJobResult).HasName("PK_pps_tWorkJobResult");

            entity.ToTable("tWorkJobResult", "pps");

            entity.HasIndex(e => e.KWorkJob, "IX_pps_tWorkJobResult_kWorkJob");

            entity.HasIndex(e => e.KZustand, "IX_pps_tWorkJobResult_kZustand");

            entity.Property(e => e.KWorkJobResult).HasColumnName("kWorkJobResult");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.FQuantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fQuantity");
            entity.Property(e => e.FRatio)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRatio");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KWorkJob).HasColumnName("kWorkJob");
            entity.Property(e => e.KZustand).HasColumnName("kZustand");

            entity.HasOne(d => d.KWorkJobNavigation).WithMany(p => p.TWorkJobResults)
                .HasForeignKey(d => d.KWorkJob)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pps_tWorkJobResult_kWorkJob");

            entity.HasOne(d => d.KZustandNavigation).WithMany(p => p.TWorkJobResults)
                .HasForeignKey(d => d.KZustand)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pps_tWorkJobResult_kZustand");
        });

        modelBuilder.Entity<TWorkProcess>(entity =>
        {
            entity.HasKey(e => e.KWorkProcess).HasName("PK_pps_tProductionProcess");

            entity.ToTable("tWorkProcess", "pps");

            entity.HasIndex(e => e.KBenutzerCurrent, "IX_pps_tWorkProcess_kBenutzerCurrent");

            entity.HasIndex(e => e.KCreatedWorkbenchResource, "IX_pps_tWorkProcess_kCreatedWorkbenchResource");

            entity.HasIndex(e => e.KCurrentWorkbenchResource, "IX_pps_tWorkProcess_kCurrentWorkbenchResource");

            entity.HasIndex(e => e.KProductionOrder, "IX_pps_tWorkProcess_kProductionOrder");

            entity.Property(e => e.KWorkProcess).HasColumnName("kWorkProcess");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CProductionBatchNumber)
                .HasMaxLength(100)
                .HasColumnName("cProductionBatchNumber");
            entity.Property(e => e.DCreated)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("dCreated");
            entity.Property(e => e.DFinished).HasColumnName("dFinished");
            entity.Property(e => e.DLastAction)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("dLastAction");
            entity.Property(e => e.IProcessType).HasColumnName("iProcessType");
            entity.Property(e => e.KBenutzerCurrent).HasColumnName("kBenutzerCurrent");
            entity.Property(e => e.KCreatedWorkbenchResource).HasColumnName("kCreatedWorkbenchResource");
            entity.Property(e => e.KCurrentWorkbenchResource).HasColumnName("kCurrentWorkbenchResource");
            entity.Property(e => e.KLastWorkbenchResource).HasColumnName("kLastWorkbenchResource");
            entity.Property(e => e.KProductionOrder).HasColumnName("kProductionOrder");
            entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");
            entity.Property(e => e.NOriginType).HasColumnName("nOriginType");

            entity.HasOne(d => d.KCreatedWorkbenchResourceNavigation).WithMany(p => p.TWorkProcessKCreatedWorkbenchResourceNavigations)
                .HasForeignKey(d => d.KCreatedWorkbenchResource)
                .HasConstraintName("FK_pps_tWorkProcess_kCreatedWorkbenchResource");

            entity.HasOne(d => d.KCurrentWorkbenchResourceNavigation).WithMany(p => p.TWorkProcessKCurrentWorkbenchResourceNavigations)
                .HasForeignKey(d => d.KCurrentWorkbenchResource)
                .HasConstraintName("FK_pps_tWorkProcess_kCurrentWorkbenchResource");

            entity.HasOne(d => d.KLastWorkbenchResourceNavigation).WithMany(p => p.TWorkProcessKLastWorkbenchResourceNavigations)
                .HasForeignKey(d => d.KLastWorkbenchResource)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_pps_tWorkProcess_kLastWorkbenchResource");

            entity.HasOne(d => d.KProductionOrderNavigation).WithMany(p => p.TWorkProcesses)
                .HasForeignKey(d => d.KProductionOrder)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_pps_tWorkProcess_kProductionOrder");
        });

        modelBuilder.Entity<TWorkProcessIteration>(entity =>
        {
            entity.HasKey(e => e.KWorkProcessIteration).HasName("PK_pps_tWorkProcessIteration");

            entity.ToTable("tWorkProcessIteration", "pps");

            entity.HasIndex(e => e.KBenutzer, "IX_pps_tWorkProcessIteration_kBenutzer");

            entity.HasIndex(e => e.KWorkProcess, "IX_pps_tWorkProcessIteration_kWorkProcess");

            entity.Property(e => e.KWorkProcessIteration).HasColumnName("kWorkProcessIteration");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CProductionLotNumber)
                .HasMaxLength(100)
                .HasColumnName("cProductionLotNumber");
            entity.Property(e => e.DFinished).HasColumnName("dFinished");
            entity.Property(e => e.DStarted).HasColumnName("dStarted");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KCreatedWorkbenchResource).HasColumnName("kCreatedWorkbenchResource");
            entity.Property(e => e.KLastWorkbenchResource).HasColumnName("kLastWorkbenchResource");
            entity.Property(e => e.KPickliste).HasColumnName("kPickliste");
            entity.Property(e => e.KWorkProcess).HasColumnName("kWorkProcess");
            entity.Property(e => e.NIteration).HasColumnName("nIteration");
            entity.Property(e => e.NTotalIterations).HasColumnName("nTotalIterations");

            entity.HasOne(d => d.KCreatedWorkbenchResourceNavigation).WithMany(p => p.TWorkProcessIterationKCreatedWorkbenchResourceNavigations)
                .HasForeignKey(d => d.KCreatedWorkbenchResource)
                .HasConstraintName("FK_pps_tWorkProcessIteration_kCreatedWorkbenchResource");

            entity.HasOne(d => d.KLastWorkbenchResourceNavigation).WithMany(p => p.TWorkProcessIterationKLastWorkbenchResourceNavigations)
                .HasForeignKey(d => d.KLastWorkbenchResource)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_pps_tWorkProcessIteration_kLastWorkbenchResource");

            entity.HasOne(d => d.KPicklisteNavigation).WithMany(p => p.TWorkProcessIterations)
                .HasForeignKey(d => d.KPickliste)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_pps_tWorkProcessIteration_kPickliste");

            entity.HasOne(d => d.KWorkProcessNavigation).WithMany(p => p.TWorkProcessIterations)
                .HasForeignKey(d => d.KWorkProcess)
                .HasConstraintName("FK_pps_tWorkProcessIteration_kWorkProcess");
        });

        modelBuilder.Entity<TWorkProcessReplenishment>(entity =>
        {
            entity.HasKey(e => e.KWorkProcessReplenishment)
                .HasName("PK_pps_tWorkProcessReplenishment")
                .IsClustered(false);

            entity.ToTable("tWorkProcessReplenishment", "pps");

            entity.Property(e => e.KWorkProcessReplenishment).HasColumnName("kWorkProcessReplenishment");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KReplenishmentAuftrag).HasColumnName("kReplenishmentAuftrag");
            entity.Property(e => e.KWorkJobOperation).HasColumnName("kWorkJobOperation");
            entity.Property(e => e.KWorkProcess).HasColumnName("kWorkProcess");
            entity.Property(e => e.KWorkProcessIteration).HasColumnName("kWorkProcessIteration");

            entity.HasOne(d => d.KReplenishmentAuftragNavigation).WithMany(p => p.TWorkProcessReplenishments)
                .HasForeignKey(d => d.KReplenishmentAuftrag)
                .HasConstraintName("FK_pps_tWorkProcessReplenishment_kReplenishmentAuftrag");

            entity.HasOne(d => d.KWorkJobOperationNavigation).WithMany(p => p.TWorkProcessReplenishments)
                .HasForeignKey(d => d.KWorkJobOperation)
                .HasConstraintName("FK_pps_tWorkProcessReplenishment_kWorkJobOperation");

            entity.HasOne(d => d.KWorkProcessNavigation).WithMany(p => p.TWorkProcessReplenishments)
                .HasForeignKey(d => d.KWorkProcess)
                .HasConstraintName("FK_pps_tWorkProcessReplenishment_kWorkProcess");

            entity.HasOne(d => d.KWorkProcessIterationNavigation).WithMany(p => p.TWorkProcessReplenishments)
                .HasForeignKey(d => d.KWorkProcessIteration)
                .HasConstraintName("FK_pps_tWorkProcessReplenishment_kWorkProcessIteration");
        });

        modelBuilder.Entity<TWorkProcessSearch>(entity =>
        {
            entity.HasKey(e => new { e.KWorkProcess, e.CIdentifier, e.NType }).HasName("PK_pps_tWorkProcessSearch");

            entity.ToTable("tWorkProcessSearch", "pps");

            entity.Property(e => e.KWorkProcess).HasColumnName("kWorkProcess");
            entity.Property(e => e.CIdentifier)
                .HasMaxLength(255)
                .HasColumnName("cIdentifier");
            entity.Property(e => e.NType).HasColumnName("nType");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");

            entity.HasOne(d => d.KWorkProcessNavigation).WithMany(p => p.TWorkProcessSearches)
                .HasForeignKey(d => d.KWorkProcess)
                .HasConstraintName("FK_pps_tWorkProcessSearch_kWorkProcess");
        });

        modelBuilder.Entity<TWorkbenchBin>(entity =>
        {
            entity.HasKey(e => e.KWorkbenchBin).HasName("PK_pps_tWorkbenchBin");

            entity.ToTable("tWorkbenchBin", "pps");

            entity.HasIndex(e => new { e.KWorkbenchResource, e.KWarenLagerPlatz }, "UQ_pps_tWorkbenchBin_kWorkbenchResource_kWarenLagerPlatz").IsUnique();

            entity.Property(e => e.KWorkbenchBin).HasColumnName("kWorkbenchBin");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");
            entity.Property(e => e.KWorkbenchResource).HasColumnName("kWorkbenchResource");
            entity.Property(e => e.KZustand).HasColumnName("kZustand");
            entity.Property(e => e.NDirection).HasColumnName("nDirection");
            entity.Property(e => e.NSharedBin).HasColumnName("nSharedBin");

            entity.HasOne(d => d.KWarenLagerPlatzNavigation).WithMany(p => p.TWorkbenchBins)
                .HasForeignKey(d => d.KWarenLagerPlatz)
                .HasConstraintName("FK_pps_tWorkbenchBin_kWarenLagerPlatz");

            entity.HasOne(d => d.KWorkbenchResourceNavigation).WithMany(p => p.TWorkbenchBins)
                .HasForeignKey(d => d.KWorkbenchResource)
                .HasConstraintName("FK_pps_tWorkbenchBin_kWorkbenchResource");
        });

        modelBuilder.Entity<TWorkbenchResource>(entity =>
        {
            entity.HasKey(e => e.KWorkbenchResource).HasName("PK_ResPl_tWorkbenchResource");

            entity.ToTable("tWorkbenchResource", "ResPl");

            entity.HasIndex(e => e.CHostName, "IX_ResPl_tWorkbenchResource_cHostName");

            entity.Property(e => e.KWorkbenchResource).HasColumnName("kWorkbenchResource");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CHostName)
                .HasMaxLength(253)
                .HasColumnName("cHostName");
            entity.Property(e => e.DConnected).HasColumnName("dConnected");
            entity.Property(e => e.KBenutzerConnected).HasColumnName("kBenutzerConnected");
            entity.Property(e => e.KResource).HasColumnName("kResource");
            entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");
            entity.Property(e => e.NReservationMode).HasColumnName("nReservationMode");

            entity.HasOne(d => d.KResourceNavigation).WithMany(p => p.TWorkbenchResources)
                .HasForeignKey(d => d.KResource)
                .HasConstraintName("FK_ResPl_tWorkbenchResource_kResource");

            entity.HasOne(d => d.KWarenLagerNavigation).WithMany(p => p.TWorkbenchResources)
                .HasForeignKey(d => d.KWarenLager)
                .HasConstraintName("FK_ResPl_tWorkbenchResource_kWarenLager");
        });

        modelBuilder.Entity<TWorkerInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tWorkerInfo");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DAmazonEnde)
                .HasColumnType("datetime")
                .HasColumnName("dAmazonEnde");
            entity.Property(e => e.DAmazonStart)
                .HasColumnType("datetime")
                .HasColumnName("dAmazonStart");
            entity.Property(e => e.DEbayEnde)
                .HasColumnType("datetime")
                .HasColumnName("dEbayEnde");
            entity.Property(e => e.DEbayStart)
                .HasColumnType("datetime")
                .HasColumnName("dEbayStart");
            entity.Property(e => e.DShopEnde)
                .HasColumnType("datetime")
                .HasColumnName("dShopEnde");
            entity.Property(e => e.DShopStart)
                .HasColumnType("datetime")
                .HasColumnName("dShopStart");
            entity.Property(e => e.NAmazonOption).HasColumnName("nAmazonOption");
            entity.Property(e => e.NAmazonPid).HasColumnName("nAmazonPID");
            entity.Property(e => e.NEbayOption).HasColumnName("nEbayOption");
            entity.Property(e => e.NEbayPid).HasColumnName("nEbayPID");
            entity.Property(e => e.NShopOption).HasColumnName("nShopOption");
            entity.Property(e => e.NShopPid).HasColumnName("nShopPID");
        });

        modelBuilder.Entity<TWorkflow>(entity =>
        {
            entity.HasKey(e => e.KWorkflow).HasName("PK_dbo_tWorkflow");

            entity.ToTable("tWorkflow");

            entity.Property(e => e.KWorkflow).HasColumnName("kWorkflow");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.DtSchedulerTime)
                .HasColumnType("datetime")
                .HasColumnName("dtSchedulerTime");
            entity.Property(e => e.NApplikation).HasColumnName("nApplikation");
            entity.Property(e => e.NEvent).HasColumnName("nEvent");
            entity.Property(e => e.NObjekt).HasColumnName("nObjekt");
            entity.Property(e => e.NPos).HasColumnName("nPos");
            entity.Property(e => e.NSchedulerDayValue).HasColumnName("nSchedulerDayValue");
            entity.Property(e => e.NSchedulerHour).HasColumnName("nSchedulerHour");
            entity.Property(e => e.NSchedulerMinute).HasColumnName("nSchedulerMinute");
            entity.Property(e => e.NSchedulerMonthValue).HasColumnName("nSchedulerMonthValue");
            entity.Property(e => e.NSchedulerOptions).HasColumnName("nSchedulerOptions");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
            entity.Property(e => e.NVerknuepfung).HasColumnName("nVerknuepfung");
        });

        modelBuilder.Entity<TWorkflowAktion>(entity =>
        {
            entity.HasKey(e => e.KWorkflowAktion).HasName("PK_dbo_tWorkflowAktion");

            entity.ToTable("tWorkflowAktion");

            entity.Property(e => e.KWorkflowAktion).HasColumnName("kWorkflowAktion");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KWorkflow).HasColumnName("kWorkflow");
            entity.Property(e => e.NPos).HasColumnName("nPos");
            entity.Property(e => e.XXmlObjekt)
                .HasColumnType("xml")
                .HasColumnName("xXmlObjekt");
        });

        modelBuilder.Entity<TWorkflowBedingung>(entity =>
        {
            entity.HasKey(e => e.KWorkflowBedingung).HasName("PK_dbo_tWorkflowBedingung");

            entity.ToTable("tWorkflowBedingung");

            entity.Property(e => e.KWorkflowBedingung).HasColumnName("kWorkflowBedingung");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CEigenschaft)
                .HasColumnType("xml")
                .HasColumnName("cEigenschaft");
            entity.Property(e => e.CVergleichswert).HasColumnName("cVergleichswert");
            entity.Property(e => e.KWorkflow).HasColumnName("kWorkflow");
            entity.Property(e => e.KWorkflowEigenschaft).HasColumnName("kWorkflowEigenschaft");
            entity.Property(e => e.NOperator).HasColumnName("nOperator");
            entity.Property(e => e.NPos).HasColumnName("nPos");
        });

        modelBuilder.Entity<TWorkflowEigenschaft>(entity =>
        {
            entity.HasKey(e => e.KWorkflowEigenschaft).HasName("PK_dbo_tWorkflowEigenschaft");

            entity.ToTable("tWorkflowEigenschaft");

            entity.Property(e => e.KWorkflowEigenschaft).HasColumnName("kWorkflowEigenschaft");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CDotLiquid).HasColumnName("cDotLiquid");
            entity.Property(e => e.CName)
                .HasMaxLength(100)
                .HasColumnName("cName");
            entity.Property(e => e.NDatenTyp).HasColumnName("nDatenTyp");
            entity.Property(e => e.NObjekt).HasColumnName("nObjekt");
        });

        modelBuilder.Entity<TWorkflowEvent>(entity =>
        {
            entity.HasKey(e => e.KWorkflowEvent).HasName("PK_dbo_tWorkflowEvent");

            entity.ToTable("tWorkflowEvent");

            entity.Property(e => e.KWorkflowEvent).HasColumnName("kWorkflowEvent");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CDisplayName)
                .HasMaxLength(255)
                .HasColumnName("cDisplayName");
            entity.Property(e => e.NEvent).HasColumnName("nEvent");
            entity.Property(e => e.NObjekt).HasColumnName("nObjekt");
            entity.Property(e => e.NSortierung).HasColumnName("nSortierung");
        });

        modelBuilder.Entity<TWorkflowEventGroup>(entity =>
        {
            entity.HasKey(e => e.KWorkflowEventGroup).HasName("PK_dbo_tWorkflowEventGroup");

            entity.ToTable("tWorkflowEventGroup");

            entity.Property(e => e.KWorkflowEventGroup).HasColumnName("kWorkflowEventGroup");
            entity.Property(e => e.CDisplayName)
                .HasMaxLength(255)
                .HasColumnName("cDisplayName");
            entity.Property(e => e.NObjekt).HasColumnName("nObjekt");
            entity.Property(e => e.NSortierung).HasColumnName("nSortierung");
        });

        modelBuilder.Entity<TWorkflowEventGroupMapping>(entity =>
        {
            entity.HasKey(e => e.KWorkflowEventGroupMapping);

            entity.ToTable("tWorkflowEventGroupMapping");

            entity.Property(e => e.KWorkflowEventGroupMapping).HasColumnName("kWorkflowEventGroupMapping");
            entity.Property(e => e.KWorkflowEvent).HasColumnName("kWorkflowEvent");
            entity.Property(e => e.KWorkflowEventGroup).HasColumnName("kWorkflowEventGroup");
        });

        modelBuilder.Entity<TWorkflowLog>(entity =>
        {
            entity.HasKey(e => e.KWorkflowLog).HasName("PK_dbo_tWorkflowLog");

            entity.ToTable("tWorkflowLog");

            entity.Property(e => e.KWorkflowLog).HasColumnName("kWorkflowLog");
            entity.Property(e => e.CArbeitsplatz)
                .HasMaxLength(255)
                .HasColumnName("cArbeitsplatz");
            entity.Property(e => e.CLog).HasColumnName("cLog");
            entity.Property(e => e.CObjectId)
                .HasMaxLength(255)
                .HasColumnName("cObjectId");
            entity.Property(e => e.DDatum)
                .HasColumnType("datetime")
                .HasColumnName("dDatum");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KObjektPk).HasColumnName("kObjektPk");
            entity.Property(e => e.KWorkflow).HasColumnName("kWorkflow");
            entity.Property(e => e.KWorkflowAktion).HasColumnName("kWorkflowAktion");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
            entity.Property(e => e.UniqueId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("uniqueId");
        });

        modelBuilder.Entity<TWorkflowObject>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tWorkflowObjects", "CustomWorkflows");

            entity.Property(e => e.CName)
                .HasMaxLength(100)
                .HasColumnName("cName");
            entity.Property(e => e.CPkColumn)
                .HasMaxLength(100)
                .HasColumnName("cPkColumn");
            entity.Property(e => e.NObjekt).HasColumnName("nObjekt");
        });

        modelBuilder.Entity<TWorkflowQueue>(entity =>
        {
            entity.HasKey(e => e.KWorkflowQueue).HasName("PK_dbo_tWorkflowQueue");

            entity.ToTable("tWorkflowQueue");

            entity.Property(e => e.KWorkflowQueue).HasColumnName("kWorkflowQueue");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DStartDate)
                .HasColumnType("datetime")
                .HasColumnName("dStartDate");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KObjektPk).HasColumnName("kObjektPk");
            entity.Property(e => e.KWorkflow).HasColumnName("kWorkflow");
            entity.Property(e => e.NEvent).HasColumnName("nEvent");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<TWorklog>(entity =>
        {
            entity.HasKey(e => e.KWorkerlog).HasName("PK_dbo_tWorklog");

            entity.ToTable("tWorklog");

            entity.Property(e => e.KWorkerlog).HasColumnName("kWorkerlog");
            entity.Property(e => e.CMessage).HasColumnName("cMessage");
            entity.Property(e => e.DDate)
                .HasColumnType("datetime")
                .HasColumnName("dDate");
            entity.Property(e => e.NErrorId).HasColumnName("nErrorID");
        });

        modelBuilder.Entity<TXmlbestellImport>(entity =>
        {
            entity.HasKey(e => e.KXmlbestellImport).HasName("PK_dbo_tXMLBestellImport");

            entity.ToTable("tXMLBestellImport");

            entity.Property(e => e.KXmlbestellImport).HasColumnName("kXMLBestellImport");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CText).HasColumnName("cText");
            entity.Property(e => e.NPlattform).HasColumnName("nPlattform");
            entity.Property(e => e.NRechnung).HasColumnName("nRechnung");
        });

        modelBuilder.Entity<TXmlgutschriftImport>(entity =>
        {
            entity.HasKey(e => e.KXmlgutschriftImport).HasName("PK_dbo_tXMLGutschriftImport");

            entity.ToTable("tXMLGutschriftImport");

            entity.Property(e => e.KXmlgutschriftImport).HasColumnName("kXMLGutschriftImport");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CText).HasColumnName("cText");
            entity.Property(e => e.NPlattform).HasColumnName("nPlattform");
        });

        modelBuilder.Entity<TXmlimportvorlage>(entity =>
        {
            entity.HasKey(e => e.KXmlImportvorlage).HasName("PK_dbo_tXMLImportvorlage");

            entity.ToTable("tXMLImportvorlage");

            entity.Property(e => e.KXmlImportvorlage).HasColumnName("kXmlImportvorlage");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.BVorlage).HasColumnName("bVorlage");
            entity.Property(e => e.CName)
                .HasMaxLength(40)
                .HasColumnName("cName");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<TXsell>(entity =>
        {
            entity.HasKey(e => e.KXsell).HasName("PK_dbo_tXSell");

            entity.ToTable("tXSell", tb =>
                {
                    tb.HasTrigger("tgr_tXSell_Connector_DELETE");
                    tb.HasTrigger("tgr_tXSell_Connector_INSERT_UPDATE");
                });

            entity.HasIndex(e => e.KArtikel, "IX_dbo_tXSell_tArtikel");

            entity.Property(e => e.KXsell).HasColumnName("kXSell");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KXsellArtikel).HasColumnName("kXSellArtikel");
            entity.Property(e => e.KXsellGruppe).HasColumnName("kXSellGruppe");
            entity.Property(e => e.NEigenesFeld).HasColumnName("nEigenesFeld");
        });

        modelBuilder.Entity<TXsellGruppe>(entity =>
        {
            entity.HasKey(e => new { e.KXsellGruppe, e.KSprache }).HasName("PK_dbo_tXSellGruppe");

            entity.ToTable("tXSellGruppe", tb => tb.HasTrigger("tgr_tXSellGruppe_INSUPDEL"));

            entity.Property(e => e.KXsellGruppe).HasColumnName("kXSellGruppe");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBeschreibung)
                .HasMaxLength(255)
                .HasColumnName("cBeschreibung");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
        });

        modelBuilder.Entity<TXsellGruppeArtikel>(entity =>
        {
            entity.HasKey(e => e.KXsellGruppeArtikel).HasName("PK_dbo_tXSellGruppeArtikel");

            entity.ToTable("tXSellGruppeArtikel");

            entity.Property(e => e.KXsellGruppeArtikel).HasColumnName("kXSellGruppeArtikel");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.TXsellGruppe).HasColumnName("tXSellGruppe");
        });

        modelBuilder.Entity<TZahlen>(entity =>
        {
            entity.HasKey(e => e.KZahl).HasName("PK_dbo_tZahlen");

            entity.ToTable("tZahlen");

            entity.Property(e => e.KZahl)
                .ValueGeneratedNever()
                .HasColumnName("kZahl");
        });

        modelBuilder.Entity<TZahlung>(entity =>
        {
            entity.HasKey(e => e.KZahlung).HasName("PK_dbo_tZahlung");

            entity.ToTable("tZahlung", tb => tb.HasTrigger("tgr_tZahlung_INSUPDEL"));

            entity.HasIndex(e => e.KEingangsrechnung, "IX_dbo_tZahlung_kEingangsrechnung");

            entity.HasIndex(e => e.KGutschrift, "IX_dbo_tZahlung_kGutschrift");

            entity.HasIndex(e => e.CName, "IX_tZahlung_cName");

            entity.HasIndex(e => e.DDatum, "IX_tZahlung_dDatum");

            entity.HasIndex(e => e.KBestellung, "IX_tZahlung_kBestellung");

            entity.HasIndex(e => e.KRechnung, "IX_tZahlung_kRechnung");

            entity.HasIndex(e => e.NZahlungstyp, "IX_tZahlung_nZahlungstyp_INCL");

            entity.Property(e => e.KZahlung)
                .ValueGeneratedNever()
                .HasColumnName("kZahlung");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CExternalTransactionId)
                .HasMaxLength(255)
                .HasColumnName("cExternalTransactionId");
            entity.Property(e => e.CHinweis)
                .HasMaxLength(2000)
                .HasColumnName("cHinweis");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CSkrmanuell)
                .HasMaxLength(255)
                .HasColumnName("cSKRManuell");
            entity.Property(e => e.CZuweisungsinfo)
                .HasMaxLength(1000)
                .HasColumnName("cZuweisungsinfo");
            entity.Property(e => e.DDatum)
                .HasColumnType("datetime")
                .HasColumnName("dDatum");
            entity.Property(e => e.FBetrag)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBetrag");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KEingangsrechnung).HasColumnName("kEingangsrechnung");
            entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.KZahlungsabgleichUmsatz).HasColumnName("kZahlungsabgleichUmsatz");
            entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");
            entity.Property(e => e.NAnzahlung)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nAnzahlung");
            entity.Property(e => e.NKeinExport).HasColumnName("nKeinExport");
            entity.Property(e => e.NZahlungstyp).HasColumnName("nZahlungstyp");
            entity.Property(e => e.NZuweisungstyp).HasColumnName("nZuweisungstyp");
            entity.Property(e => e.NZuweisungswertung).HasColumnName("nZuweisungswertung");
        });

        modelBuilder.Entity<TZahlungsArtSprache>(entity =>
        {
            entity.HasKey(e => new { e.KZahlungsart, e.KSprache }).HasName("PK_dbo_tZahlungsArtSprache");

            entity.ToTable("tZahlungsArtSprache");

            entity.HasIndex(e => e.CName, "IX_tZahlungsArtSprache_cName");

            entity.HasIndex(e => e.KZahlungsart, "IX_tZahlungsArtSprache_kZahlungsart");

            entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CPrtString).HasColumnName("cPrtString");
            entity.Property(e => e.CPrtStringVor).HasColumnName("cPrtStringVor");
        });

        modelBuilder.Entity<TZahlungsErinnerung>(entity =>
        {
            entity.HasKey(e => e.KZahlungsErinnerung).HasName("PK_dbo_tZahlungsErinnerung");

            entity.ToTable("tZahlungsErinnerung", tb => tb.HasTrigger("tgr_tZahlungsErinnerung_INSERT"));

            entity.HasIndex(e => new { e.KRechnung, e.NMahnstufeAktuell }, "UQ_dbo_tZahlungsErinnerung_kRechnung_nMahnstufeAktuell").IsUnique();

            entity.Property(e => e.KZahlungsErinnerung).HasColumnName("kZahlungsErinnerung");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CKommentar).HasColumnName("cKommentar");
            entity.Property(e => e.DErledigt)
                .HasColumnType("datetime")
                .HasColumnName("dErledigt");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DMahndatum)
                .HasColumnType("datetime")
                .HasColumnName("dMahndatum");
            entity.Property(e => e.DZahlungsfrist)
                .HasColumnType("datetime")
                .HasColumnName("dZahlungsfrist");
            entity.Property(e => e.FBruttoBetrag)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBruttoBetrag");
            entity.Property(e => e.FGebuehr)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGebuehr");
            entity.Property(e => e.FGebuehrPauschal)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGebuehrPauschal");
            entity.Property(e => e.FGebuehrZinssatz)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGebuehrZinssatz");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KKundengruppe).HasColumnName("kKundengruppe");
            entity.Property(e => e.KMahnstufe).HasColumnName("kMahnstufe");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.NKarenzzeit).HasColumnName("nKarenzzeit");
            entity.Property(e => e.NMahnstufeAktuell).HasColumnName("nMahnstufeAktuell");
            entity.Property(e => e.NZahlungsfristInTagen).HasColumnName("nZahlungsfristInTagen");
        });

        modelBuilder.Entity<TZahlungsabgleichAmaPayReportRequest>(entity =>
        {
            entity.HasKey(e => e.KZahlungsabgleichAmaPayReportRequests).HasName("PK_dbo_tZahlungsabgleichAmaPayReportRequests");

            entity.ToTable("tZahlungsabgleichAmaPayReportRequests");

            entity.Property(e => e.KZahlungsabgleichAmaPayReportRequests).HasColumnName("kZahlungsabgleichAmaPayReportRequests");
            entity.Property(e => e.CRequestId)
                .HasMaxLength(60)
                .HasColumnName("cRequestId");
            entity.Property(e => e.KZahlungsabgleichModul).HasColumnName("kZahlungsabgleichModul");
        });

        modelBuilder.Entity<TZahlungsabgleichAusgang>(entity =>
        {
            entity.HasKey(e => e.KZahlungsabgleichAusgang).HasName("PK_dbo_tZahlungsabgleichAusgang");

            entity.ToTable("tZahlungsabgleichAusgang", tb => tb.HasTrigger("tgr_tZahlungsabgleichAusgang_INSERT"));

            entity.Property(e => e.KZahlungsabgleichAusgang).HasColumnName("kZahlungsabgleichAusgang");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CInternerKommentar)
                .HasMaxLength(1000)
                .HasColumnName("cInternerKommentar");
            entity.Property(e => e.CKonto)
                .HasMaxLength(500)
                .HasColumnName("cKonto");
            entity.Property(e => e.CKontoIdentifikation)
                .HasMaxLength(50)
                .HasColumnName("cKontoIdentifikation");
            entity.Property(e => e.CKontozusatz)
                .HasMaxLength(500)
                .HasColumnName("cKontozusatz");
            entity.Property(e => e.CName)
                .HasMaxLength(500)
                .HasColumnName("cName");
            entity.Property(e => e.CTransaktionId)
                .HasMaxLength(1000)
                .HasDefaultValueSql("('')")
                .HasColumnName("cTransaktionID");
            entity.Property(e => e.CVerwendungszweck)
                .HasMaxLength(1000)
                .HasColumnName("cVerwendungszweck");
            entity.Property(e => e.CWaehrungIso)
                .HasMaxLength(3)
                .HasColumnName("cWaehrungISO");
            entity.Property(e => e.DAnlagedatum)
                .HasColumnType("datetime")
                .HasColumnName("dAnlagedatum");
            entity.Property(e => e.DBuchungsdatum)
                .HasColumnType("datetime")
                .HasColumnName("dBuchungsdatum");
            entity.Property(e => e.FBetrag)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBetrag");
            entity.Property(e => e.KAnlagebenutzer).HasColumnName("kAnlagebenutzer");
            entity.Property(e => e.KBuchungsbenutzer).HasColumnName("kBuchungsbenutzer");
            entity.Property(e => e.KEingangsrechnung).HasColumnName("kEingangsrechnung");
            entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.KZahlungAusgang).HasColumnName("kZahlungAusgang");
            entity.Property(e => e.KZahlungEingang).HasColumnName("kZahlungEingang");
            entity.Property(e => e.KZahlungsabgleichModul).HasColumnName("kZahlungsabgleichModul");
            entity.Property(e => e.KZahlungsabgleichUmsatzAusgang).HasColumnName("kZahlungsabgleichUmsatzAusgang");
            entity.Property(e => e.KZahlungsabgleichUmsatzEingang).HasColumnName("kZahlungsabgleichUmsatzEingang");
            entity.Property(e => e.NVollstaendigerReferenzbetrag).HasColumnName("nVollstaendigerReferenzbetrag");
        });

        modelBuilder.Entity<TZahlungsabgleichFilter>(entity =>
        {
            entity.HasKey(e => e.KZahlungsabgleichFilter).HasName("PK_dbo_tZahlungsabgleichFilter");

            entity.ToTable("tZahlungsabgleichFilter");

            entity.Property(e => e.KZahlungsabgleichFilter).HasColumnName("kZahlungsabgleichFilter");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBeschreibung)
                .HasMaxLength(100)
                .HasColumnName("cBeschreibung");
            entity.Property(e => e.CFilterwert)
                .HasMaxLength(300)
                .HasColumnName("cFilterwert");
            entity.Property(e => e.KZahlungsabgleichModul).HasColumnName("kZahlungsabgleichModul");
            entity.Property(e => e.NAktion).HasColumnName("nAktion");
            entity.Property(e => e.NFilteroperator).HasColumnName("nFilteroperator");
            entity.Property(e => e.NFilterspalte).HasColumnName("nFilterspalte");
            entity.Property(e => e.NUmsatzart).HasColumnName("nUmsatzart");
        });

        modelBuilder.Entity<TZahlungsabgleichLogeintrag>(entity =>
        {
            entity.HasKey(e => e.KZahlungsabgleichLogeintrag).HasName("PK_dbo_tZahlungsabgleichLogeintrag");

            entity.ToTable("tZahlungsabgleichLogeintrag");

            entity.Property(e => e.KZahlungsabgleichLogeintrag).HasColumnName("kZahlungsabgleichLogeintrag");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CKontoIdentifikation)
                .HasMaxLength(50)
                .HasColumnName("cKontoIdentifikation");
            entity.Property(e => e.CMeldung)
                .HasMaxLength(2048)
                .HasColumnName("cMeldung");
            entity.Property(e => e.DZeitpunkt)
                .HasColumnType("datetime")
                .HasColumnName("dZeitpunkt");
            entity.Property(e => e.KZahlungsabgleichLogsitzung).HasColumnName("kZahlungsabgleichLogsitzung");
            entity.Property(e => e.KZahlungsabgleichModul).HasColumnName("kZahlungsabgleichModul");
            entity.Property(e => e.NSchweregrad).HasColumnName("nSchweregrad");

            entity.HasOne(d => d.KZahlungsabgleichLogsitzungNavigation).WithMany(p => p.TZahlungsabgleichLogeintrags)
                .HasForeignKey(d => d.KZahlungsabgleichLogsitzung)
                .HasConstraintName("FK_dbo_tZahlungsabgleichLogeintrag_kZahlungsabgleichLogsitzung");
        });

        modelBuilder.Entity<TZahlungsabgleichLogsitzung>(entity =>
        {
            entity.HasKey(e => e.KZahlungsabgleichLogsitzung).HasName("PK_dbo_tZahlungsabgleichLogsitzung");

            entity.ToTable("tZahlungsabgleichLogsitzung");

            entity.Property(e => e.KZahlungsabgleichLogsitzung).HasColumnName("kZahlungsabgleichLogsitzung");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CRechnername)
                .HasMaxLength(64)
                .HasColumnName("cRechnername");
            entity.Property(e => e.CStatusMeldung)
                .HasMaxLength(2048)
                .HasColumnName("cStatusMeldung");
            entity.Property(e => e.DEnde)
                .HasColumnType("datetime")
                .HasColumnName("dEnde");
            entity.Property(e => e.DStart)
                .HasColumnType("datetime")
                .HasColumnName("dStart");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<TZahlungsabgleichModul>(entity =>
        {
            entity.HasKey(e => e.KZahlungsabgleichModul).HasName("PK_dbo_tZahlungsabgleichModul");

            entity.ToTable("tZahlungsabgleichModul", tb => tb.HasTrigger("tgr_tZahlungsabgleichModul_DELETE"));

            entity.Property(e => e.KZahlungsabgleichModul).HasColumnName("kZahlungsabgleichModul");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CEinstellungen).HasColumnName("cEinstellungen");
            entity.Property(e => e.CModulId)
                .HasMaxLength(50)
                .HasColumnName("cModulID");
        });

        modelBuilder.Entity<TZahlungsabgleichUmsatz>(entity =>
        {
            entity.HasKey(e => e.KZahlungsabgleichUmsatz)
                .HasName("PK_dbo_tZahlungsabgleichUmsatz")
                .IsClustered(false);

            entity.ToTable("tZahlungsabgleichUmsatz");

            entity.HasIndex(e => new { e.DBuchungsdatum, e.KZahlungsabgleichUmsatz }, "CIX_dbo_tZahlungsabgleichUmsatz_dBuchungsdatum_kZahlungsabgleichUmsatz")
                .IsUnique()
                .IsClustered();

            entity.HasIndex(e => new { e.CKontoIdentifikation, e.CTransaktionId, e.KZahlungsabgleichModul }, "UQ_dbo_tZahlungsabgleichUmsatz_cKontoIdentifikation_cTransaktionID_kZahlungsabgleichModul").IsUnique();

            entity.Property(e => e.KZahlungsabgleichUmsatz).HasColumnName("kZahlungsabgleichUmsatz");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CInternerKommentar)
                .HasMaxLength(1000)
                .HasColumnName("cInternerKommentar");
            entity.Property(e => e.CKonto)
                .HasMaxLength(500)
                .HasColumnName("cKonto");
            entity.Property(e => e.CKontoIdentifikation)
                .HasMaxLength(50)
                .HasColumnName("cKontoIdentifikation");
            entity.Property(e => e.CKontozusatz)
                .HasMaxLength(500)
                .HasColumnName("cKontozusatz");
            entity.Property(e => e.CName)
                .HasMaxLength(500)
                .HasColumnName("cName");
            entity.Property(e => e.CTransaktionId)
                .HasMaxLength(100)
                .HasColumnName("cTransaktionID");
            entity.Property(e => e.CVerwendungszweck)
                .HasMaxLength(1000)
                .HasColumnName("cVerwendungszweck");
            entity.Property(e => e.CWaehrungIso)
                .HasMaxLength(3)
                .HasColumnName("cWaehrungISO");
            entity.Property(e => e.DAbgleichszeitpunkt)
                .HasColumnType("datetime")
                .HasColumnName("dAbgleichszeitpunkt");
            entity.Property(e => e.DBuchungsdatum)
                .HasColumnType("datetime")
                .HasColumnName("dBuchungsdatum");
            entity.Property(e => e.FBetrag)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBetrag");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KZahlungsabgleichModul).HasColumnName("kZahlungsabgleichModul");
            entity.Property(e => e.NBuchungstyp).HasColumnName("nBuchungstyp");
            entity.Property(e => e.NSichtbar)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("nSichtbar");
        });

        modelBuilder.Entity<TZahlungsart>(entity =>
        {
            entity.HasKey(e => e.KZahlungsart).HasName("PK_dbo_tZahlungsart");

            entity.ToTable("tZahlungsart", tb =>
                {
                    tb.HasTrigger("jtlActionValidator_tZahlungsart");
                    tb.HasTrigger("tgr_dbo_tZahlungsart_UPDATE");
                });

            entity.HasIndex(e => e.CName, "IX_tZahlungsart_cName");

            entity.Property(e => e.KZahlungsart)
                .ValueGeneratedNever()
                .HasColumnName("kZahlungsart");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CKonto)
                .HasMaxLength(32)
                .HasColumnName("cKonto");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CPaymentOption)
                .HasMaxLength(255)
                .HasColumnName("cPaymentOption");
            entity.Property(e => e.CPrtString).HasColumnName("cPrtString");
            entity.Property(e => e.CPrtStringVor).HasColumnName("cPrtStringVor");
            entity.Property(e => e.FSkontoWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fSkontoWert");
            entity.Property(e => e.NAktiv)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("nAktiv");
            entity.Property(e => e.NAusliefernVorZahlung).HasColumnName("nAusliefernVorZahlung");
            entity.Property(e => e.NIstStandard).HasColumnName("nIstStandard");
            entity.Property(e => e.NLastschrift).HasColumnName("nLastschrift");
            entity.Property(e => e.NMahnwesenAktiv).HasColumnName("nMahnwesenAktiv");
            entity.Property(e => e.NMatchingOptionen).HasColumnName("nMatchingOptionen");
            entity.Property(e => e.NPrioritaet).HasColumnName("nPrioritaet");
            entity.Property(e => e.NSkontoZeitraum).HasColumnName("nSkontoZeitraum");
        });

        modelBuilder.Entity<TZahlungsausgangLogeintrag>(entity =>
        {
            entity.HasKey(e => e.KZahlungsausgangLogeintrag).HasName("PK_dbo_tZahlungsausgangLogeintrag");

            entity.ToTable("tZahlungsausgangLogeintrag");

            entity.Property(e => e.KZahlungsausgangLogeintrag).HasColumnName("kZahlungsausgangLogeintrag");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CKontoIdentifikation)
                .HasMaxLength(50)
                .HasColumnName("cKontoIdentifikation");
            entity.Property(e => e.CMeldung)
                .HasMaxLength(2048)
                .HasColumnName("cMeldung");
            entity.Property(e => e.CVerwendungszweck)
                .HasMaxLength(1000)
                .HasColumnName("cVerwendungszweck");
            entity.Property(e => e.DAnlagedatum)
                .HasColumnType("datetime")
                .HasColumnName("dAnlagedatum");
            entity.Property(e => e.DBuchungsdatum)
                .HasColumnType("datetime")
                .HasColumnName("dBuchungsdatum");
            entity.Property(e => e.DZeitpunkt)
                .HasColumnType("datetime")
                .HasColumnName("dZeitpunkt");
            entity.Property(e => e.FBetrag)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBetrag");
            entity.Property(e => e.KAnlagebenutzer).HasColumnName("kAnlagebenutzer");
            entity.Property(e => e.KBuchungsbenutzer).HasColumnName("kBuchungsbenutzer");
            entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KZahlungsabgleichLogsitzung).HasColumnName("kZahlungsabgleichLogsitzung");
            entity.Property(e => e.KZahlungsabgleichModul).HasColumnName("kZahlungsabgleichModul");
            entity.Property(e => e.NSchweregrad).HasColumnName("nSchweregrad");

            entity.HasOne(d => d.KZahlungsabgleichLogsitzungNavigation).WithMany(p => p.TZahlungsausgangLogeintrags)
                .HasForeignKey(d => d.KZahlungsabgleichLogsitzung)
                .HasConstraintName("FK_dbo_tZahlungsausgangLogeintrag_kZahlungsabgleichLogsitzung");
        });

        modelBuilder.Entity<TZalog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tZALog");

            entity.Property(e => e.CDatum)
                .HasMaxLength(12)
                .HasColumnName("cDatum");
            entity.Property(e => e.CString)
                .HasMaxLength(64)
                .HasColumnName("cString");
            entity.Property(e => e.DDate)
                .HasMaxLength(12)
                .HasColumnName("dDate");
        });

        modelBuilder.Entity<TZavorlage>(entity =>
        {
            entity.HasKey(e => e.KZavorlage).HasName("PK_dbo_tZAVorlage");

            entity.ToTable("tZAVorlage");

            entity.Property(e => e.KZavorlage)
                .ValueGeneratedNever()
                .HasColumnName("kZAVorlage");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CZahlungsArt)
                .HasMaxLength(255)
                .HasColumnName("cZahlungsArt");
            entity.Property(e => e.NPosDatum).HasColumnName("nPosDatum");
            entity.Property(e => e.NPosName).HasColumnName("nPosName");
            entity.Property(e => e.NPosUmsatz).HasColumnName("nPosUmsatz");
            entity.Property(e => e.NPosVerwendung).HasColumnName("nPosVerwendung");
            entity.Property(e => e.NPosVerwendung2).HasColumnName("nPosVerwendung2");
            entity.Property(e => e.NPosVerwendung3).HasColumnName("nPosVerwendung3");
            entity.Property(e => e.NPosVerwendung4).HasColumnName("nPosVerwendung4");
            entity.Property(e => e.NPosVerwendung5).HasColumnName("nPosVerwendung5");
            entity.Property(e => e.NPosVerwendung6).HasColumnName("nPosVerwendung6");
            entity.Property(e => e.NPosVorgang).HasColumnName("nPosVorgang");
            entity.Property(e => e.NPosVorname).HasColumnName("nPosVorname");
            entity.Property(e => e.NSpalten).HasColumnName("nSpalten");
            entity.Property(e => e.NTrenner).HasColumnName("nTrenner");
            entity.Property(e => e.NZeilen).HasColumnName("nZeilen");
        });

        modelBuilder.Entity<TZustand>(entity =>
        {
            entity.HasKey(e => e.KZustand).HasName("PK_dbo_tZustand");

            entity.ToTable("tZustand");

            entity.Property(e => e.KZustand).HasColumnName("kZustand");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CColor)
                .HasMaxLength(8)
                .HasColumnName("cColor");
            entity.Property(e => e.CSuffix)
                .HasMaxLength(50)
                .HasColumnName("cSuffix");
            entity.Property(e => e.KScxcondition).HasColumnName("kSCXCondition");
            entity.Property(e => e.NAktiv).HasColumnName("nAktiv");
            entity.Property(e => e.NAmazonCode).HasColumnName("nAmazonCode");
            entity.Property(e => e.NCode).HasColumnName("nCode");
            entity.Property(e => e.NDeletableByUser)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("nDeletableByUser");
            entity.Property(e => e.NEbayCode).HasColumnName("nEbayCode");
            entity.Property(e => e.NEinschraenkung).HasColumnName("nEinschraenkung");
            entity.Property(e => e.NFfncode).HasColumnName("nFFNCode");
            entity.Property(e => e.NLieferantenEntfernen).HasColumnName("nLieferantenEntfernen");
            entity.Property(e => e.NSort)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nSort");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");

            entity.HasOne(d => d.KScxconditionNavigation).WithMany(p => p.TZustands)
                .HasForeignKey(d => d.KScxcondition)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_SCX_tCondition_kCondition");
        });

        modelBuilder.Entity<TZustandKategorie>(entity =>
        {
            entity.HasKey(e => e.KZustandKategorie).HasName("PK_dbo_tZustandKategorie");

            entity.ToTable("tZustandKategorie");

            entity.Property(e => e.KZustandKategorie).HasColumnName("kZustandKategorie");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KKategorie).HasColumnName("kKategorie");
            entity.Property(e => e.KZustand).HasColumnName("kZustand");
            entity.Property(e => e.NIstMarkiert).HasColumnName("nIstMarkiert");
        });

        modelBuilder.Entity<TZustandSprache>(entity =>
        {
            entity.HasKey(e => new { e.KZustand, e.KSprache }).HasName("PK_dbo_tZustandSprache");

            entity.ToTable("tZustandSprache");

            entity.Property(e => e.KZustand).HasColumnName("kZustand");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(50)
                .HasColumnName("cName");
        });

        modelBuilder.Entity<TZustandWarengruppe>(entity =>
        {
            entity.HasKey(e => e.KZustandWarengruppe).HasName("PK_dbo_tZustandWarengruppe");

            entity.ToTable("tZustandWarengruppe");

            entity.Property(e => e.KZustandWarengruppe).HasColumnName("kZustandWarengruppe");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KWarengruppe).HasColumnName("kWarengruppe");
            entity.Property(e => e.KZustand).HasColumnName("kZustand");
        });

        modelBuilder.Entity<Tangebotnr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tangebotnr");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KAngebotNr).HasColumnName("kAngebotNr");
        });

        modelBuilder.Entity<Tansprechpartner>(entity =>
        {
            entity.HasKey(e => e.KAnsprechpartner).HasName("PK_dbo_tansprechpartner");

            entity.ToTable("tansprechpartner");

            entity.HasIndex(e => e.KKunde, "IX_tansprechpartner_kKunde");

            entity.HasIndex(e => e.KLieferant, "IX_tansprechpartner_kLieferant");

            entity.Property(e => e.KAnsprechpartner)
                .ValueGeneratedNever()
                .HasColumnName("kAnsprechpartner");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAbteilung)
                .HasMaxLength(255)
                .HasColumnName("cAbteilung");
            entity.Property(e => e.CAnrede)
                .HasMaxLength(255)
                .HasColumnName("cAnrede");
            entity.Property(e => e.CFax)
                .HasMaxLength(32)
                .HasColumnName("cFax");
            entity.Property(e => e.CMail)
                .HasMaxLength(255)
                .HasColumnName("cMail");
            entity.Property(e => e.CMobil)
                .HasMaxLength(255)
                .HasColumnName("cMobil");
            entity.Property(e => e.CName)
                .HasMaxLength(64)
                .HasColumnName("cName");
            entity.Property(e => e.CTel)
                .HasMaxLength(32)
                .HasColumnName("cTel");
            entity.Property(e => e.CVorName)
                .HasMaxLength(255)
                .HasColumnName("cVorName");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
        });

        modelBuilder.Entity<Tartikeldownload>(entity =>
        {
            entity.HasKey(e => new { e.KArtikel, e.KDownload }).HasName("PK_dbo_tartikeldownload");

            entity.ToTable("tartikeldownload", tb => tb.HasTrigger("tgr_tartikeldownload_Connector"));

            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KDownload).HasColumnName("kDownload");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
        });

        modelBuilder.Entity<Tartikelkonfiggruppe>(entity =>
        {
            entity.HasKey(e => e.KArtikelkonfiggruppe).HasName("PK_dbo_tartikelkonfiggruppe");

            entity.ToTable("tartikelkonfiggruppe", tb =>
                {
                    tb.HasTrigger("tgr_tartikelkonfiggruppe_DEL");
                    tb.HasTrigger("tgr_tartikelkonfiggruppe_INSUP");
                });

            entity.HasIndex(e => new { e.KArtikel, e.KKonfiggruppe }, "IX_dbo_tArtikelkonfiggruppe_kArtikel_kKonfiggruppe").IsUnique();

            entity.HasIndex(e => e.KArtikel, "IX_dbo_tartikelkonfiggruppe_kArtikel");

            entity.Property(e => e.KArtikelkonfiggruppe).HasColumnName("kArtikelkonfiggruppe");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KKonfiggruppe).HasColumnName("kKonfiggruppe");
            entity.Property(e => e.NSort).HasColumnName("nSort");

            entity.HasOne(d => d.KArtikelNavigation).WithMany(p => p.Tartikelkonfiggruppes)
                .HasForeignKey(d => d.KArtikel)
                .HasConstraintName("FK_dbo_tArtikelkonfiggruppe_kArtikel");

            entity.HasOne(d => d.KKonfiggruppeNavigation).WithMany(p => p.Tartikelkonfiggruppes)
                .HasForeignKey(d => d.KKonfiggruppe)
                .HasConstraintName("FK_dbo_tArtikelkonfiggruppe_kKonfiggruppe");
        });

        modelBuilder.Entity<Tbenutzer>(entity =>
        {
            entity.HasKey(e => e.KBenutzer).HasName("PK_dbo_tbenutzer");

            entity.ToTable("tbenutzer");

            entity.HasIndex(e => e.CApiToken, "IX_tbenutzer_cApiToken_INCL");

            entity.HasIndex(e => e.CLogin, "UQ_dbo_tbenutzer_cLogin").IsUnique();

            entity.Property(e => e.KBenutzer)
                .ValueGeneratedNever()
                .HasColumnName("kBenutzer");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAbteilung)
                .HasMaxLength(255)
                .HasColumnName("cAbteilung");
            entity.Property(e => e.CApiToken)
                .HasMaxLength(36)
                .HasColumnName("cApiToken");
            entity.Property(e => e.CEmail)
                .HasMaxLength(255)
                .HasColumnName("cEMail");
            entity.Property(e => e.CFax)
                .HasMaxLength(255)
                .HasColumnName("cFax");
            entity.Property(e => e.CHinweis)
                .HasMaxLength(255)
                .HasColumnName("cHinweis");
            entity.Property(e => e.CLogin)
                .HasMaxLength(15)
                .HasColumnName("cLogin");
            entity.Property(e => e.CMobil)
                .HasMaxLength(255)
                .HasColumnName("cMobil");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CPasswort)
                .HasMaxLength(64)
                .HasColumnName("cPasswort");
            entity.Property(e => e.CTel)
                .HasMaxLength(255)
                .HasColumnName("cTel");
            entity.Property(e => e.DPasswordLastChange)
                .HasColumnType("datetime")
                .HasColumnName("dPasswordLastChange");
            entity.Property(e => e.ISalt)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("iSalt");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.NAktiv)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("nAktiv");
            entity.Property(e => e.NPasswordMustChange).HasColumnName("nPasswordMustChange");
            entity.Property(e => e.NPasswordNotExpire).HasColumnName("nPasswordNotExpire");
        });

        modelBuilder.Entity<Tbenutzerrechte>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbenutzerrechte");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBenutzerRechte).HasColumnName("kBenutzerRechte");
            entity.Property(e => e.NRechte).HasColumnName("nRechte");
        });

        modelBuilder.Entity<Tdownloadsprache>(entity =>
        {
            entity.HasKey(e => new { e.KDownload, e.KSprache }).HasName("PK_dbo_tdownloadsprache");

            entity.ToTable("tdownloadsprache");

            entity.Property(e => e.KDownload).HasColumnName("kDownload");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBeschreibung).HasColumnName("cBeschreibung");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
        });

        modelBuilder.Entity<Teigenschaft>(entity =>
        {
            entity.HasKey(e => e.KEigenschaft).HasName("PK_dbo_teigenschaft");

            entity.ToTable("teigenschaft", tb =>
                {
                    tb.HasTrigger("jtlActionValidator_teigenschaft");
                    tb.HasTrigger("tgr_teigenschaft_Connector");
                });

            entity.HasIndex(e => new { e.KArtikel, e.CTyp }, "IX_dbo_teigenschaft_kArtikel_cTyp_INCL");

            entity.Property(e => e.KEigenschaft).HasColumnName("kEigenschaft");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAktiv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('Y')")
                .IsFixedLength()
                .HasColumnName("cAktiv");
            entity.Property(e => e.CTyp)
                .HasMaxLength(32)
                .HasDefaultValueSql("('SELECTBOX')")
                .HasColumnName("cTyp");
            entity.Property(e => e.CWaehlbar)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('Y')")
                .IsFixedLength()
                .HasColumnName("cWaehlbar");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<Teigenschaftwert>(entity =>
        {
            entity.HasKey(e => e.KEigenschaftWert).HasName("PK_dbo_teigenschaftwert");

            entity.ToTable("teigenschaftwert", tb =>
                {
                    tb.HasTrigger("jtlActionValidator_teigenschaftwert");
                    tb.HasTrigger("tgr_teigenschaftwert_Connector");
                    tb.HasTrigger("tgr_teigenschaftwert_DELETE");
                    tb.HasTrigger("tgr_teigenschaftwert_INSUP");
                });

            entity.HasIndex(e => e.KEigenschaft, "IX_dbo_teigenschaftwert_kEigenschaft_INCL");

            entity.Property(e => e.KEigenschaftWert).HasColumnName("kEigenschaftWert");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAktiv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAktiv");
            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CBarcode)
                .HasMaxLength(255)
                .HasColumnName("cBarcode");
            entity.Property(e => e.CInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cInet");
            entity.Property(e => e.FAufpreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAufpreis");
            entity.Property(e => e.FAufpreisNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAufpreisNetto");
            entity.Property(e => e.FGewichtDiff)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGewichtDiff");
            entity.Property(e => e.FLagerbestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLagerbestand");
            entity.Property(e => e.FPackeinheit)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPackeinheit");
            entity.Property(e => e.KEigenschaft).HasColumnName("kEigenschaft");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<Teinstellungen>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("teinstellungen");

            entity.Property(e => e.CBeschreibung)
                .HasMaxLength(500)
                .HasColumnName("cBeschreibung");
            entity.Property(e => e.CDrucker)
                .HasMaxLength(255)
                .HasColumnName("cDrucker");
            entity.Property(e => e.CEtikettDrucker)
                .HasMaxLength(255)
                .HasColumnName("cEtikettDrucker");
            entity.Property(e => e.CFax)
                .HasMaxLength(255)
                .HasColumnName("cFax");
            entity.Property(e => e.CFaxParam)
                .HasMaxLength(255)
                .HasColumnName("cFaxParam");
            entity.Property(e => e.CKopfPic)
                .HasMaxLength(255)
                .HasColumnName("cKopfPic");
            entity.Property(e => e.CLagerKleinerNull)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("cLagerKleinerNull");
            entity.Property(e => e.CLagerbestand)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("cLagerbestand");
            entity.Property(e => e.CLieferschein2x)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("cLieferschein2x");
            entity.Property(e => e.CLogPfad)
                .HasMaxLength(500)
                .HasColumnName("cLogPfad");
            entity.Property(e => e.CLootSize)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("cLootSize");
            entity.Property(e => e.CRechnung2x)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("cRechnung2x");
            entity.Property(e => e.CRechnungsDrucker)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsDrucker");
            entity.Property(e => e.CUst)
                .HasMaxLength(10)
                .HasColumnName("cUSt");
            entity.Property(e => e.FMwSt)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fMwSt");
            entity.Property(e => e.KEinstellungen).HasColumnName("kEinstellungen");
            entity.Property(e => e.NAuftragAendern).HasColumnName("nAuftragAendern");
            entity.Property(e => e.NLagerAnzahl).HasColumnName("nLagerAnzahl");
            entity.Property(e => e.NLog).HasColumnName("nLog");
            entity.Property(e => e.NRunden)
                .HasMaxLength(500)
                .HasColumnName("nRunden");
            entity.Property(e => e.NSnabfragen).HasColumnName("nSNAbfragen");
            entity.Property(e => e.NZahlungsziel).HasColumnName("nZahlungsziel");
        });

        modelBuilder.Entity<Teklieferantpreise>(entity =>
        {
            entity.HasKey(e => e.KEklieferantPreise).HasName("PK_dbo_teklieferantpreise");

            entity.ToTable("teklieferantpreise");

            entity.HasIndex(e => e.KArtikel, "IX_teklieferantpreise_kArtikel");

            entity.Property(e => e.KEklieferantPreise)
                .ValueGeneratedNever()
                .HasColumnName("kEKLieferantPreise");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.FPreis1)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPreis1");
            entity.Property(e => e.FPreis2)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPreis2");
            entity.Property(e => e.FPreis3)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPreis3");
            entity.Property(e => e.FPreis4)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPreis4");
            entity.Property(e => e.FPreis5)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPreis5");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.NAnzahl1).HasColumnName("nAnzahl1");
            entity.Property(e => e.NAnzahl2).HasColumnName("nAnzahl2");
            entity.Property(e => e.NAnzahl3).HasColumnName("nAnzahl3");
            entity.Property(e => e.NAnzahl4).HasColumnName("nAnzahl4");
            entity.Property(e => e.NAnzahl5).HasColumnName("nAnzahl5");
        });

        modelBuilder.Entity<Tfirma>(entity =>
        {
            entity.HasKey(e => e.KFirma).HasName("PK_dbo_tfirma");

            entity.ToTable("tfirma", tb =>
                {
                    tb.HasTrigger("tgr_dbo_tFirma_INSUPDEL");
                    tb.HasTrigger("tgr_tfirma_UPDATE");
                });

            entity.Property(e => e.KFirma)
                .ValueGeneratedNever()
                .HasColumnName("kFirma");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAktiv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('Y')")
                .IsFixedLength()
                .HasColumnName("cAktiv");
            entity.Property(e => e.CBank)
                .HasMaxLength(50)
                .HasColumnName("cBank");
            entity.Property(e => e.CBic)
                .HasMaxLength(64)
                .HasColumnName("cBIC");
            entity.Property(e => e.CBlz)
                .HasMaxLength(20)
                .HasColumnName("cBLZ");
            entity.Property(e => e.CEmail)
                .HasMaxLength(255)
                .HasColumnName("cEMail");
            entity.Property(e => e.CFax)
                .HasMaxLength(30)
                .HasColumnName("cFax");
            entity.Property(e => e.CFusszeile)
                .HasMaxLength(255)
                .HasColumnName("cFusszeile");
            entity.Property(e => e.CGlaeubigerId)
                .HasMaxLength(35)
                .HasColumnName("cGlaeubigerID");
            entity.Property(e => e.CIban)
                .HasMaxLength(64)
                .HasColumnName("cIBAN");
            entity.Property(e => e.CInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cInet");
            entity.Property(e => e.CIntrashipKdNr)
                .HasMaxLength(15)
                .HasColumnName("cIntrashipKdNr");
            entity.Property(e => e.CKontoInhaber)
                .HasMaxLength(255)
                .HasColumnName("cKontoInhaber");
            entity.Property(e => e.CKontoNr)
                .HasMaxLength(20)
                .HasColumnName("cKontoNr");
            entity.Property(e => e.CKopfGrafik)
                .HasMaxLength(255)
                .HasColumnName("cKopfGrafik");
            entity.Property(e => e.CLand)
                .HasMaxLength(255)
                .HasColumnName("cLand");
            entity.Property(e => e.CLandIso)
                .HasMaxLength(5)
                .HasColumnName("cLandISO");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CObfuskierung)
                .HasMaxLength(100)
                .HasColumnName("cObfuskierung");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPayPalEmail)
                .HasMaxLength(250)
                .HasColumnName("cPayPalEMail");
            entity.Property(e => e.CPlz)
                .HasMaxLength(50)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CSteuerNr)
                .HasMaxLength(25)
                .HasColumnName("cSteuerNr");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTel)
                .HasMaxLength(50)
                .HasColumnName("cTel");
            entity.Property(e => e.CUnternehmer)
                .HasMaxLength(255)
                .HasColumnName("cUnternehmer");
            entity.Property(e => e.CUpskdNr)
                .HasMaxLength(15)
                .HasColumnName("cUPSKdNr");
            entity.Property(e => e.CWww)
                .HasMaxLength(255)
                .HasColumnName("cWWW");
            entity.Property(e => e.NKleinunternehmer).HasColumnName("nKleinunternehmer");
        });

        modelBuilder.Entity<Tgutschrift>(entity =>
        {
            entity.HasKey(e => e.KGutschrift).HasName("PK_dbo_tgutschrift");

            entity.ToTable("tgutschrift", tb =>
                {
                    tb.HasTrigger("jtlActionValidator_tGutschrift");
                    tb.HasTrigger("tgr_dbo_tgutschrift_DEL");
                    tb.HasTrigger("tgr_dbo_tgutschrift_INSUP");
                });

            entity.HasIndex(e => e.KKunde, "IX_tgutschrift_kKunde");

            entity.HasIndex(e => e.KRechnung, "IX_tgutschrift_kRechnung");

            entity.Property(e => e.KGutschrift)
                .ValueGeneratedNever()
                .HasColumnName("kGutschrift");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CErloeskonto)
                .HasMaxLength(64)
                .HasColumnName("cErloeskonto");
            entity.Property(e => e.CGutschriftNr)
                .HasMaxLength(50)
                .HasColumnName("cGutschriftNr");
            entity.Property(e => e.CKundeUstId)
                .HasMaxLength(20)
                .HasColumnName("cKundeUstId");
            entity.Property(e => e.CKurzText)
                .HasMaxLength(255)
                .HasColumnName("cKurzText");
            entity.Property(e => e.CStatus)
                .HasMaxLength(255)
                .HasColumnName("cStatus");
            entity.Property(e => e.CText)
                .HasMaxLength(4000)
                .HasColumnName("cText");
            entity.Property(e => e.CVersandlandWaehrung)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("cVersandlandWaehrung");
            entity.Property(e => e.CWaehrung)
                .HasMaxLength(20)
                .HasColumnName("cWaehrung");
            entity.Property(e => e.DDruckdatum)
                .HasColumnType("datetime")
                .HasColumnName("dDruckdatum");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DMaildatum)
                .HasColumnType("datetime")
                .HasColumnName("dMaildatum");
            entity.Property(e => e.FFaktor)
                .HasDefaultValueSql("((1))")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fFaktor");
            entity.Property(e => e.FMwSt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwSt");
            entity.Property(e => e.FPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPreis");
            entity.Property(e => e.FVersandlandWaehrungFaktor)
                .HasDefaultValueSql("((1))")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVersandlandWaehrungFaktor");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.KRechnungsAdresse).HasColumnName("kRechnungsAdresse");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.NErweitert)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nErweitert");
            entity.Property(e => e.NGutschriftStatus)
                .HasDefaultValueSql("((255))")
                .HasColumnName("nGutschriftStatus");
            entity.Property(e => e.NIstExtern).HasColumnName("nIstExtern");
            entity.Property(e => e.NStorno).HasColumnName("nStorno");
            entity.Property(e => e.NStornoTyp).HasColumnName("nStornoTyp");
        });

        modelBuilder.Entity<Tgutschrifteigenschaft>(entity =>
        {
            entity.HasKey(e => e.KGutschriftEigenschaft).HasName("PK_dbo_tgutschrifteigenschaft");

            entity.ToTable("tgutschrifteigenschaft");

            entity.Property(e => e.KGutschriftEigenschaft)
                .ValueGeneratedNever()
                .HasColumnName("kGutschriftEigenschaft");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.FNettoPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fNettoPreis");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KEigenschaftWert).HasColumnName("kEigenschaftWert");
            entity.Property(e => e.KGutschriftPos).HasColumnName("kGutschriftPos");
        });

        modelBuilder.Entity<Tinetadress>(entity =>
        {
            entity.HasKey(e => new { e.KInetAdress, e.KShop }).HasName("PK_dbo_tinetadress");

            entity.ToTable("tinetadress");

            entity.Property(e => e.KInetAdress).HasColumnName("kInetAdress");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAdressZusatz)
                .HasMaxLength(255)
                .HasColumnName("cAdressZusatz");
            entity.Property(e => e.CAnrede)
                .HasMaxLength(30)
                .HasColumnName("cAnrede");
            entity.Property(e => e.CBundesland)
                .HasMaxLength(255)
                .HasColumnName("cBundesland");
            entity.Property(e => e.CFax)
                .HasMaxLength(45)
                .HasColumnName("cFax");
            entity.Property(e => e.CFirma)
                .HasMaxLength(128)
                .HasColumnName("cFirma");
            entity.Property(e => e.CLand)
                .HasMaxLength(255)
                .HasColumnName("cLand");
            entity.Property(e => e.CMail)
                .HasMaxLength(255)
                .HasColumnName("cMail");
            entity.Property(e => e.CMobil)
                .HasMaxLength(30)
                .HasColumnName("cMobil");
            entity.Property(e => e.CNachname)
                .HasMaxLength(255)
                .HasColumnName("cNachname");
            entity.Property(e => e.CPlz)
                .HasMaxLength(20)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CStadt)
                .HasMaxLength(255)
                .HasColumnName("cStadt");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTel)
                .HasMaxLength(45)
                .HasColumnName("cTel");
            entity.Property(e => e.CTitel)
                .HasMaxLength(64)
                .HasColumnName("cTitel");
            entity.Property(e => e.CVorname)
                .HasMaxLength(255)
                .HasColumnName("cVorname");
            entity.Property(e => e.CZusatz)
                .HasMaxLength(60)
                .HasColumnName("cZusatz");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
        });

        modelBuilder.Entity<Tinetbestellpo>(entity =>
        {
            entity.HasKey(e => new { e.KInetBestellPos, e.KShop }).HasName("PK_dbo_tinetbestellpos");

            entity.ToTable("tinetbestellpos", tb => tb.HasTrigger("trg_tinetbestellpos_DELETE"));

            entity.Property(e => e.KInetBestellPos).HasColumnName("kInetBestellPos");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CEinheit)
                .HasMaxLength(255)
                .HasColumnName("cEinheit");
            entity.Property(e => e.CHinweis)
                .HasMaxLength(2000)
                .HasColumnName("cHinweis");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasDefaultValueSql("('')")
                .HasColumnName("cName");
            entity.Property(e => e.CUnique)
                .HasMaxLength(30)
                .HasColumnName("cUnique");
            entity.Property(e => e.FMwSt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwSt");
            entity.Property(e => e.FPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPreis");
            entity.Property(e => e.KArikel).HasColumnName("kArikel");
            entity.Property(e => e.KInetBestellung).HasColumnName("kInetBestellung");
            entity.Property(e => e.KKonfigitem).HasColumnName("kKonfigitem");
            entity.Property(e => e.NAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nAnzahl");
            entity.Property(e => e.NHatUpload).HasColumnName("nHatUpload");
            entity.Property(e => e.NLongestMaxDelivery).HasColumnName("nLongestMaxDelivery");
            entity.Property(e => e.NLongestMinDelivery).HasColumnName("nLongestMinDelivery");
            entity.Property(e => e.NType).HasColumnName("nType");
        });

        modelBuilder.Entity<Tinetbestellposeigenschaft>(entity =>
        {
            entity.HasKey(e => new { e.KInetBestellPosEigenschaft, e.KShop }).HasName("PK_dbo_tinetbestellposeigenschaft");

            entity.ToTable("tinetbestellposeigenschaft");

            entity.Property(e => e.KInetBestellPosEigenschaft).HasColumnName("kInetBestellPosEigenschaft");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CWert)
                .HasMaxLength(255)
                .HasColumnName("cWert");
            entity.Property(e => e.FAufpreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAufpreis");
            entity.Property(e => e.KEigenschaft).HasColumnName("kEigenschaft");
            entity.Property(e => e.KEigenschaftWert).HasColumnName("kEigenschaftWert");
            entity.Property(e => e.KInetBestellPos).HasColumnName("kInetBestellPos");
        });

        modelBuilder.Entity<Tinetbestellung>(entity =>
        {
            entity.HasKey(e => new { e.KInetBestellung, e.KShop }).HasName("PK_dbo_tinetbestellung");

            entity.ToTable("tinetbestellung");

            entity.Property(e => e.KInetBestellung).HasColumnName("kInetBestellung");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAbgeholt)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAbgeholt");
            entity.Property(e => e.CHinweis).HasColumnName("cHinweis");
            entity.Property(e => e.CInetBestNr)
                .HasMaxLength(50)
                .HasColumnName("cInetBestNr");
            entity.Property(e => e.CKampagne)
                .HasMaxLength(255)
                .HasColumnName("cKampagne");
            entity.Property(e => e.CKampagneName)
                .HasMaxLength(255)
                .HasColumnName("cKampagneName");
            entity.Property(e => e.CKampagneParam)
                .HasMaxLength(255)
                .HasColumnName("cKampagneParam");
            entity.Property(e => e.CKommentar)
                .HasMaxLength(255)
                .HasColumnName("cKommentar");
            entity.Property(e => e.CModulId)
                .HasMaxLength(255)
                .HasColumnName("cModulID");
            entity.Property(e => e.CPuizahlungsdaten).HasColumnName("cPUIZahlungsdaten");
            entity.Property(e => e.CReferrer)
                .HasMaxLength(255)
                .HasColumnName("cReferrer");
            entity.Property(e => e.CStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cStatus");
            entity.Property(e => e.CTracking)
                .HasMaxLength(255)
                .HasColumnName("cTracking");
            entity.Property(e => e.CUserAgent)
                .HasMaxLength(512)
                .HasColumnName("cUserAgent");
            entity.Property(e => e.CVersandInfo)
                .HasMaxLength(255)
                .HasColumnName("cVersandInfo");
            entity.Property(e => e.DTimestamp)
                .HasColumnType("datetime")
                .HasColumnName("dTimestamp");
            entity.Property(e => e.DVersandDatum)
                .HasMaxLength(12)
                .HasColumnName("dVersandDatum");
            entity.Property(e => e.FFaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fFaktor");
            entity.Property(e => e.FGutschein)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGutschein");
            entity.Property(e => e.KBestellHinweis)
                .HasDefaultValueSql("((0))")
                .HasColumnName("kBestellHinweis");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KLieferAdresse).HasColumnName("kLieferAdresse");
            entity.Property(e => e.KRechnungsadresse).HasColumnName("kRechnungsadresse");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.KVersandart).HasColumnName("kVersandart");
            entity.Property(e => e.KWaehrung).HasColumnName("kWaehrung");
            entity.Property(e => e.KWarenkorb).HasColumnName("kWarenkorb");
            entity.Property(e => e.NHatUpload).HasColumnName("nHatUpload");
            entity.Property(e => e.NLongestMinDelivery).HasColumnName("nLongestMinDelivery");
            entity.Property(e => e.NMaxLiefertage).HasColumnName("nMaxLiefertage");
            entity.Property(e => e.NZahlungsTyp).HasColumnName("nZahlungsTyp");
        });

        modelBuilder.Entity<Tinetkunde>(entity =>
        {
            entity.HasKey(e => new { e.KInetKunde, e.KShop }).HasName("PK_dbo_tinetkunde");

            entity.ToTable("tinetkunde");

            entity.HasIndex(e => e.KShop, "IX_tinetkunde_kShop");

            entity.Property(e => e.KInetKunde).HasColumnName("kInetKunde");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAdressZusatz)
                .HasMaxLength(255)
                .HasColumnName("cAdressZusatz");
            entity.Property(e => e.CAnrede)
                .HasMaxLength(30)
                .HasColumnName("cAnrede");
            entity.Property(e => e.CBenutzername)
                .HasMaxLength(20)
                .HasColumnName("cBenutzername");
            entity.Property(e => e.CBundesland)
                .HasMaxLength(255)
                .HasColumnName("cBundesland");
            entity.Property(e => e.CFax)
                .HasMaxLength(45)
                .HasColumnName("cFax");
            entity.Property(e => e.CFirma)
                .HasMaxLength(128)
                .HasColumnName("cFirma");
            entity.Property(e => e.CGeburtstag)
                .HasMaxLength(32)
                .HasColumnName("cGeburtstag");
            entity.Property(e => e.CHaendler)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cHaendler");
            entity.Property(e => e.CHerkunft)
                .HasMaxLength(255)
                .HasColumnName("cHerkunft");
            entity.Property(e => e.CKundenNr)
                .HasMaxLength(20)
                .HasColumnName("cKundenNr");
            entity.Property(e => e.CLand)
                .HasMaxLength(64)
                .HasColumnName("cLand");
            entity.Property(e => e.CMail)
                .HasMaxLength(255)
                .HasColumnName("cMail");
            entity.Property(e => e.CMobil)
                .HasMaxLength(30)
                .HasDefaultValueSql("('')")
                .HasColumnName("cMobil");
            entity.Property(e => e.CNachname)
                .HasMaxLength(128)
                .HasColumnName("cNachname");
            entity.Property(e => e.CNewsletter)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cNewsletter");
            entity.Property(e => e.CPasswort)
                .HasMaxLength(20)
                .HasColumnName("cPasswort");
            entity.Property(e => e.CPlz)
                .HasMaxLength(20)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CStadt)
                .HasMaxLength(64)
                .HasColumnName("cStadt");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTel)
                .HasMaxLength(45)
                .HasColumnName("cTel");
            entity.Property(e => e.CTitel)
                .HasMaxLength(64)
                .HasColumnName("cTitel");
            entity.Property(e => e.CUstid)
                .HasMaxLength(20)
                .HasColumnName("cUSTID");
            entity.Property(e => e.CVorname)
                .HasMaxLength(128)
                .HasColumnName("cVorname");
            entity.Property(e => e.CWww)
                .HasMaxLength(255)
                .HasColumnName("cWWW");
            entity.Property(e => e.CZusatz)
                .HasMaxLength(255)
                .HasColumnName("cZusatz");
            entity.Property(e => e.FRabatt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabatt");
            entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.NAktiv)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nAktiv");
            entity.Property(e => e.NRegistriert).HasColumnName("nRegistriert");
        });

        modelBuilder.Entity<Tinetzahlungsinfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tinetzahlungsinfo");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBankName)
                .HasMaxLength(255)
                .HasColumnName("cBankName");
            entity.Property(e => e.CBic)
                .HasMaxLength(32)
                .HasColumnName("cBIC");
            entity.Property(e => e.CBlz)
                .HasMaxLength(32)
                .HasColumnName("cBLZ");
            entity.Property(e => e.CCvv)
                .HasMaxLength(4)
                .HasColumnName("cCVV");
            entity.Property(e => e.CGueltigkeit)
                .HasMaxLength(12)
                .HasColumnName("cGueltigkeit");
            entity.Property(e => e.CIban)
                .HasMaxLength(32)
                .HasColumnName("cIBAN");
            entity.Property(e => e.CInhaber)
                .HasMaxLength(255)
                .HasColumnName("cInhaber");
            entity.Property(e => e.CKartenNr)
                .HasMaxLength(32)
                .HasColumnName("cKartenNr");
            entity.Property(e => e.CKartenTyp)
                .HasMaxLength(32)
                .HasColumnName("cKartenTyp");
            entity.Property(e => e.CKontoNr)
                .HasMaxLength(32)
                .HasColumnName("cKontoNr");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KInetBestellung).HasColumnName("kInetBestellung");
            entity.Property(e => e.KInetZahlungsInfo).HasColumnName("kInetZahlungsInfo");
            entity.Property(e => e.KShop).HasColumnName("kShop");
        });

        modelBuilder.Entity<Tkategorie>(entity =>
        {
            entity.HasKey(e => e.KKategorie).HasName("PK_dbo_tkategorie");

            entity.ToTable("tkategorie", tb =>
                {
                    tb.HasTrigger("jtlActionValidator_tkategorie");
                    tb.HasTrigger("tgr_tkategorie_DEL");
                    tb.HasTrigger("tgr_tkategorie_INSUP");
                });

            entity.HasIndex(e => e.CAktiv, "IX_tkategorie_cAktiv");

            entity.HasIndex(e => e.KOberKategorie, "IX_tkategorie_kOberKategorie");

            entity.HasIndex(e => e.NSort, "IX_tkategorie_nSort");

            entity.Property(e => e.KKategorie)
                .ValueGeneratedNever()
                .HasColumnName("kKategorie");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAktiv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAktiv");
            entity.Property(e => e.CDelInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cDelInet");
            entity.Property(e => e.CInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cInet");
            entity.Property(e => e.KOberKategorie).HasColumnName("kOberKategorie");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<Tkategorieartikel>(entity =>
        {
            entity.HasKey(e => e.KKategorieArtikel).HasName("PK_dbo_tkategorieartikel");

            entity.ToTable("tkategorieartikel", tb =>
                {
                    tb.HasTrigger("tgr_tkategorieartikel_DEL");
                    tb.HasTrigger("tgr_tkategorieartikel_INSUP");
                });

            entity.HasIndex(e => new { e.KArtikel, e.KKategorie }, "UQ_dbo_tkategorieartikel_kArtikel_kKategorie").IsUnique();

            entity.Property(e => e.KKategorieArtikel).HasColumnName("kKategorieArtikel");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KKategorie).HasColumnName("kKategorie");
        });

        modelBuilder.Entity<Tkonfiggruppe>(entity =>
        {
            entity.HasKey(e => e.KKonfiggruppe).HasName("PK_dbo_tkonfiggruppe");

            entity.ToTable("tkonfiggruppe", tb =>
                {
                    tb.HasTrigger("jtlActionValidator_tkonfiggruppe");
                    tb.HasTrigger("tgr_tkonfiggruppe_DEL");
                    tb.HasTrigger("tgr_tkonfiggruppe_INSUP");
                });

            entity.Property(e => e.KKonfiggruppe).HasColumnName("kKonfiggruppe");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.Bild)
                .HasColumnType("image")
                .HasColumnName("bild");
            entity.Property(e => e.CKommentar)
                .HasMaxLength(255)
                .HasColumnName("cKommentar");
            entity.Property(e => e.NMax).HasColumnName("nMax");
            entity.Property(e => e.NMin).HasColumnName("nMin");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<Tkonfiggruppesprache>(entity =>
        {
            entity.HasKey(e => new { e.KKonfiggruppe, e.KSprache }).HasName("PK_dbo_tkonfiggruppesprache");

            entity.ToTable("tkonfiggruppesprache", tb => tb.HasTrigger("tgr_tkonfiggruppesprache_INSUP"));

            entity.Property(e => e.KKonfiggruppe).HasColumnName("kKonfiggruppe");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBeschreibung).HasColumnName("cBeschreibung");
            entity.Property(e => e.CName).HasColumnName("cName");
        });

        modelBuilder.Entity<Tkonfigitem>(entity =>
        {
            entity.HasKey(e => e.KKonfigitem).HasName("PK_dbo_tkonfigitem");

            entity.ToTable("tkonfigitem", tb =>
                {
                    tb.HasTrigger("jtlActionValidator_tkonfigitem");
                    tb.HasTrigger("tgr_tkonfigitem_DEL");
                    tb.HasTrigger("tgr_tkonfigitem_INSUP");
                });

            entity.HasIndex(e => e.KArtikel, "IX_dbo_tkonfigitem_kArtikel");

            entity.HasIndex(e => e.KArtikel, "IX_tkonfigitem_kArtikel");

            entity.Property(e => e.KKonfigitem).HasColumnName("kKonfigitem");
            entity.Property(e => e.BEmpfohlen).HasColumnName("bEmpfohlen");
            entity.Property(e => e.BIgnoreMultiplier).HasColumnName("bIgnoreMultiplier");
            entity.Property(e => e.BName).HasColumnName("bName");
            entity.Property(e => e.BPreis).HasColumnName("bPreis");
            entity.Property(e => e.BRabatt)
                .HasDefaultValueSql("((0))")
                .HasColumnName("bRabatt");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.BSelektiert).HasColumnName("bSelektiert");
            entity.Property(e => e.BZuschlag)
                .HasDefaultValueSql("((0))")
                .HasColumnName("bZuschlag");
            entity.Property(e => e.FInitial)
                .HasDefaultValueSql("((1))")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fInitial");
            entity.Property(e => e.FMax)
                .HasDefaultValueSql("((1))")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMax");
            entity.Property(e => e.FMin)
                .HasDefaultValueSql("((1))")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMin");
            entity.Property(e => e.FStandardpreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fStandardpreis");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KKonfiggruppe).HasColumnName("kKonfiggruppe");
            entity.Property(e => e.NPosTyp).HasColumnName("nPosTyp");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<Tkonfigitemprei>(entity =>
        {
            entity.HasKey(e => new { e.KKonfigitem, e.KKundengruppe, e.KShop }).HasName("PK_dbo_tkonfigitempreis");

            entity.ToTable("tkonfigitempreis");

            entity.Property(e => e.KKonfigitem).HasColumnName("kKonfigitem");
            entity.Property(e => e.KKundengruppe).HasColumnName("kKundengruppe");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.FPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPreis");
            entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");
            entity.Property(e => e.NTyp)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nTyp");
        });

        modelBuilder.Entity<Tkonfigitemsprache>(entity =>
        {
            entity.HasKey(e => new { e.KKonfigitem, e.KSprache }).HasName("PK_dbo_tkonfigitemsprache");

            entity.ToTable("tkonfigitemsprache", tb => tb.HasTrigger("tgr_tkonfigitemsprache_INSUP"));

            entity.Property(e => e.KKonfigitem).HasColumnName("kKonfigitem");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBeschreibung).HasColumnName("cBeschreibung");
            entity.Property(e => e.CName).HasColumnName("cName");
        });

        modelBuilder.Entity<Tkonfigshop>(entity =>
        {
            entity.HasKey(e => new { e.Kkonfiggruppe, e.KShop }).HasName("PK_dbo_tkonfigshop");

            entity.ToTable("tkonfigshop");

            entity.Property(e => e.Kkonfiggruppe).HasColumnName("kkonfiggruppe");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CDelInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cDelInet");
            entity.Property(e => e.CInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cInet");

            entity.HasOne(d => d.KShopNavigation).WithMany(p => p.Tkonfigshops)
                .HasForeignKey(d => d.KShop)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo_tKonfigshop_kShop");
        });

        modelBuilder.Entity<Tkontodaten>(entity =>
        {
            entity.HasKey(e => e.KKontoDaten).HasName("PK_dbo_tkontodaten");

            entity.ToTable("tkontodaten");

            entity.Property(e => e.KKontoDaten)
                .ValueGeneratedNever()
                .HasColumnName("kKontoDaten");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBankName)
                .HasMaxLength(255)
                .HasColumnName("cBankName");
            entity.Property(e => e.CBic)
                .HasMaxLength(64)
                .HasColumnName("cBIC");
            entity.Property(e => e.CBlz)
                .HasMaxLength(32)
                .HasColumnName("cBLZ");
            entity.Property(e => e.CCvv)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cCVV");
            entity.Property(e => e.CGueltigkeit)
                .HasMaxLength(12)
                .HasColumnName("cGueltigkeit");
            entity.Property(e => e.CIban)
                .HasMaxLength(64)
                .HasColumnName("cIBAN");
            entity.Property(e => e.CInhaber)
                .HasMaxLength(255)
                .HasColumnName("cInhaber");
            entity.Property(e => e.CKartenNr)
                .HasMaxLength(32)
                .HasColumnName("cKartenNr");
            entity.Property(e => e.CKartenTyp)
                .HasMaxLength(32)
                .HasColumnName("cKartenTyp");
            entity.Property(e => e.CKontoNr)
                .HasMaxLength(32)
                .HasColumnName("cKontoNr");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.NStandard).HasColumnName("nStandard");
        });

        modelBuilder.Entity<Tkunde>(entity =>
        {
            entity.HasKey(e => e.KKunde).HasName("PK_dbo_tkunde");

            entity.ToTable("tkunde", tb =>
                {
                    tb.HasTrigger("tgr_tKunde_DEL");
                    tb.HasTrigger("tgr_tKunde_INSUP");
                    tb.HasTrigger("tgr_tKunde_INSUPDEL");
                });

            entity.HasIndex(e => e.CKundenNr, "IX_tKunde_cKundenNr");

            entity.HasIndex(e => e.NDebitorennr, "IX_tKunde_nDebitorenNummer");

            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CEbayName)
                .HasMaxLength(255)
                .HasDefaultValueSql("('')")
                .HasColumnName("cEbayName");
            entity.Property(e => e.CGeburtstag)
                .HasMaxLength(10)
                .HasColumnName("cGeburtstag");
            entity.Property(e => e.CHerkunft)
                .HasMaxLength(255)
                .HasColumnName("cHerkunft");
            entity.Property(e => e.CHrnr)
                .HasMaxLength(255)
                .HasColumnName("cHRNr");
            entity.Property(e => e.CKassenKunde)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cKassenKunde");
            entity.Property(e => e.CKundenNr)
                .HasMaxLength(30)
                .HasColumnName("cKundenNr");
            entity.Property(e => e.CNewsletter)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cNewsletter");
            entity.Property(e => e.CSperre)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("cSperre");
            entity.Property(e => e.CSteuerNr)
                .HasMaxLength(255)
                .HasColumnName("cSteuerNr");
            entity.Property(e => e.CWww)
                .HasMaxLength(255)
                .HasColumnName("cWWW");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.FProvision)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fProvision");
            entity.Property(e => e.FRabatt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabatt");
            entity.Property(e => e.FSkonto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fSkonto");
            entity.Property(e => e.KBuyer)
                .HasDefaultValueSql("((0))")
                .HasColumnName("kBuyer");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KInetKunde).HasColumnName("kInetKunde");
            entity.Property(e => e.KKundenDrucktext).HasColumnName("kKundenDrucktext");
            entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");
            entity.Property(e => e.KKundenKategorie).HasColumnName("kKundenKategorie");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");
            entity.Property(e => e.NDebitorennr).HasColumnName("nDebitorennr");
            entity.Property(e => e.NKreditlimit).HasColumnName("nKreditlimit");
            entity.Property(e => e.NMahnrhythmus).HasColumnName("nMahnrhythmus");
            entity.Property(e => e.NMahnstopp).HasColumnName("nMahnstopp");
            entity.Property(e => e.NSkontoInTagen).HasColumnName("nSkontoInTagen");
            entity.Property(e => e.NVertreter).HasColumnName("nVertreter");
            entity.Property(e => e.NZahlungsziel).HasColumnName("nZahlungsziel");
        });

        modelBuilder.Entity<Tlager>(entity =>
        {
            entity.HasKey(e => e.KLager).HasName("PK_dbo_tlager");

            entity.ToTable("tlager");

            entity.Property(e => e.KLager)
                .ValueGeneratedNever()
                .HasColumnName("kLager");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBeschreibung)
                .HasMaxLength(255)
                .HasColumnName("cBeschreibung");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
        });

        modelBuilder.Entity<Tlagerbestand>(entity =>
        {
            entity.HasKey(e => e.KArtikel).HasName("PK_dbo_tlagerbestand");

            entity.ToTable("tlagerbestand", tb =>
                {
                    tb.HasTrigger("tgr_tLagerbestand_DEL");
                    tb.HasTrigger("tgr_tLagerbestand_INSUP");
                });

            entity.Property(e => e.KArtikel)
                .ValueGeneratedNever()
                .HasColumnName("kArtikel");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DLieferdatum)
                .HasColumnType("datetime")
                .HasColumnName("dLieferdatum");
            entity.Property(e => e.FAufEinkaufsliste)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAufEinkaufsliste");
            entity.Property(e => e.FAuslieferungGesperrt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAuslieferungGesperrt");
            entity.Property(e => e.FInAuftraegen)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fInAuftraegen");
            entity.Property(e => e.FLagerbestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLagerbestand");
            entity.Property(e => e.FLagerbestandEigen)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLagerbestandEigen");
            entity.Property(e => e.FVerfuegbar)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVerfuegbar");
            entity.Property(e => e.FVerfuegbarGesperrt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVerfuegbarGesperrt");
            entity.Property(e => e.FZulauf)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZulauf");
            entity.Property(e => e.NArtikelTyp).HasColumnName("nArtikelTyp");
            entity.Property(e => e.NLagerAktiv).HasColumnName("nLagerAktiv");
            entity.Property(e => e.NLagerKleinerNull).HasColumnName("nLagerKleinerNull");
            entity.Property(e => e.NTeilbar).HasColumnName("nTeilbar");
        });

        modelBuilder.Entity<TlagerbestandProLagerLagerartikel>(entity =>
        {
            entity.HasKey(e => new { e.KArtikel, e.KWarenlager }).HasName("PK_dbo_tlagerbestandProLagerLagerartikel");

            entity.ToTable("tlagerbestandProLagerLagerartikel");

            entity.HasIndex(e => e.KWarenlager, "IX_dbo_tlagerbestandProLagerLagerartikel_kWarenlager_INCL");

            entity.HasIndex(e => new { e.KArtikel, e.KWarenlager }, "IX_kArtikel_kWarenlager");

            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.FAuslieferungGesperrt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAuslieferungGesperrt");
            entity.Property(e => e.FBestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBestand");
            entity.Property(e => e.FVerfuegbarGesperrt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVerfuegbarGesperrt");
        });

        modelBuilder.Entity<Tlagerort>(entity =>
        {
            entity.HasKey(e => e.KLagerOrt).HasName("PK_dbo_tlagerort");

            entity.ToTable("tlagerort");

            entity.Property(e => e.KLagerOrt)
                .ValueGeneratedNever()
                .HasColumnName("kLagerOrt");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBeschreibung)
                .HasMaxLength(255)
                .HasColumnName("cBeschreibung");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KLager).HasColumnName("kLager");
        });

        modelBuilder.Entity<Tland>(entity =>
        {
            entity.HasKey(e => e.CIso).HasName("PK_dbo_tland");

            entity.ToTable("tland");

            entity.Property(e => e.CIso)
                .HasMaxLength(5)
                .HasColumnName("cISO");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CDefaultCulture)
                .HasMaxLength(10)
                .HasColumnName("cDefaultCulture");
            entity.Property(e => e.CIso3)
                .HasMaxLength(5)
                .HasColumnName("cISO3");
            entity.Property(e => e.CKontinent)
                .HasMaxLength(255)
                .HasColumnName("cKontinent");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CNameEng)
                .HasMaxLength(255)
                .HasColumnName("cNameEng");
            entity.Property(e => e.CNameFra)
                .HasMaxLength(255)
                .HasColumnName("cNameFra");
            entity.Property(e => e.CWaehrung)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cWaehrung");
            entity.Property(e => e.NEu).HasColumnName("nEU");
            entity.Property(e => e.NIsonumeric).HasColumnName("nISONumeric");
        });

        modelBuilder.Entity<Tliefartikel>(entity =>
        {
            entity.HasKey(e => e.KLiefArtikel).HasName("PK_dbo_tliefartikel");

            entity.ToTable("tliefartikel", tb =>
                {
                    tb.HasTrigger("tgr_tliefartikel_DELETE");
                    tb.HasTrigger("tgr_tliefartikel_INSUP");
                });

            entity.HasIndex(e => new { e.TArtikelKArtikel, e.KLiefArtikel }, "IX_tLiefartikel_tLieferant_kLieferant_INCL");

            entity.HasIndex(e => e.TArtikelKArtikel, "IX_tliefartikel_kArtikel_INCL_F").HasFilter("([nLagerBeachten]>(0) AND [fLagerbestand]>(0.0))");

            entity.HasIndex(e => e.TLieferantKLieferant, "IX_tliefartikel_tLieferant_kLieferant_INCL_FILTER_nDropshipping").HasFilter("([nDropshipping]>(0))");

            entity.HasIndex(e => new { e.TArtikelKArtikel, e.TLieferantKLieferant }, "UQ_dbo_tliefartikel_tArtikel_kArtikel_tLieferant_kLieferant").IsUnique();

            entity.Property(e => e.KLiefArtikel).HasColumnName("kLiefArtikel");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CLiefArtNr)
                .HasMaxLength(255)
                .HasColumnName("cLiefArtNr");
            entity.Property(e => e.CLiefFrist)
                .HasMaxLength(255)
                .HasColumnName("cLiefFrist");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CSonstiges)
                .HasMaxLength(512)
                .HasColumnName("cSonstiges");
            entity.Property(e => e.CVpeeinheit)
                .HasMaxLength(255)
                .HasColumnName("cVPEEinheit");
            entity.Property(e => e.CWaehrung)
                .HasMaxLength(5)
                .HasColumnName("cWaehrung");
            entity.Property(e => e.DLbgeaendert)
                .HasColumnType("datetime")
                .HasColumnName("dLBGeaendert");
            entity.Property(e => e.FDurchschnittlicheLieferzeit)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fDurchschnittlicheLieferzeit");
            entity.Property(e => e.FEkbrutto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEKBrutto");
            entity.Property(e => e.FEknetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEKNetto");
            entity.Property(e => e.FLagerbestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLagerbestand");
            entity.Property(e => e.FMwSt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwSt");
            entity.Property(e => e.NAbnahmeIntervall)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nAbnahmeIntervall");
            entity.Property(e => e.NDropShipping).HasColumnName("nDropShipping");
            entity.Property(e => e.NDropShippingStandard).HasColumnName("nDropShippingStandard");
            entity.Property(e => e.NLagerBeachten).HasColumnName("nLagerBeachten");
            entity.Property(e => e.NLieferbar).HasColumnName("nLieferbar");
            entity.Property(e => e.NLieferzeit).HasColumnName("nLieferzeit");
            entity.Property(e => e.NLieferzeitAusLieferant)
                .HasDefaultValueSql("((1))")
                .HasColumnName("nLieferzeitAusLieferant");
            entity.Property(e => e.NMindestAbnahme).HasColumnName("nMindestAbnahme");
            entity.Property(e => e.NStandard).HasColumnName("nStandard");
            entity.Property(e => e.NVpemenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nVPEMenge");
            entity.Property(e => e.TArtikelKArtikel).HasColumnName("tArtikel_kArtikel");
            entity.Property(e => e.TLieferantKLieferant).HasColumnName("tLieferant_kLieferant");

            entity.HasOne(d => d.TArtikelKArtikelNavigation).WithMany(p => p.Tliefartikels)
                .HasForeignKey(d => d.TArtikelKArtikel)
                .HasConstraintName("FK_dbo_tliefartikel_kArtikel");

            entity.HasOne(d => d.TLieferantKLieferantNavigation).WithMany(p => p.Tliefartikels)
                .HasForeignKey(d => d.TLieferantKLieferant)
                .HasConstraintName("FK_dbo_tliefartikel_kLieferant");
        });

        modelBuilder.Entity<Tlieferant>(entity =>
        {
            entity.HasKey(e => e.KLieferant).HasName("PK_dbo_tlieferant");

            entity.ToTable("tlieferant", tb =>
                {
                    tb.HasTrigger("jtlActionValidator_tlieferant");
                    tb.HasTrigger("tgr_tlieferant_INSUP");
                });

            entity.HasIndex(e => e.KLieferant, "IX_dbo_tlieferant_kLieferant").HasFilter("([nDropshipping]>(0))");

            entity.HasIndex(e => e.CFirma, "IX_tlieferant_cFirma");

            entity.HasIndex(e => e.CFirmenZusatz, "IX_tlieferant_cFirmenZusatz");

            entity.HasIndex(e => e.CLiefNr, "IX_tlieferant_cLiefNr");

            entity.HasIndex(e => e.CLieferantId, "IX_tlieferant_cLieferantID");

            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAdresszusatz)
                .HasMaxLength(255)
                .HasColumnName("cAdresszusatz");
            entity.Property(e => e.CAktiv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAktiv");
            entity.Property(e => e.CAnmerkung).HasColumnName("cAnmerkung");
            entity.Property(e => e.CAnrede)
                .HasMaxLength(30)
                .HasColumnName("cAnrede");
            entity.Property(e => e.CBundesland)
                .HasMaxLength(255)
                .HasColumnName("cBundesland");
            entity.Property(e => e.CEmail)
                .HasMaxLength(255)
                .HasColumnName("cEMail");
            entity.Property(e => e.CExterneDatenUrl)
                .HasMaxLength(255)
                .HasColumnName("cExterneDatenUrl");
            entity.Property(e => e.CFax)
                .HasMaxLength(30)
                .HasColumnName("cFax");
            entity.Property(e => e.CFirma)
                .HasMaxLength(255)
                .HasColumnName("cFirma");
            entity.Property(e => e.CFirmenZusatz)
                .HasMaxLength(255)
                .HasColumnName("cFirmenZusatz");
            entity.Property(e => e.CHinweisLieferbedingung)
                .HasMaxLength(1000)
                .HasColumnName("cHinweisLieferbedingung");
            entity.Property(e => e.CIso)
                .HasMaxLength(5)
                .HasColumnName("cISO");
            entity.Property(e => e.CKontakt)
                .HasMaxLength(255)
                .HasColumnName("cKontakt");
            entity.Property(e => e.CLand)
                .HasMaxLength(255)
                .HasColumnName("cLand");
            entity.Property(e => e.CLiefNr)
                .HasMaxLength(64)
                .HasColumnName("cLiefNr");
            entity.Property(e => e.CLieferantId)
                .HasMaxLength(64)
                .HasColumnName("cLieferantID");
            entity.Property(e => e.CNachname)
                .HasMaxLength(126)
                .HasColumnName("cNachname");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPlz)
                .HasMaxLength(10)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CStatus)
                .HasMaxLength(255)
                .HasColumnName("cStatus");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTelDurchwahl)
                .HasMaxLength(30)
                .HasColumnName("cTelDurchwahl");
            entity.Property(e => e.CTelZentralle)
                .HasMaxLength(30)
                .HasColumnName("cTelZentralle");
            entity.Property(e => e.CUstid)
                .HasMaxLength(30)
                .HasColumnName("cUstid");
            entity.Property(e => e.CVorname)
                .HasMaxLength(126)
                .HasColumnName("cVorname");
            entity.Property(e => e.CWaehrungIso)
                .HasMaxLength(20)
                .HasColumnName("cWaehrungISO");
            entity.Property(e => e.CWww)
                .HasMaxLength(255)
                .HasColumnName("cWWW");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.FFrachtkosten)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fFrachtkosten");
            entity.Property(e => e.FMindermengenzuschlag)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMindermengenzuschlag");
            entity.Property(e => e.FMindestbestellwert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMindestbestellwert");
            entity.Property(e => e.FMwStFreiposition)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwStFreiposition");
            entity.Property(e => e.FSkonto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fSkonto");
            entity.Property(e => e.FVersandfreiAb)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVersandfreiAb");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.NDropshipping).HasColumnName("nDropshipping");
            entity.Property(e => e.NDropshippingBeiNachnahme).HasColumnName("nDropshippingBeiNachnahme");
            entity.Property(e => e.NDropshippingFreipositionen).HasColumnName("nDropshippingFreipositionen");
            entity.Property(e => e.NJtlFulfillment).HasColumnName("nJtlFulfillment");
            entity.Property(e => e.NKeineEinkaufsliste).HasColumnName("nKeineEinkaufsliste");
            entity.Property(e => e.NKreditorennr).HasColumnName("nKreditorennr");
            entity.Property(e => e.NLieferzeit).HasColumnName("nLieferzeit");
            entity.Property(e => e.NSkontoTage).HasColumnName("nSkontoTage");
            entity.Property(e => e.NStaffelPreisProBestellung).HasColumnName("nStaffelPreisProBestellung");
            entity.Property(e => e.NStandardFirma).HasColumnName("nStandardFirma");
            entity.Property(e => e.NStandardLager).HasColumnName("nStandardLager");
            entity.Property(e => e.NType).HasColumnName("nType");
            entity.Property(e => e.NVstfrei).HasColumnName("nVSTFrei");
            entity.Property(e => e.NZahlungsziel).HasColumnName("nZahlungsziel");
        });

        modelBuilder.Entity<Tmahnung>(entity =>
        {
            entity.HasKey(e => e.KMahnung).HasName("PK_dbo_tmahnung");

            entity.ToTable("tmahnung");

            entity.HasIndex(e => e.KRechnung, "IX_tmahnung_kRechnung");

            entity.Property(e => e.KMahnung)
                .ValueGeneratedNever()
                .HasColumnName("kMahnung");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAnrede)
                .HasMaxLength(255)
                .HasColumnName("cAnrede");
            entity.Property(e => e.CKurzText)
                .HasMaxLength(255)
                .HasColumnName("cKurzText");
            entity.Property(e => e.CText).HasColumnName("cText");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.FBruttoBetrag)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBruttoBetrag");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.NStuffe).HasColumnName("nStuffe");
        });

        modelBuilder.Entity<Tmahnungstext>(entity =>
        {
            entity.HasKey(e => e.KMahnungsText).HasName("PK_dbo_tmahnungstext");

            entity.ToTable("tmahnungstext");

            entity.Property(e => e.KMahnungsText)
                .ValueGeneratedNever()
                .HasColumnName("kMahnungsText");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAnrede)
                .HasMaxLength(255)
                .HasColumnName("cAnrede");
            entity.Property(e => e.CBetreff)
                .HasMaxLength(255)
                .HasColumnName("cBetreff");
            entity.Property(e => e.CText).HasColumnName("cText");
            entity.Property(e => e.FGebuehr)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGebuehr");
            entity.Property(e => e.NStuffe).HasColumnName("nStuffe");
        });

        modelBuilder.Entity<Tnews>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tnews");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBetreff)
                .HasMaxLength(255)
                .HasColumnName("cBetreff");
            entity.Property(e => e.CInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cInet");
            entity.Property(e => e.CPicture)
                .HasMaxLength(255)
                .HasColumnName("cPicture");
            entity.Property(e => e.CText).HasColumnName("cText");
            entity.Property(e => e.DErstellt)
                .HasMaxLength(12)
                .HasColumnName("dErstellt");
            entity.Property(e => e.KNews).HasColumnName("kNews");
        });

        modelBuilder.Entity<Tnummern>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tnummern");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cInet");
            entity.Property(e => e.KAngebot).HasColumnName("kAngebot");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
        });

        modelBuilder.Entity<TotalsInvoice>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("TotalsInvoice", "Report");

            entity.Property(e => e.DiscountValueTotal).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GrossPriceCodchargeTotal)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("GrossPriceCODChargeTotal");
            entity.Property(e => e.GrossPriceShippingPositionTotal).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GrossPriceTotal).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.NetPriceShippingPositionTotal).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.NetPriceTotal).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingCostsVat)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("ShippingCostsVAT");
            entity.Property(e => e.Vatrate)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("VATRate");
            entity.Property(e => e.Vatsum)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("VATSum");
        });

        modelBuilder.Entity<TotalsInvoiceCorrection>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("TotalsInvoiceCorrection", "Report");

            entity.Property(e => e.GrossPriceDiscountTotal)
                .HasComment("Bruttopreis des Rabatts pro MwSt aufsummiert")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GrossPriceShippingPositionTotal)
                .HasComment("Bruttopreis der Versandposition pro MwSt aufsummiert")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GrossPriceTotal)
                .HasComment("Gesamtbruttopreis pro MwSt aufsummiert")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.InvoiceCorrectionInternalId).HasComment("Interne ID der Rechnungskorrektur");
            entity.Property(e => e.NetPriceDiscountTotal)
                .HasComment("Nettopreis des Rabatts pro MwSt aufsummiert")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.NetPriceShippingPositionTotal)
                .HasComment("Nettopreis der Versandposition pro MwSt aufsummiert")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.NetPriceTotal)
                .HasComment("GesamtNettopreis pro MwSt aufsummiert")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingCostsVat)
                .HasComment("MwSt der Versandkosten pro MwSt aufsummiert")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("ShippingCostsVAT");
            entity.Property(e => e.Vatrate)
                .HasComment("MwSt in Prozent")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("VATRate");
            entity.Property(e => e.Vatsum)
                .HasComment("Summe der MwSt ")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("VATSum");
        });

        modelBuilder.Entity<TotalsPurchaseOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("TotalsPurchaseOrder", "Report");

            entity.Property(e => e.GrossPriceDiscountTotal)
                .HasComment("Bruttopreis des Rabatts pro MwSt aufsummiert")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GrossPriceMinimumQuantitySurchargeTotal)
                .HasComment("Bruttopreis des Mindermengenzuschlags pro MwSt aufsummiert")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GrossPriceShippingPositionTotal)
                .HasComment("Bruttopreis der Versandposition pro MwSt aufsummiert")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GrossPriceShippingSurchargeTotal)
                .HasComment("Bruttopreis des Versandzuschlags pro MwSt aufsummiert")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GrossPriceTotal)
                .HasComment("Gesamtbruttopreis pro MwSt aufsummiert")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.NetPriceDiscountTotal)
                .HasComment("Nettopreis des Rabatts pro MwSt aufsummiert")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.NetPriceMinimumQuantitySurchargeTotal)
                .HasComment("Nettopreis des Mindermengenzuschlags pro MwSt aufsummiert")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.NetPriceShippingPositionTotal)
                .HasComment("Nettopreis der Versandposition pro MwSt aufsummiert")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.NetPriceShippingSurchargeTotal)
                .HasComment("Nettopreis des Versandzuschlags pro MwSt aufsummiert")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.NetPriceTotal)
                .HasComment("GesamtNettopreis pro MwSt aufsummiert")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.PurchaseOrderInternalId).HasComment("Interne ID der Lieferantenbestellung");
            entity.Property(e => e.ShippingCostsVat)
                .HasComment("MwSt der Versandkosten pro MwSt aufsummiert")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("ShippingCostsVAT");
            entity.Property(e => e.Vatrate)
                .HasComment("MwSt in Prozent")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("VATRate");
            entity.Property(e => e.Vatsum)
                .HasComment("Summe der MwSt ")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("VATSum");
        });

        modelBuilder.Entity<TotalsSalesOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("TotalsSalesOrder", "Report");

            entity.Property(e => e.DiscountValueTotal)
                .HasComment("Gesamtrabattbetrag pro MwSt aufsummiert")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GrossPriceCodchargeTotal)
                .HasComment("Bruttopreis der Nachnahmegebühr pro MwSt aufsummiert")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("GrossPriceCODChargeTotal");
            entity.Property(e => e.GrossPriceShippingPositionTotal)
                .HasComment("Bruttopreis der Versandposition pro MwSt aufsummiert")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GrossPriceTotal)
                .HasComment("Gesamtbruttopreis pro MwSt aufsummiert")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.NetPriceShippingPositionTotal)
                .HasComment("Nettopreis der Versandposition pro MwSt aufsummiert")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.NetPriceTotal)
                .HasComment("GesamtNettopreis pro MwSt aufsummiert")
                .HasColumnType("decimal(25, 13)");
            entity.Property(e => e.SalesOrderInternalId).HasComment("Interne ID des Auftrags");
            entity.Property(e => e.ShippingCostsVat)
                .HasComment("MwSt der Versandkosten pro MwSt aufsummiert")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("ShippingCostsVAT");
            entity.Property(e => e.Vatrate)
                .HasComment("MwSt in Prozent")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("VATRate");
            entity.Property(e => e.Vatsum)
                .HasComment("Summe der MwSt ")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("VATSum");
        });

        modelBuilder.Entity<TotalsSalesQuotation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("TotalsSalesQuotation", "Report");

            entity.Property(e => e.DiscountValueTotal).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GrossPriceCodchargeTotal)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("GrossPriceCODChargeTotal");
            entity.Property(e => e.GrossPriceShippingPositionTotal).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GrossPriceTotal).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.NetPriceShippingPositionTotal).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.NetPriceTotal).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingCostsVat)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("ShippingCostsVAT");
            entity.Property(e => e.Vatrate)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("VATRate");
            entity.Property(e => e.Vatsum)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("VATSum");
        });

        modelBuilder.Entity<Tpk>(entity =>
        {
            entity.HasKey(e => e.CName).HasName("PK_dbo_tpk");

            entity.ToTable("tpk");

            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.DChanged)
                .HasMaxLength(20)
                .HasColumnName("dChanged");
            entity.Property(e => e.Nummer).HasColumnName("nummer");
        });

        modelBuilder.Entity<Tprintform>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tprintform");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAngebotsText)
                .HasMaxLength(32)
                .HasColumnName("cAngebotsText");
            entity.Property(e => e.CAuftragsText)
                .HasMaxLength(32)
                .HasColumnName("cAuftragsText");
            entity.Property(e => e.CEinheit)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('Y')")
                .IsFixedLength()
                .HasColumnName("cEinheit");
            entity.Property(e => e.CFdrucken)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("cFdrucken");
            entity.Property(e => e.CFirmendatendrucken)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cFirmendatendrucken");
            entity.Property(e => e.CFirmendatenklein)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cFirmendatenklein");
            entity.Property(e => e.CFuss)
                .HasMaxLength(255)
                .HasColumnName("cFuss");
            entity.Property(e => e.CFusszeichnen)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cFusszeichnen");
            entity.Property(e => e.CIgltext)
                .HasMaxLength(512)
                .HasColumnName("cIGLText");
            entity.Property(e => e.CKdNrDrucken)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cKdNrDrucken");
            entity.Property(e => e.CKopfzeichnen)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cKopfzeichnen");
            entity.Property(e => e.CLieferText)
                .HasMaxLength(40)
                .HasDefaultValueSql("('LIEFERSCHEIN')")
                .HasColumnName("cLieferText");
            entity.Property(e => e.CMwStAusweisen)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("cMwStAusweisen");
            entity.Property(e => e.CRechnungZzglMwst)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cRechnungZzglMwst");
            entity.Property(e => e.CRechnungsText)
                .HasMaxLength(32)
                .HasColumnName("cRechnungsText");
            entity.Property(e => e.CReverseCharge)
                .HasMaxLength(512)
                .HasColumnName("cReverseCharge");
            entity.Property(e => e.CUstFreiText)
                .HasMaxLength(512)
                .HasColumnName("cUStFreiText");
            entity.Property(e => e.CZahlungsziel)
                .HasMaxLength(255)
                .HasDefaultValueSql("('Das Zahlungsziel beträgt <T> Tage.')")
                .HasColumnName("cZahlungsziel");
            entity.Property(e => e.CbzglAuftragDrucken)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cbzglAuftragDrucken");
            entity.Property(e => e.FFbreite)
                .HasDefaultValueSql("((0.3))")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fFbreite");
            entity.Property(e => e.FFdlinks)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fFDLinks");
            entity.Property(e => e.FFdoben)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fFDOben");
            entity.Property(e => e.FFmitte)
                .HasDefaultValueSql("((14.85))")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fFmitte");
            entity.Property(e => e.FFoben)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fFoben");
            entity.Property(e => e.FFunten)
                .HasDefaultValueSql("((20.3))")
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fFunten");
            entity.Property(e => e.FGlinks)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGLinks");
            entity.Property(e => e.FGrechts)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGRechts");
            entity.Property(e => e.FKalinks)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fKALinks");
            entity.Property(e => e.FKaoben)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fKAOben");
            entity.Property(e => e.NLadrDrucken).HasColumnName("nLAdrDrucken");
            entity.Property(e => e.NPixelFont)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nPixelFont");
            entity.Property(e => e.NTelDrucken)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nTelDrucken");
            entity.Property(e => e.NVariationAufpreis)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nVariationAufpreis");
            entity.Property(e => e.NZwischensumme)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nZwischensumme");
        });

        modelBuilder.Entity<Trechnungnr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("trechnungnr");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.KRechnungNr).HasColumnName("kRechnungNr");
        });

        modelBuilder.Entity<Trechnungsadresse>(entity =>
        {
            entity.HasKey(e => e.KRechnungsAdresse).HasName("PK_dbo_trechnungsadresse");

            entity.ToTable("trechnungsadresse", tb => tb.HasTrigger("tgr_dbo_trechnungsadresse_INSUP"));

            entity.HasIndex(e => e.CIso, "IX_trechnungsadresse_cISO");

            entity.Property(e => e.KRechnungsAdresse)
                .ValueGeneratedNever()
                .HasColumnName("kRechnungsAdresse");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAdressZusatz)
                .HasMaxLength(255)
                .HasColumnName("cAdressZusatz");
            entity.Property(e => e.CAnrede)
                .HasMaxLength(30)
                .HasColumnName("cAnrede");
            entity.Property(e => e.CBundesland)
                .HasMaxLength(255)
                .HasColumnName("cBundesland");
            entity.Property(e => e.CFax)
                .HasMaxLength(30)
                .HasColumnName("cFax");
            entity.Property(e => e.CFirma)
                .HasMaxLength(128)
                .HasColumnName("cFirma");
            entity.Property(e => e.CIso)
                .HasMaxLength(5)
                .HasColumnName("cISO");
            entity.Property(e => e.CKundenNr)
                .HasMaxLength(30)
                .HasColumnName("cKundenNr");
            entity.Property(e => e.CLand)
                .HasMaxLength(255)
                .HasColumnName("cLand");
            entity.Property(e => e.CMail)
                .HasMaxLength(255)
                .HasColumnName("cMail");
            entity.Property(e => e.CMobil)
                .HasMaxLength(30)
                .HasColumnName("cMobil");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPlz)
                .HasMaxLength(24)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CPostId)
                .HasMaxLength(255)
                .HasColumnName("cPostID");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTel)
                .HasMaxLength(30)
                .HasColumnName("cTel");
            entity.Property(e => e.CTitel)
                .HasMaxLength(64)
                .HasColumnName("cTitel");
            entity.Property(e => e.CVorname)
                .HasMaxLength(255)
                .HasColumnName("cVorname");
            entity.Property(e => e.CZhaenden)
                .HasMaxLength(255)
                .HasColumnName("cZHaenden");
            entity.Property(e => e.CZusatz)
                .HasMaxLength(60)
                .HasColumnName("cZusatz");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
        });

        modelBuilder.Entity<Tsynch>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tsynch");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CIp)
                .HasMaxLength(20)
                .HasColumnName("cIP");
        });

        modelBuilder.Entity<Tversandart>(entity =>
        {
            entity.HasKey(e => e.KVersandArt).HasName("PK_dbo_tversandart");

            entity.ToTable("tversandart", tb => tb.HasTrigger("jtlActionValidator_tVersandArt"));

            entity.Property(e => e.KVersandArt)
                .ValueGeneratedNever()
                .HasColumnName("kVersandArt");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAktiv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAktiv");
            entity.Property(e => e.CAmazonCarrierCode)
                .HasMaxLength(255)
                .HasColumnName("cAmazonCarrierCode");
            entity.Property(e => e.CAuftragsText)
                .HasMaxLength(255)
                .HasColumnName("cAuftragsText");
            entity.Property(e => e.CDruckText)
                .HasMaxLength(255)
                .HasColumnName("cDruckText");
            entity.Property(e => e.CEbayCarrierCode)
                .HasMaxLength(255)
                .HasColumnName("cEbayCarrierCode");
            entity.Property(e => e.CInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cInet");
            entity.Property(e => e.CMarktplatzLieferservice)
                .HasMaxLength(255)
                .HasColumnName("cMarktplatzLieferservice");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CTrackingIdregex)
                .HasMaxLength(1000)
                .HasColumnName("cTrackingIDRegex");
            entity.Property(e => e.CTrackingUrlTemplate)
                .HasMaxLength(255)
                .HasColumnName("cTrackingUrlTemplate");
            entity.Property(e => e.CZahlungsInfo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cZahlungsInfo");
            entity.Property(e => e.FEkpreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEKPreis");
            entity.Property(e => e.FMwSt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwSt");
            entity.Property(e => e.FPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPrice");
            entity.Property(e => e.FVkfreiAb)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVKFreiAB");
            entity.Property(e => e.FZusatzGewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZusatzGewicht");
            entity.Property(e => e.KEtikettenFormular)
                .HasDefaultValueSql("((0))")
                .HasColumnName("kEtikettenFormular");
            entity.Property(e => e.KMainVersandart).HasColumnName("kMainVersandart");
            entity.Property(e => e.KShippingServiceProviderType).HasColumnName("kShippingServiceProviderType");
            entity.Property(e => e.KSteuerklasse)
                .HasDefaultValueSql("((0))")
                .HasColumnName("kSteuerklasse");
            entity.Property(e => e.KVersanddatenExportVorlage).HasColumnName("kVersanddatenExportVorlage");
            entity.Property(e => e.KVersanddatenImportVorlage).HasColumnName("kVersanddatenImportVorlage");
            entity.Property(e => e.NAmazonPrime).HasColumnName("nAmazonPrime");
            entity.Property(e => e.NEigeneVersandart).HasColumnName("nEigeneVersandart");
            entity.Property(e => e.NEtikettenDrucken)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nEtikettenDrucken");
            entity.Property(e => e.NEtikettenStartRueckfrage)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nEtikettenStartRueckfrage");
            entity.Property(e => e.NExpress).HasColumnName("nExpress");
            entity.Property(e => e.NPrioritaet).HasColumnName("nPrioritaet");
            entity.Property(e => e.NTrackingIdbis)
                .HasDefaultValueSql("((100))")
                .HasColumnName("nTrackingIDBis");
            entity.Property(e => e.NTrackingIdeingabePflicht).HasColumnName("nTrackingIDEingabePflicht");
            entity.Property(e => e.NTrackingIdvon)
                .HasDefaultValueSql("((1))")
                .HasColumnName("nTrackingIDVon");
            entity.Property(e => e.NVersandMailSenden)
                .HasDefaultValueSql("((1))")
                .HasColumnName("nVersandMailSenden");
            entity.Property(e => e.NVersandSchnittstelle)
                .HasDefaultValueSql("((1))")
                .HasColumnName("nVersandSchnittstelle");
            entity.Property(e => e.NVerwiegePflicht).HasColumnName("nVerwiegePflicht");
        });

        modelBuilder.Entity<Tversion>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tversion");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CVersion)
                .HasMaxLength(20)
                .HasColumnName("cVersion");
        });

        modelBuilder.Entity<Twebversand>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("twebversand");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CApikey)
                .HasMaxLength(50)
                .HasColumnName("cAPIKEY");
            entity.Property(e => e.CBenutzerFtp)
                .HasMaxLength(20)
                .HasColumnName("cBenutzerFtp");
            entity.Property(e => e.CBenutzerWeb)
                .HasMaxLength(20)
                .HasColumnName("cBenutzerWeb");
            entity.Property(e => e.CFtppath)
                .HasMaxLength(255)
                .HasColumnName("cFTPPath");
            entity.Property(e => e.CPasswortFtp)
                .HasMaxLength(20)
                .HasColumnName("cPasswortFtp");
            entity.Property(e => e.CPasswortWeb)
                .HasMaxLength(255)
                .HasColumnName("cPasswortWeb");
            entity.Property(e => e.CPasv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cPASV");
            entity.Property(e => e.CServerFtp)
                .HasMaxLength(255)
                .HasColumnName("cServerFtp");
            entity.Property(e => e.CServerUrl)
                .HasMaxLength(255)
                .HasColumnName("cServerURL");
            entity.Property(e => e.KWebVersand).HasColumnName("kWebVersand");
            entity.Property(e => e.NHttpPut)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nHttpPut");
            entity.Property(e => e.NShopAuftragsNr)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nShopAuftragsNr");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("User", "Report");

            entity.Property(e => e.CompanyInternalId).HasComment("Interne ID der Firma");
            entity.Property(e => e.Department)
                .HasMaxLength(255)
                .HasComment("Abteilung des Benutzers");
            entity.Property(e => e.EmailAddress)
                .HasMaxLength(255)
                .HasComment("E-Mail-Adresse");
            entity.Property(e => e.Fax)
                .HasMaxLength(255)
                .HasComment("Faxnummer");
            entity.Property(e => e.InternalId).HasComment("Interne ID des Benutzers");
            entity.Property(e => e.MobilePhone)
                .HasMaxLength(255)
                .HasComment("Mobilnummer");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasComment("Name des Benutzers");
            entity.Property(e => e.Note)
                .HasMaxLength(255)
                .HasComment("Hinweis zum Benutzer");
            entity.Property(e => e.Phone)
                .HasMaxLength(255)
                .HasComment("Telefonnummer");
        });

        modelBuilder.Entity<V360GradSicht>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v360GradSicht", "Kunde");

            entity.Property(e => e.AvgWarenkorb).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.CAnrede)
                .HasMaxLength(30)
                .HasColumnName("cAnrede");
            entity.Property(e => e.CFax)
                .HasMaxLength(30)
                .HasColumnName("cFax");
            entity.Property(e => e.CFirma)
                .HasMaxLength(128)
                .HasColumnName("cFirma");
            entity.Property(e => e.CGeburtstag)
                .HasMaxLength(10)
                .HasColumnName("cGeburtstag");
            entity.Property(e => e.CKundenNr)
                .HasMaxLength(30)
                .HasColumnName("cKundenNr");
            entity.Property(e => e.CLand)
                .HasMaxLength(255)
                .HasColumnName("cLand");
            entity.Property(e => e.CMail)
                .HasMaxLength(255)
                .HasColumnName("cMail");
            entity.Property(e => e.CMobil)
                .HasMaxLength(30)
                .HasColumnName("cMobil");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPlz)
                .HasMaxLength(24)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTel)
                .HasMaxLength(30)
                .HasColumnName("cTel");
            entity.Property(e => e.CTitel)
                .HasMaxLength(64)
                .HasColumnName("cTitel");
            entity.Property(e => e.CVorname)
                .HasMaxLength(255)
                .HasColumnName("cVorname");
            entity.Property(e => e.Gewinn).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KundeSeit).HasColumnType("datetime");
            entity.Property(e => e.KundenGruppe).HasMaxLength(255);
            entity.Property(e => e.KundenKategorie).HasMaxLength(128);
            entity.Property(e => e.Kundenguthaben).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.LetzteBestellung).HasColumnType("datetime");
            entity.Property(e => e.RabattKunde).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.StandartZahlungsart).HasMaxLength(255);
            entity.Property(e => e.SummeBestellungOffen).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.SummeRechnungOffen).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Umsatz).HasColumnType("decimal(38, 6)");
        });

        modelBuilder.Entity<VAbrechnung>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAbrechnung", "FulfillmentNetwork");

            entity.Property(e => e.CAbrechnungsNummer)
                .HasMaxLength(50)
                .HasColumnName("cAbrechnungsNummer");
            entity.Property(e => e.CAnmerkung).HasColumnName("cAnmerkung");
            entity.Property(e => e.CBestellNr)
                .HasMaxLength(50)
                .HasColumnName("cBestellNr");
            entity.Property(e => e.DAbrechnungBis)
                .HasColumnType("datetime")
                .HasColumnName("dAbrechnungBis");
            entity.Property(e => e.DAbrechnungVon)
                .HasColumnType("datetime")
                .HasColumnName("dAbrechnungVon");
            entity.Property(e => e.DAuftragErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dAuftragErstellt");
            entity.Property(e => e.KAbrechnung).HasColumnName("kAbrechnung");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KFulfillmentLieferant).HasColumnName("kFulfillmentLieferant");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.NStorno).HasColumnName("nStorno");
        });

        modelBuilder.Entity<VAdresse>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAdresse", "DbeS");

            entity.Property(e => e.CAdressZusatz)
                .HasMaxLength(255)
                .HasColumnName("cAdressZusatz");
            entity.Property(e => e.CAnrede)
                .HasMaxLength(30)
                .HasColumnName("cAnrede");
            entity.Property(e => e.CBundesland)
                .HasMaxLength(255)
                .HasColumnName("cBundesland");
            entity.Property(e => e.CFax)
                .HasMaxLength(30)
                .HasColumnName("cFax");
            entity.Property(e => e.CFirma)
                .HasMaxLength(128)
                .HasColumnName("cFirma");
            entity.Property(e => e.CLand)
                .HasMaxLength(5)
                .HasColumnName("cLand");
            entity.Property(e => e.CMail)
                .HasMaxLength(255)
                .HasColumnName("cMail");
            entity.Property(e => e.CMobil)
                .HasMaxLength(30)
                .HasColumnName("cMobil");
            entity.Property(e => e.CNachname)
                .HasMaxLength(255)
                .HasColumnName("cNachname");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPlz)
                .HasMaxLength(24)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTel)
                .HasMaxLength(30)
                .HasColumnName("cTel");
            entity.Property(e => e.CTitel)
                .HasMaxLength(64)
                .HasColumnName("cTitel");
            entity.Property(e => e.CUstid)
                .HasMaxLength(20)
                .HasColumnName("cUSTID");
            entity.Property(e => e.CVorname)
                .HasMaxLength(255)
                .HasColumnName("cVorname");
            entity.Property(e => e.CZusatz)
                .HasMaxLength(60)
                .HasColumnName("cZusatz");
            entity.Property(e => e.KAdresse)
                .ValueGeneratedOnAdd()
                .HasColumnName("kAdresse");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.NStandard).HasColumnName("nStandard");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<VAmazonSfpOrderdatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAmazonSfpOrderdata", "FulfillmentNetwork");

            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.SellerId).HasMaxLength(255);
        });

        modelBuilder.Entity<VAmazonSfpShippingdatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAmazonSfpShippingdata", "FulfillmentNetwork");

            entity.Property(e => e.KVersand).HasColumnName("kVersand");
            entity.Property(e => e.PackageWeight).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingMethodAutoCalcWeight).HasColumnName("ShippingMethod.AutoCalcWeight");
            entity.Property(e => e.ShippingMethodCarrierWillPickUp).HasColumnName("ShippingMethod.CarrierWillPickUp");
            entity.Property(e => e.ShippingMethodHeight)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("ShippingMethod.Height");
            entity.Property(e => e.ShippingMethodLength)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("ShippingMethod.Length");
            entity.Property(e => e.ShippingMethodMinWeight)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("ShippingMethod.MinWeight");
            entity.Property(e => e.ShippingMethodUseInsurance).HasColumnName("ShippingMethod.UseInsurance");
            entity.Property(e => e.ShippingMethodUseWarhouseAddress).HasColumnName("ShippingMethod.UseWarhouseAddress");
            entity.Property(e => e.ShippingMethodWeight)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("ShippingMethod.Weight");
            entity.Property(e => e.ShippingMethodWidth)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("ShippingMethod.Width");
        });

        modelBuilder.Entity<VAmazonUnbekannteSettlementPosAmounttypen>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAmazonUnbekannteSettlementPosAmounttypen", "Maintenance");

            entity.Property(e => e.AmountDescription).HasMaxLength(50);
            entity.Property(e => e.AmountType).HasMaxLength(30);
        });

        modelBuilder.Entity<VAmeiseStandardArtikel>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAmeiseStandardArtikel");

            entity.Property(e => e.CAktiv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAktiv");
            entity.Property(e => e.CAmazonFnsku)
                .HasMaxLength(50)
                .HasColumnName("cAmazonFNSKU");
            entity.Property(e => e.CAnmerkung).HasColumnName("cAnmerkung");
            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CAsin)
                .HasMaxLength(255)
                .HasColumnName("cASIN");
            entity.Property(e => e.CBarcode)
                .HasMaxLength(255)
                .HasColumnName("cBarcode");
            entity.Property(e => e.CBeschreibung).HasColumnName("cBeschreibung");
            entity.Property(e => e.CDelInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cDelInet");
            entity.Property(e => e.CEinheit)
                .HasMaxLength(255)
                .HasColumnName("cEinheit");
            entity.Property(e => e.CEpid)
                .HasMaxLength(255)
                .HasColumnName("cEPID");
            entity.Property(e => e.CErloeskonto)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("cErloeskonto");
            entity.Property(e => e.CGefahrnr)
                .HasMaxLength(255)
                .HasColumnName("cGefahrnr");
            entity.Property(e => e.CHan)
                .HasMaxLength(255)
                .HasColumnName("cHAN");
            entity.Property(e => e.CHerkunftsland)
                .HasMaxLength(64)
                .HasColumnName("cHerkunftsland");
            entity.Property(e => e.CHersteller)
                .HasMaxLength(255)
                .HasColumnName("cHersteller");
            entity.Property(e => e.CInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cInet");
            entity.Property(e => e.CIsbn)
                .HasMaxLength(255)
                .HasColumnName("cISBN");
            entity.Property(e => e.CKurzBeschreibung).HasColumnName("cKurzBeschreibung");
            entity.Property(e => e.CLagerAktiv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLagerAktiv");
            entity.Property(e => e.CLagerArtikel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLagerArtikel");
            entity.Property(e => e.CLagerKleinerNull)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLagerKleinerNull");
            entity.Property(e => e.CLagerVariation)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLagerVariation");
            entity.Property(e => e.CLieferstatus)
                .HasMaxLength(255)
                .HasColumnName("cLieferstatus");
            entity.Property(e => e.CMetaDescription).HasColumnName("cMetaDescription");
            entity.Property(e => e.CMetaKeywords)
                .HasMaxLength(4000)
                .HasColumnName("cMetaKeywords");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CNeu)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cNeu");
            entity.Property(e => e.CPreisliste)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cPreisliste");
            entity.Property(e => e.CSeo)
                .HasMaxLength(255)
                .HasColumnName("cSeo");
            entity.Property(e => e.CSerie)
                .HasMaxLength(255)
                .HasColumnName("cSerie");
            entity.Property(e => e.CSuchbegriffe)
                .HasMaxLength(255)
                .HasColumnName("cSuchbegriffe");
            entity.Property(e => e.CTaric)
                .HasMaxLength(20)
                .HasColumnName("cTaric");
            entity.Property(e => e.CTeilbar)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cTeilbar");
            entity.Property(e => e.CTitleTag)
                .HasMaxLength(4000)
                .HasColumnName("cTitleTag");
            entity.Property(e => e.CTopArtikel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cTopArtikel");
            entity.Property(e => e.CUnnummer)
                .HasMaxLength(255)
                .HasColumnName("cUNNummer");
            entity.Property(e => e.CUpc)
                .HasMaxLength(255)
                .HasColumnName("cUPC");
            entity.Property(e => e.CUrlPfad)
                .HasMaxLength(255)
                .HasColumnName("cUrlPfad");
            entity.Property(e => e.CVpeeinheit)
                .HasMaxLength(255)
                .HasColumnName("cVPEEinheit");
            entity.Property(e => e.DErscheinungsdatum)
                .HasColumnType("datetime")
                .HasColumnName("dErscheinungsdatum");
            entity.Property(e => e.DErstelldatum)
                .HasColumnType("datetime")
                .HasColumnName("dErstelldatum");
            entity.Property(e => e.DLetzterEk)
                .HasColumnType("datetime")
                .HasColumnName("dLetzterEK");
            entity.Property(e => e.DMod)
                .HasColumnType("datetime")
                .HasColumnName("dMod");
            entity.Property(e => e.DNeuImSortiment)
                .HasColumnType("datetime")
                .HasColumnName("dNeuImSortiment");
            entity.Property(e => e.DZulaufVerfuegbarAm)
                .HasColumnType("datetime")
                .HasColumnName("dZulaufVerfuegbarAm");
            entity.Property(e => e.FAbnahmeintervall)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAbnahmeintervall");
            entity.Property(e => e.FAmazonVk)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAmazonVK");
            entity.Property(e => e.FArtGewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fArtGewicht");
            entity.Property(e => e.FBreite)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBreite");
            entity.Property(e => e.FEbayPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEbayPreis");
            entity.Property(e => e.FEknetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEKNetto");
            entity.Property(e => e.FGewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGewicht");
            entity.Property(e => e.FGrundpreisMenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGrundpreisMenge");
            entity.Property(e => e.FHoehe)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fHoehe");
            entity.Property(e => e.FLaenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLaenge");
            entity.Property(e => e.FLetzterEk)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLetzterEK");
            entity.Property(e => e.FMassMenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMassMenge");
            entity.Property(e => e.FMwSt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwSt");
            entity.Property(e => e.FPackeinheit)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPackeinheit");
            entity.Property(e => e.FUvp)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fUVP");
            entity.Property(e => e.FVkbrutto)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fVKbrutto");
            entity.Property(e => e.FVkhaendlerBrutto).HasColumnName("fVKHaendlerBrutto");
            entity.Property(e => e.FVkhaendlerNetto).HasColumnName("fVKHaendlerNetto");
            entity.Property(e => e.FVknetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVKNetto");
            entity.Property(e => e.FVpewert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVPEWert");
            entity.Property(e => e.HlpSondertyp).HasColumnName("hlpSondertyp");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBenutzerLetzteAenderung).HasColumnName("kBenutzerLetzteAenderung");
            entity.Property(e => e.KEigenschaftKombi).HasColumnName("kEigenschaftKombi");
            entity.Property(e => e.KGrundPreisEinheit).HasColumnName("kGrundPreisEinheit");
            entity.Property(e => e.KHersteller).HasColumnName("kHersteller");
            entity.Property(e => e.KLieferStatus).HasColumnName("kLieferStatus");
            entity.Property(e => e.KMassEinheit).HasColumnName("kMassEinheit");
            entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");
            entity.Property(e => e.KStueckliste).HasColumnName("kStueckliste");
            entity.Property(e => e.KVaterArtikel).HasColumnName("kVaterArtikel");
            entity.Property(e => e.KVerkaufsEinheit).HasColumnName("kVerkaufsEinheit");
            entity.Property(e => e.KVersandklasse).HasColumnName("kVersandklasse");
            entity.Property(e => e.KVpeeinheit).HasColumnName("kVPEEinheit");
            entity.Property(e => e.KWarengruppe).HasColumnName("kWarengruppe");
            entity.Property(e => e.KZustand).HasColumnName("kZustand");
            entity.Property(e => e.NAutomatischeLiefertageberechnung).HasColumnName("nAutomatischeLiefertageberechnung");
            entity.Property(e => e.NBearbeitungszeit).HasColumnName("nBearbeitungszeit");
            entity.Property(e => e.NCharge).HasColumnName("nCharge");
            entity.Property(e => e.NDelete).HasColumnName("nDelete");
            entity.Property(e => e.NEbayAbgleich).HasColumnName("nEbayAbgleich");
            entity.Property(e => e.NIstMindestbestand).HasColumnName("nIstMindestbestand");
            entity.Property(e => e.NIstVater).HasColumnName("nIstVater");
            entity.Property(e => e.NLagerbestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nLagerbestand");
            entity.Property(e => e.NLiefertageWennAusverkauft).HasColumnName("nLiefertageWennAusverkauft");
            entity.Property(e => e.NMhd).HasColumnName("nMHD");
            entity.Property(e => e.NMidestbestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nMidestbestand");
            entity.Property(e => e.NMindestbestellmaenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nMindestbestellmaenge");
            entity.Property(e => e.NNichtBestellbar).HasColumnName("nNichtBestellbar");
            entity.Property(e => e.NNichtRabattfaehig).HasColumnName("nNichtRabattfaehig");
            entity.Property(e => e.NProzentualePreisStaffelAktiv).HasColumnName("nProzentualePreisStaffelAktiv");
            entity.Property(e => e.NPuffer).HasColumnName("nPuffer");
            entity.Property(e => e.NPufferTyp).HasColumnName("nPufferTyp");
            entity.Property(e => e.NSeriennummernVerfolgung).HasColumnName("nSeriennummernVerfolgung");
            entity.Property(e => e.NSonderTyp).HasColumnName("nSonderTyp");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NVpe).HasColumnName("nVPE");
            entity.Property(e => e.NZulaufVerfuegbarMenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nZulaufVerfuegbarMenge");
        });

        modelBuilder.Entity<VArtikel>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vArtikel", "DbeS");

            entity.Property(e => e.CAktiv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAktiv");
            entity.Property(e => e.CAnmerkung).HasColumnName("cAnmerkung");
            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CAsin)
                .HasMaxLength(255)
                .HasColumnName("cASIN");
            entity.Property(e => e.CBarcode)
                .HasMaxLength(255)
                .HasColumnName("cBarcode");
            entity.Property(e => e.CBeschreibung).HasColumnName("cBeschreibung");
            entity.Property(e => e.CDelInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cDelInet");
            entity.Property(e => e.CEinheit)
                .HasMaxLength(255)
                .HasColumnName("cEinheit");
            entity.Property(e => e.CEpid)
                .HasMaxLength(255)
                .HasColumnName("cEPID");
            entity.Property(e => e.CGefahrnr)
                .HasMaxLength(255)
                .HasColumnName("cGefahrnr");
            entity.Property(e => e.CHan)
                .HasMaxLength(255)
                .HasColumnName("cHAN");
            entity.Property(e => e.CHerkunftsland)
                .HasMaxLength(64)
                .HasColumnName("cHerkunftsland");
            entity.Property(e => e.CInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cInet");
            entity.Property(e => e.CIsbn)
                .HasMaxLength(255)
                .HasColumnName("cISBN");
            entity.Property(e => e.CKurzBeschreibung).HasColumnName("cKurzBeschreibung");
            entity.Property(e => e.CLagerBeachten)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLagerBeachten");
            entity.Property(e => e.CLagerKleinerNull)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("cLagerKleinerNull");
            entity.Property(e => e.CLagerVariation)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLagerVariation");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CNeu)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cNeu");
            entity.Property(e => e.CSeo)
                .HasMaxLength(255)
                .HasColumnName("cSeo");
            entity.Property(e => e.CSerie)
                .HasMaxLength(255)
                .HasColumnName("cSerie");
            entity.Property(e => e.CSuchbegriffe)
                .HasMaxLength(255)
                .HasColumnName("cSuchbegriffe");
            entity.Property(e => e.CTaric)
                .HasMaxLength(20)
                .HasColumnName("cTaric");
            entity.Property(e => e.CTeilbar)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cTeilbar");
            entity.Property(e => e.CTopArtikel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cTopArtikel");
            entity.Property(e => e.CUnnummer)
                .HasMaxLength(255)
                .HasColumnName("cUNNummer");
            entity.Property(e => e.CUpc)
                .HasMaxLength(255)
                .HasColumnName("cUPC");
            entity.Property(e => e.CVpe)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("cVPE");
            entity.Property(e => e.CVpeeinheit)
                .HasMaxLength(255)
                .HasColumnName("cVPEEinheit");
            entity.Property(e => e.DErscheinungsdatum)
                .HasMaxLength(63)
                .IsUnicode(false)
                .HasColumnName("dErscheinungsdatum");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DMhd)
                .HasColumnType("datetime")
                .HasColumnName("dMHD");
            entity.Property(e => e.DZulaufVerfuegbarAm)
                .HasColumnType("datetime")
                .HasColumnName("dZulaufVerfuegbarAm");
            entity.Property(e => e.FAbnahmeintervall)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAbnahmeintervall");
            entity.Property(e => e.FArtikelgewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fArtikelgewicht");
            entity.Property(e => e.FBreite)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBreite");
            entity.Property(e => e.FGewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGewicht");
            entity.Property(e => e.FGrundpreisMenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGrundpreisMenge");
            entity.Property(e => e.FHoehe)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fHoehe");
            entity.Property(e => e.FLaenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLaenge");
            entity.Property(e => e.FLagerbestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLagerbestand");
            entity.Property(e => e.FLiefArtikelLagerbestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLiefArtikelLagerbestand");
            entity.Property(e => e.FMassMenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMassMenge");
            entity.Property(e => e.FMindestbestellmenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMindestbestellmenge");
            entity.Property(e => e.FMwSt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwSt");
            entity.Property(e => e.FPackeinheit)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPackeinheit");
            entity.Property(e => e.FStandardpreisNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fStandardpreisNetto");
            entity.Property(e => e.FUvp)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fUVP");
            entity.Property(e => e.FVerfuegbar)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVerfuegbar");
            entity.Property(e => e.FVpewert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVPEWert");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KEigenschaftKombi).HasColumnName("kEigenschaftKombi");
            entity.Property(e => e.KEinheit).HasColumnName("kEinheit");
            entity.Property(e => e.KGrundPreisEinheit).HasColumnName("kGrundPreisEinheit");
            entity.Property(e => e.KHersteller).HasColumnName("kHersteller");
            entity.Property(e => e.KLiefArtikel).HasColumnName("kLiefArtikel");
            entity.Property(e => e.KLieferstatus).HasColumnName("kLieferstatus");
            entity.Property(e => e.KMassEinheit).HasColumnName("kMassEinheit");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");
            entity.Property(e => e.KStueckliste).HasColumnName("kStueckliste");
            entity.Property(e => e.KVaterArtikel).HasColumnName("kVaterArtikel");
            entity.Property(e => e.KVerkaufsEinheit).HasColumnName("kVerkaufsEinheit");
            entity.Property(e => e.KVersandklasse).HasColumnName("kVersandklasse");
            entity.Property(e => e.KVpeeinheit).HasColumnName("kVPEEinheit");
            entity.Property(e => e.KWarengruppe).HasColumnName("kWarengruppe");
            entity.Property(e => e.NAutomatischeLiefertageberechnung).HasColumnName("nAutomatischeLiefertageberechnung");
            entity.Property(e => e.NBearbeitungszeit).HasColumnName("nBearbeitungszeit");
            entity.Property(e => e.NGoogleCondition).HasColumnName("nGoogleCondition");
            entity.Property(e => e.NIstVater).HasColumnName("nIstVater");
            entity.Property(e => e.NLiefertageWennAusverkauft).HasColumnName("nLiefertageWennAusverkauft");
            entity.Property(e => e.NLieferzeit).HasColumnName("nLieferzeit");
            entity.Property(e => e.NNichtRabattfaehig).HasColumnName("nNichtRabattfaehig");
            entity.Property(e => e.NPuffer).HasColumnName("nPuffer");
            entity.Property(e => e.NPufferTyp).HasColumnName("nPufferTyp");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NZulaufVerfuegbarMenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nZulaufVerfuegbarMenge");
        });

        modelBuilder.Entity<VArtikelAbnahme>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vArtikelAbnahme", "DbeS");

            entity.Property(e => e.FIntervall)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fIntervall");
            entity.Property(e => e.FMindestabnahme)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMindestabnahme");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KKundengruppe).HasColumnName("kKundengruppe");
        });

        modelBuilder.Entity<VArtikelAttributEigeneFelder>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vArtikelAttributEigeneFelder", "DbeS");

            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CWertVarchar).HasColumnName("cWertVarchar");
            entity.Property(e => e.DWertDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dWertDateTime");
            entity.Property(e => e.FWertDecimal)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertDecimal");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KArtikelAttribut).HasColumnName("kArtikelAttribut");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.NDatenTyp).HasColumnName("nDatenTyp");
            entity.Property(e => e.NSortierung).HasColumnName("nSortierung");
            entity.Property(e => e.NWertInt).HasColumnName("nWertInt");
        });

        modelBuilder.Entity<VArtikelAttributEinsprachig>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vArtikelAttributEinsprachig", "DbeS");

            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CWertVarchar).HasColumnName("cWertVarchar");
            entity.Property(e => e.DWertDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dWertDateTime");
            entity.Property(e => e.FWertDecimal)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertDecimal");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KArtikelAttribut).HasColumnName("kArtikelAttribut");
            entity.Property(e => e.KFeldTyp).HasColumnName("kFeldTyp");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.NDatenTyp).HasColumnName("nDatenTyp");
            entity.Property(e => e.NSortierung).HasColumnName("nSortierung");
            entity.Property(e => e.NWertInt).HasColumnName("nWertInt");
        });

        modelBuilder.Entity<VArtikelAttributMehrsprachig>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vArtikelAttributMehrsprachig", "DbeS");

            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CWertVarchar).HasColumnName("cWertVarchar");
            entity.Property(e => e.DWertDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dWertDateTime");
            entity.Property(e => e.FWertDecimal)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertDecimal");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KArtikelAttribut).HasColumnName("kArtikelAttribut");
            entity.Property(e => e.KAttribut).HasColumnName("kAttribut");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.NDatenTyp).HasColumnName("nDatenTyp");
            entity.Property(e => e.NIsShopSpecial).HasColumnName("nIsShopSpecial");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NWertInt).HasColumnName("nWertInt");
        });

        modelBuilder.Entity<VArtikelAttributSprachePlattform>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vArtikelAttributSprachePlattform");

            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KArtikelAttribut).HasColumnName("kArtikelAttribut");
            entity.Property(e => e.KAttribut).HasColumnName("kAttribut");
            entity.Property(e => e.KShop).HasColumnName("kShop");
        });

        modelBuilder.Entity<VArtikelBeschreibung>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vArtikelBeschreibung", "DbeS");

            entity.Property(e => e.CBeschreibung).HasColumnName("cBeschreibung");
            entity.Property(e => e.CKurzBeschreibung).HasColumnName("cKurzBeschreibung");
            entity.Property(e => e.CMetaDescription).HasColumnName("cMetaDescription");
            entity.Property(e => e.CMetaKeywords)
                .HasMaxLength(4000)
                .HasColumnName("cMetaKeywords");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CTitleTag)
                .HasMaxLength(4000)
                .HasColumnName("cTitleTag");
            entity.Property(e => e.CUrlPfad)
                .HasMaxLength(255)
                .HasColumnName("cUrlPfad");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
        });

        modelBuilder.Entity<VArtikelBild>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vArtikelBild", "DbeS");

            entity.Property(e => e.BBild)
                .HasColumnType("image")
                .HasColumnName("bBild");
            entity.Property(e => e.CHash)
                .HasMaxLength(255)
                .HasColumnName("cHash");
            entity.Property(e => e.KBild)
                .ValueGeneratedOnAdd()
                .HasColumnName("kBild");
            entity.Property(e => e.NDateigroesse).HasColumnName("nDateigroesse");
        });

        modelBuilder.Entity<VArtikelBildPlattform>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vArtikelBildPlattform", "DbeS");

            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KArtikelBildPlattform)
                .ValueGeneratedOnAdd()
                .HasColumnName("kArtikelBildPlattform");
            entity.Property(e => e.KBild).HasColumnName("kBild");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NInet).HasColumnName("nInet");
            entity.Property(e => e.NNr).HasColumnName("nNr");
        });

        modelBuilder.Entity<VArtikelDelete>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vArtikelDelete", "DbeS");

            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NInBearbeitung).HasColumnName("nInBearbeitung");
            entity.Property(e => e.NType).HasColumnName("nType");
        });

        modelBuilder.Entity<VArtikelDownload>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vArtikelDownload", "DbeS");

            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KDownload).HasColumnName("kDownload");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<VArtikelEigenschaft>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vArtikelEigenschaft", "DbeS");

            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CTyp)
                .HasMaxLength(32)
                .HasColumnName("cTyp");
            entity.Property(e => e.CWaehlbar)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWaehlbar");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KEigenschaft).HasColumnName("kEigenschaft");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<VArtikelEigenschaftKombiWert>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vArtikelEigenschaftKombiWert", "DbeS");

            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KEigenschaft).HasColumnName("kEigenschaft");
            entity.Property(e => e.KEigenschaftKombi).HasColumnName("kEigenschaftKombi");
            entity.Property(e => e.KEigenschaftWert).HasColumnName("kEigenschaftWert");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KVaterArtikel).HasColumnName("kVaterArtikel");
        });

        modelBuilder.Entity<VArtikelEigenschaftSichtbarkeit>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vArtikelEigenschaftSichtbarkeit", "DbeS");

            entity.Property(e => e.KEigenschaft).HasColumnName("kEigenschaft");
            entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");
            entity.Property(e => e.KShop).HasColumnName("kShop");
        });

        modelBuilder.Entity<VArtikelEigenschaftWert>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vArtikelEigenschaftWert", "DbeS");

            entity.Property(e => e.CAktiv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAktiv");
            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CBarcode)
                .HasMaxLength(255)
                .HasColumnName("cBarcode");
            entity.Property(e => e.CInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cInet");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.FAufpreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAufpreis");
            entity.Property(e => e.FAufpreisNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAufpreisNetto");
            entity.Property(e => e.FGewichtDiff)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGewichtDiff");
            entity.Property(e => e.FLagerbestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLagerbestand");
            entity.Property(e => e.FPackeinheit)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPackeinheit");
            entity.Property(e => e.KEigenschaft).HasColumnName("kEigenschaft");
            entity.Property(e => e.KEigenschaftWert).HasColumnName("kEigenschaftWert");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<VArtikelEigenschaftWertAbhaengigkeit>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vArtikelEigenschaftWertAbhaengigkeit", "DbeS");

            entity.Property(e => e.KEigenschaftWert).HasColumnName("kEigenschaftWert");
            entity.Property(e => e.KEigenschaftWertAbhaengigkeit)
                .ValueGeneratedOnAdd()
                .HasColumnName("kEigenschaftWertAbhaengigkeit");
            entity.Property(e => e.KEigenschaftWertZiel).HasColumnName("kEigenschaftWertZiel");
        });

        modelBuilder.Entity<VArtikelEigenschaftWertAufprei>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vArtikelEigenschaftWertAufpreis", "DbeS");

            entity.Property(e => e.FAufpreisNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAufpreisNetto");
            entity.Property(e => e.KEigenschaftWert).HasColumnName("kEigenschaftWert");
            entity.Property(e => e.KKundengruppe).HasColumnName("kKundengruppe");
            entity.Property(e => e.KShop).HasColumnName("kShop");
        });

        modelBuilder.Entity<VArtikelEigenschaftWertSichtbarkeit>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vArtikelEigenschaftWertSichtbarkeit", "DbeS");

            entity.Property(e => e.KEigenschaftWert).HasColumnName("kEigenschaftWert");
            entity.Property(e => e.KKundengruppe).HasColumnName("kKundengruppe");
            entity.Property(e => e.KShop).HasColumnName("kShop");
        });

        modelBuilder.Entity<VArtikelHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vArtikelHistory");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CChargenNr)
                .HasMaxLength(255)
                .HasColumnName("cChargenNr");
            entity.Property(e => e.CDimensionen)
                .HasMaxLength(255)
                .HasColumnName("cDimensionen");
            entity.Property(e => e.CKommentar)
                .HasMaxLength(255)
                .HasColumnName("cKommentar");
            entity.Property(e => e.CLieferscheinNr)
                .HasMaxLength(255)
                .HasColumnName("cLieferscheinNr");
            entity.Property(e => e.CSubsetNumber)
                .HasMaxLength(100)
                .HasColumnName("cSubsetNumber");
            entity.Property(e => e.DGebucht)
                .HasColumnType("datetime")
                .HasColumnName("dGebucht");
            entity.Property(e => e.DMhd)
                .HasColumnType("datetime")
                .HasColumnName("dMHD");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.FEknetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEKNetto");
            entity.Property(e => e.FLagerBestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLagerBestand");
            entity.Property(e => e.FLagerBestandGesamt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLagerBestandGesamt");
            entity.Property(e => e.FLagerBestandInLager)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLagerBestandInLager");
            entity.Property(e => e.FReserviert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fReserviert");
            entity.Property(e => e.FVerfuegbar)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVerfuegbar");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KArtikelHistory)
                .ValueGeneratedOnAdd()
                .HasColumnName("kArtikelHistory");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");
            entity.Property(e => e.KBuchungsart).HasColumnName("kBuchungsart");
            entity.Property(e => e.KGutschriftPos).HasColumnName("kGutschriftPos");
            entity.Property(e => e.KLhm).HasColumnName("kLHM");
            entity.Property(e => e.KLieferantenBestellungPos).HasColumnName("kLieferantenBestellungPos");
            entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KWarenEingang).HasColumnName("kWarenEingang");
            entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");
        });

        modelBuilder.Entity<VArtikelKonfigGruppe>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vArtikelKonfigGruppe", "DbeS");

            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KKonfiggruppe).HasColumnName("kKonfiggruppe");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<VArtikelMedienDatei>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vArtikelMedienDatei", "DbeS");

            entity.Property(e => e.CKategorie)
                .HasMaxLength(255)
                .HasColumnName("cKategorie");
            entity.Property(e => e.CPfad)
                .HasMaxLength(2000)
                .HasColumnName("cPfad");
            entity.Property(e => e.CTyp)
                .HasMaxLength(255)
                .HasColumnName("cTyp");
            entity.Property(e => e.CUrl)
                .HasMaxLength(2000)
                .HasColumnName("cURL");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KMedienDatei).HasColumnName("kMedienDatei");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<VArtikelMedienDateiAttribut>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vArtikelMedienDateiAttribut", "DbeS");

            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CWert).HasColumnName("cWert");
            entity.Property(e => e.KMedienDatei).HasColumnName("kMedienDatei");
            entity.Property(e => e.KMedienDateiAttribut)
                .ValueGeneratedOnAdd()
                .HasColumnName("kMedienDateiAttribut");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
        });

        modelBuilder.Entity<VArtikelMedienDateiSprache>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vArtikelMedienDateiSprache", "DbeS");

            entity.Property(e => e.CBeschreibung).HasColumnName("cBeschreibung");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KMedienDatei).HasColumnName("kMedienDatei");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
        });

        modelBuilder.Entity<VArtikelMerkmal>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vArtikelMerkmal", "DbeS");

            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KMerkmal).HasColumnName("kMerkmal");
            entity.Property(e => e.KMerkmalWert).HasColumnName("kMerkmalWert");
        });

        modelBuilder.Entity<VArtikelMerkmalWertKombination>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vArtikelMerkmalWertKombination");

            entity.Property(e => e.BMerkmalBild)
                .HasColumnType("image")
                .HasColumnName("bMerkmalBild");
            entity.Property(e => e.BMerkmalVorschauBild)
                .HasColumnType("image")
                .HasColumnName("bMerkmalVorschauBild");
            entity.Property(e => e.BWertBild)
                .HasColumnType("image")
                .HasColumnName("bWertBild");
            entity.Property(e => e.BWertVorschauBild)
                .HasColumnType("image")
                .HasColumnName("bWertVorschauBild");
            entity.Property(e => e.CBeschreibung).HasColumnName("cBeschreibung");
            entity.Property(e => e.CMetaDescription).HasColumnName("cMetaDescription");
            entity.Property(e => e.CMetaKeywords)
                .HasMaxLength(255)
                .HasColumnName("cMetaKeywords");
            entity.Property(e => e.CMetaTitle)
                .HasMaxLength(255)
                .HasColumnName("cMetaTitle");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CSeo)
                .HasMaxLength(255)
                .HasColumnName("cSeo");
            entity.Property(e => e.CSprache)
                .HasMaxLength(255)
                .HasColumnName("cSprache");
            entity.Property(e => e.CWert)
                .HasMaxLength(255)
                .HasColumnName("cWert");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KMerkmal).HasColumnName("kMerkmal");
            entity.Property(e => e.KMerkmalWert).HasColumnName("kMerkmalWert");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NStandard).HasColumnName("nStandard");
            entity.Property(e => e.NVerwendungszweck).HasColumnName("nVerwendungszweck");
        });

        modelBuilder.Entity<VArtikelPreisDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vArtikelPreisDetails", "DbeS");

            entity.Property(e => e.FNettoPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fNettoPreis");
            entity.Property(e => e.FProzent)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fProzent");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KPreis).HasColumnName("kPreis");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NAnzahlAb).HasColumnName("nAnzahlAb");
        });

        modelBuilder.Entity<VArtikelPreise>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vArtikelPreise", "DbeS");

            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KInetKunde).HasColumnName("kInetKunde");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");
            entity.Property(e => e.KPreis).HasColumnName("kPreis");
            entity.Property(e => e.KShop).HasColumnName("kShop");
        });

        modelBuilder.Entity<VArtikelQuickSync>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vArtikelQuickSync", "DbeS");

            entity.Property(e => e.FLagerbestand)
                .HasColumnType("decimal(26, 13)")
                .HasColumnName("fLagerbestand");
            entity.Property(e => e.FStandardpreisNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fStandardpreisNetto");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KShop).HasColumnName("kShop");
        });

        modelBuilder.Entity<VArtikelQuickSyncBestand>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vArtikelQuickSyncBestand", "DbeS");

            entity.Property(e => e.FLagerbestand)
                .HasColumnType("decimal(26, 13)")
                .HasColumnName("fLagerbestand");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KShop).HasColumnName("kShop");
        });

        modelBuilder.Entity<VArtikelQuickSyncPrei>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vArtikelQuickSyncPreis", "DbeS");

            entity.Property(e => e.FStandardpreisNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fStandardpreisNetto");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KShop).HasColumnName("kShop");
        });

        modelBuilder.Entity<VArtikelSonderprei>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vArtikelSonderpreis", "DbeS");

            entity.Property(e => e.CAktiv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("cAktiv");
            entity.Property(e => e.DEnde)
                .HasColumnType("datetime")
                .HasColumnName("dEnde");
            entity.Property(e => e.DStart)
                .HasColumnType("datetime")
                .HasColumnName("dStart");
            entity.Property(e => e.FNettoPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fNettoPreis");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KArtikelSonderpreis).HasColumnName("kArtikelSonderpreis");
            entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NAnzahl).HasColumnName("nAnzahl");
            entity.Property(e => e.NIstAnzahl).HasColumnName("nIstAnzahl");
            entity.Property(e => e.NIstDatum).HasColumnName("nIstDatum");
        });

        modelBuilder.Entity<VArtikelStueckliste>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vArtikelStueckliste", "DbeS");

            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KStueckliste).HasColumnName("kStueckliste");
        });

        modelBuilder.Entity<VArtikelStuecklistenKomponenten>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vArtikelStuecklistenKomponenten", "ArtikelVerwaltung");

            entity.Property(e => e.Abnahmeintervall).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.AmazonFnsku)
                .HasMaxLength(50)
                .HasColumnName("AmazonFNSKU");
            entity.Property(e => e.Artikelname).HasMaxLength(255);
            entity.Property(e => e.Artikelnummer).HasMaxLength(100);
            entity.Property(e => e.Asin)
                .HasMaxLength(255)
                .HasColumnName("ASIN");
            entity.Property(e => e.Bearbeiter).HasMaxLength(255);
            entity.Property(e => e.Bearbeitungsdatum).HasColumnType("datetime");
            entity.Property(e => e.BestandAufEinkaufsliste).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestandEigen).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestandGesamt).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestandImZulauf).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestandInAuftraegen).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestandVerfuegbar).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Breite).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.CHan)
                .HasMaxLength(255)
                .HasColumnName("cHAN");
            entity.Property(e => e.CIstAktiv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cIstAktiv");
            entity.Property(e => e.CIstAufPreisliste)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cIstAufPreisliste");
            entity.Property(e => e.CIstNeu)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cIstNeu");
            entity.Property(e => e.CIstSeriennummer)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cIstSeriennummer");
            entity.Property(e => e.CIstStueckzahlteilbar)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cIstStueckzahlteilbar");
            entity.Property(e => e.CIstTopArtikel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cIstTopArtikel");
            entity.Property(e => e.CIstUeberverkaufMoeglich)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cIstUeberverkaufMoeglich");
            entity.Property(e => e.CLagerfuehrungaktiv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLagerfuehrungaktiv");
            entity.Property(e => e.DatumLetzerEinkauf).HasColumnType("datetime");
            entity.Property(e => e.Ean)
                .HasMaxLength(255)
                .HasColumnName("EAN");
            entity.Property(e => e.EbayBestand)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("EBayBestand");
            entity.Property(e => e.Einheit).HasMaxLength(255);
            entity.Property(e => e.EinkaufspreisDurchschnittNetto).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.EinkaufspreisLetzerEinkauf).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ErscheintAm).HasColumnType("datetime");
            entity.Property(e => e.Erstelldatum).HasColumnType("datetime");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.Gefahrennummer).HasMaxLength(255);
            entity.Property(e => e.Gewicht).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Gewinn)
                .HasColumnType("decimal(26, 13)")
                .HasColumnName("gewinn");
            entity.Property(e => e.GewinnInProzent).HasColumnType("numeric(38, 8)");
            entity.Property(e => e.GrundpreisWert).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Grundpreiseinheit).HasMaxLength(255);
            entity.Property(e => e.Herkunftsland).HasMaxLength(64);
            entity.Property(e => e.Hersteller).HasMaxLength(255);
            entity.Property(e => e.Hoehe).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Isbn)
                .HasMaxLength(255)
                .HasColumnName("ISBN");
            entity.Property(e => e.Jtlfpid)
                .HasMaxLength(255)
                .HasColumnName("JTLFPID");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KArtikelForKategorieArtikel).HasColumnName("kArtikelForKategorieArtikel");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KStueckliste).HasColumnName("kStueckliste");
            entity.Property(e => e.KVaterArtikel).HasColumnName("kVaterArtikel");
            entity.Property(e => e.KVaterStueckliste).HasColumnName("kVaterStueckliste");
            entity.Property(e => e.Laenge).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Lieferant).HasMaxLength(255);
            entity.Property(e => e.Lieferstatus).HasMaxLength(255);
            entity.Property(e => e.Masseinheit).HasMaxLength(255);
            entity.Property(e => e.MetaKeywords).HasMaxLength(255);
            entity.Property(e => e.MindestAbnahmemenge).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.NBeschaffungszeitAutomatisch).HasColumnName("nBeschaffungszeitAutomatisch");
            entity.Property(e => e.NHatMindestbestand).HasColumnName("nHatMindestbestand");
            entity.Property(e => e.NIstCharge).HasColumnName("nIstCharge");
            entity.Property(e => e.NIstFuerBestellvorschlagGesperrt).HasColumnName("nIstFuerBestellvorschlagGesperrt");
            entity.Property(e => e.NIstMhd).HasColumnName("nIstMHD");
            entity.Property(e => e.NIstVarkombiVater).HasColumnName("nIstVarkombiVater");
            entity.Property(e => e.NIstVarkombikind).HasColumnName("nIstVarkombikind");
            entity.Property(e => e.NMidestbestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nMidestbestand");
            entity.Property(e => e.NSeriennummernVerfolgung).HasColumnName("nSeriennummernVerfolgung");
            entity.Property(e => e.NShopAktiv).HasColumnName("nShopAktiv");
            entity.Property(e => e.NVpe).HasColumnName("nVPE");
            entity.Property(e => e.PreisAmazon).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.PreisEbay).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ReserviertGesamt).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Serie).HasMaxLength(255);
            entity.Property(e => e.Steuerklasse).HasMaxLength(255);
            entity.Property(e => e.TaricCode).HasMaxLength(20);
            entity.Property(e => e.TitleTag).HasMaxLength(255);
            entity.Property(e => e.Unnummer)
                .HasMaxLength(255)
                .HasColumnName("UNNUmmer");
            entity.Property(e => e.Upc)
                .HasMaxLength(255)
                .HasColumnName("UPC");
            entity.Property(e => e.Uvp)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("UVP");
            entity.Property(e => e.VerkaufspreisBrutto).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.VerkaufspreisNetto).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Versandgewicht).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Versandklasse).HasMaxLength(255);
            entity.Property(e => e.Warengruppe).HasMaxLength(255);
            entity.Property(e => e.ZustandName).HasMaxLength(50);
        });

        modelBuilder.Entity<VArtikelStuecklistenLieferbestand>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vArtikelStuecklistenLieferbestand", "DbeS");

            entity.Property(e => e.FLagerbestand)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fLagerbestand");
            entity.Property(e => e.KStueckliste).HasColumnName("kStueckliste");
        });

        modelBuilder.Entity<VArtikelUpload>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vArtikelUpload", "DbeS");

            entity.Property(e => e.CBeschreibung).HasColumnName("cBeschreibung");
            entity.Property(e => e.CDateiTyp)
                .HasMaxLength(255)
                .HasColumnName("cDateiTyp");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KArtikelUpload).HasColumnName("kArtikelUpload");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.NPflicht).HasColumnName("nPflicht");
        });

        modelBuilder.Entity<VArtikelWarenlager>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vArtikelWarenlager", "DbeS");

            entity.Property(e => e.FBestand)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fBestand");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
        });

        modelBuilder.Entity<VArtikelXsell>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vArtikelXSell", "DbeS");

            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KXsell)
                .ValueGeneratedOnAdd()
                .HasColumnName("kXSell");
            entity.Property(e => e.KXsellArtikel).HasColumnName("kXSellArtikel");
            entity.Property(e => e.KXsellGruppe).HasColumnName("kXSellGruppe");
        });

        modelBuilder.Entity<VArtikelZustandMitStandardZustand>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vArtikelZustandMitStandardZustand");

            entity.Property(e => e.KHauptartikel).HasColumnName("kHauptartikel");
            entity.Property(e => e.KZustandArtikel).HasColumnName("kZustandArtikel");
        });

        modelBuilder.Entity<VArtikelliste>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vArtikelliste", "ArtikelVerwaltung");

            entity.Property(e => e.Abnahmeintervall).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.AmazonFnsku)
                .HasMaxLength(50)
                .HasColumnName("AmazonFNSKU");
            entity.Property(e => e.Artikelname).HasMaxLength(255);
            entity.Property(e => e.Artikelnummer).HasMaxLength(100);
            entity.Property(e => e.Asin)
                .HasMaxLength(255)
                .HasColumnName("ASIN");
            entity.Property(e => e.Bearbeiter).HasMaxLength(255);
            entity.Property(e => e.Bearbeitungsdatum).HasColumnType("datetime");
            entity.Property(e => e.BestandAufEinkaufsliste).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestandEigen).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestandGesamt).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestandImZulauf).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestandInAuftraegen).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestandVerfuegbar).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Breite).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.CHan)
                .HasMaxLength(255)
                .HasColumnName("cHAN");
            entity.Property(e => e.CIstAktiv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cIstAktiv");
            entity.Property(e => e.CIstAufPreisliste)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cIstAufPreisliste");
            entity.Property(e => e.CIstNeu)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cIstNeu");
            entity.Property(e => e.CIstSeriennummer)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cIstSeriennummer");
            entity.Property(e => e.CIstStueckzahlteilbar)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cIstStueckzahlteilbar");
            entity.Property(e => e.CIstTopArtikel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cIstTopArtikel");
            entity.Property(e => e.CIstUeberverkaufMoeglich)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cIstUeberverkaufMoeglich");
            entity.Property(e => e.CLagerfuehrungaktiv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLagerfuehrungaktiv");
            entity.Property(e => e.DatumLetzerEinkauf).HasColumnType("datetime");
            entity.Property(e => e.Ean)
                .HasMaxLength(255)
                .HasColumnName("EAN");
            entity.Property(e => e.EbayBestand)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("EBayBestand");
            entity.Property(e => e.Einheit).HasMaxLength(255);
            entity.Property(e => e.EinkaufspreisDurchschnittNetto).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.EinkaufspreisLetzerEinkauf).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ErscheintAm).HasColumnType("datetime");
            entity.Property(e => e.Erstelldatum).HasColumnType("datetime");
            entity.Property(e => e.Gefahrennummer).HasMaxLength(255);
            entity.Property(e => e.Gewicht).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Gewinn)
                .HasColumnType("decimal(26, 13)")
                .HasColumnName("gewinn");
            entity.Property(e => e.GewinnInProzent).HasColumnType("numeric(38, 8)");
            entity.Property(e => e.GrundpreisWert).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Grundpreiseinheit).HasMaxLength(255);
            entity.Property(e => e.Herkunftsland).HasMaxLength(64);
            entity.Property(e => e.Hersteller).HasMaxLength(255);
            entity.Property(e => e.Hoehe).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Isbn)
                .HasMaxLength(255)
                .HasColumnName("ISBN");
            entity.Property(e => e.Jtlfpid)
                .HasMaxLength(255)
                .HasColumnName("JTLFPID");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KArtikelForKategorieArtikel).HasColumnName("kArtikelForKategorieArtikel");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KStueckliste).HasColumnName("kStueckliste");
            entity.Property(e => e.KVaterArtikel).HasColumnName("kVaterArtikel");
            entity.Property(e => e.Laenge).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Lieferant).HasMaxLength(255);
            entity.Property(e => e.Lieferstatus).HasMaxLength(255);
            entity.Property(e => e.Masseinheit).HasMaxLength(255);
            entity.Property(e => e.MetaKeywords).HasMaxLength(255);
            entity.Property(e => e.MindestAbnahmemenge).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.NBeschaffungszeitAutomatisch).HasColumnName("nBeschaffungszeitAutomatisch");
            entity.Property(e => e.NHatMindestbestand).HasColumnName("nHatMindestbestand");
            entity.Property(e => e.NIstCharge).HasColumnName("nIstCharge");
            entity.Property(e => e.NIstFuerBestellvorschlagGesperrt).HasColumnName("nIstFuerBestellvorschlagGesperrt");
            entity.Property(e => e.NIstMhd).HasColumnName("nIstMHD");
            entity.Property(e => e.NIstVarkombiVater).HasColumnName("nIstVarkombiVater");
            entity.Property(e => e.NIstVarkombikind).HasColumnName("nIstVarkombikind");
            entity.Property(e => e.NMidestbestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nMidestbestand");
            entity.Property(e => e.NSeriennummernVerfolgung).HasColumnName("nSeriennummernVerfolgung");
            entity.Property(e => e.NShopAktiv).HasColumnName("nShopAktiv");
            entity.Property(e => e.NVpe).HasColumnName("nVPE");
            entity.Property(e => e.PreisAmazon).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.PreisEbay).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ReserviertGesamt).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Serie).HasMaxLength(255);
            entity.Property(e => e.Steuerklasse).HasMaxLength(255);
            entity.Property(e => e.TaricCode).HasMaxLength(20);
            entity.Property(e => e.TitleTag).HasMaxLength(255);
            entity.Property(e => e.Unnummer)
                .HasMaxLength(255)
                .HasColumnName("UNNUmmer");
            entity.Property(e => e.Upc)
                .HasMaxLength(255)
                .HasColumnName("UPC");
            entity.Property(e => e.Uvp)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("UVP");
            entity.Property(e => e.VerkaufspreisBrutto).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.VerkaufspreisNetto).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Versandgewicht).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Versandklasse).HasMaxLength(255);
            entity.Property(e => e.Warengruppe).HasMaxLength(255);
            entity.Property(e => e.ZustandName).HasMaxLength(50);
        });

        modelBuilder.Entity<VArtikellisteMitLagerbestaenden>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vArtikellisteMitLagerbestaenden", "ArtikelVerwaltung");

            entity.Property(e => e.Abnahmeintervall).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.AmazonFnsku)
                .HasMaxLength(50)
                .HasColumnName("AmazonFNSKU");
            entity.Property(e => e.Artikelname).HasMaxLength(255);
            entity.Property(e => e.Artikelnummer).HasMaxLength(100);
            entity.Property(e => e.Asin)
                .HasMaxLength(255)
                .HasColumnName("ASIN");
            entity.Property(e => e.Bearbeiter).HasMaxLength(255);
            entity.Property(e => e.Bearbeitungsdatum).HasColumnType("datetime");
            entity.Property(e => e.BestandAufEinkaufsliste).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestandEigen).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestandGesamt).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestandImZulauf).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestandInAuftraegen).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestandVerfuegbar).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Breite).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.CHan)
                .HasMaxLength(255)
                .HasColumnName("cHAN");
            entity.Property(e => e.CIstAktiv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cIstAktiv");
            entity.Property(e => e.CIstAufPreisliste)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cIstAufPreisliste");
            entity.Property(e => e.CIstNeu)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cIstNeu");
            entity.Property(e => e.CIstSeriennummer)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cIstSeriennummer");
            entity.Property(e => e.CIstStueckzahlteilbar)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cIstStueckzahlteilbar");
            entity.Property(e => e.CIstTopArtikel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cIstTopArtikel");
            entity.Property(e => e.CIstUeberverkaufMoeglich)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cIstUeberverkaufMoeglich");
            entity.Property(e => e.CLagerfuehrungaktiv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLagerfuehrungaktiv");
            entity.Property(e => e.DatumLetzerEinkauf).HasColumnType("datetime");
            entity.Property(e => e.Ean)
                .HasMaxLength(255)
                .HasColumnName("EAN");
            entity.Property(e => e.EbayBestand)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("EBayBestand");
            entity.Property(e => e.Einheit).HasMaxLength(255);
            entity.Property(e => e.EinkaufspreisDurchschnittNetto).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.EinkaufspreisLetzerEinkauf).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ErscheintAm).HasColumnType("datetime");
            entity.Property(e => e.Erstelldatum).HasColumnType("datetime");
            entity.Property(e => e.Gefahrennummer).HasMaxLength(255);
            entity.Property(e => e.Gewicht).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Gewinn)
                .HasColumnType("decimal(26, 13)")
                .HasColumnName("gewinn");
            entity.Property(e => e.GewinnInProzent).HasColumnType("numeric(38, 8)");
            entity.Property(e => e.GrundpreisWert).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Grundpreiseinheit).HasMaxLength(255);
            entity.Property(e => e.Herkunftsland).HasMaxLength(64);
            entity.Property(e => e.Hersteller).HasMaxLength(255);
            entity.Property(e => e.Hoehe).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Isbn)
                .HasMaxLength(255)
                .HasColumnName("ISBN");
            entity.Property(e => e.Jtlfpid)
                .HasMaxLength(255)
                .HasColumnName("JTLFPID");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KArtikelForKategorieArtikel).HasColumnName("kArtikelForKategorieArtikel");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KStueckliste).HasColumnName("kStueckliste");
            entity.Property(e => e.KVaterArtikel).HasColumnName("kVaterArtikel");
            entity.Property(e => e.Laenge).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Lieferant).HasMaxLength(255);
            entity.Property(e => e.Lieferstatus).HasMaxLength(255);
            entity.Property(e => e.Masseinheit).HasMaxLength(255);
            entity.Property(e => e.MetaKeywords).HasMaxLength(255);
            entity.Property(e => e.MindestAbnahmemenge).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.NBeschaffungszeitAutomatisch).HasColumnName("nBeschaffungszeitAutomatisch");
            entity.Property(e => e.NHatMindestbestand).HasColumnName("nHatMindestbestand");
            entity.Property(e => e.NIstCharge).HasColumnName("nIstCharge");
            entity.Property(e => e.NIstFuerBestellvorschlagGesperrt).HasColumnName("nIstFuerBestellvorschlagGesperrt");
            entity.Property(e => e.NIstMhd).HasColumnName("nIstMHD");
            entity.Property(e => e.NIstVarkombiVater).HasColumnName("nIstVarkombiVater");
            entity.Property(e => e.NIstVarkombikind).HasColumnName("nIstVarkombikind");
            entity.Property(e => e.NMidestbestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nMidestbestand");
            entity.Property(e => e.NSeriennummernVerfolgung).HasColumnName("nSeriennummernVerfolgung");
            entity.Property(e => e.NShopAktiv).HasColumnName("nShopAktiv");
            entity.Property(e => e.NVpe).HasColumnName("nVPE");
            entity.Property(e => e.PreisAmazon).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.PreisEbay).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ReserviertGesamt).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Serie).HasMaxLength(255);
            entity.Property(e => e.Startlager).HasColumnName("startlager");
            entity.Property(e => e.Startlagerbestand)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("startlagerbestand");
            entity.Property(e => e.Steuerklasse).HasMaxLength(255);
            entity.Property(e => e.TaricCode).HasMaxLength(20);
            entity.Property(e => e.TitleTag).HasMaxLength(255);
            entity.Property(e => e.Unnummer)
                .HasMaxLength(255)
                .HasColumnName("UNNUmmer");
            entity.Property(e => e.Upc)
                .HasMaxLength(255)
                .HasColumnName("UPC");
            entity.Property(e => e.Uvp)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("UVP");
            entity.Property(e => e.VerkaufspreisBrutto).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.VerkaufspreisNetto).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Versandgewicht).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Versandklasse).HasMaxLength(255);
            entity.Property(e => e.Warengruppe).HasMaxLength(255);
            entity.Property(e => e.Ziellager).HasColumnName("ziellager");
            entity.Property(e => e.Ziellagerbestand)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("ziellagerbestand");
            entity.Property(e => e.ZustandName).HasMaxLength(50);
        });

        modelBuilder.Entity<VAufEinkaufsliste>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAufEinkaufsliste", "Bestand");

            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
        });

        modelBuilder.Entity<VAuftrag>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAuftrag", "FulfillmentNetwork");

            entity.Property(e => e.CAdressZusatz)
                .HasMaxLength(255)
                .HasColumnName("cAdressZusatz");
            entity.Property(e => e.CAnmerkung).HasColumnName("cAnmerkung");
            entity.Property(e => e.CAnrede)
                .HasMaxLength(30)
                .HasColumnName("cAnrede");
            entity.Property(e => e.CBestellHinweis).HasColumnName("cBestellHinweis");
            entity.Property(e => e.CBestellNr)
                .HasMaxLength(50)
                .HasColumnName("cBestellNr");
            entity.Property(e => e.CBundesland)
                .HasMaxLength(255)
                .HasColumnName("cBundesland");
            entity.Property(e => e.CExterneNummer)
                .HasMaxLength(50)
                .HasColumnName("cExterneNummer");
            entity.Property(e => e.CFax)
                .HasMaxLength(30)
                .HasColumnName("cFax");
            entity.Property(e => e.CFirma)
                .HasMaxLength(128)
                .HasColumnName("cFirma");
            entity.Property(e => e.CLand)
                .HasMaxLength(5)
                .HasColumnName("cLand");
            entity.Property(e => e.CLieferscheinnummer)
                .HasMaxLength(255)
                .HasColumnName("cLieferscheinnummer");
            entity.Property(e => e.CMail)
                .HasMaxLength(255)
                .HasColumnName("cMail");
            entity.Property(e => e.CMobil)
                .HasMaxLength(30)
                .HasColumnName("cMobil");
            entity.Property(e => e.CName)
                .HasMaxLength(126)
                .HasColumnName("cName");
            entity.Property(e => e.COrt)
                .HasMaxLength(64)
                .HasColumnName("cOrt");
            entity.Property(e => e.COutboundId)
                .HasMaxLength(255)
                .HasColumnName("cOutboundId");
            entity.Property(e => e.CPlz)
                .HasMaxLength(24)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTel)
                .HasMaxLength(30)
                .HasColumnName("cTel");
            entity.Property(e => e.CVorname)
                .HasMaxLength(126)
                .HasColumnName("cVorname");
            entity.Property(e => e.CWaehrung)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWaehrung");
            entity.Property(e => e.CWarehouseId)
                .HasMaxLength(50)
                .HasColumnName("cWarehouseId");
            entity.Property(e => e.CZusatz)
                .HasMaxLength(60)
                .HasColumnName("cZusatz");
            entity.Property(e => e.DLieferdatum)
                .HasColumnType("datetime")
                .HasColumnName("dLieferdatum");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KFulfillmentAuftrag).HasColumnName("kFulfillmentAuftrag");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");
            entity.Property(e => e.KUmlagerung).HasColumnName("kUmlagerung");
            entity.Property(e => e.KVersandart).HasColumnName("kVersandart");
            entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");
            entity.Property(e => e.KZielLager).HasColumnName("kZielLager");
            entity.Property(e => e.NPlatform).HasColumnName("nPlatform");
            entity.Property(e => e.NPremium).HasColumnName("nPremium");
            entity.Property(e => e.NPrio).HasColumnName("nPrio");
            entity.Property(e => e.PlattformName).HasMaxLength(30);
        });

        modelBuilder.Entity<VAuftrag1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAuftrag", "Verkauf");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAmazonServiceLevel)
                .HasMaxLength(100)
                .HasColumnName("cAmazonServiceLevel");
            entity.Property(e => e.CAuftragsNr)
                .HasMaxLength(50)
                .HasColumnName("cAuftragsNr");
            entity.Property(e => e.CEbayUsername)
                .HasMaxLength(255)
                .HasColumnName("cEbayUsername");
            entity.Property(e => e.CExterneAuftragsnummer)
                .HasMaxLength(50)
                .HasColumnName("cExterneAuftragsnummer");
            entity.Property(e => e.CInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cInet");
            entity.Property(e => e.CKundeUstId)
                .HasMaxLength(20)
                .HasColumnName("cKundeUstId");
            entity.Property(e => e.CKundenAuftragsnummer)
                .HasMaxLength(250)
                .HasColumnName("cKundenAuftragsnummer");
            entity.Property(e => e.CKundenNr)
                .HasMaxLength(30)
                .HasColumnName("cKundenNr");
            entity.Property(e => e.COutboundId)
                .HasMaxLength(255)
                .HasColumnName("cOutboundId");
            entity.Property(e => e.CShopZahlungsmodul)
                .HasMaxLength(255)
                .HasColumnName("cShopZahlungsmodul");
            entity.Property(e => e.CUstId)
                .HasMaxLength(25)
                .HasColumnName("cUstId");
            entity.Property(e => e.CVersandlandBundeslandKuerzel)
                .HasMaxLength(5)
                .HasColumnName("cVersandlandBundeslandKuerzel");
            entity.Property(e => e.CVersandlandIso)
                .HasMaxLength(5)
                .HasColumnName("cVersandlandISO");
            entity.Property(e => e.CVersandlandWaehrung)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cVersandlandWaehrung");
            entity.Property(e => e.CVerwendungszweck)
                .HasMaxLength(1000)
                .HasColumnName("cVerwendungszweck");
            entity.Property(e => e.CWaehrung)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWaehrung");
            entity.Property(e => e.DAuslieferdatum)
                .HasColumnType("datetime")
                .HasColumnName("dAuslieferdatum");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DErstelltWawi)
                .HasColumnType("datetime")
                .HasColumnName("dErstelltWawi");
            entity.Property(e => e.DExternesErstelldatum)
                .HasColumnType("datetime")
                .HasColumnName("dExternesErstelldatum");
            entity.Property(e => e.DVoraussichtlichesLieferdatum)
                .HasColumnType("datetime")
                .HasColumnName("dVoraussichtlichesLieferdatum");
            entity.Property(e => e.FFaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fFaktor");
            entity.Property(e => e.FFinanzierungskosten)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fFinanzierungskosten");
            entity.Property(e => e.FSkonto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fSkonto");
            entity.Property(e => e.FVersandlandWaehrungFaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVersandlandWaehrungFaktor");
            entity.Property(e => e.FZusatzGewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZusatzGewicht");
            entity.Property(e => e.KAmazonUser).HasColumnName("kAmazonUser");
            entity.Property(e => e.KArtikelKarton).HasColumnName("kArtikelKarton");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KAuftragQuelle).HasColumnName("kAuftragQuelle");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KFarbe).HasColumnName("kFarbe");
            entity.Property(e => e.KFirmaHistory).HasColumnName("kFirmaHistory");
            entity.Property(e => e.KFulfillmentLieferant).HasColumnName("kFulfillmentLieferant");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KKundengruppe).HasColumnName("kKundengruppe");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KRueckhaltegrund).HasColumnName("kRueckhaltegrund");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KShopauftrag).HasColumnName("kShopauftrag");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.KVersandArt).HasColumnName("kVersandArt");
            entity.Property(e => e.KVorgangsstatus).HasColumnName("kVorgangsstatus");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");
            entity.Property(e => e.NArchiv).HasColumnName("nArchiv");
            entity.Property(e => e.NAuftragQuelleAktion).HasColumnName("nAuftragQuelleAktion");
            entity.Property(e => e.NAuftragStatus).HasColumnName("nAuftragStatus");
            entity.Property(e => e.NBeschreibung).HasColumnName("nBeschreibung");
            entity.Property(e => e.NDebitorennr).HasColumnName("nDebitorennr");
            entity.Property(e => e.NHatUpload).HasColumnName("nHatUpload");
            entity.Property(e => e.NIstExterneRechnung).HasColumnName("nIstExterneRechnung");
            entity.Property(e => e.NIstReadOnly).HasColumnName("nIstReadOnly");
            entity.Property(e => e.NKomplettAusgeliefert).HasColumnName("nKomplettAusgeliefert");
            entity.Property(e => e.NLieferPrioritaet).HasColumnName("nLieferPrioritaet");
            entity.Property(e => e.NMaxLiefertage).HasColumnName("nMaxLiefertage");
            entity.Property(e => e.NPending).HasColumnName("nPending");
            entity.Property(e => e.NPremiumVersand).HasColumnName("nPremiumVersand");
            entity.Property(e => e.NReserviert).HasColumnName("nReserviert");
            entity.Property(e => e.NSkontoTage).HasColumnName("nSkontoTage");
            entity.Property(e => e.NSteuereinstellung).HasColumnName("nSteuereinstellung");
            entity.Property(e => e.NStorno).HasColumnName("nStorno");
            entity.Property(e => e.NType).HasColumnName("nType");
            entity.Property(e => e.NZahlungszielTage).HasColumnName("nZahlungszielTage");
        });

        modelBuilder.Entity<VAuftragAdresse>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAuftragAdresse", "Verkauf");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAdressZusatz)
                .HasMaxLength(255)
                .HasColumnName("cAdressZusatz");
            entity.Property(e => e.CAnrede)
                .HasMaxLength(30)
                .HasColumnName("cAnrede");
            entity.Property(e => e.CBundesland)
                .HasMaxLength(255)
                .HasColumnName("cBundesland");
            entity.Property(e => e.CFax)
                .HasMaxLength(30)
                .HasColumnName("cFax");
            entity.Property(e => e.CFirma)
                .HasMaxLength(128)
                .HasColumnName("cFirma");
            entity.Property(e => e.CIso)
                .HasMaxLength(5)
                .HasColumnName("cISO");
            entity.Property(e => e.CLand)
                .HasMaxLength(255)
                .HasColumnName("cLand");
            entity.Property(e => e.CMail)
                .HasMaxLength(255)
                .HasColumnName("cMail");
            entity.Property(e => e.CMobil)
                .HasMaxLength(30)
                .HasColumnName("cMobil");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPlz)
                .HasMaxLength(24)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CPostId)
                .HasMaxLength(255)
                .HasColumnName("cPostID");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTel)
                .HasMaxLength(30)
                .HasColumnName("cTel");
            entity.Property(e => e.CTitel)
                .HasMaxLength(64)
                .HasColumnName("cTitel");
            entity.Property(e => e.CVorname)
                .HasMaxLength(255)
                .HasColumnName("cVorname");
            entity.Property(e => e.CZusatz)
                .HasMaxLength(60)
                .HasColumnName("cZusatz");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<VAuftragAusgabeDateien>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAuftragAusgabeDateien", "Verkauf");

            entity.Property(e => e.CErrorCode)
                .HasMaxLength(2000)
                .HasColumnName("cErrorCode");
            entity.Property(e => e.DAusgabeDatum)
                .HasColumnType("datetime")
                .HasColumnName("dAusgabeDatum");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KVorlage).HasColumnName("kVorlage");
            entity.Property(e => e.NAusgabeArt).HasColumnName("nAusgabeArt");
        });

        modelBuilder.Entity<VAuftragEckdaten>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAuftragEckdaten", "Verkauf");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CRechnungsnummern)
                .HasMaxLength(200)
                .HasColumnName("cRechnungsnummern");
            entity.Property(e => e.DBezahlt)
                .HasColumnType("datetime")
                .HasColumnName("dBezahlt");
            entity.Property(e => e.DGedruckt)
                .HasColumnType("datetime")
                .HasColumnName("dGedruckt");
            entity.Property(e => e.DGemailt)
                .HasColumnType("datetime")
                .HasColumnName("dGemailt");
            entity.Property(e => e.DLetzterVersand)
                .HasColumnType("datetime")
                .HasColumnName("dLetzterVersand");
            entity.Property(e => e.DVersandMail)
                .HasColumnType("datetime")
                .HasColumnName("dVersandMail");
            entity.Property(e => e.DZahlungsMail)
                .HasColumnType("datetime")
                .HasColumnName("dZahlungsMail");
            entity.Property(e => e.FGutschrift)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGutschrift");
            entity.Property(e => e.FOffenerWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fOffenerWert");
            entity.Property(e => e.FOffenerWertOhneStorno)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fOffenerWertOhneStorno");
            entity.Property(e => e.FWertBrutto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertBrutto");
            entity.Property(e => e.FWertNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertNetto");
            entity.Property(e => e.FWertRechnungBrutto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertRechnungBrutto");
            entity.Property(e => e.FWertRechnungNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertRechnungNetto");
            entity.Property(e => e.FZahlung)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZahlung");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.NAnzahlPakete).HasColumnName("nAnzahlPakete");
            entity.Property(e => e.NAnzahlVersendetePakete).HasColumnName("nAnzahlVersendetePakete");
            entity.Property(e => e.NIstFuerAuslieferungGesperrt).HasColumnName("nIstFuerAuslieferungGesperrt");
            entity.Property(e => e.NIstKomplettRetourniert).HasColumnName("nIstKomplettRetourniert");
            entity.Property(e => e.NIstNachnahme).HasColumnName("nIstNachnahme");
            entity.Property(e => e.NRechnungStatus).HasColumnName("nRechnungStatus");
            entity.Property(e => e.NZahlungStatus).HasColumnName("nZahlungStatus");
        });

        modelBuilder.Entity<VAuftragFile>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAuftragFile", "Verkauf");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CFilename)
                .HasMaxLength(255)
                .HasColumnName("cFilename");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KFile).HasColumnName("kFile");
            entity.Property(e => e.NDokumentTyp).HasColumnName("nDokumentTyp");
        });

        modelBuilder.Entity<VAuftragKampagne>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAuftragKampagne", "Verkauf");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CKampagne)
                .HasMaxLength(255)
                .HasColumnName("cKampagne");
            entity.Property(e => e.CKampagneDetail)
                .HasMaxLength(255)
                .HasColumnName("cKampagneDetail");
            entity.Property(e => e.CKampagneName)
                .HasMaxLength(255)
                .HasColumnName("cKampagneName");
            entity.Property(e => e.CReferrer)
                .HasMaxLength(255)
                .HasColumnName("cReferrer");
            entity.Property(e => e.CUserAgent)
                .HasMaxLength(512)
                .HasColumnName("cUserAgent");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
        });

        modelBuilder.Entity<VAuftragLieferadresse>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAuftragLieferadresse", "Verkauf");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAdressZusatz)
                .HasMaxLength(255)
                .HasColumnName("cAdressZusatz");
            entity.Property(e => e.CAnrede)
                .HasMaxLength(30)
                .HasColumnName("cAnrede");
            entity.Property(e => e.CBundesland)
                .HasMaxLength(255)
                .HasColumnName("cBundesland");
            entity.Property(e => e.CFax)
                .HasMaxLength(30)
                .HasColumnName("cFax");
            entity.Property(e => e.CFirma)
                .HasMaxLength(128)
                .HasColumnName("cFirma");
            entity.Property(e => e.CIso)
                .HasMaxLength(5)
                .HasColumnName("cISO");
            entity.Property(e => e.CLand)
                .HasMaxLength(255)
                .HasColumnName("cLand");
            entity.Property(e => e.CMail)
                .HasMaxLength(255)
                .HasColumnName("cMail");
            entity.Property(e => e.CMobil)
                .HasMaxLength(30)
                .HasColumnName("cMobil");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPlz)
                .HasMaxLength(24)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CPostId)
                .HasMaxLength(255)
                .HasColumnName("cPostID");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTel)
                .HasMaxLength(30)
                .HasColumnName("cTel");
            entity.Property(e => e.CTitel)
                .HasMaxLength(64)
                .HasColumnName("cTitel");
            entity.Property(e => e.CVorname)
                .HasMaxLength(255)
                .HasColumnName("cVorname");
            entity.Property(e => e.CZusatz)
                .HasMaxLength(60)
                .HasColumnName("cZusatz");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
            entity.Property(e => e.NZolldokumenteErforderlich).HasColumnName("nZolldokumenteErforderlich");
        });

        modelBuilder.Entity<VAuftragLoeschen>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAuftragLoeschen", "DbeS");

            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KShop).HasColumnName("kShop");
        });

        modelBuilder.Entity<VAuftragLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAuftragLog", "Logging");

            entity.Property(e => e.BLastRowVersion)
                .HasMaxLength(8)
                .IsFixedLength()
                .HasColumnName("bLastRowVersion");
            entity.Property(e => e.BRowVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowVersion");
            entity.Property(e => e.BXml).HasColumnName("bXML");
            entity.Property(e => e.CAppName)
                .HasMaxLength(128)
                .HasColumnName("cAppName");
            entity.Property(e => e.CAuftragType)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("cAuftragType");
            entity.Property(e => e.CAuftragsNr)
                .HasMaxLength(50)
                .HasColumnName("cAuftragsNr");
            entity.Property(e => e.CLogTyp)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("cLogTyp");
            entity.Property(e => e.CPrüfStatus)
                .HasMaxLength(75)
                .HasColumnName("cPrüfStatus");
            entity.Property(e => e.CXml)
                .HasColumnType("xml")
                .HasColumnName("cXML");
            entity.Property(e => e.DErstelltUtc).HasColumnName("dErstelltUtc");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KAuftragLog)
                .ValueGeneratedOnAdd()
                .HasColumnName("kAuftragLog");
            entity.Property(e => e.NAuftragType).HasColumnName("nAuftragType");
            entity.Property(e => e.NLogAbstand).HasColumnName("nLogAbstand");
            entity.Property(e => e.NLogTyp).HasColumnName("nLogTyp");
        });

        modelBuilder.Entity<VAuftragPo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAuftragPos", "FulfillmentNetwork");

            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CHinweis)
                .HasMaxLength(2000)
                .HasColumnName("cHinweis");
            entity.Property(e => e.CJfsku)
                .HasMaxLength(255)
                .HasColumnName("cJfsku");
            entity.Property(e => e.COrderItemId)
                .HasMaxLength(255)
                .HasColumnName("cOrderItemId");
            entity.Property(e => e.CPosName)
                .HasMaxLength(255)
                .HasColumnName("cPosName");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.FMwSt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwSt");
            entity.Property(e => e.FVknetto)
                .HasColumnType("decimal(38, 12)")
                .HasColumnName("fVKNetto");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KFulfillmentAuftrag).HasColumnName("kFulfillmentAuftrag");
            entity.Property(e => e.KFulfillmentAuftragPos).HasColumnName("kFulfillmentAuftragPos");
            entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");
            entity.Property(e => e.KStuecklistenVaterPos).HasColumnName("kStuecklistenVaterPos");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NStuecklistenVater).HasColumnName("nStuecklistenVater");
        });

        modelBuilder.Entity<VAuftragPosition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAuftragPosition", "Verkauf");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CEinheit)
                .HasMaxLength(255)
                .HasColumnName("cEinheit");
            entity.Property(e => e.CHinweis)
                .HasMaxLength(2000)
                .HasColumnName("cHinweis");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CNameStandard)
                .HasMaxLength(255)
                .HasColumnName("cNameStandard");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.FEkNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEkNetto");
            entity.Property(e => e.FFaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fFaktor");
            entity.Property(e => e.FMwSt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwSt");
            entity.Property(e => e.FRabatt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabatt");
            entity.Property(e => e.FVkNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVkNetto");
            entity.Property(e => e.FWertBruttoGesamtFixiert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertBruttoGesamtFixiert");
            entity.Property(e => e.FWertNettoGesamtFixiert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertNettoGesamtFixiert");
            entity.Property(e => e.KAmazonBestellungPos).HasColumnName("kAmazonBestellungPos");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KAuftragPosition)
                .ValueGeneratedOnAdd()
                .HasColumnName("kAuftragPosition");
            entity.Property(e => e.KAuftragStueckliste).HasColumnName("kAuftragStueckliste");
            entity.Property(e => e.KEbayTransaction).HasColumnName("kEbayTransaction");
            entity.Property(e => e.KKonfigItem).HasColumnName("kKonfigItem");
            entity.Property(e => e.KKonfigVater).HasColumnName("kKonfigVater");
            entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");
            entity.Property(e => e.KSteuerschluessel).HasColumnName("kSteuerschluessel");
            entity.Property(e => e.NHatUpload).HasColumnName("nHatUpload");
            entity.Property(e => e.NReserviert).HasColumnName("nReserviert");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NType).HasColumnName("nType");
        });

        modelBuilder.Entity<VAuftragPositionEckdaten>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAuftragPositionEckdaten", "Verkauf");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.FAnzahlGeliefert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahlGeliefert");
            entity.Property(e => e.FAnzahlGutgeschrieben)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahlGutgeschrieben");
            entity.Property(e => e.FAnzahlOffen)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahlOffen");
            entity.Property(e => e.FTeilmengenfaktorLager)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fTeilmengenfaktorLager");
            entity.Property(e => e.FWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWert");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KAuftragPosition).HasColumnName("kAuftragPosition");
            entity.Property(e => e.NArtikelTyp).HasColumnName("nArtikelTyp");
            entity.Property(e => e.NAuftragStatus).HasColumnName("nAuftragStatus");
            entity.Property(e => e.NIstDropshippingLieferbar).HasColumnName("nIstDropshippingLieferbar");
            entity.Property(e => e.NIstKomplettRetourniert).HasColumnName("nIstKomplettRetourniert");
            entity.Property(e => e.NIstStuecklistenvater).HasColumnName("nIstStuecklistenvater");
            entity.Property(e => e.NIstUmlagerung).HasColumnName("nIstUmlagerung");
        });

        modelBuilder.Entity<VAuftragPositionEigenschaft>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAuftragPositionEigenschaft", "Verkauf");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CWert)
                .HasMaxLength(255)
                .HasColumnName("cWert");
            entity.Property(e => e.FAufpreisNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAufpreisNetto");
            entity.Property(e => e.FZusatzgewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZusatzgewicht");
            entity.Property(e => e.KAuftragPosition).HasColumnName("kAuftragPosition");
            entity.Property(e => e.KAuftragPositionEigenschaft)
                .ValueGeneratedOnAdd()
                .HasColumnName("kAuftragPositionEigenschaft");
            entity.Property(e => e.KEigenschaftWert).HasColumnName("kEigenschaftWert");
        });

        modelBuilder.Entity<VAuftragPositionFile>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAuftragPositionFile", "Verkauf");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CFilename)
                .HasMaxLength(255)
                .HasColumnName("cFilename");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KAuftragPosition).HasColumnName("kAuftragPosition");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KFile).HasColumnName("kFile");
        });

        modelBuilder.Entity<VAuftragReaktivieren>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAuftragReaktivieren", "DbeS");

            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KShop).HasColumnName("kShop");
        });

        modelBuilder.Entity<VAuftragRechnungsadresse>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAuftragRechnungsadresse", "Verkauf");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAdressZusatz)
                .HasMaxLength(255)
                .HasColumnName("cAdressZusatz");
            entity.Property(e => e.CAnrede)
                .HasMaxLength(30)
                .HasColumnName("cAnrede");
            entity.Property(e => e.CBundesland)
                .HasMaxLength(255)
                .HasColumnName("cBundesland");
            entity.Property(e => e.CFax)
                .HasMaxLength(30)
                .HasColumnName("cFax");
            entity.Property(e => e.CFirma)
                .HasMaxLength(128)
                .HasColumnName("cFirma");
            entity.Property(e => e.CIso)
                .HasMaxLength(5)
                .HasColumnName("cISO");
            entity.Property(e => e.CLand)
                .HasMaxLength(255)
                .HasColumnName("cLand");
            entity.Property(e => e.CMail)
                .HasMaxLength(255)
                .HasColumnName("cMail");
            entity.Property(e => e.CMobil)
                .HasMaxLength(30)
                .HasColumnName("cMobil");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPlz)
                .HasMaxLength(24)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CPostId)
                .HasMaxLength(255)
                .HasColumnName("cPostID");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTel)
                .HasMaxLength(30)
                .HasColumnName("cTel");
            entity.Property(e => e.CTitel)
                .HasMaxLength(64)
                .HasColumnName("cTitel");
            entity.Property(e => e.CVorname)
                .HasMaxLength(255)
                .HasColumnName("cVorname");
            entity.Property(e => e.CZusatz)
                .HasMaxLength(60)
                .HasColumnName("cZusatz");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
            entity.Property(e => e.NZolldokumenteErforderlich).HasColumnName("nZolldokumenteErforderlich");
        });

        modelBuilder.Entity<VAuftragStorno>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAuftragStorno", "DbeS");

            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KShop).HasColumnName("kShop");
        });

        modelBuilder.Entity<VAuftragText>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAuftragText", "Verkauf");

            entity.Property(e => e.CAnmerkung).HasColumnName("cAnmerkung");
            entity.Property(e => e.CDrucktext).HasColumnName("cDrucktext");
            entity.Property(e => e.CHinweis).HasColumnName("cHinweis");
            entity.Property(e => e.CVorgangsstatus)
                .HasMaxLength(255)
                .HasColumnName("cVorgangsstatus");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
        });

        modelBuilder.Entity<VAuftragUpdate>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAuftragUpdate", "DbeS");

            entity.Property(e => e.CBestellNr)
                .HasMaxLength(50)
                .HasColumnName("cBestellNr");
            entity.Property(e => e.CSendeEmail)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("cSendeEMail");
            entity.Property(e => e.CZahlungsartName)
                .HasMaxLength(255)
                .HasColumnName("cZahlungsartName");
            entity.Property(e => e.FGesamtsumme)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGesamtsumme");
            entity.Property(e => e.FGuthaben)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fGuthaben");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.KWaehrung).HasColumnName("kWaehrung");
        });

        modelBuilder.Entity<VAuftragUpdateAttribute>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAuftragUpdateAttribute", "DbeS");

            entity.Property(e => e.CKey)
                .HasMaxLength(255)
                .HasColumnName("cKey");
            entity.Property(e => e.CValue).HasColumnName("cValue");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
        });

        modelBuilder.Entity<VAuftragUpdateLieferadresse>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAuftragUpdateLieferadresse", "DbeS");

            entity.Property(e => e.CAdressZusatz)
                .HasMaxLength(255)
                .HasColumnName("cAdressZusatz");
            entity.Property(e => e.CAnrede)
                .HasMaxLength(30)
                .HasColumnName("cAnrede");
            entity.Property(e => e.CBundesland)
                .HasMaxLength(255)
                .HasColumnName("cBundesland");
            entity.Property(e => e.CFax)
                .HasMaxLength(30)
                .HasColumnName("cFax");
            entity.Property(e => e.CFirma)
                .HasMaxLength(189)
                .HasColumnName("cFirma");
            entity.Property(e => e.CLand)
                .HasMaxLength(5)
                .HasColumnName("cLand");
            entity.Property(e => e.CMail)
                .HasMaxLength(255)
                .HasColumnName("cMail");
            entity.Property(e => e.CMobil)
                .HasMaxLength(30)
                .HasColumnName("cMobil");
            entity.Property(e => e.CNachname)
                .HasMaxLength(255)
                .HasColumnName("cNachname");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPlz)
                .HasMaxLength(24)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTel)
                .HasMaxLength(30)
                .HasColumnName("cTel");
            entity.Property(e => e.CTitel)
                .HasMaxLength(64)
                .HasColumnName("cTitel");
            entity.Property(e => e.CVorname)
                .HasMaxLength(255)
                .HasColumnName("cVorname");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
        });

        modelBuilder.Entity<VAuftragUpdatePosition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAuftragUpdatePosition", "DbeS");

            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CEinheit)
                .HasMaxLength(255)
                .HasColumnName("cEinheit");
            entity.Property(e => e.CHinweis)
                .HasMaxLength(2000)
                .HasColumnName("cHinweis");
            entity.Property(e => e.CLieferstatus)
                .HasMaxLength(255)
                .HasColumnName("cLieferstatus");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CUnique)
                .HasMaxLength(30)
                .HasColumnName("cUnique");
            entity.Property(e => e.FMwSt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwSt");
            entity.Property(e => e.FPreis)
                .HasColumnType("numeric(38, 11)")
                .HasColumnName("fPreis");
            entity.Property(e => e.FPreisEinzelNetto)
                .HasColumnType("numeric(38, 11)")
                .HasColumnName("fPreisEinzelNetto");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KBestellpos).HasColumnName("kBestellpos");
            entity.Property(e => e.KKonfigitem).HasColumnName("kKonfigitem");
            entity.Property(e => e.KVersandklasse).HasColumnName("kVersandklasse");
            entity.Property(e => e.NAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nAnzahl");
            entity.Property(e => e.NPosTyp).HasColumnName("nPosTyp");
        });

        modelBuilder.Entity<VAuftragUpdatePositionVariation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAuftragUpdatePositionVariation", "DbeS");

            entity.Property(e => e.CEigenschaftName)
                .HasMaxLength(255)
                .HasColumnName("cEigenschaftName");
            entity.Property(e => e.CEigenschaftWertName)
                .HasMaxLength(255)
                .HasColumnName("cEigenschaftWertName");
            entity.Property(e => e.CFreifeldWert)
                .HasMaxLength(255)
                .HasColumnName("cFreifeldWert");
            entity.Property(e => e.FAufpreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAufpreis");
            entity.Property(e => e.KAuftragPosition).HasColumnName("kAuftragPosition");
            entity.Property(e => e.KEigenschaft).HasColumnName("kEigenschaft");
            entity.Property(e => e.KEigenschaftWert).HasColumnName("kEigenschaftWert");
        });

        modelBuilder.Entity<VAuftragUpdateRechnungsadresse>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAuftragUpdateRechnungsadresse", "DbeS");

            entity.Property(e => e.CAdressZusatz)
                .HasMaxLength(255)
                .HasColumnName("cAdressZusatz");
            entity.Property(e => e.CAnrede)
                .HasMaxLength(30)
                .HasColumnName("cAnrede");
            entity.Property(e => e.CBundesland)
                .HasMaxLength(255)
                .HasColumnName("cBundesland");
            entity.Property(e => e.CFax)
                .HasMaxLength(30)
                .HasColumnName("cFax");
            entity.Property(e => e.CFirma)
                .HasMaxLength(189)
                .HasColumnName("cFirma");
            entity.Property(e => e.CLand)
                .HasMaxLength(5)
                .HasColumnName("cLand");
            entity.Property(e => e.CMail)
                .HasMaxLength(255)
                .HasColumnName("cMail");
            entity.Property(e => e.CMobil)
                .HasMaxLength(30)
                .HasColumnName("cMobil");
            entity.Property(e => e.CNachname)
                .HasMaxLength(255)
                .HasColumnName("cNachname");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPlz)
                .HasMaxLength(24)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTel)
                .HasMaxLength(30)
                .HasColumnName("cTel");
            entity.Property(e => e.CTitel)
                .HasMaxLength(64)
                .HasColumnName("cTitel");
            entity.Property(e => e.CUstid)
                .HasMaxLength(20)
                .HasColumnName("cUSTID");
            entity.Property(e => e.CVorname)
                .HasMaxLength(255)
                .HasColumnName("cVorname");
            entity.Property(e => e.CWww)
                .HasMaxLength(255)
                .HasColumnName("cWWW");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
        });

        modelBuilder.Entity<VAuftragZahlungsinfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAuftragZahlungsinfo", "Verkauf");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBankname)
                .HasMaxLength(255)
                .HasColumnName("cBankname");
            entity.Property(e => e.CBic)
                .HasMaxLength(32)
                .HasColumnName("cBIC");
            entity.Property(e => e.CEndToEndId)
                .HasMaxLength(35)
                .HasColumnName("cEndToEndID");
            entity.Property(e => e.CGlaeubigerId)
                .HasMaxLength(35)
                .HasColumnName("cGlaeubigerID");
            entity.Property(e => e.CIban)
                .HasMaxLength(34)
                .HasColumnName("cIBAN");
            entity.Property(e => e.CKontoInhaber)
                .HasMaxLength(255)
                .HasColumnName("cKontoInhaber");
            entity.Property(e => e.CMandatsReferenz)
                .HasMaxLength(100)
                .HasColumnName("cMandatsReferenz");
            entity.Property(e => e.CPuiZahlungsinfo).HasColumnName("cPuiZahlungsinfo");
            entity.Property(e => e.CReferenzEmail)
                .HasMaxLength(255)
                .HasColumnName("cReferenzEmail");
            entity.Property(e => e.CVerwendungszweck)
                .HasMaxLength(1000)
                .HasColumnName("cVerwendungszweck");
            entity.Property(e => e.DFaelligkeitsdatum)
                .HasColumnType("datetime")
                .HasColumnName("dFaelligkeitsdatum");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<VAuftraginformation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAuftraginformation", "DbeS");

            entity.Property(e => e.CBezahlt)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("cBezahlt");
            entity.Property(e => e.CIdentCode)
                .HasMaxLength(255)
                .HasColumnName("cIdentCode");
            entity.Property(e => e.CLogistik)
                .HasMaxLength(255)
                .HasColumnName("cLogistik");
            entity.Property(e => e.CPlz)
                .HasMaxLength(24)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CTrackingUrlTemplate)
                .HasMaxLength(255)
                .HasColumnName("cTrackingUrlTemplate");
            entity.Property(e => e.CVersandInfo)
                .HasMaxLength(255)
                .HasColumnName("cVersandInfo");
            entity.Property(e => e.CZahlungsartName)
                .HasMaxLength(255)
                .HasColumnName("cZahlungsartName");
            entity.Property(e => e.DBezahltAm)
                .HasColumnType("datetime")
                .HasColumnName("dBezahltAm");
            entity.Property(e => e.DVersandt)
                .HasColumnType("datetime")
                .HasColumnName("dVersandt");
            entity.Property(e => e.DVoraussichtlichesLieferdatum)
                .HasColumnType("datetime")
                .HasColumnName("dVoraussichtlichesLieferdatum");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KShopauftrag).HasColumnName("kShopauftrag");
            entity.Property(e => e.NKomplettAusgeliefert).HasColumnName("nKomplettAusgeliefert");
        });

        modelBuilder.Entity<VAuftragkostentypen>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAuftragkostentypen", "Verkauf");
        });

        modelBuilder.Entity<VAuftragsfarben>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAuftragsfarben", "Statistik");

            entity.Property(e => e.CName)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("cName");
            entity.Property(e => e.KFarbe).HasColumnName("kFarbe");
        });

        modelBuilder.Entity<VAuftragzahlung>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAuftragzahlung", "DbeS");

            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.DDatum)
                .HasColumnType("datetime")
                .HasColumnName("dDatum");
            entity.Property(e => e.FBetrag)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBetrag");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KZahlung).HasColumnName("kZahlung");
            entity.Property(e => e.NAnzahlung).HasColumnName("nAnzahlung");
        });

        modelBuilder.Entity<VBestand>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBestand", "Auslieferung");

            entity.Property(e => e.FLagerbestand)
                .HasColumnType("decimal(26, 13)")
                .HasColumnName("fLagerbestand");
            entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");
        });

        modelBuilder.Entity<VBestand1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBestand", "Maintenance");

            entity.Property(e => e.AnzahlInAufträgen)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Anzahl in Aufträgen");
            entity.Property(e => e.Artikelnummer).HasMaxLength(100);
            entity.Property(e => e.CodeZumKorigieren)
                .HasMaxLength(153)
                .HasColumnName("Code zum Korigieren");
            entity.Property(e => e.EigenerLagerbestand)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Eigener Lagerbestand");
            entity.Property(e => e.FürVerfügbarkeitGesperrt)
                .HasMaxLength(47)
                .IsUnicode(false)
                .HasColumnName("Für Verfügbarkeit gesperrt");
            entity.Property(e => e.GesamterLagerbestand)
                .HasMaxLength(23)
                .IsUnicode(false)
                .HasColumnName("Gesamter Lagerbestand");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.VerfügbarerBestand)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Verfügbarer Bestand");
            entity.Property(e => e.Zulauf)
                .HasMaxLength(17)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VBestandBestandsartikel>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBestandBestandsartikel", "Bestand");

            entity.Property(e => e.FBestand)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fBestand");
            entity.Property(e => e.FBestandGesperrtFuerAuslieferung)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fBestandGesperrtFuerAuslieferung");
            entity.Property(e => e.FBestandGesperrtFuerVerfuegbar)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fBestandGesperrtFuerVerfuegbar");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
        });

        modelBuilder.Entity<VBestandBestandsartikelProLager>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBestandBestandsartikelProLager", "Bestand");

            entity.Property(e => e.FBestand)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fBestand");
            entity.Property(e => e.FBestandGesperrtFuerAuslieferung)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fBestandGesperrtFuerAuslieferung");
            entity.Property(e => e.FBestandGesperrtFuerVerfuegbar)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fBestandGesperrtFuerVerfuegbar");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");
        });

        modelBuilder.Entity<VBestandEinfacheVariation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBestandEinfacheVariation", "Bestand");

            entity.Property(e => e.FBestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBestand");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
        });

        modelBuilder.Entity<VBestandLieferanten>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBestandLieferanten", "Bestand");

            entity.Property(e => e.FBestand)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fBestand");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
        });

        modelBuilder.Entity<VBestandStueckliste>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBestandStueckliste", "Bestand");

            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.DLieferdatum)
                .HasColumnType("datetime")
                .HasColumnName("dLieferdatum");
            entity.Property(e => e.FAufEinkaufsliste)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAufEinkaufsliste");
            entity.Property(e => e.FBestand)
                .HasColumnType("numeric(38, 13)")
                .HasColumnName("fBestand");
            entity.Property(e => e.FBestandEigen)
                .HasColumnType("numeric(38, 13)")
                .HasColumnName("fBestandEigen");
            entity.Property(e => e.FBestandGesperrtAuslieferung)
                .HasColumnType("numeric(38, 13)")
                .HasColumnName("fBestandGesperrtAuslieferung");
            entity.Property(e => e.FBestandGesperrtVerfuegbar)
                .HasColumnType("numeric(38, 13)")
                .HasColumnName("fBestandGesperrtVerfuegbar");
            entity.Property(e => e.FVerfuegbar)
                .HasColumnType("numeric(38, 12)")
                .HasColumnName("fVerfuegbar");
            entity.Property(e => e.FZulauf)
                .HasColumnType("numeric(38, 13)")
                .HasColumnName("fZulauf");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KStueckliste).HasColumnName("kStueckliste");
        });

        modelBuilder.Entity<VBestandVarkombivater>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBestandVarkombivater", "Bestand");

            entity.Property(e => e.DLieferdatum)
                .HasColumnType("datetime")
                .HasColumnName("dLieferdatum");
            entity.Property(e => e.FAufEinkaufsliste)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAufEinkaufsliste");
            entity.Property(e => e.FBestand)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fBestand");
            entity.Property(e => e.FBestandEigen)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fBestandEigen");
            entity.Property(e => e.FBestandGesperrtFuerAuslieferung)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fBestandGesperrtFuerAuslieferung");
            entity.Property(e => e.FBestandGesperrtFuerVerfuegbar)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fBestandGesperrtFuerVerfuegbar");
            entity.Property(e => e.FInAuftraegen)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fInAuftraegen");
            entity.Property(e => e.FVerfuegbar)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fVerfuegbar");
            entity.Property(e => e.FZulauf)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fZulauf");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
        });

        modelBuilder.Entity<VBestandVirtuell>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBestandVirtuell", "Bestand");

            entity.Property(e => e.FBestand)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fBestand");
            entity.Property(e => e.FZulauf)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fZulauf");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
        });

        modelBuilder.Entity<VBestandsartikel>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBestandsartikel", "Bestand");

            entity.Property(e => e.KArtikel)
                .ValueGeneratedOnAdd()
                .HasColumnName("kArtikel");
        });

        modelBuilder.Entity<VBestellPo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBestellPos", "Auslieferung");

            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CHinweis)
                .HasMaxLength(2000)
                .HasColumnName("cHinweis");
            entity.Property(e => e.CItemId)
                .HasMaxLength(255)
                .HasColumnName("cItemID");
            entity.Property(e => e.COrderItemId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("cOrderItemId");
            entity.Property(e => e.CString)
                .HasMaxLength(255)
                .HasColumnName("cString");
            entity.Property(e => e.CStringStandard)
                .HasMaxLength(255)
                .HasColumnName("cStringStandard");
            entity.Property(e => e.CTransactionId)
                .HasMaxLength(255)
                .HasColumnName("cTransactionID");
            entity.Property(e => e.CUnique)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("cUnique");
            entity.Property(e => e.CVariationen)
                .IsUnicode(false)
                .HasColumnName("cVariationen");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.FAnzahlOffen)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlOffen");
            entity.Property(e => e.FEknetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEKNetto");
            entity.Property(e => e.FLagerbestand)
                .HasColumnType("decimal(26, 13)")
                .HasColumnName("fLagerbestand");
            entity.Property(e => e.FMwSt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwSt");
            entity.Property(e => e.FRabatt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabatt");
            entity.Property(e => e.FTeillieferungFaktor)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fTeillieferungFaktor");
            entity.Property(e => e.FVersandgewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVersandgewicht");
            entity.Property(e => e.FVknetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVKNetto");
            entity.Property(e => e.FVkpreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVKPreis");
            entity.Property(e => e.KAmazonBestellungPos).HasColumnName("kAmazonBestellungPos");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");
            entity.Property(e => e.KBestellStueckliste).HasColumnName("kBestellStueckliste");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KKonfigitem).HasColumnName("kKonfigitem");
            entity.Property(e => e.KSessionId).HasColumnName("kSessionId");
            entity.Property(e => e.NBestellungTyp).HasColumnName("nBestellungTyp");
            entity.Property(e => e.NHatUpload).HasColumnName("nHatUpload");
            entity.Property(e => e.NIstChargenartikel).HasColumnName("nIstChargenartikel");
            entity.Property(e => e.NIstLagerfuehrend).HasColumnName("nIstLagerfuehrend");
            entity.Property(e => e.NIstMhdartikel).HasColumnName("nIstMHDArtikel");
            entity.Property(e => e.NIstSeriennummernartikel).HasColumnName("nIstSeriennummernartikel");
            entity.Property(e => e.NIstUmlagerung).HasColumnName("nIstUmlagerung");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NSperrungStatus).HasColumnName("nSperrungStatus");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
            entity.Property(e => e.NWarnungStatus).HasColumnName("nWarnungStatus");
        });

        modelBuilder.Entity<VBestellPosLieferInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBestellPosLieferInfo", "Versand");

            entity.Property(e => e.FAnzahlFehlbestand)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlFehlbestand");
            entity.Property(e => e.FAnzahlFehlbestandEigen)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlFehlbestandEigen");
            entity.Property(e => e.FAnzahlOffen)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlOffen");
            entity.Property(e => e.FAnzahlReserviert)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlReserviert");
            entity.Property(e => e.FAnzahlReserviertEigen)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlReserviertEigen");
            entity.Property(e => e.FAnzahlZuPicken)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlZuPicken");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
        });

        modelBuilder.Entity<VBestellPosLieferInfoProLager>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBestellPosLieferInfoProLager", "Versand");

            entity.Property(e => e.FAnzahlFehlbestand)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlFehlbestand");
            entity.Property(e => e.FAnzahlFehlbestandEigen)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlFehlbestandEigen");
            entity.Property(e => e.FAnzahlOffen)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlOffen");
            entity.Property(e => e.FAnzahlReserviert)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlReserviert");
            entity.Property(e => e.FAnzahlReserviertEigen)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlReserviertEigen");
            entity.Property(e => e.FAnzahlZuPicken)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlZuPicken");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
        });

        modelBuilder.Entity<VBestellPosLieferInfoProLager1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBestellPosLieferInfoProLager", "VersandIntern");

            entity.Property(e => e.FAnzahlFehlbestand)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlFehlbestand");
            entity.Property(e => e.FAnzahlFehlbestandEigen)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlFehlbestandEigen");
            entity.Property(e => e.FAnzahlOffen)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlOffen");
            entity.Property(e => e.FAnzahlReserviert)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlReserviert");
            entity.Property(e => e.FAnzahlReserviertEigen)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlReserviertEigen");
            entity.Property(e => e.FAnzahlZuPicken)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlZuPicken");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.NArtikelTyp).HasColumnName("nArtikelTyp");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<VBestellPosOffen>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBestellPosOffen", "Versand");

            entity.Property(e => e.FAnzahlNotwendigerBestand)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlNotwendigerBestand");
            entity.Property(e => e.FAnzahlOffen)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlOffen");
            entity.Property(e => e.FAnzahlZuPicken)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlZuPicken");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.NArtikelTyp).HasColumnName("nArtikelTyp");
        });

        modelBuilder.Entity<VBestellPosOffen1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBestellPosOffen", "VersandIntern");

            entity.Property(e => e.FAnzahlAufPickliste)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlAufPickliste");
            entity.Property(e => e.FAnzahlNotwendigerBestand)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlNotwendigerBestand");
            entity.Property(e => e.FAnzahlOffen)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlOffen");
            entity.Property(e => e.FAnzahlVersandSperre)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlVersandSperre");
            entity.Property(e => e.FAnzahlZuPicken)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlZuPicken");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.NArtikelTyp).HasColumnName("nArtikelTyp");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<VBestellPosOffenFifo2012>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBestellPosOffenFIFO2012", "VersandIntern");

            entity.Property(e => e.FAnzahlAufPickliste)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlAufPickliste");
            entity.Property(e => e.FAnzahlNotwendigerBestand)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlNotwendigerBestand");
            entity.Property(e => e.FAnzahlOffen)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlOffen");
            entity.Property(e => e.FAnzahlVersandSperre)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlVersandSperre");
            entity.Property(e => e.FAnzahlZuPicken)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlZuPicken");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.NArtikelTyp).HasColumnName("nArtikelTyp");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<VBestellPosOffenNonFifo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBestellPosOffenNonFIFO", "VersandIntern");

            entity.Property(e => e.FAnzahlAufPickliste)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlAufPickliste");
            entity.Property(e => e.FAnzahlNotwendigerBestand)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlNotwendigerBestand");
            entity.Property(e => e.FAnzahlOffen)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlOffen");
            entity.Property(e => e.FAnzahlVersandSperre)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlVersandSperre");
            entity.Property(e => e.FAnzahlZuPicken)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlZuPicken");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.NArtikelTyp).HasColumnName("nArtikelTyp");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<VBestellpo1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBestellpos", "DEPRECATED");

            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CEinheit)
                .HasMaxLength(255)
                .HasColumnName("cEinheit");
            entity.Property(e => e.CHinweis)
                .HasMaxLength(2000)
                .HasColumnName("cHinweis");
            entity.Property(e => e.CItemId)
                .HasMaxLength(255)
                .HasColumnName("cItemID");
            entity.Property(e => e.COrderItemId)
                .HasMaxLength(255)
                .HasColumnName("cOrderItemId");
            entity.Property(e => e.CString)
                .HasMaxLength(255)
                .HasColumnName("cString");
            entity.Property(e => e.CStringStandard)
                .HasMaxLength(255)
                .HasColumnName("cStringStandard");
            entity.Property(e => e.CTransactionId)
                .HasMaxLength(255)
                .HasColumnName("cTransactionID");
            entity.Property(e => e.CUnique)
                .HasMaxLength(30)
                .HasColumnName("cUnique");
            entity.Property(e => e.FEkNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEkNetto");
            entity.Property(e => e.FMwSt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwSt");
            entity.Property(e => e.FRabatt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabatt");
            entity.Property(e => e.FVkNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVkNetto");
            entity.Property(e => e.FVkpreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVKPreis");
            entity.Property(e => e.KAmazonBestellungPos).HasColumnName("kAmazonBestellungPos");
            entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");
            entity.Property(e => e.KBestellStueckliste).HasColumnName("kBestellStueckliste");
            entity.Property(e => e.KKonfigItem).HasColumnName("kKonfigItem");
            entity.Property(e => e.NAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nAnzahl");
            entity.Property(e => e.NDropshipping).HasColumnName("nDropshipping");
            entity.Property(e => e.NHatUpload).HasColumnName("nHatUpload");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NType).HasColumnName("nType");
            entity.Property(e => e.TArtikelKArtikel).HasColumnName("tArtikel_kArtikel");
            entity.Property(e => e.TBestellungKBestellung).HasColumnName("tBestellung_kBestellung");
        });

        modelBuilder.Entity<VBestellung>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBestellung", "Auslieferung");

            entity.Property(e => e.CBestellNr)
                .HasMaxLength(50)
                .HasColumnName("cBestellNr");
            entity.Property(e => e.CLieferadresseLand)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseLand");
            entity.Property(e => e.CLieferadressePlz)
                .HasMaxLength(24)
                .HasColumnName("cLieferadressePlz");
            entity.Property(e => e.CRechnungsadresseFirma)
                .HasMaxLength(128)
                .HasColumnName("cRechnungsadresseFirma");
            entity.Property(e => e.CRechnungsadresseNachname)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseNachname");
            entity.Property(e => e.CRechnungsadresseOrt)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseOrt");
            entity.Property(e => e.CRechnungsadressePlz)
                .HasMaxLength(24)
                .HasColumnName("cRechnungsadressePlz");
            entity.Property(e => e.CRechnungsadresseStrasse)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseStrasse");
            entity.Property(e => e.CRechnungsadresseVorname)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseVorname");
            entity.Property(e => e.CRueckhaltegrund)
                .HasMaxLength(30)
                .HasColumnName("cRueckhaltegrund");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KKundengruppe).HasColumnName("kKundengruppe");
            entity.Property(e => e.KVersandart).HasColumnName("kVersandart");
        });

        modelBuilder.Entity<VBestellung1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBestellung", "DEPRECATED");

            entity.Property(e => e.CAmazonServiceLevel)
                .HasMaxLength(100)
                .HasColumnName("cAmazonServiceLevel");
            entity.Property(e => e.CAnmerkung)
                .HasMaxLength(4500)
                .IsUnicode(false)
                .HasColumnName("cAnmerkung");
            entity.Property(e => e.CBeschreibung)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cBeschreibung");
            entity.Property(e => e.CBestellNr)
                .HasMaxLength(50)
                .HasColumnName("cBestellNr");
            entity.Property(e => e.CErloeskonto)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("cErloeskonto");
            entity.Property(e => e.CIdentCode)
                .HasMaxLength(255)
                .HasColumnName("cIdentCode");
            entity.Property(e => e.CInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cInet");
            entity.Property(e => e.CInetBestellNr)
                .HasMaxLength(50)
                .HasColumnName("cInetBestellNr");
            entity.Property(e => e.CKampagne)
                .HasMaxLength(255)
                .HasColumnName("cKampagne");
            entity.Property(e => e.CKampagneName)
                .HasMaxLength(255)
                .HasColumnName("cKampagneName");
            entity.Property(e => e.CKampagneParam)
                .HasMaxLength(255)
                .HasColumnName("cKampagneParam");
            entity.Property(e => e.CKundenauftragsnummer)
                .HasMaxLength(250)
                .HasColumnName("cKundenauftragsnummer");
            entity.Property(e => e.CModulId)
                .HasMaxLength(255)
                .HasColumnName("cModulID");
            entity.Property(e => e.COutboundId)
                .HasMaxLength(100)
                .HasColumnName("cOutboundId");
            entity.Property(e => e.CPuiZahlungsdaten).HasColumnName("cPuiZahlungsdaten");
            entity.Property(e => e.CReferrer)
                .HasMaxLength(255)
                .HasColumnName("cReferrer");
            entity.Property(e => e.CStatus)
                .HasMaxLength(255)
                .HasColumnName("cStatus");
            entity.Property(e => e.CType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cType");
            entity.Property(e => e.CUserAgent)
                .HasMaxLength(512)
                .HasColumnName("cUserAgent");
            entity.Property(e => e.CUserName)
                .HasMaxLength(255)
                .HasColumnName("cUserName");
            entity.Property(e => e.CUstId)
                .HasMaxLength(25)
                .HasColumnName("cUstId");
            entity.Property(e => e.CVersandInfo)
                .HasMaxLength(255)
                .HasColumnName("cVersandInfo");
            entity.Property(e => e.CVersandlandIso)
                .HasMaxLength(5)
                .HasColumnName("cVersandlandISO");
            entity.Property(e => e.CVersandlandWaehrung)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cVersandlandWaehrung");
            entity.Property(e => e.CVerwendungszweck)
                .HasMaxLength(1000)
                .HasColumnName("cVerwendungszweck");
            entity.Property(e => e.CWaehrung)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWaehrung");
            entity.Property(e => e.DBezahlt)
                .HasColumnType("datetime")
                .HasColumnName("dBezahlt");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DGedruckt)
                .HasColumnType("datetime")
                .HasColumnName("dGedruckt");
            entity.Property(e => e.DLieferdatum)
                .HasColumnType("datetime")
                .HasColumnName("dLieferdatum");
            entity.Property(e => e.DMailVersandt)
                .HasColumnType("datetime")
                .HasColumnName("dMailVersandt");
            entity.Property(e => e.DVersandMail)
                .HasColumnType("datetime")
                .HasColumnName("dVersandMail");
            entity.Property(e => e.DVersandt)
                .HasColumnType("datetime")
                .HasColumnName("dVersandt");
            entity.Property(e => e.DZahlungsMail)
                .HasColumnType("datetime")
                .HasColumnName("dZahlungsMail");
            entity.Property(e => e.FFaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fFaktor");
            entity.Property(e => e.FGutschein)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGutschein");
            entity.Property(e => e.FRabatt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabatt");
            entity.Property(e => e.FSkonto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fSkonto");
            entity.Property(e => e.FVersandBruttoPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVersandBruttoPreis");
            entity.Property(e => e.FVersandlandWaehrungFaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVersandlandWaehrungFaktor");
            entity.Property(e => e.FZusatzGewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZusatzGewicht");
            entity.Property(e => e.KAmazonUser).HasColumnName("kAmazonUser");
            entity.Property(e => e.KBestellHinweis).HasColumnName("kBestellHinweis");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KColor).HasColumnName("kColor");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KFulfillmentLieferant).HasColumnName("kFulfillmentLieferant");
            entity.Property(e => e.KInetBestellung).HasColumnName("kInetBestellung");
            entity.Property(e => e.KLieferadresse).HasColumnName("kLieferadresse");
            entity.Property(e => e.KLogistik).HasColumnName("kLogistik");
            entity.Property(e => e.KRechnungsadresse).HasColumnName("kRechnungsadresse");
            entity.Property(e => e.KRueckhaltegrund).HasColumnName("kRueckhaltegrund");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KSplitBestellung).HasColumnName("kSplitBestellung");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");
            entity.Property(e => e.NHatUpload).HasColumnName("nHatUpload");
            entity.Property(e => e.NIgl).HasColumnName("nIGL");
            entity.Property(e => e.NIstExterneRechnung).HasColumnName("nIstExterneRechnung");
            entity.Property(e => e.NIstReadOnly).HasColumnName("nIstReadOnly");
            entity.Property(e => e.NKomplettAusgeliefert).HasColumnName("nKomplettAusgeliefert");
            entity.Property(e => e.NMaxLiefertage).HasColumnName("nMaxLiefertage");
            entity.Property(e => e.NPlatform).HasColumnName("nPlatform");
            entity.Property(e => e.NPremium).HasColumnName("nPremium");
            entity.Property(e => e.NPrio).HasColumnName("nPrio");
            entity.Property(e => e.NStorno).HasColumnName("nStorno");
            entity.Property(e => e.NUstFrei).HasColumnName("nUstFrei");
            entity.Property(e => e.NZahlungsZiel).HasColumnName("nZahlungsZiel");
            entity.Property(e => e.NZahlungstyp).HasColumnName("nZahlungstyp");
            entity.Property(e => e.TAdresseKAdresse).HasColumnName("tAdresse_kAdresse");
            entity.Property(e => e.TBenutzerKBenutzer).HasColumnName("tBenutzer_kBenutzer");
            entity.Property(e => e.TKundeKKunde).HasColumnName("tKunde_kKunde");
            entity.Property(e => e.TRechnungKRechnung).HasColumnName("tRechnung_kRechnung");
            entity.Property(e => e.TTextKText).HasColumnName("tText_kText");
            entity.Property(e => e.TVersandArtKVersandArt).HasColumnName("tVersandArt_kVersandArt");
        });

        modelBuilder.Entity<VBestellungAttribute>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBestellungAttribute", "DEPRECATED");

            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CValue).HasColumnName("cValue");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KBestellungAttribute).HasColumnName("kBestellungAttribute");
        });

        modelBuilder.Entity<VBestellungBezahlt>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBestellungBezahlt", "VersandIntern");

            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
        });

        modelBuilder.Entity<VBestellungDropshippingLieferbar>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBestellungDropshippingLieferbar", "VersandIntern");

            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
        });

        modelBuilder.Entity<VBestellungEckdaten>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBestellungEckdaten");

            entity.Property(e => e.CWaehrung)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWaehrung");
            entity.Property(e => e.FFaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fFaktor");
            entity.Property(e => e.FGutschein)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGutschein");
            entity.Property(e => e.FGutschrift)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGutschrift");
            entity.Property(e => e.FWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWert");
            entity.Property(e => e.FWertNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertNetto");
            entity.Property(e => e.FZahlung)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZahlung");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
        });

        modelBuilder.Entity<VBestellungEckdaten1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBestellungEckdaten", "DEPRECATED");

            entity.Property(e => e.CWaehrung)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWaehrung");
            entity.Property(e => e.FFaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fFaktor");
            entity.Property(e => e.FGutschein)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGutschein");
            entity.Property(e => e.FGutschrift)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGutschrift");
            entity.Property(e => e.FWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWert");
            entity.Property(e => e.FWertNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertNetto");
            entity.Property(e => e.FZahlung)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZahlung");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
        });

        modelBuilder.Entity<VBestellungLieferInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBestellungLieferInfo", "Versand");

            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.NHatTeilmengen).HasColumnName("nHatTeilmengen");
            entity.Property(e => e.NLieferbar).HasColumnName("nLieferbar");
            entity.Property(e => e.NLieferbarEigen).HasColumnName("nLieferbarEigen");
        });

        modelBuilder.Entity<VBestellungLieferInfoProLager>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBestellungLieferInfoProLager", "Versand");

            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.NHatTeilmengen).HasColumnName("nHatTeilmengen");
            entity.Property(e => e.NLieferbar).HasColumnName("nLieferbar");
            entity.Property(e => e.NLieferbarEigen).HasColumnName("nLieferbarEigen");
        });

        modelBuilder.Entity<VBestellungLieferInfoProLager1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBestellungLieferInfoProLager", "VersandIntern");

            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");
            entity.Property(e => e.NHatTeilmengen).HasColumnName("nHatTeilmengen");
            entity.Property(e => e.NLieferbar).HasColumnName("nLieferbar");
            entity.Property(e => e.NLieferbarEigen).HasColumnName("nLieferbarEigen");
        });

        modelBuilder.Entity<VBestellungLieferInfoProLagerFifo2012>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBestellungLieferInfoProLagerFIFO2012", "VersandIntern");

            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");
            entity.Property(e => e.NHatTeilmengen).HasColumnName("nHatTeilmengen");
            entity.Property(e => e.NLieferbar).HasColumnName("nLieferbar");
            entity.Property(e => e.NLieferbarEigen).HasColumnName("nLieferbarEigen");
        });

        modelBuilder.Entity<VBestellungLieferInfoProLagerNonFifo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBestellungLieferInfoProLagerNonFIFO", "VersandIntern");

            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");
            entity.Property(e => e.NHatTeilmengen).HasColumnName("nHatTeilmengen");
            entity.Property(e => e.NLieferbar).HasColumnName("nLieferbar");
            entity.Property(e => e.NLieferbarEigen).HasColumnName("nLieferbarEigen");
        });

        modelBuilder.Entity<VBillOfMaterialComponent>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBillOfMaterialComponents", "pps");

            entity.Property(e => e.BestandAufEinkaufsliste).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestandEigen).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestandGesamt).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestandImZulauf).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestandInAuftraegen).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.BestandVerfuegbar).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CNumber)
                .HasMaxLength(100)
                .HasColumnName("cNumber");
            entity.Property(e => e.FEknetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEKNetto");
            entity.Property(e => e.FMassMenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMassMenge");
            entity.Property(e => e.FRestFactor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRestFactor");
            entity.Property(e => e.FUnitFactor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fUnitFactor");
            entity.Property(e => e.InProduktion).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KArtikelMassEinheit).HasColumnName("kArtikelMassEinheit");
            entity.Property(e => e.KBillOfMaterial).HasColumnName("kBillOfMaterial");
            entity.Property(e => e.KBillOfMaterialComponent).HasColumnName("kBillOfMaterialComponent");
            entity.Property(e => e.KMassEinheit).HasColumnName("kMassEinheit");
            entity.Property(e => e.KOperation).HasColumnName("kOperation");
            entity.Property(e => e.KOperationStep).HasColumnName("kOperationStep");
            entity.Property(e => e.KParentBillOfMaterialComponent).HasColumnName("kParentBillOfMaterialComponent");
            entity.Property(e => e.KSubsetDefinition).HasColumnName("kSubsetDefinition");
            entity.Property(e => e.KVerkaufsEinheit).HasColumnName("kVerkaufsEinheit");
            entity.Property(e => e.NArtikelAktiv).HasColumnName("nArtikelAktiv");
            entity.Property(e => e.NCharge).HasColumnName("nCharge");
            entity.Property(e => e.NComponentDiscriminator).HasColumnName("nComponentDiscriminator");
            entity.Property(e => e.NComponentIsInactive).HasColumnName("nComponentIsInactive");
            entity.Property(e => e.NComponentPostingsBatchNumberRequirements).HasColumnName("nComponentPostingsBatchNumberRequirements");
            entity.Property(e => e.NComponentPostingsShelfLifeEndDateRequirements).HasColumnName("nComponentPostingsShelfLifeEndDateRequirements");
            entity.Property(e => e.NDestroyable).HasColumnName("nDestroyable");
            entity.Property(e => e.NIsInternalOperation).HasColumnName("nIsInternalOperation");
            entity.Property(e => e.NLagerAktiv).HasColumnName("nLagerAktiv");
            entity.Property(e => e.NMhd).HasColumnName("nMHD");
            entity.Property(e => e.NQuantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nQuantity");
            entity.Property(e => e.NSeriennummernVerfolgung).HasColumnName("nSeriennummernVerfolgung");
            entity.Property(e => e.NSharedPart).HasColumnName("nSharedPart");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NSubsetManagement).HasColumnName("nSubsetManagement");
            entity.Property(e => e.NTeilbar).HasColumnName("nTeilbar");
            entity.Property(e => e.NVariable).HasColumnName("nVariable");
            entity.Property(e => e.Produzierbar).HasColumnType("decimal(25, 13)");
        });

        modelBuilder.Entity<VCategory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCategory", "Pos");

            entity.Property(e => e.BLastChanged)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bLastChanged");
            entity.Property(e => e.CImageHash)
                .HasMaxLength(255)
                .HasColumnName("cImageHash");
            entity.Property(e => e.CImageSource)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("cImageSource");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.DActive)
                .HasColumnType("datetime")
                .HasColumnName("dActive");
            entity.Property(e => e.DCreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("dCreatedAt");
            entity.Property(e => e.DInactive)
                .HasColumnType("datetime")
                .HasColumnName("dInactive");
            entity.Property(e => e.DLastModified)
                .HasColumnType("datetime")
                .HasColumnName("dLastModified");
            entity.Property(e => e.DUpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("dUpdatedAt");
            entity.Property(e => e.FDiscount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fDiscount");
            entity.Property(e => e.KCategory).HasColumnName("kCategory");
            entity.Property(e => e.KParentCategoryId).HasColumnName("kParentCategoryId");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<VCategoryFamilyTree>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCategoryFamilyTree", "ArtikelVerwaltung");

            entity.Property(e => e.KKategorie).HasColumnName("kKategorie");
            entity.Property(e => e.KOberKategorie).HasColumnName("kOberKategorie");
        });

        modelBuilder.Entity<VChannel>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vChannel", "SCX");

            entity.Property(e => e.CChannel)
                .HasMaxLength(255)
                .HasColumnName("cChannel");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KChannel)
                .ValueGeneratedOnAdd()
                .HasColumnName("kChannel");
        });

        modelBuilder.Entity<VChannelAttribute>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vChannelAttribute", "SCX");

            entity.Property(e => e.CAttributeId)
                .HasMaxLength(512)
                .HasColumnName("cAttributeId");
            entity.Property(e => e.CAttributeValueValidation)
                .HasMaxLength(1024)
                .HasColumnName("cAttributeValueValidation");
            entity.Property(e => e.CChannelDisplayName)
                .HasMaxLength(255)
                .HasColumnName("cChannelDisplayName");
            entity.Property(e => e.CDescription).HasColumnName("cDescription");
            entity.Property(e => e.CDisplayName)
                .HasMaxLength(150)
                .HasColumnName("cDisplayName");
            entity.Property(e => e.CSection)
                .HasMaxLength(255)
                .HasColumnName("cSection");
            entity.Property(e => e.CSubSection)
                .HasMaxLength(255)
                .HasColumnName("cSubSection");
            entity.Property(e => e.CType)
                .HasMaxLength(100)
                .HasColumnName("cType");
            entity.Property(e => e.KChannel).HasColumnName("kChannel");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KShopScx).HasColumnName("kShopScx");
            entity.Property(e => e.NIsMultipleAllowed).HasColumnName("nIsMultipleAllowed");
            entity.Property(e => e.NIsRepeatableSubSection).HasColumnName("nIsRepeatableSubSection");
            entity.Property(e => e.NIsVariationDimension).HasColumnName("nIsVariationDimension");
            entity.Property(e => e.NRequired).HasColumnName("nRequired");
            entity.Property(e => e.NSectionPosition).HasColumnName("nSectionPosition");
            entity.Property(e => e.NSubSectionPosition).HasColumnName("nSubSectionPosition");
        });

        modelBuilder.Entity<VChannelAttributeValue>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vChannelAttributeValue", "SCX");

            entity.Property(e => e.CAttributeId)
                .HasMaxLength(512)
                .HasColumnName("cAttributeId");
            entity.Property(e => e.CValue).HasColumnName("cValue");
            entity.Property(e => e.KShopScx).HasColumnName("kShopScx");
        });

        modelBuilder.Entity<VConfigurationGroup>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vConfigurationGroup", "Pos");

            entity.Property(e => e.BLastChanged)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bLastChanged");
            entity.Property(e => e.CName).HasColumnName("cName");
            entity.Property(e => e.DActive)
                .HasColumnType("datetime")
                .HasColumnName("dActive");
            entity.Property(e => e.DInactive)
                .HasColumnType("datetime")
                .HasColumnName("dInactive");
            entity.Property(e => e.DLastModified)
                .HasColumnType("datetime")
                .HasColumnName("dLastModified");
            entity.Property(e => e.KConfigurationGroup).HasColumnName("kConfigurationGroup");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NRequired).HasColumnName("nRequired");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
            entity.Property(e => e.NType).HasColumnName("nType");
        });

        modelBuilder.Entity<VConfigurationItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vConfigurationItem", "Pos");

            entity.Property(e => e.BLastChanged)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bLastChanged");
            entity.Property(e => e.CGroupName).HasColumnName("cGroupName");
            entity.Property(e => e.CName).HasColumnName("cName");
            entity.Property(e => e.DActive)
                .HasColumnType("datetime")
                .HasColumnName("dActive");
            entity.Property(e => e.DInactive)
                .HasColumnType("datetime")
                .HasColumnName("dInactive");
            entity.Property(e => e.DLastModified)
                .HasColumnType("datetime")
                .HasColumnName("dLastModified");
            entity.Property(e => e.FPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPrice");
            entity.Property(e => e.KConfigurationGroup).HasColumnName("kConfigurationGroup");
            entity.Property(e => e.KConfigurationItem).HasColumnName("kConfigurationItem");
            entity.Property(e => e.KProduct).HasColumnName("kProduct");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");
            entity.Property(e => e.NInternalUse).HasColumnName("nInternalUse");
            entity.Property(e => e.NPreselection).HasColumnName("nPreselection");
            entity.Property(e => e.NRequired).HasColumnName("nRequired");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
            entity.Property(e => e.NType).HasColumnName("nType");
        });

        modelBuilder.Entity<VCustomAction>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCustomAction", "CustomWorkflows");

            entity.Property(e => e.CDescription)
                .HasMaxLength(255)
                .HasColumnName("cDescription");
            entity.Property(e => e.CDisplayName)
                .HasMaxLength(255)
                .HasColumnName("cDisplayName");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CObjekt)
                .HasMaxLength(100)
                .HasColumnName("cObjekt");
            entity.Property(e => e.CPkCol)
                .HasMaxLength(128)
                .HasColumnName("cPkCol");
            entity.Property(e => e.NObjekt).HasColumnName("nObjekt");
        });

        modelBuilder.Entity<VCustomActionCheck>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCustomActionCheck", "CustomWorkflows");

            entity.Property(e => e.CDescription)
                .HasMaxLength(255)
                .HasColumnName("cDescription");
            entity.Property(e => e.CDisplayName)
                .HasMaxLength(255)
                .HasColumnName("cDisplayName");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CNotAllowedParamTypesInAction)
                .HasMaxLength(255)
                .HasColumnName("cNotAllowedParamTypesInAction");
            entity.Property(e => e.CObjekt)
                .HasMaxLength(100)
                .HasColumnName("cObjekt");
            entity.Property(e => e.CPkCol)
                .HasMaxLength(128)
                .HasColumnName("cPkCol");
            entity.Property(e => e.NObjekt).HasColumnName("nObjekt");
            entity.Property(e => e.NParamCount).HasColumnName("nParamCount");
            entity.Property(e => e.Status)
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VCustomActionParameter>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCustomActionParameter", "CustomWorkflows");

            entity.Property(e => e.CActionName)
                .HasMaxLength(255)
                .HasColumnName("cActionName");
            entity.Property(e => e.CDataType)
                .HasMaxLength(255)
                .HasColumnName("cDataType");
            entity.Property(e => e.CDescription)
                .HasMaxLength(255)
                .HasColumnName("cDescription");
            entity.Property(e => e.CDisplayName)
                .HasMaxLength(255)
                .HasColumnName("cDisplayName");
            entity.Property(e => e.CName)
                .HasMaxLength(128)
                .HasColumnName("cName");
            entity.Property(e => e.CParameterName)
                .HasMaxLength(255)
                .HasColumnName("cParameterName");
            entity.Property(e => e.CUserType)
                .HasMaxLength(255)
                .HasColumnName("cUserType");
            entity.Property(e => e.NPos).HasColumnName("nPos");
        });

        modelBuilder.Entity<VCustomer>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCustomer", "Pos");

            entity.Property(e => e.BLastChanged)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bLastChanged");
            entity.Property(e => e.CAddress)
                .HasMaxLength(255)
                .HasColumnName("cAddress");
            entity.Property(e => e.CAddressSupplement)
                .HasMaxLength(255)
                .HasColumnName("cAddressSupplement");
            entity.Property(e => e.CCity)
                .HasMaxLength(255)
                .HasColumnName("cCity");
            entity.Property(e => e.CCompany)
                .HasMaxLength(128)
                .HasColumnName("cCompany");
            entity.Property(e => e.CCountry)
                .HasMaxLength(255)
                .HasColumnName("cCountry");
            entity.Property(e => e.CCustomerNumber)
                .HasMaxLength(30)
                .HasColumnName("cCustomerNumber");
            entity.Property(e => e.CDateOfBirth)
                .HasMaxLength(10)
                .HasColumnName("cDateOfBirth");
            entity.Property(e => e.CEmailAddress)
                .HasMaxLength(255)
                .HasColumnName("cEmailAddress");
            entity.Property(e => e.CFederalTaxId)
                .HasMaxLength(20)
                .HasColumnName("cFederalTaxId");
            entity.Property(e => e.CFirstName)
                .HasMaxLength(255)
                .HasColumnName("cFirstName");
            entity.Property(e => e.CLastName)
                .HasMaxLength(255)
                .HasColumnName("cLastName");
            entity.Property(e => e.CPhone)
                .HasMaxLength(30)
                .HasColumnName("cPhone");
            entity.Property(e => e.CPostalCode)
                .HasMaxLength(24)
                .HasColumnName("cPostalCode");
            entity.Property(e => e.CSalutation)
                .HasMaxLength(30)
                .HasColumnName("cSalutation");
            entity.Property(e => e.CState)
                .HasMaxLength(255)
                .HasColumnName("cState");
            entity.Property(e => e.CTitle)
                .HasMaxLength(64)
                .HasColumnName("cTitle");
            entity.Property(e => e.DActive)
                .HasColumnType("datetime")
                .HasColumnName("dActive");
            entity.Property(e => e.DInactive)
                .HasColumnType("datetime")
                .HasColumnName("dInactive");
            entity.Property(e => e.DLastModified)
                .HasColumnType("datetime")
                .HasColumnName("dLastModified");
            entity.Property(e => e.FDiscount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fDiscount");
            entity.Property(e => e.KCustomerGroupId).HasColumnName("kCustomerGroupId");
            entity.Property(e => e.KId).HasColumnName("kId");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NDebtorNumber).HasColumnName("nDebtorNumber");
        });

        modelBuilder.Entity<VCustomerGroup>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCustomerGroup", "Pos");

            entity.Property(e => e.BLastChanged)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bLastChanged");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.DActive)
                .HasColumnType("datetime")
                .HasColumnName("dActive");
            entity.Property(e => e.DInactive)
                .HasColumnType("datetime")
                .HasColumnName("dInactive");
            entity.Property(e => e.DLastModified)
                .HasColumnType("datetime")
                .HasColumnName("dLastModified");
            entity.Property(e => e.FDiscountPercent)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fDiscountPercent");
            entity.Property(e => e.KCustomerGroup).HasColumnName("kCustomerGroup");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NStandard).HasColumnName("nStandard");
        });

        modelBuilder.Entity<VCustomerGroup1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCustomerGroup", "SCX");

            entity.Property(e => e.KCustomerGroup).HasColumnName("kCustomerGroup");
        });

        modelBuilder.Entity<VDefinitionState>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vDefinitionState", "subset");

            entity.Property(e => e.KDefinition).HasColumnName("kDefinition");
            entity.Property(e => e.NDimensionsReadOnly).HasColumnName("nDimensionsReadOnly");
            entity.Property(e => e.NFormulaReadOnly).HasColumnName("nFormulaReadOnly");
        });

        modelBuilder.Entity<VDeletableFile>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vDeletableFiles");

            entity.Property(e => e.CFileHash)
                .HasMaxLength(255)
                .HasColumnName("cFileHash");
            entity.Property(e => e.CFileName)
                .HasMaxLength(255)
                .HasColumnName("cFileName");
            entity.Property(e => e.CFileType)
                .HasMaxLength(20)
                .HasColumnName("cFileType");
            entity.Property(e => e.DErstellDatum)
                .HasColumnType("datetime")
                .HasColumnName("dErstellDatum");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KFile).HasColumnName("kFile");
            entity.Property(e => e.NFileSizeKb).HasColumnName("nFileSizeKB");
        });

        modelBuilder.Entity<VDeletedEntity>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vDeletedEntity", "Pos");

            entity.Property(e => e.BLastChanged)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bLastChanged");
            entity.Property(e => e.KEntityId).HasColumnName("kEntityId");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NEntityType).HasColumnName("nEntityType");
        });

        modelBuilder.Entity<VDeletedQueue>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vDeletedQueue", "DbeS");

            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KOption1).HasColumnName("kOption1");
            entity.Property(e => e.KOption2).HasColumnName("kOption2");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KWert).HasColumnName("kWert");
            entity.Property(e => e.NAction).HasColumnName("nAction");
            entity.Property(e => e.NInBearbeitung).HasColumnName("nInBearbeitung");
        });

        modelBuilder.Entity<VDeliveryMethod>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vDeliveryMethod", "Pos");

            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.COrderText)
                .HasMaxLength(255)
                .HasColumnName("cOrderText");
            entity.Property(e => e.FMwSt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwSt");
            entity.Property(e => e.FPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPrice");
            entity.Property(e => e.FVkfreiAb)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVKFreiAB");
            entity.Property(e => e.KDeliveryMethod).HasColumnName("kDeliveryMethod");
            entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");
        });

        modelBuilder.Entity<VDisposition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vDisposition", "pps");

            entity.Property(e => e.Artikelname).HasMaxLength(255);
            entity.Property(e => e.Artikelnummer).HasMaxLength(100);
            entity.Property(e => e.BenutzerNameDispo).HasMaxLength(255);
            entity.Property(e => e.CComment).HasColumnName("cComment");
            entity.Property(e => e.DCreated).HasColumnName("dCreated");
            entity.Property(e => e.DIntendedCompletionDate).HasColumnName("dIntendedCompletionDate");
            entity.Property(e => e.DIssueDate).HasColumnName("dIssueDate");
            entity.Property(e => e.FActualQuantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fActualQuantity");
            entity.Property(e => e.FActualQuantityInProductionOrders)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fActualQuantityInProductionOrders");
            entity.Property(e => e.FActualQuantityWithProductionOrder)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fActualQuantityWithProductionOrder");
            entity.Property(e => e.FPlannedQuantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPlannedQuantity");
            entity.Property(e => e.FPlannedQuantityWithProductionOrder)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fPlannedQuantityWithProductionOrder");
            entity.Property(e => e.FQuantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fQuantity");
            entity.Property(e => e.FQuantityInProductionOrders)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fQuantityInProductionOrders");
            entity.Property(e => e.InProduktion).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.IstMhd).HasColumnName("IstMHD");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBenutzerLastChange).HasColumnName("kBenutzerLastChange");
            entity.Property(e => e.KDisposition).HasColumnName("kDisposition");
            entity.Property(e => e.KReferenceField).HasColumnName("kReferenceField");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.Mindestbestand).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.NReferenceType).HasColumnName("nReferenceType");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
            entity.Property(e => e.Produzierbar).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ReferenceFieldIssue).HasMaxLength(255);
            entity.Property(e => e.ReferenceFieldIssuePosition).HasMaxLength(5);
        });

        modelBuilder.Entity<VDownloaddatei>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vDownloaddatei", "DbeS");

            entity.Property(e => e.CId)
                .HasMaxLength(255)
                .HasColumnName("cID");
            entity.Property(e => e.CPfad)
                .HasMaxLength(255)
                .HasColumnName("cPfad");
            entity.Property(e => e.CPfadVorschau)
                .HasMaxLength(255)
                .HasColumnName("cPfadVorschau");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.KDownload).HasColumnName("kDownload");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NAnzahl).HasColumnName("nAnzahl");
            entity.Property(e => e.NDataType).HasColumnName("nDataType");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NTage).HasColumnName("nTage");
        });

        modelBuilder.Entity<VDownloaddateiDelete>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vDownloaddateiDelete", "DbeS");

            entity.Property(e => e.KDownload).HasColumnName("kDownload");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NDataType).HasColumnName("nDataType");
        });

        modelBuilder.Entity<VDownloaddateiSprache>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vDownloaddateiSprache", "DbeS");

            entity.Property(e => e.CBeschreibung).HasColumnName("cBeschreibung");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KDownload).HasColumnName("kDownload");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
        });

        modelBuilder.Entity<VEbayItemCustomPolicy>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vEbayItemCustomPolicies", "Ebay");

            entity.Property(e => e.CId)
                .HasMaxLength(255)
                .HasColumnName("cId");
            entity.Property(e => e.CType)
                .HasMaxLength(50)
                .HasColumnName("cType");
            entity.Property(e => e.KEbayuser).HasColumnName("kEbayuser");
            entity.Property(e => e.KItem).HasColumnName("kItem");
        });

        modelBuilder.Entity<VEbayUserBestellungen>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vEbayUserBestellungen");

            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KEbayuser).HasColumnName("kEbayuser");
        });

        modelBuilder.Entity<VEbayVorlagen>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vEbayVorlagen", "ArtikelVerwaltung");

            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
        });

        modelBuilder.Entity<VEinheit>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vEinheit", "DbeS");

            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KEinheit).HasColumnName("kEinheit");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
        });

        modelBuilder.Entity<VExportDocumentsLieferscheinPositionen>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vExportDocumentsLieferscheinPositionen", "Shipping");

            entity.Property(e => e.Anzahl).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.Artikelnummer).HasMaxLength(100);
            entity.Property(e => e.Beschreibung).HasMaxLength(255);
            entity.Property(e => e.Bruttogewicht).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.HerkunftlandIso).HasMaxLength(5);
            entity.Property(e => e.HerkunftlandIso3).HasMaxLength(5);
            entity.Property(e => e.Herkunftsland).HasMaxLength(64);
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");
            entity.Property(e => e.Nettogewicht).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.StandardBeschreibung).HasMaxLength(255);
            entity.Property(e => e.TaricNummer).HasMaxLength(20);
            entity.Property(e => e.Waehrung)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Wert).HasColumnType("decimal(38, 12)");
        });

        modelBuilder.Entity<VExportDocumentsShippingPosition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vExportDocumentsShippingPosition", "Shipping");

            entity.Property(e => e.Beschreibung).HasMaxLength(255);
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.StandardBeschreibung).HasMaxLength(255);
            entity.Property(e => e.Wert).HasColumnType("decimal(38, 6)");
        });

        modelBuilder.Entity<VExterneRechnung>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vExterneRechnung", "Verkauf");

            entity.Property(e => e.CExterneRechnungsnr)
                .HasMaxLength(50)
                .HasColumnName("cExterneRechnungsnr");
            entity.Property(e => e.CKaeuferUstId)
                .HasMaxLength(50)
                .HasColumnName("cKaeuferUstId");
            entity.Property(e => e.CKaeuferUstLandIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cKaeuferUstLandISO");
            entity.Property(e => e.CKundenNr)
                .HasMaxLength(30)
                .HasColumnName("cKundenNr");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CRechnungsadresseAnrede)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseAnrede");
            entity.Property(e => e.CRechnungsadresseFirma)
                .HasMaxLength(128)
                .HasColumnName("cRechnungsadresseFirma");
            entity.Property(e => e.CRechnungsadresseLand)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseLand");
            entity.Property(e => e.CRechnungsadresseName)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseName");
            entity.Property(e => e.CRechnungsadresseOrt)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseOrt");
            entity.Property(e => e.CRechnungsadressePlz)
                .HasMaxLength(24)
                .HasColumnName("cRechnungsadressePLZ");
            entity.Property(e => e.CRechnungsadresseStrasse)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseStrasse");
            entity.Property(e => e.CRechnungsadresseTitel)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseTitel");
            entity.Property(e => e.CRechnungsadresseVorname)
                .HasMaxLength(128)
                .HasColumnName("cRechnungsadresseVorname");
            entity.Property(e => e.CSdIkontoNr)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cSdIKontoNr");
            entity.Property(e => e.CVerkaeuferUstId)
                .HasMaxLength(50)
                .HasColumnName("cVerkaeuferUstId");
            entity.Property(e => e.CVerkaeuferUstLandIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cVerkaeuferUstLandISO");
            entity.Property(e => e.CWaehrungIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWaehrungISO");
            entity.Property(e => e.DBelegzeitpunktUtc).HasColumnName("dBelegzeitpunktUtc");
            entity.Property(e => e.FUmgerechneterGesamtUstBetrag)
                .HasColumnType("decimal(23, 15)")
                .HasColumnName("fUmgerechneterGesamtUstBetrag");
            entity.Property(e => e.KExterneRechnung).HasColumnName("kExterneRechnung");
        });

        modelBuilder.Entity<VExterneRechnungEckdaten>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vExterneRechnungEckdaten", "Verkauf");

            entity.Property(e => e.FSummeBrutto)
                .HasColumnType("decimal(23, 15)")
                .HasColumnName("fSummeBrutto");
            entity.Property(e => e.FSummeNetto)
                .HasColumnType("decimal(23, 15)")
                .HasColumnName("fSummeNetto");
            entity.Property(e => e.KExterneRechnung).HasColumnName("kExterneRechnung");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<VExterneRechnungPosition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vExterneRechnungPosition", "Verkauf");

            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CAuftragsnr)
                .HasMaxLength(50)
                .HasColumnName("cAuftragsnr");
            entity.Property(e => e.CAuftragswaehrungIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAuftragswaehrungISO");
            entity.Property(e => e.CLieferadresseLandIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLieferadresseLandISO");
            entity.Property(e => e.CLieferadresseOrt).HasColumnName("cLieferadresseOrt");
            entity.Property(e => e.CLieferadressePlz)
                .HasMaxLength(10)
                .HasColumnName("cLieferadressePLZ");
            entity.Property(e => e.CLieferadresseRegion).HasColumnName("cLieferadresseRegion");
            entity.Property(e => e.CLieferadresseSteuercode)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseSteuercode");
            entity.Property(e => e.CTransaktionstext).HasColumnName("cTransaktionstext");
            entity.Property(e => e.CVersandadresseLandIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cVersandadresseLandISO");
            entity.Property(e => e.CVersandadresseOrt).HasColumnName("cVersandadresseOrt");
            entity.Property(e => e.CVersandadressePlz)
                .HasMaxLength(10)
                .HasColumnName("cVersandadressePLZ");
            entity.Property(e => e.CVersandadresseRegion).HasColumnName("cVersandadresseRegion");
            entity.Property(e => e.CVersandadresseSteuercode)
                .HasMaxLength(30)
                .HasColumnName("cVersandadresseSteuercode");
            entity.Property(e => e.DAuftragszeitpunktUtc).HasColumnName("dAuftragszeitpunktUtc");
            entity.Property(e => e.DSteuerberechnungszeitpunktUtc).HasColumnName("dSteuerberechnungszeitpunktUtc");
            entity.Property(e => e.DVersandzeitpunktUtc).HasColumnName("dVersandzeitpunktUtc");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(10, 4)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.FSteuersatz)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("fSteuersatz");
            entity.Property(e => e.FSummeBrutto)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("fSummeBrutto");
            entity.Property(e => e.FSummeNetto)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("fSummeNetto");
            entity.Property(e => e.FSummeRabattBrutto)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("fSummeRabattBrutto");
            entity.Property(e => e.FSummeRabattNetto)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("fSummeRabattNetto");
            entity.Property(e => e.FSummeRabattSteuer)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("fSummeRabattSteuer");
            entity.Property(e => e.FSummeSteuer)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("fSummeSteuer");
            entity.Property(e => e.KAmazonVcsbestellungPos).HasColumnName("kAmazonVCSBestellungPos");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KAuftragPosition).HasColumnName("kAuftragPosition");
            entity.Property(e => e.KExterneRechnung).HasColumnName("kExterneRechnung");
            entity.Property(e => e.KExterneRechnungPosition).HasColumnName("kExterneRechnungPosition");
            entity.Property(e => e.KExterneRechnungPositionVater).HasColumnName("kExterneRechnungPositionVater");
            entity.Property(e => e.NPositionstyp).HasColumnName("nPositionstyp");
            entity.Property(e => e.NTransaktionstyp).HasColumnName("nTransaktionstyp");
        });

        modelBuilder.Entity<VExterneRechnungPositionstyp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vExterneRechnungPositionstyp", "Verkauf");
        });

        modelBuilder.Entity<VExterneRechnungTransaktionstyp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vExterneRechnungTransaktionstyp", "Verkauf");
        });

        modelBuilder.Entity<VFbabestand>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vFBABestand", "Amazon");

            entity.Property(e => e.CMarketplaceId)
                .HasMaxLength(50)
                .HasColumnName("cMarketplaceID");
            entity.Property(e => e.CRegion)
                .HasMaxLength(4)
                .HasColumnName("cRegion");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.NBestand).HasColumnName("nBestand");
            entity.Property(e => e.NBestandReserviert)
                .HasColumnType("numeric(38, 1)")
                .HasColumnName("nBestandReserviert");
        });

        modelBuilder.Entity<VFinishedSalesChannelOffer>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vFinishedSalesChannelOffer", "SCX");

            entity.Property(e => e.CChannel)
                .HasMaxLength(15)
                .HasColumnName("cChannel");
            entity.Property(e => e.CChannelOfferId)
                .HasMaxLength(50)
                .HasColumnName("cChannelOfferId");
            entity.Property(e => e.CSellerId)
                .HasMaxLength(50)
                .HasColumnName("cSellerId");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KOffer).HasColumnName("kOffer");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NIsListed).HasColumnName("nIsListed");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
            entity.Property(e => e.NType).HasColumnName("nType");
        });

        modelBuilder.Entity<VFirma>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vFirma", "DbeS");

            entity.Property(e => e.CBank)
                .HasMaxLength(50)
                .HasColumnName("cBank");
            entity.Property(e => e.CBic)
                .HasMaxLength(64)
                .HasColumnName("cBIC");
            entity.Property(e => e.CBlz)
                .HasMaxLength(20)
                .HasColumnName("cBLZ");
            entity.Property(e => e.CEmail)
                .HasMaxLength(255)
                .HasColumnName("cEMail");
            entity.Property(e => e.CFax)
                .HasMaxLength(30)
                .HasColumnName("cFax");
            entity.Property(e => e.CIban)
                .HasMaxLength(64)
                .HasColumnName("cIBAN");
            entity.Property(e => e.CKontoNr)
                .HasMaxLength(20)
                .HasColumnName("cKontoNr");
            entity.Property(e => e.CKontoinhaber)
                .HasMaxLength(255)
                .HasColumnName("cKontoinhaber");
            entity.Property(e => e.CLand)
                .HasMaxLength(255)
                .HasColumnName("cLand");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPlz)
                .HasMaxLength(50)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CSteuerNr)
                .HasMaxLength(25)
                .HasColumnName("cSteuerNr");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTel)
                .HasMaxLength(50)
                .HasColumnName("cTel");
            entity.Property(e => e.CUnternehmer)
                .HasMaxLength(255)
                .HasColumnName("cUnternehmer");
            entity.Property(e => e.CUstId)
                .HasMaxLength(25)
                .HasColumnName("cUStId");
            entity.Property(e => e.CWww)
                .HasMaxLength(255)
                .HasColumnName("cWWW");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KShop).HasColumnName("kShop");
        });

        modelBuilder.Entity<VFulfillerLieferscheinPo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vFulfillerLieferscheinPos", "FulfillmentNetwork");

            entity.Property(e => e.CBatch)
                .HasMaxLength(255)
                .HasColumnName("cBatch");
            entity.Property(e => e.CJfsku)
                .HasMaxLength(255)
                .HasColumnName("cJfsku");
            entity.Property(e => e.CNote)
                .HasMaxLength(4000)
                .HasColumnName("cNote");
            entity.Property(e => e.CSerialNumbers).HasColumnName("cSerialNumbers");
            entity.Property(e => e.DBestBefore)
                .HasColumnType("datetime")
                .HasColumnName("dBestBefore");
            entity.Property(e => e.FQuantity)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fQuantity");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");
            entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");
            entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");
        });

        modelBuilder.Entity<VFulfillerLieferscheinWarehouseInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vFulfillerLieferscheinWarehouseInfo", "FulfillmentNetwork");

            entity.Property(e => e.CBestellNr)
                .HasMaxLength(50)
                .HasColumnName("cBestellNr");
            entity.Property(e => e.CLieferscheinNr)
                .HasMaxLength(50)
                .HasColumnName("cLieferscheinNr");
            entity.Property(e => e.COutboundId)
                .HasMaxLength(255)
                .HasColumnName("cOutboundId");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");
            entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");
            entity.Property(e => e.NLagerplatzVerwaltung).HasColumnName("nLagerplatzVerwaltung");
        });

        modelBuilder.Entity<VFulfillerOutboundInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vFulfillerOutboundInfo", "FulfillmentNetwork");

            entity.Property(e => e.CBestellNr)
                .HasMaxLength(50)
                .HasColumnName("cBestellNr");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KLieferadresse).HasColumnName("kLieferadresse");
            entity.Property(e => e.KRechnugnsadresse).HasColumnName("kRechnugnsadresse");
            entity.Property(e => e.KVersandArt).HasColumnName("kVersandArt");
            entity.Property(e => e.NStorno).HasColumnName("nStorno");
            entity.Property(e => e.OutboundId).HasMaxLength(255);
            entity.Property(e => e.WarehouseId).HasMaxLength(255);
        });

        modelBuilder.Entity<VFulfillerPackage>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vFulfillerPackages", "FulfillmentNetwork");

            entity.Property(e => e.CEnclosedReturnIdentCode)
                .HasMaxLength(255)
                .HasColumnName("cEnclosedReturnIdentCode");
            entity.Property(e => e.CNote)
                .HasMaxLength(255)
                .HasColumnName("cNote");
            entity.Property(e => e.CShipmentId)
                .HasMaxLength(50)
                .HasColumnName("cShipmentId");
            entity.Property(e => e.CShipmentOrderId)
                .HasMaxLength(100)
                .HasColumnName("cShipmentOrderId");
            entity.Property(e => e.CTrackingId)
                .HasMaxLength(255)
                .HasColumnName("cTrackingId");
            entity.Property(e => e.DEstimatedDeliveryTime)
                .HasColumnType("datetime")
                .HasColumnName("dEstimatedDeliveryTime");
            entity.Property(e => e.DShippingDate)
                .HasColumnType("datetime")
                .HasColumnName("dShippingDate");
            entity.Property(e => e.FWeight)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWeight");
            entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");
            entity.Property(e => e.KVersand)
                .ValueGeneratedOnAdd()
                .HasColumnName("kVersand");
            entity.Property(e => e.KVersandArt).HasColumnName("kVersandArt");
        });

        modelBuilder.Entity<VFulfillerPendingLieferscheine>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vFulfillerPendingLieferscheine", "FulfillmentNetwork");

            entity.Property(e => e.CFulfillerShippingNotificationNumber)
                .HasMaxLength(50)
                .HasColumnName("cFulfillerShippingNotificationNumber");
            entity.Property(e => e.CNote)
                .HasMaxLength(255)
                .HasColumnName("cNote");
            entity.Property(e => e.COutboundId)
                .HasMaxLength(255)
                .HasColumnName("cOutboundId");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");
        });

        modelBuilder.Entity<VFulfillerProductPicture>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vFulfillerProductPicture", "FulfillmentNetwork");

            entity.Property(e => e.BBild)
                .HasColumnType("image")
                .HasColumnName("bBild");
            entity.Property(e => e.BBildRowVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bBildRowVersion");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KArtikelbildPlattform).HasColumnName("kArtikelbildPlattform");
            entity.Property(e => e.KBild).HasColumnName("kBild");
            entity.Property(e => e.KEbayUser).HasColumnName("kEbayUser");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NNr).HasColumnName("nNr");
        });

        modelBuilder.Entity<VFulfillerReturn>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vFulfillerReturn", "FulfillmentNetwork");

            entity.Property(e => e.Ansprechpartner).HasMaxLength(255);
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.KRmRetoure).HasColumnName("kRmRetoure");
            entity.Property(e => e.KRmretoureAbholAdresse).HasColumnName("kRMRetoureAbholAdresse");
            entity.Property(e => e.MerchantId).HasMaxLength(64);
            entity.Property(e => e.RetoureNr).HasMaxLength(255);
            entity.Property(e => e.ReturnId).HasMaxLength(255);
            entity.Property(e => e.ReturnReferenceWarehouseId).HasMaxLength(255);
            entity.Property(e => e.WarehouseId).HasMaxLength(50);
        });

        modelBuilder.Entity<VFulfillerReturnItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vFulfillerReturnItem", "FulfillmentNetwork");

            entity.Property(e => e.ApiQuantity).HasColumnType("decimal(28, 14)");
            entity.Property(e => e.Jfsku).HasMaxLength(255);
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KRmretoure).HasColumnName("kRMRetoure");
            entity.Property(e => e.KRmretourePos).HasColumnName("kRMRetourePos");
            entity.Property(e => e.KZustand).HasColumnName("kZustand");
            entity.Property(e => e.MerchantSku).HasMaxLength(255);
            entity.Property(e => e.OutboundId).HasMaxLength(255);
            entity.Property(e => e.OutboundItemId)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ReturnId).HasMaxLength(255);
            entity.Property(e => e.ReturnItemId).HasMaxLength(255);
            entity.Property(e => e.WawiQuantity).HasColumnType("decimal(25, 13)");
        });

        modelBuilder.Entity<VFulfillmentKunde>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vFulfillmentKunde", "FulfillmentNetwork");

            entity.Property(e => e.CAdressZusatz)
                .HasMaxLength(255)
                .HasColumnName("cAdressZusatz");
            entity.Property(e => e.CAnrede)
                .HasMaxLength(30)
                .HasColumnName("cAnrede");
            entity.Property(e => e.CBundesland)
                .HasMaxLength(255)
                .HasColumnName("cBundesland");
            entity.Property(e => e.CEmail)
                .HasMaxLength(255)
                .HasColumnName("cEMail");
            entity.Property(e => e.CFax)
                .HasMaxLength(30)
                .HasColumnName("cFax");
            entity.Property(e => e.CFirma)
                .HasMaxLength(128)
                .HasColumnName("cFirma");
            entity.Property(e => e.CFulfillmentSupplierId)
                .HasMaxLength(64)
                .HasColumnName("cFulfillmentSupplierId");
            entity.Property(e => e.CIso)
                .HasMaxLength(5)
                .HasColumnName("cISO");
            entity.Property(e => e.CKategorie)
                .HasMaxLength(128)
                .HasColumnName("cKategorie");
            entity.Property(e => e.CKundenNr)
                .HasMaxLength(30)
                .HasColumnName("cKundenNr");
            entity.Property(e => e.CLand)
                .HasMaxLength(255)
                .HasColumnName("cLand");
            entity.Property(e => e.CMobil)
                .HasMaxLength(30)
                .HasColumnName("cMobil");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPlz)
                .HasMaxLength(24)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CPostId)
                .HasMaxLength(255)
                .HasColumnName("cPostID");
            entity.Property(e => e.CPrefixAbrechnung)
                .HasMaxLength(12)
                .HasColumnName("cPrefixAbrechnung");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CSuffixAbrechnung)
                .HasMaxLength(12)
                .HasColumnName("cSuffixAbrechnung");
            entity.Property(e => e.CTel)
                .HasMaxLength(30)
                .HasColumnName("cTel");
            entity.Property(e => e.CTitel)
                .HasMaxLength(64)
                .HasColumnName("cTitel");
            entity.Property(e => e.CVorname)
                .HasMaxLength(255)
                .HasColumnName("cVorname");
            entity.Property(e => e.CZusatz)
                .HasMaxLength(60)
                .HasColumnName("cZusatz");
            entity.Property(e => e.DAbrechnungEnde)
                .HasColumnType("datetime")
                .HasColumnName("dAbrechnungEnde");
            entity.Property(e => e.DAbrechnungInitial)
                .HasColumnType("datetime")
                .HasColumnName("dAbrechnungInitial");
            entity.Property(e => e.DAbrechnungStart)
                .HasColumnType("datetime")
                .HasColumnName("dAbrechnungStart");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.KAbrechnung).HasColumnName("kAbrechnung");
            entity.Property(e => e.KFulfillerEinstellungen).HasColumnName("kFulfillerEinstellungen");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KKundeFirma).HasColumnName("kKundeFirma");
            entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");
            entity.Property(e => e.KKundenKategorie).HasColumnName("kKundenKategorie");
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.NAbrechnungsZeitraum).HasColumnName("nAbrechnungsZeitraum");
            entity.Property(e => e.NBestandserfassungModus).HasColumnName("nBestandserfassungModus");
            entity.Property(e => e.NStandardFirma).HasColumnName("nStandardFirma");
        });

        modelBuilder.Entity<VGlobaleTexte>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vGlobaleTexte");

            entity.Property(e => e.CBeschreibung)
                .HasMaxLength(1000)
                .HasColumnName("cBeschreibung");
            entity.Property(e => e.CGruppeName)
                .HasMaxLength(4000)
                .HasColumnName("cGruppeName");
            entity.Property(e => e.CName)
                .HasMaxLength(4000)
                .HasColumnName("cName");
            entity.Property(e => e.CNameDeu)
                .HasMaxLength(255)
                .HasColumnName("cNameDeu");
            entity.Property(e => e.CWertVarchar).HasColumnName("cWertVarchar");
            entity.Property(e => e.KAttribut).HasColumnName("kAttribut");
            entity.Property(e => e.KWawiAttribut).HasColumnName("kWawiAttribut");
        });

        modelBuilder.Entity<VGlobalsQueue>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vGlobalsQueue", "DbeS");

            entity.Property(e => e.CName)
                .HasMaxLength(64)
                .HasColumnName("cName");
            entity.Property(e => e.CText).HasColumnName("cText");
            entity.Property(e => e.KKey).HasColumnName("kKey");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NType).HasColumnName("nType");
        });

        modelBuilder.Entity<VGutschein>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vGutschein", "Artikel");

            entity.Property(e => e.CIso)
                .HasMaxLength(5)
                .HasColumnName("cIso");
            entity.Property(e => e.CKampagne)
                .HasMaxLength(255)
                .HasColumnName("cKampagne");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KVorlagenset).HasColumnName("kVorlagenset");
            entity.Property(e => e.NArt).HasColumnName("nArt");
            entity.Property(e => e.NAusgabeart).HasColumnName("nAusgabeart");
            entity.Property(e => e.NBetrag)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("nBetrag");
            entity.Property(e => e.NHatFestenBetrag).HasColumnName("nHatFestenBetrag");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<VGutschein1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vGutschein", "DbeS");

            entity.Property(e => e.CGrund)
                .HasMaxLength(1024)
                .HasColumnName("cGrund");
            entity.Property(e => e.FWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWert");
            entity.Property(e => e.KGutschein).HasColumnName("kGutschein");
            entity.Property(e => e.KInetKunde).HasColumnName("kInetKunde");
            entity.Property(e => e.KShop).HasColumnName("kShop");
        });

        modelBuilder.Entity<VGutschriftLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vGutschriftLog", "Logging");

            entity.Property(e => e.BLastRowVersion)
                .HasMaxLength(8)
                .IsFixedLength()
                .HasColumnName("bLastRowVersion");
            entity.Property(e => e.BRowVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowVersion");
            entity.Property(e => e.BXml).HasColumnName("bXML");
            entity.Property(e => e.CAppName)
                .HasMaxLength(128)
                .HasColumnName("cAppName");
            entity.Property(e => e.CGutschriftNr)
                .HasMaxLength(50)
                .HasColumnName("cGutschriftNr");
            entity.Property(e => e.CGutschriftType)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("cGutschriftType");
            entity.Property(e => e.CLogTyp)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("cLogTyp");
            entity.Property(e => e.CPrüfStatus)
                .HasMaxLength(75)
                .HasColumnName("cPrüfStatus");
            entity.Property(e => e.CXml)
                .HasColumnType("xml")
                .HasColumnName("cXML");
            entity.Property(e => e.DErstelltUtc).HasColumnName("dErstelltUtc");
            entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");
            entity.Property(e => e.KGutschriftLog)
                .ValueGeneratedOnAdd()
                .HasColumnName("kGutschriftLog");
            entity.Property(e => e.NGutschriftType).HasColumnName("nGutschriftType");
            entity.Property(e => e.NLogAbstand).HasColumnName("nLogAbstand");
            entity.Property(e => e.NLogTyp).HasColumnName("nLogTyp");
        });

        modelBuilder.Entity<VGutschriftStornierbar>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vGutschriftStornierbar");

            entity.Property(e => e.CGutschriftNr)
                .HasMaxLength(50)
                .HasColumnName("cGutschriftNr");
            entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");
            entity.Property(e => e.NError).HasColumnName("nError");
        });

        modelBuilder.Entity<VHealthCheck>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vHealthCheck", "Maintenance");

            entity.Property(e => e.CBezugsObjekt)
                .HasMaxLength(255)
                .HasColumnName("cBezugsObjekt");
            entity.Property(e => e.CFehlercode)
                .HasMaxLength(30)
                .HasColumnName("cFehlercode");
            entity.Property(e => e.CHerkunftText)
                .HasMaxLength(221)
                .HasColumnName("cHerkunftText");
            entity.Property(e => e.CLink).HasColumnName("cLink");
            entity.Property(e => e.CMeldung)
                .HasMaxLength(2048)
                .HasColumnName("cMeldung");
            entity.Property(e => e.CObjekt)
                .HasMaxLength(255)
                .HasColumnName("cObjekt");
            entity.Property(e => e.CObjektDetailIst).HasColumnName("cObjektDetailIst");
            entity.Property(e => e.CObjektDetailSoll).HasColumnName("cObjektDetailSoll");
            entity.Property(e => e.CObjektReparatur).HasColumnName("cObjektReparatur");
            entity.Property(e => e.CObjektTyp)
                .HasMaxLength(20)
                .HasColumnName("cObjektTyp");
            entity.Property(e => e.CSchweregrad)
                .HasMaxLength(10)
                .HasColumnName("cSchweregrad");
            entity.Property(e => e.DErstelltUtc).HasColumnName("dErstelltUtc");
            entity.Property(e => e.KHc)
                .ValueGeneratedOnAdd()
                .HasColumnName("kHC");
        });

        modelBuilder.Entity<VHealthCheckSchema>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vHealthCheck_Schema", "Maintenance");

            entity.Property(e => e.CCreateScript).HasColumnName("cCreateScript");
            entity.Property(e => e.CDropScript)
                .HasMaxLength(805)
                .HasColumnName("cDropScript");
            entity.Property(e => e.CObjectId)
                .HasMaxLength(785)
                .HasColumnName("cObjectID");
            entity.Property(e => e.CObjectName)
                .HasMaxLength(258)
                .HasColumnName("cObjectName");
            entity.Property(e => e.CObjectType)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("cObjectType");
            entity.Property(e => e.CObjectTypeDesc)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("cObjectTypeDesc");
            entity.Property(e => e.CParentObjectName)
                .HasMaxLength(517)
                .HasColumnName("cParentObjectName");
            entity.Property(e => e.CSchemaName)
                .HasMaxLength(258)
                .HasColumnName("cSchemaName");
        });

        modelBuilder.Entity<VHersteller>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vHersteller", "DbeS");

            entity.Property(e => e.CHomepage)
                .HasMaxLength(255)
                .HasColumnName("cHomepage");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CSeo)
                .HasMaxLength(256)
                .HasColumnName("cSeo");
            entity.Property(e => e.KHersteller).HasColumnName("kHersteller");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<VHerstellerBild>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vHerstellerBild", "DbeS");

            entity.Property(e => e.BBild)
                .HasColumnType("image")
                .HasColumnName("bBild");
            entity.Property(e => e.CHash)
                .HasMaxLength(255)
                .HasColumnName("cHash");
            entity.Property(e => e.KBild).HasColumnName("kBild");
            entity.Property(e => e.KHersteller).HasColumnName("kHersteller");
            entity.Property(e => e.KHerstellerBildPlattform).HasColumnName("kHerstellerBildPlattform");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NDateigroesse).HasColumnName("nDateigroesse");
            entity.Property(e => e.NInet).HasColumnName("nInet");
        });

        modelBuilder.Entity<VHerstellerSprache>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vHerstellerSprache", "DbeS");

            entity.Property(e => e.CBeschreibung).HasColumnName("cBeschreibung");
            entity.Property(e => e.CMetaDescription).HasColumnName("cMetaDescription");
            entity.Property(e => e.CMetaKeywords)
                .HasMaxLength(512)
                .HasColumnName("cMetaKeywords");
            entity.Property(e => e.CMetaTitle)
                .HasMaxLength(255)
                .HasColumnName("cMetaTitle");
            entity.Property(e => e.CSeo)
                .HasMaxLength(256)
                .HasColumnName("cSeo");
            entity.Property(e => e.KHersteller).HasColumnName("kHersteller");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
        });

        modelBuilder.Entity<VIduUpload>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vIduUpload", "Amazon");

            entity.Property(e => e.BData).HasColumnName("bData");
            entity.Property(e => e.CBelegnummer)
                .HasMaxLength(50)
                .HasColumnName("cBelegnummer");
            entity.Property(e => e.CBezugsbelegnummer)
                .HasMaxLength(50)
                .HasColumnName("cBezugsbelegnummer");
            entity.Property(e => e.CFileName)
                .HasMaxLength(250)
                .HasColumnName("cFileName");
            entity.Property(e => e.COrderId)
                .HasMaxLength(30)
                .HasColumnName("cOrderId");
            entity.Property(e => e.DFileErstelltUtc).HasColumnName("dFileErstelltUtc");
            entity.Property(e => e.KBeleg).HasColumnName("kBeleg");
            entity.Property(e => e.KFile).HasColumnName("kFile");
            entity.Property(e => e.KIduUploadQueue).HasColumnName("kIduUploadQueue");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.NBelegtyp).HasColumnName("nBelegtyp");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
            entity.Property(e => e.NUploadVersuche).HasColumnName("nUploadVersuche");
        });

        modelBuilder.Entity<VInAuftraegen>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vInAuftraegen", "Bestand");

            entity.Property(e => e.FInAuftraegen)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fInAuftraegen");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
        });

        modelBuilder.Entity<VIndividuellePreise>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vIndividuellePreise", "Preisliste");

            entity.Property(e => e.FNettoPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fNettoPreis");
            entity.Property(e => e.FProzent)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fProzent");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NAnzahlAb).HasColumnName("nAnzahlAb");
        });

        modelBuilder.Entity<VInetKundeShop>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vInetKundeShop", "DbeS");

            entity.Property(e => e.CInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cInet");
            entity.Property(e => e.CShopKundenNr)
                .HasMaxLength(30)
                .HasColumnName("cShopKundenNr");
            entity.Property(e => e.DKundeSeit)
                .HasMaxLength(11)
                .HasColumnName("dKundeSeit");
            entity.Property(e => e.KInetKunde).HasColumnName("kInetKunde");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NRegistriert).HasColumnName("nRegistriert");
        });

        modelBuilder.Entity<VInitialize>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vInitialize", "DbeS");

            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KInetAdresse).HasColumnName("kInetAdresse");
            entity.Property(e => e.KInetKunde).HasColumnName("kInetKunde");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KZahlungseingang).HasColumnName("kZahlungseingang");
        });

        modelBuilder.Entity<VInventur>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vInventur");

            entity.Property(e => e.FBestand)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fBestand");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
        });

        modelBuilder.Entity<VInvoiceCorrectionUploadMetaDatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vInvoiceCorrectionUploadMetaData", "SCX");

            entity.Property(e => e.CChannel)
                .HasMaxLength(15)
                .HasColumnName("cChannel");
            entity.Property(e => e.CExterneAuftragsnummer)
                .HasMaxLength(50)
                .HasColumnName("cExterneAuftragsnummer");
            entity.Property(e => e.CGutschriftNr)
                .HasMaxLength(50)
                .HasColumnName("cGutschriftNr");
            entity.Property(e => e.CSellerId)
                .HasMaxLength(50)
                .HasColumnName("cSellerId");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");
            entity.Property(e => e.KOrder).HasColumnName("kOrder");
            entity.Property(e => e.KUploadData).HasColumnName("kUploadData");
            entity.Property(e => e.NType).HasColumnName("nType");
        });

        modelBuilder.Entity<VKategorie>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vKategorie", "DbeS");

            entity.Property(e => e.CAktiv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAktiv");
            entity.Property(e => e.CBeschreibung).HasColumnName("cBeschreibung");
            entity.Property(e => e.CKategorieDelInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cKategorieDelInet");
            entity.Property(e => e.CKategorieInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cKategorieInet");
            entity.Property(e => e.CKategorieShopDelInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cKategorieShopDelInet");
            entity.Property(e => e.CKategorieShopInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cKategorieShopInet");
            entity.Property(e => e.CMetaDescription).HasColumnName("cMetaDescription");
            entity.Property(e => e.CMetaKeywords)
                .HasMaxLength(4000)
                .HasColumnName("cMetaKeywords");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CTitleTag)
                .HasMaxLength(4000)
                .HasColumnName("cTitleTag");
            entity.Property(e => e.CUrlPfad)
                .HasMaxLength(255)
                .HasColumnName("cUrlPfad");
            entity.Property(e => e.KKategorie).HasColumnName("kKategorie");
            entity.Property(e => e.KOberKategorie).HasColumnName("kOberKategorie");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.NInBearbeitung).HasColumnName("nInBearbeitung");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<VKategorieArtikel>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vKategorieArtikel", "DbeS");

            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KKategorie).HasColumnName("kKategorie");
            entity.Property(e => e.KKategorieArtikel).HasColumnName("kKategorieArtikel");
            entity.Property(e => e.KShop).HasColumnName("kShop");
        });

        modelBuilder.Entity<VKategorieAttributEinsprachig>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vKategorieAttributEinsprachig", "DbeS");

            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CWertVarchar).HasColumnName("cWertVarchar");
            entity.Property(e => e.DWertDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dWertDateTime");
            entity.Property(e => e.FWertDecimal)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertDecimal");
            entity.Property(e => e.KKategorie).HasColumnName("kKategorie");
            entity.Property(e => e.KKategorieAttribut).HasColumnName("kKategorieAttribut");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.NDatenTyp).HasColumnName("nDatenTyp");
            entity.Property(e => e.NSortierung).HasColumnName("nSortierung");
            entity.Property(e => e.NWertInt).HasColumnName("nWertInt");
        });

        modelBuilder.Entity<VKategorieAttributMehrsprachig>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vKategorieAttributMehrsprachig", "DbeS");

            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CWertVarchar).HasColumnName("cWertVarchar");
            entity.Property(e => e.DWertDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dWertDateTime");
            entity.Property(e => e.FWertDecimal)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertDecimal");
            entity.Property(e => e.KKategorie).HasColumnName("kKategorie");
            entity.Property(e => e.KKategorieAttribut).HasColumnName("kKategorieAttribut");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.NDatenTyp).HasColumnName("nDatenTyp");
            entity.Property(e => e.NSortierung).HasColumnName("nSortierung");
            entity.Property(e => e.NStandard).HasColumnName("nStandard");
            entity.Property(e => e.NWertInt).HasColumnName("nWertInt");
        });

        modelBuilder.Entity<VKategorieBild>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vKategorieBild", "DbeS");

            entity.Property(e => e.BBild)
                .HasColumnType("image")
                .HasColumnName("bBild");
            entity.Property(e => e.CHash)
                .HasMaxLength(255)
                .HasColumnName("cHash");
            entity.Property(e => e.KBild).HasColumnName("kBild");
            entity.Property(e => e.KKategorie).HasColumnName("kKategorie");
            entity.Property(e => e.KKategoriebildPlattform).HasColumnName("kKategoriebildPlattform");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NDateigroesse).HasColumnName("nDateigroesse");
            entity.Property(e => e.NInet).HasColumnName("nInet");
        });

        modelBuilder.Entity<VKategorieDelete>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vKategorieDelete", "DbeS");

            entity.Property(e => e.KKategorie).HasColumnName("kKategorie");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NInBearbeitung).HasColumnName("nInBearbeitung");
            entity.Property(e => e.NType).HasColumnName("nType");
        });

        modelBuilder.Entity<VKategorieRabatt>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vKategorieRabatt", "DbeS");

            entity.Property(e => e.FRabatt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabatt");
            entity.Property(e => e.KKategorie).HasColumnName("kKategorie");
            entity.Property(e => e.KKundengruppe).HasColumnName("kKundengruppe");
            entity.Property(e => e.KShop).HasColumnName("kShop");
        });

        modelBuilder.Entity<VKategorieSichtbarkeit>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vKategorieSichtbarkeit", "DbeS");

            entity.Property(e => e.KKategorie).HasColumnName("kKategorie");
            entity.Property(e => e.KKundengruppe).HasColumnName("kKundengruppe");
            entity.Property(e => e.KShop).HasColumnName("kShop");
        });

        modelBuilder.Entity<VKategorieSprache>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vKategorieSprache", "DbeS");

            entity.Property(e => e.CBeschreibung).HasColumnName("cBeschreibung");
            entity.Property(e => e.CMetaDescription).HasColumnName("cMetaDescription");
            entity.Property(e => e.CMetaKeywords)
                .HasMaxLength(4000)
                .HasColumnName("cMetaKeywords");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CTitleTag)
                .HasMaxLength(4000)
                .HasColumnName("cTitleTag");
            entity.Property(e => e.CUrlPfad)
                .HasMaxLength(255)
                .HasColumnName("cUrlPfad");
            entity.Property(e => e.KKategorie).HasColumnName("kKategorie");
            entity.Property(e => e.KPlattfrom).HasColumnName("kPlattfrom");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
        });

        modelBuilder.Entity<VKategorien>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vKategorien");

            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KKategorie).HasColumnName("kKategorie");
            entity.Property(e => e.Pfad).HasMaxLength(255);
            entity.Property(e => e.Sort).HasMaxLength(255);
        });

        modelBuilder.Entity<VKategorienMitSubKategorien>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vKategorienMitSubKategorien", "ArtikelVerwaltung");

            entity.Property(e => e.KKategorie).HasColumnName("kKategorie");
        });

        modelBuilder.Entity<VKonfigGruppe>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vKonfigGruppe", "DbeS");

            entity.Property(e => e.CKommentar)
                .HasMaxLength(255)
                .HasColumnName("cKommentar");
            entity.Property(e => e.KKonfiggruppe).HasColumnName("kKonfiggruppe");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NDeleted).HasColumnName("nDeleted");
            entity.Property(e => e.NMax).HasColumnName("nMax");
            entity.Property(e => e.NMin).HasColumnName("nMin");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<VKonfigGruppeSprache>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vKonfigGruppeSprache", "DbeS");

            entity.Property(e => e.CBeschreibung).HasColumnName("cBeschreibung");
            entity.Property(e => e.CName).HasColumnName("cName");
            entity.Property(e => e.KKonfiggruppe).HasColumnName("kKonfiggruppe");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
        });

        modelBuilder.Entity<VKonfigItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vKonfigItem", "DbeS");

            entity.Property(e => e.BEmpfohlen).HasColumnName("bEmpfohlen");
            entity.Property(e => e.BIgnoreMultiplier).HasColumnName("bIgnoreMultiplier");
            entity.Property(e => e.BName).HasColumnName("bName");
            entity.Property(e => e.BPreis).HasColumnName("bPreis");
            entity.Property(e => e.BRabatt).HasColumnName("bRabatt");
            entity.Property(e => e.BSelektiert).HasColumnName("bSelektiert");
            entity.Property(e => e.BZuschlag).HasColumnName("bZuschlag");
            entity.Property(e => e.FInitial)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fInitial");
            entity.Property(e => e.FMax)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMax");
            entity.Property(e => e.FMin)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMin");
            entity.Property(e => e.FStandardpreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fStandardpreis");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KKonfiggruppe).HasColumnName("kKonfiggruppe");
            entity.Property(e => e.KKonfigitem)
                .ValueGeneratedOnAdd()
                .HasColumnName("kKonfigitem");
            entity.Property(e => e.NPosTyp).HasColumnName("nPosTyp");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<VKonfigItemPrei>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vKonfigItemPreis", "DbeS");

            entity.Property(e => e.FPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPreis");
            entity.Property(e => e.KKonfigitem).HasColumnName("kKonfigitem");
            entity.Property(e => e.KKundengruppe).HasColumnName("kKundengruppe");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<VKonfigItemSprache>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vKonfigItemSprache", "DbeS");

            entity.Property(e => e.CBeschreibung).HasColumnName("cBeschreibung");
            entity.Property(e => e.CName).HasColumnName("cName");
            entity.Property(e => e.KKonfigitem).HasColumnName("kKonfigitem");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
        });

        modelBuilder.Entity<VKunde>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vKunde", "DbeS");

            entity.Property(e => e.CEbayName)
                .HasMaxLength(255)
                .HasColumnName("cEbayName");
            entity.Property(e => e.CGeburtstag)
                .HasMaxLength(10)
                .HasColumnName("cGeburtstag");
            entity.Property(e => e.CHerkunft)
                .HasMaxLength(255)
                .HasColumnName("cHerkunft");
            entity.Property(e => e.CHrnr)
                .HasMaxLength(255)
                .HasColumnName("cHRNr");
            entity.Property(e => e.CKassenKunde)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cKassenKunde");
            entity.Property(e => e.CKundenNr)
                .HasMaxLength(30)
                .HasColumnName("cKundenNr");
            entity.Property(e => e.CNewsletter)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cNewsletter");
            entity.Property(e => e.CSperre)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cSperre");
            entity.Property(e => e.CSteuerNr)
                .HasMaxLength(255)
                .HasColumnName("cSteuerNr");
            entity.Property(e => e.CWww)
                .HasMaxLength(255)
                .HasColumnName("cWWW");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.FProvision)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fProvision");
            entity.Property(e => e.FRabatt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabatt");
            entity.Property(e => e.FSkonto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fSkonto");
            entity.Property(e => e.KBuyer).HasColumnName("kBuyer");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KInetKunde).HasColumnName("kInetKunde");
            entity.Property(e => e.KKunde)
                .ValueGeneratedOnAdd()
                .HasColumnName("kKunde");
            entity.Property(e => e.KKundenDrucktext).HasColumnName("kKundenDrucktext");
            entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");
            entity.Property(e => e.KKundenKategorie).HasColumnName("kKundenKategorie");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");
            entity.Property(e => e.NDebitorennr).HasColumnName("nDebitorennr");
            entity.Property(e => e.NKreditlimit).HasColumnName("nKreditlimit");
            entity.Property(e => e.NMahnrhythmus).HasColumnName("nMahnrhythmus");
            entity.Property(e => e.NMahnstopp).HasColumnName("nMahnstopp");
            entity.Property(e => e.NSkontoInTagen).HasColumnName("nSkontoInTagen");
            entity.Property(e => e.NVertreter).HasColumnName("nVertreter");
            entity.Property(e => e.NZahlungsziel).HasColumnName("nZahlungsziel");
        });

        modelBuilder.Entity<VKunde1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vKunde", "DEPRECATED");

            entity.Property(e => e.CAdressZusatz)
                .HasMaxLength(255)
                .HasColumnName("cAdressZusatz");
            entity.Property(e => e.CAktiv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("cAktiv");
            entity.Property(e => e.CAnmerkung)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("cAnmerkung");
            entity.Property(e => e.CAnrede)
                .HasMaxLength(30)
                .HasColumnName("cAnrede");
            entity.Property(e => e.CBundesland)
                .HasMaxLength(255)
                .HasColumnName("cBundesland");
            entity.Property(e => e.CEbayName)
                .HasMaxLength(255)
                .HasColumnName("cEbayName");
            entity.Property(e => e.CEmail)
                .HasMaxLength(255)
                .HasColumnName("cEmail");
            entity.Property(e => e.CFax)
                .HasMaxLength(30)
                .HasColumnName("cFax");
            entity.Property(e => e.CFirma)
                .HasMaxLength(128)
                .HasColumnName("cFirma");
            entity.Property(e => e.CGeburtstag)
                .HasMaxLength(10)
                .HasColumnName("cGeburtstag");
            entity.Property(e => e.CHaendler)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cHaendler");
            entity.Property(e => e.CHerkunft)
                .HasMaxLength(255)
                .HasColumnName("cHerkunft");
            entity.Property(e => e.CHrnr)
                .HasMaxLength(255)
                .HasColumnName("cHRNr");
            entity.Property(e => e.CIso)
                .HasMaxLength(5)
                .HasColumnName("cISO");
            entity.Property(e => e.CKassenKunde)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cKassenKunde");
            entity.Property(e => e.CKundenNr)
                .HasMaxLength(30)
                .HasColumnName("cKundenNr");
            entity.Property(e => e.CLand)
                .HasMaxLength(255)
                .HasColumnName("cLand");
            entity.Property(e => e.CMobil)
                .HasMaxLength(30)
                .HasColumnName("cMobil");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CNewsletter)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cNewsletter");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPlz)
                .HasMaxLength(24)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CPostId)
                .HasMaxLength(255)
                .HasColumnName("cPostID");
            entity.Property(e => e.CSperre)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cSperre");
            entity.Property(e => e.CStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("cStatus");
            entity.Property(e => e.CSteuerNr)
                .HasMaxLength(255)
                .HasColumnName("cSteuerNr");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTel)
                .HasMaxLength(30)
                .HasColumnName("cTel");
            entity.Property(e => e.CTitel)
                .HasMaxLength(64)
                .HasColumnName("cTitel");
            entity.Property(e => e.CUstid)
                .HasMaxLength(20)
                .HasColumnName("cUSTID");
            entity.Property(e => e.CVorname)
                .HasMaxLength(255)
                .HasColumnName("cVorname");
            entity.Property(e => e.CWww)
                .HasMaxLength(255)
                .HasColumnName("cWWW");
            entity.Property(e => e.CZhaenden)
                .HasMaxLength(60)
                .HasColumnName("cZHaenden");
            entity.Property(e => e.CZusatz)
                .HasMaxLength(60)
                .HasColumnName("cZusatz");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.FProvision)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fProvision");
            entity.Property(e => e.FRabatt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabatt");
            entity.Property(e => e.FSkonto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fSkonto");
            entity.Property(e => e.KBuyer).HasColumnName("kBuyer");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KInetKunde).HasColumnName("kInetKunde");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KKundenDrucktext).HasColumnName("kKundenDrucktext");
            entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");
            entity.Property(e => e.KKundenKategorie).HasColumnName("kKundenKategorie");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");
            entity.Property(e => e.NDebitorennr).HasColumnName("nDebitorennr");
            entity.Property(e => e.NDrittland).HasColumnName("nDrittland");
            entity.Property(e => e.NKreditlimit).HasColumnName("nKreditlimit");
            entity.Property(e => e.NMahnrhythmus).HasColumnName("nMahnrhythmus");
            entity.Property(e => e.NMahnstopp).HasColumnName("nMahnstopp");
            entity.Property(e => e.NSkontoInTagen).HasColumnName("nSkontoInTagen");
            entity.Property(e => e.NVertreter).HasColumnName("nVertreter");
            entity.Property(e => e.NZahlungsziel).HasColumnName("nZahlungsziel");
        });

        modelBuilder.Entity<VKundenAttribut>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vKundenAttribut", "DbeS");

            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CWert).HasColumnName("cWert");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
        });

        modelBuilder.Entity<VKundenAttribute>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vKundenAttribute", "DEPRECATED");

            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CValue).HasColumnName("cValue");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
        });

        modelBuilder.Entity<VKundenGruppeShop>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vKundenGruppeShop", "Kunde");

            entity.Property(e => e.CShopKundenNr)
                .HasMaxLength(30)
                .HasColumnName("cShopKundenNr");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DKundeSeit)
                .HasMaxLength(11)
                .HasColumnName("dKundeSeit");
            entity.Property(e => e.FWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWert");
            entity.Property(e => e.GutscheinGrund).HasMaxLength(1024);
            entity.Property(e => e.KGutschein).HasColumnName("kGutschein");
            entity.Property(e => e.KInetKunde).HasColumnName("kInetKunde");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.Kundengruppe).HasMaxLength(255);
            entity.Property(e => e.NRegistriert).HasColumnName("nRegistriert");
            entity.Property(e => e.ShopName).HasMaxLength(255);
        });

        modelBuilder.Entity<VKundenGruppeShopVerfuegbar>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vKundenGruppeShopVerfuegbar", "Kunde");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CWebShop)
                .HasMaxLength(255)
                .HasColumnName("cWebShop");
            entity.Property(e => e.FRabatt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabatt");
            entity.Property(e => e.KKundenDrucktext).HasColumnName("kKundenDrucktext");
            entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");
            entity.Property(e => e.KWebShop).HasColumnName("kWebShop");
            entity.Property(e => e.NNettoPreise).HasColumnName("nNettoPreise");
            entity.Property(e => e.NRabattVeraendert).HasColumnName("nRabattVeraendert");
            entity.Property(e => e.NShopLogin).HasColumnName("nShopLogin");
            entity.Property(e => e.NStandard).HasColumnName("nStandard");
        });

        modelBuilder.Entity<VKundenRechnungsadresse>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vKundenRechnungsadresse", "DbeS");

            entity.Property(e => e.CAdressZusatz)
                .HasMaxLength(255)
                .HasColumnName("cAdressZusatz");
            entity.Property(e => e.CAnrede)
                .HasMaxLength(30)
                .HasColumnName("cAnrede");
            entity.Property(e => e.CBundesland)
                .HasMaxLength(255)
                .HasColumnName("cBundesland");
            entity.Property(e => e.CFax)
                .HasMaxLength(30)
                .HasColumnName("cFax");
            entity.Property(e => e.CFirma)
                .HasMaxLength(128)
                .HasColumnName("cFirma");
            entity.Property(e => e.CIso)
                .HasMaxLength(5)
                .HasColumnName("cISO");
            entity.Property(e => e.CLand)
                .HasMaxLength(255)
                .HasColumnName("cLand");
            entity.Property(e => e.CMail)
                .HasMaxLength(255)
                .HasColumnName("cMail");
            entity.Property(e => e.CMobil)
                .HasMaxLength(30)
                .HasColumnName("cMobil");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPlz)
                .HasMaxLength(24)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CPostId)
                .HasMaxLength(255)
                .HasColumnName("cPostID");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTel)
                .HasMaxLength(30)
                .HasColumnName("cTel");
            entity.Property(e => e.CTitel)
                .HasMaxLength(64)
                .HasColumnName("cTitel");
            entity.Property(e => e.CUstid)
                .HasMaxLength(20)
                .HasColumnName("cUSTID");
            entity.Property(e => e.CVorname)
                .HasMaxLength(255)
                .HasColumnName("cVorname");
            entity.Property(e => e.CZusatz)
                .HasMaxLength(60)
                .HasColumnName("cZusatz");
            entity.Property(e => e.KAdresse)
                .ValueGeneratedOnAdd()
                .HasColumnName("kAdresse");
            entity.Property(e => e.KInetAdresse).HasColumnName("kInetAdresse");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.NStandard).HasColumnName("nStandard");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<VKundengruppe>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vKundengruppe", "DbeS");

            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.FRabatt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabatt");
            entity.Property(e => e.KKundengruppe).HasColumnName("kKundengruppe");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NNettoPreise).HasColumnName("nNettoPreise");
            entity.Property(e => e.NShopLogin).HasColumnName("nShopLogin");
            entity.Property(e => e.NStandard).HasColumnName("nStandard");
        });

        modelBuilder.Entity<VKundengruppeAttribut>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vKundengruppeAttribut", "DbeS");

            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CWert)
                .HasMaxLength(255)
                .HasColumnName("cWert");
            entity.Property(e => e.KKundengruppe).HasColumnName("kKundengruppe");
            entity.Property(e => e.KKundengruppeAttribut).HasColumnName("kKundengruppeAttribut");
        });

        modelBuilder.Entity<VKundengruppeSprache>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vKundengruppeSprache", "DbeS");

            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KKundengruppe).HasColumnName("kKundengruppe");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
        });

        modelBuilder.Entity<VLagerBestandProLagerAlle>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLagerBestandProLagerAlle");

            entity.Property(e => e.FBestand)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fBestand");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
        });

        modelBuilder.Entity<VLagerartikel>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLagerartikel", "Auslieferung");

            entity.Property(e => e.CBeschreibung1)
                .HasMaxLength(64)
                .HasColumnName("cBeschreibung1");
            entity.Property(e => e.CBeschreibung2)
                .HasMaxLength(64)
                .HasColumnName("cBeschreibung2");
            entity.Property(e => e.CSeriennr)
                .HasMaxLength(128)
                .HasColumnName("cSeriennr");
            entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");
            entity.Property(e => e.KLagerartikel).HasColumnName("kLagerartikel");
            entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");
            entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");
            entity.Property(e => e.KPicklistePos).HasColumnName("kPicklistePos");
            entity.Property(e => e.KSessionId).HasColumnName("kSessionId");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
        });

        modelBuilder.Entity<VLagerbestand>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLagerbestand", "MaintenanceIntern");

            entity.Property(e => e.FBestand)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fBestand");
            entity.Property(e => e.FBestandEigen)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fBestandEigen");
            entity.Property(e => e.FInAuftraegen)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fInAuftraegen");
            entity.Property(e => e.FVerfuegbar)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fVerfuegbar");
            entity.Property(e => e.FVerfuegbarGesperrt)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fVerfuegbarGesperrt");
            entity.Property(e => e.FZulauf)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fZulauf");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.NArtikeltyp).HasColumnName("nArtikeltyp");
            entity.Property(e => e.NLagerAktiv).HasColumnName("nLagerAktiv");
            entity.Property(e => e.NLagerKleinerNull).HasColumnName("nLagerKleinerNull");
            entity.Property(e => e.NTeilbar).HasColumnName("nTeilbar");
        });

        modelBuilder.Entity<VLagerbestand1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLagerbestand", "Versand");

            entity.Property(e => e.FBestand)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fBestand");
            entity.Property(e => e.FBestandAuslieferungGesperrt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBestandAuslieferungGesperrt");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
        });

        modelBuilder.Entity<VLagerbestandEx>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLagerbestandEx");

            entity.Property(e => e.DLieferdatum)
                .HasColumnType("datetime")
                .HasColumnName("dLieferdatum");
            entity.Property(e => e.FAufEinkaufsliste)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAufEinkaufsliste");
            entity.Property(e => e.FEigenerBestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEigenerBestand");
            entity.Property(e => e.FInAuftraegen)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fInAuftraegen");
            entity.Property(e => e.FLagerbestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLagerbestand");
            entity.Property(e => e.FReserviert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fReserviert");
            entity.Property(e => e.FVerfuegbar)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVerfuegbar");
            entity.Property(e => e.FVerfuegbarExtern)
                .HasColumnType("decimal(26, 13)")
                .HasColumnName("fVerfuegbarExtern");
            entity.Property(e => e.FVerfuegbarGesperrt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVerfuegbarGesperrt");
            entity.Property(e => e.FZulauf)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZulauf");
            entity.Property(e => e.FZulaufVerfuegbar)
                .HasColumnType("decimal(26, 13)")
                .HasColumnName("fZulaufVerfuegbar");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
        });

        modelBuilder.Entity<VLagerbestandNormaleArtikel>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLagerbestandNormaleArtikel", "MaintenanceIntern");

            entity.Property(e => e.FBestand)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fBestand");
            entity.Property(e => e.FBestandEigen)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fBestandEigen");
            entity.Property(e => e.FInAuftraegen)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fInAuftraegen");
            entity.Property(e => e.FVerfuegbar)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fVerfuegbar");
            entity.Property(e => e.FVerfuegbarGesperrt)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fVerfuegbarGesperrt");
            entity.Property(e => e.FZulauf)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fZulauf");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.NArtikeltyp).HasColumnName("nArtikeltyp");
            entity.Property(e => e.NLagerAktiv).HasColumnName("nLagerAktiv");
            entity.Property(e => e.NLagerKleinerNull).HasColumnName("nLagerKleinerNull");
            entity.Property(e => e.NTeilbar).HasColumnName("nTeilbar");
        });

        modelBuilder.Entity<VLagerbestandProLager>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLagerbestandProLager");

            entity.Property(e => e.FBestand)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fBestand");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
        });

        modelBuilder.Entity<VLagerbestandProLager1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLagerbestandProLager", "Maintenance");

            entity.Property(e => e.Bestände).HasMaxLength(278);
            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CodeZumKorigieren)
                .HasMaxLength(153)
                .HasColumnName("Code zum Korigieren");
            entity.Property(e => e.DatensätzeFehlen)
                .HasMaxLength(315)
                .HasColumnName("Datensätze fehlen");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");
        });

        modelBuilder.Entity<VLagerbestandProLagerNurMitBestand>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLagerbestandProLagerNurMitBestand");

            entity.Property(e => e.FBestand)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fBestand");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
        });

        modelBuilder.Entity<VLagerbestandStueckliste>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLagerbestandStueckliste");

            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.DLieferdatum)
                .HasColumnType("datetime")
                .HasColumnName("dLieferdatum");
            entity.Property(e => e.FAufEinkaufsliste)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAufEinkaufsliste");
            entity.Property(e => e.FAuslieferungGesperrt)
                .HasColumnType("numeric(38, 13)")
                .HasColumnName("fAuslieferungGesperrt");
            entity.Property(e => e.FLagerbestand)
                .HasColumnType("numeric(38, 13)")
                .HasColumnName("fLagerbestand");
            entity.Property(e => e.FLagerbestandEigen)
                .HasColumnType("numeric(38, 13)")
                .HasColumnName("fLagerbestandEigen");
            entity.Property(e => e.FVerfuegbar)
                .HasColumnType("numeric(38, 12)")
                .HasColumnName("fVerfuegbar");
            entity.Property(e => e.FVerfuegbarGesperrt)
                .HasColumnType("numeric(38, 13)")
                .HasColumnName("fVerfuegbarGesperrt");
            entity.Property(e => e.FZulauf)
                .HasColumnType("numeric(38, 13)")
                .HasColumnName("fZulauf");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KStueckliste).HasColumnName("kStueckliste");
        });

        modelBuilder.Entity<VLagerbestandStuecklisteProLager>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLagerbestandStuecklisteProLager");

            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.FAuslieferungGesperrt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAuslieferungGesperrt");
            entity.Property(e => e.FLagerbestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLagerbestand");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KStueckliste).HasColumnName("kStueckliste");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
        });

        modelBuilder.Entity<VLagerbestandStuecklisten>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLagerbestandStuecklisten", "MaintenanceIntern");

            entity.Property(e => e.FBestand)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fBestand");
            entity.Property(e => e.FBestandEigen)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fBestandEigen");
            entity.Property(e => e.FInAuftraegen)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fInAuftraegen");
            entity.Property(e => e.FVerfuegbar)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fVerfuegbar");
            entity.Property(e => e.FVerfuegbarGesperrt)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fVerfuegbarGesperrt");
            entity.Property(e => e.FZulauf)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fZulauf");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.NArtikeltyp).HasColumnName("nArtikeltyp");
            entity.Property(e => e.NLagerAktiv).HasColumnName("nLagerAktiv");
            entity.Property(e => e.NLagerKleinerNull).HasColumnName("nLagerKleinerNull");
            entity.Property(e => e.NTeilbar).HasColumnName("nTeilbar");
        });

        modelBuilder.Entity<VLagerbestandVariationen>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLagerbestandVariationen", "MaintenanceIntern");

            entity.Property(e => e.FBestand)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fBestand");
            entity.Property(e => e.FBestandEigen)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fBestandEigen");
            entity.Property(e => e.FInAuftraegen)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fInAuftraegen");
            entity.Property(e => e.FVerfuegbar)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fVerfuegbar");
            entity.Property(e => e.FVerfuegbarGesperrt)
                .HasColumnType("numeric(1, 1)")
                .HasColumnName("fVerfuegbarGesperrt");
            entity.Property(e => e.FZulauf)
                .HasColumnType("numeric(1, 1)")
                .HasColumnName("fZulauf");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.NArtikeltyp).HasColumnName("nArtikeltyp");
            entity.Property(e => e.NLagerAktiv).HasColumnName("nLagerAktiv");
            entity.Property(e => e.NLagerKleinerNull).HasColumnName("nLagerKleinerNull");
            entity.Property(e => e.NTeilbar).HasColumnName("nTeilbar");
        });

        modelBuilder.Entity<VLagerbestandVarkombination>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLagerbestandVarkombination", "MaintenanceIntern");

            entity.Property(e => e.FBestand)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fBestand");
            entity.Property(e => e.FBestandEigen)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fBestandEigen");
            entity.Property(e => e.FInAuftraegen)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fInAuftraegen");
            entity.Property(e => e.FVerfuegbar)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fVerfuegbar");
            entity.Property(e => e.FVerfuegbarGesperrt)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fVerfuegbarGesperrt");
            entity.Property(e => e.FZulauf)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fZulauf");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.NArtikeltyp).HasColumnName("nArtikeltyp");
            entity.Property(e => e.NLagerAktiv).HasColumnName("nLagerAktiv");
            entity.Property(e => e.NLagerKleinerNull).HasColumnName("nLagerKleinerNull");
            entity.Property(e => e.NTeilbar).HasColumnName("nTeilbar");
        });

        modelBuilder.Entity<VLand>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLand", "DbeS");

            entity.Property(e => e.CDefaultCulture)
                .HasMaxLength(10)
                .HasColumnName("cDefaultCulture");
            entity.Property(e => e.CIso)
                .HasMaxLength(5)
                .HasColumnName("cISO");
            entity.Property(e => e.CIso3)
                .HasMaxLength(5)
                .HasColumnName("cISO3");
            entity.Property(e => e.CKontinent)
                .HasMaxLength(255)
                .HasColumnName("cKontinent");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CNameEng)
                .HasMaxLength(255)
                .HasColumnName("cNameEng");
            entity.Property(e => e.CNameFra)
                .HasMaxLength(255)
                .HasColumnName("cNameFra");
            entity.Property(e => e.CWaehrung)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWaehrung");
            entity.Property(e => e.NEu).HasColumnName("nEU");
            entity.Property(e => e.NIsonumeric).HasColumnName("nISONumeric");
        });

        modelBuilder.Entity<VLastDeadlockGraph>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLastDeadlockGraphs", "Maintenance");

            entity.Property(e => e.DeadlockGraph).HasColumnType("xml");
            entity.Property(e => e.TimeStamp).HasColumnType("datetime");
        });

        modelBuilder.Entity<VLieferadresse>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLieferadresse", "DEPRECATED");

            entity.Property(e => e.CAdressZusatz)
                .HasMaxLength(255)
                .HasColumnName("cAdressZusatz");
            entity.Property(e => e.CAnrede)
                .HasMaxLength(30)
                .HasColumnName("cAnrede");
            entity.Property(e => e.CBundesland)
                .HasMaxLength(255)
                .HasColumnName("cBundesland");
            entity.Property(e => e.CFax)
                .HasMaxLength(30)
                .HasColumnName("cFax");
            entity.Property(e => e.CFirma)
                .HasMaxLength(128)
                .HasColumnName("cFirma");
            entity.Property(e => e.CIso)
                .HasMaxLength(5)
                .HasColumnName("cISO");
            entity.Property(e => e.CLand)
                .HasMaxLength(255)
                .HasColumnName("cLand");
            entity.Property(e => e.CMail)
                .HasMaxLength(255)
                .HasColumnName("cMail");
            entity.Property(e => e.CMobil)
                .HasMaxLength(30)
                .HasColumnName("cMobil");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPlz)
                .HasMaxLength(24)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CPostId)
                .HasMaxLength(255)
                .HasColumnName("cPostID");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTel)
                .HasMaxLength(255)
                .HasColumnName("cTel");
            entity.Property(e => e.CTitel)
                .HasMaxLength(64)
                .HasColumnName("cTitel");
            entity.Property(e => e.CVorname)
                .HasMaxLength(255)
                .HasColumnName("cVorname");
            entity.Property(e => e.CZusatz)
                .HasMaxLength(60)
                .HasColumnName("cZusatz");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KLieferadresse).HasColumnName("kLieferadresse");
        });

        modelBuilder.Entity<VLieferantenbestand>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLieferantenbestand", "Versand");

            entity.Property(e => e.FBestand)
                .HasColumnType("decimal(26, 13)")
                .HasColumnName("fBestand");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
        });

        modelBuilder.Entity<VLieferavisPositionen>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLieferavisPositionen", "FulfillmentNetwork");

            entity.Property(e => e.CArtikelnummer)
                .HasMaxLength(100)
                .HasColumnName("cArtikelnummer");
            entity.Property(e => e.CCharge)
                .HasMaxLength(255)
                .HasColumnName("cCharge");
            entity.Property(e => e.CJfsku)
                .HasMaxLength(255)
                .HasColumnName("cJfsku");
            entity.Property(e => e.CNotiz)
                .HasMaxLength(255)
                .HasColumnName("cNotiz");
            entity.Property(e => e.CSeriennummer)
                .HasMaxLength(255)
                .HasColumnName("cSeriennummer");
            entity.Property(e => e.DMhd)
                .HasColumnType("date")
                .HasColumnName("dMHD");
            entity.Property(e => e.FMenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMenge");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KLieferavis).HasColumnName("kLieferavis");
            entity.Property(e => e.KLieferavisPosition).HasColumnName("kLieferavisPosition");
            entity.Property(e => e.NPaketNummer).HasColumnName("nPaketNummer");
        });

        modelBuilder.Entity<VLieferschein>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLieferschein", "Auslieferung");

            entity.Property(e => e.CBestellNr)
                .HasMaxLength(50)
                .HasColumnName("cBestellNr");
            entity.Property(e => e.CFirmaFax)
                .HasMaxLength(30)
                .HasColumnName("cFirmaFax");
            entity.Property(e => e.CFirmaLandIso)
                .HasMaxLength(5)
                .HasColumnName("cFirmaLandISO");
            entity.Property(e => e.CFirmaMail)
                .HasMaxLength(255)
                .HasColumnName("cFirmaMail");
            entity.Property(e => e.CFirmaName)
                .HasMaxLength(255)
                .HasColumnName("cFirmaName");
            entity.Property(e => e.CFirmaOrt)
                .HasMaxLength(255)
                .HasColumnName("cFirmaOrt");
            entity.Property(e => e.CFirmaPlz)
                .HasMaxLength(50)
                .HasColumnName("cFirmaPlz");
            entity.Property(e => e.CFirmaStrasse)
                .HasMaxLength(255)
                .HasColumnName("cFirmaStrasse");
            entity.Property(e => e.CFirmaTelefon)
                .HasMaxLength(50)
                .HasColumnName("cFirmaTelefon");
            entity.Property(e => e.CHinweis)
                .HasMaxLength(255)
                .HasColumnName("cHinweis");
            entity.Property(e => e.CKundenNr)
                .HasMaxLength(30)
                .HasColumnName("cKundenNr");
            entity.Property(e => e.CLieferadresseAdressZusatz)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseAdressZusatz");
            entity.Property(e => e.CLieferadresseAnrede)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseAnrede");
            entity.Property(e => e.CLieferadresseBundesland)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseBundesland");
            entity.Property(e => e.CLieferadresseFax)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseFax");
            entity.Property(e => e.CLieferadresseFirma)
                .HasMaxLength(128)
                .HasColumnName("cLieferadresseFirma");
            entity.Property(e => e.CLieferadresseKundenNr)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseKundenNr");
            entity.Property(e => e.CLieferadresseLand)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseLand");
            entity.Property(e => e.CLieferadresseLandIso)
                .HasMaxLength(5)
                .HasColumnName("cLieferadresseLandIso");
            entity.Property(e => e.CLieferadresseMail)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseMail");
            entity.Property(e => e.CLieferadresseMobil)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseMobil");
            entity.Property(e => e.CLieferadresseNachname)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseNachname");
            entity.Property(e => e.CLieferadresseOrt)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseOrt");
            entity.Property(e => e.CLieferadressePlz)
                .HasMaxLength(24)
                .HasColumnName("cLieferadressePlz");
            entity.Property(e => e.CLieferadresseStrasse)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseStrasse");
            entity.Property(e => e.CLieferadresseTelefon)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseTelefon");
            entity.Property(e => e.CLieferadresseTitel)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseTitel");
            entity.Property(e => e.CLieferadresseVorname)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseVorname");
            entity.Property(e => e.CLieferadresseZusatz)
                .HasMaxLength(60)
                .HasColumnName("cLieferadresseZusatz");
            entity.Property(e => e.CLieferscheinNr)
                .HasMaxLength(50)
                .HasColumnName("cLieferscheinNr");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DGedruckt)
                .HasColumnType("datetime")
                .HasColumnName("dGedruckt");
            entity.Property(e => e.DMailVersand)
                .HasColumnType("datetime")
                .HasColumnName("dMailVersand");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KLieferadresse).HasColumnName("kLieferadresse");
            entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");
            entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");
            entity.Property(e => e.KSessionId).HasColumnName("kSessionId");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.KVersandart).HasColumnName("kVersandart");
            entity.Property(e => e.NFulfillment).HasColumnName("nFulfillment");
            entity.Property(e => e.NIstVersendet).HasColumnName("nIstVersendet");
            entity.Property(e => e.NKomplettAusgeliefert).HasColumnName("nKomplettAusgeliefert");
        });

        modelBuilder.Entity<VLieferschein1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLieferschein", "DbeS");

            entity.Property(e => e.CHinweis)
                .HasMaxLength(255)
                .HasColumnName("cHinweis");
            entity.Property(e => e.CLieferscheinNr)
                .HasMaxLength(50)
                .HasColumnName("cLieferscheinNr");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KShopauftrag).HasColumnName("kShopauftrag");
            entity.Property(e => e.NFulfillment).HasColumnName("nFulfillment");
        });

        modelBuilder.Entity<VLieferscheinPaket>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLieferscheinPaket", "DbeS");

            entity.Property(e => e.CHinweis)
                .HasMaxLength(255)
                .HasColumnName("cHinweis");
            entity.Property(e => e.CIdentCode)
                .HasMaxLength(255)
                .HasColumnName("cIdentCode");
            entity.Property(e => e.CLogistikUrl)
                .HasMaxLength(4000)
                .HasColumnName("cLogistikURL");
            entity.Property(e => e.CLogistiker)
                .HasMaxLength(255)
                .HasColumnName("cLogistiker");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");
            entity.Property(e => e.KVersand).HasColumnName("kVersand");
        });

        modelBuilder.Entity<VLieferscheinPo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLieferscheinPos", "Auslieferung");

            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CHinweis)
                .HasMaxLength(4000)
                .HasColumnName("cHinweis");
            entity.Property(e => e.CHinweisBestellung)
                .HasMaxLength(2000)
                .HasColumnName("cHinweisBestellung");
            entity.Property(e => e.CItemId)
                .HasMaxLength(255)
                .HasColumnName("cItemID");
            entity.Property(e => e.COrderItemId)
                .HasMaxLength(255)
                .HasColumnName("cOrderItemId");
            entity.Property(e => e.CString)
                .HasMaxLength(255)
                .HasColumnName("cString");
            entity.Property(e => e.CStringStandard)
                .HasMaxLength(255)
                .HasColumnName("cStringStandard");
            entity.Property(e => e.CTransactionId)
                .HasMaxLength(255)
                .HasColumnName("cTransactionID");
            entity.Property(e => e.CUnique)
                .HasMaxLength(30)
                .HasColumnName("cUnique");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.FAnzahlBestellung)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahlBestellung");
            entity.Property(e => e.FAnzahlOffen)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlOffen");
            entity.Property(e => e.FEknetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEKNetto");
            entity.Property(e => e.FMwSt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwSt");
            entity.Property(e => e.FRabatt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabatt");
            entity.Property(e => e.FVknetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVKNetto");
            entity.Property(e => e.FVkpreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVKPreis");
            entity.Property(e => e.KAmazonBestellungPos).HasColumnName("kAmazonBestellungPos");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");
            entity.Property(e => e.KBestellStueckliste).HasColumnName("kBestellStueckliste");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KKonfigitem).HasColumnName("kKonfigitem");
            entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");
            entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");
            entity.Property(e => e.KSessionId).HasColumnName("kSessionId");
            entity.Property(e => e.NHatUpload).HasColumnName("nHatUpload");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<VLieferscheinPosDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLieferscheinPosDetail", "Auslieferung");

            entity.Property(e => e.CCharge)
                .HasMaxLength(255)
                .HasColumnName("cCharge");
            entity.Property(e => e.CWarenlagerName)
                .HasMaxLength(255)
                .HasColumnName("cWarenlagerName");
            entity.Property(e => e.CWarenlagerplatzName)
                .HasMaxLength(157)
                .HasColumnName("cWarenlagerplatzName");
            entity.Property(e => e.DMhd)
                .HasColumnType("datetime")
                .HasColumnName("dMHD");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");
            entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
        });

        modelBuilder.Entity<VLieferscheinPosition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLieferscheinPosition", "DbeS");

            entity.Property(e => e.CHinweis)
                .HasMaxLength(4000)
                .HasColumnName("cHinweis");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");
            entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");
            entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");
        });

        modelBuilder.Entity<VLieferscheinPositionInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLieferscheinPositionInfo", "DbeS");

            entity.Property(e => e.CChargenNr)
                .HasMaxLength(255)
                .HasColumnName("cChargenNr");
            entity.Property(e => e.CSeriennr)
                .HasMaxLength(128)
                .HasColumnName("cSeriennr");
            entity.Property(e => e.DMhd)
                .HasColumnType("datetime")
                .HasColumnName("dMHD");
            entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");
        });

        modelBuilder.Entity<VLieferstatus>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLieferstatus", "DbeS");

            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KLieferStatus).HasColumnName("kLieferStatus");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
        });

        modelBuilder.Entity<VLock>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLocks", "Maintenance");

            entity.Property(e => e.ClientName).HasMaxLength(32);
            entity.Property(e => e.DatabaseName).HasMaxLength(128);
            entity.Property(e => e.HostName).HasMaxLength(128);
            entity.Property(e => e.LockType).HasMaxLength(60);
            entity.Property(e => e.LockedObjectName).HasMaxLength(128);
            entity.Property(e => e.LockedResource).HasMaxLength(60);
            entity.Property(e => e.LoginName).HasMaxLength(128);
            entity.Property(e => e.Spid).HasColumnName("SPID");
            entity.Property(e => e.TransactionName).HasMaxLength(32);
        });

        modelBuilder.Entity<VLogsitzung>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLogsitzung");

            entity.Property(e => e.CBenutzername)
                .HasMaxLength(255)
                .HasColumnName("cBenutzername");
            entity.Property(e => e.CRechnername)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("cRechnername");
            entity.Property(e => e.CStatusMeldung)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("cStatusMeldung");
            entity.Property(e => e.DEnde)
                .HasColumnType("date")
                .HasColumnName("dEnde");
            entity.Property(e => e.DStart)
                .HasColumnType("date")
                .HasColumnName("dStart");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KLogsitzung).HasColumnName("kLogsitzung");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<VMappedProductKey>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMappedProductKeys", "B2BNetzwerk");

            entity.Property(e => e.CInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cInet");
            entity.Property(e => e.CJpid)
                .HasMaxLength(10)
                .HasColumnName("cJpid");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.NAktion).HasColumnName("nAktion");
        });

        modelBuilder.Entity<VMassEinheit>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMassEinheit", "DbeS");

            entity.Property(e => e.CCode)
                .HasMaxLength(10)
                .HasColumnName("cCode");
            entity.Property(e => e.CDisplayCode)
                .HasMaxLength(255)
                .HasColumnName("cDisplayCode");
            entity.Property(e => e.FBezugsMassEinheitFaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBezugsMassEinheitFaktor");
            entity.Property(e => e.KBezugsMassEinheit).HasColumnName("kBezugsMassEinheit");
            entity.Property(e => e.KMassEinheit)
                .ValueGeneratedOnAdd()
                .HasColumnName("kMassEinheit");
        });

        modelBuilder.Entity<VMassEinheitSprache>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMassEinheitSprache", "DbeS");

            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KMassEinheit).HasColumnName("kMassEinheit");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
        });

        modelBuilder.Entity<VMerchantFailureInbound>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMerchantFailureInbound", "FulfillmentNetwork");

            entity.Property(e => e.ExternalInboundNumber).HasMaxLength(255);
            entity.Property(e => e.FirmaName).HasMaxLength(255);
            entity.Property(e => e.InboundId).HasMaxLength(255);
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");
            entity.Property(e => e.KUmlagerung).HasColumnName("kUmlagerung");
            entity.Property(e => e.MerchantInboundNumber).HasMaxLength(255);
            entity.Property(e => e.Rowversion)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.WarehouseId).HasMaxLength(50);
            entity.Property(e => e.WarehouseName).HasMaxLength(255);
        });

        modelBuilder.Entity<VMerchantInbound>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMerchantInbound", "FulfillmentNetwork");

            entity.Property(e => e.ExternalInboundNumber).HasMaxLength(255);
            entity.Property(e => e.FirmaName).HasMaxLength(255);
            entity.Property(e => e.InboundId).HasMaxLength(255);
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");
            entity.Property(e => e.KUmlagerung).HasColumnName("kUmlagerung");
            entity.Property(e => e.MerchantInboundNumber).HasMaxLength(255);
            entity.Property(e => e.Rowversion)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.WarehouseId).HasMaxLength(50);
            entity.Property(e => e.WarehouseName).HasMaxLength(255);
        });

        modelBuilder.Entity<VMerchantInboundItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMerchantInboundItem", "FulfillmentNetwork");

            entity.Property(e => e.Jfsku)
                .HasMaxLength(255)
                .HasColumnName("JFSKU");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");
            entity.Property(e => e.KLieferantenBestellungPos).HasColumnName("kLieferantenBestellungPos");
            entity.Property(e => e.Quantity).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.SupplierProductName).HasMaxLength(255);
            entity.Property(e => e.SupplierSku).HasMaxLength(255);
        });

        modelBuilder.Entity<VMerchantPendingInbound>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMerchantPendingInbound", "FulfillmentNetwork");

            entity.Property(e => e.ExternalInboundNumber).HasMaxLength(255);
            entity.Property(e => e.FirmaName).HasMaxLength(255);
            entity.Property(e => e.InboundId).HasMaxLength(255);
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");
            entity.Property(e => e.KUmlagerung).HasColumnName("kUmlagerung");
            entity.Property(e => e.MerchantInboundNumber).HasMaxLength(255);
            entity.Property(e => e.Rowversion)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.WarehouseId).HasMaxLength(50);
            entity.Property(e => e.WarehouseName).HasMaxLength(255);
        });

        modelBuilder.Entity<VMerchantPendingInboundShippingNotification>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMerchantPendingInboundShippingNotification", "FulfillmentNetwork");

            entity.Property(e => e.InboundId).HasMaxLength(255);
            entity.Property(e => e.InboundShippingNotificationId).HasMaxLength(255);
            entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");
            entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");
            entity.Property(e => e.MerchantInboundNumber).HasMaxLength(255);
            entity.Property(e => e.MerchantShippingNotificationNumber).HasMaxLength(50);
            entity.Property(e => e.Note).HasMaxLength(255);
        });

        modelBuilder.Entity<VMerchantPendingLieferavi>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMerchantPendingLieferavis", "FulfillmentNetwork");

            entity.Property(e => e.CInboundId)
                .HasMaxLength(255)
                .HasColumnName("cInboundId");
            entity.Property(e => e.CNotiz)
                .IsUnicode(false)
                .HasColumnName("cNotiz");
            entity.Property(e => e.CNummer)
                .HasMaxLength(512)
                .HasColumnName("cNummer");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DLieferdatum)
                .HasColumnType("datetime")
                .HasColumnName("dLieferdatum");
            entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");
            entity.Property(e => e.KLieferavis).HasColumnName("kLieferavis");
        });

        modelBuilder.Entity<VMerchantPendingStockChange>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMerchantPendingStockChanges", "FulfillmentNetwork");

            entity.Property(e => e.Batch).HasMaxLength(255);
            entity.Property(e => e.InboundItemItemId)
                .HasMaxLength(255)
                .HasColumnName("InboundItem.ItemId");
            entity.Property(e => e.InboundItemNumber)
                .HasMaxLength(255)
                .HasColumnName("InboundItem.Number");
            entity.Property(e => e.LevelAnnounced)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("Level.Announced");
            entity.Property(e => e.LevelBlocked)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("Level.Blocked");
            entity.Property(e => e.LevelReserved)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("Level.Reserved");
            entity.Property(e => e.LevelShippable)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("Level.Shippable");
            entity.Property(e => e.OutboundItemItemId)
                .HasMaxLength(255)
                .HasColumnName("OutboundItem.ItemId");
            entity.Property(e => e.OutboundItemNumber)
                .HasMaxLength(255)
                .HasColumnName("OutboundItem.Number");
            entity.Property(e => e.OutboundShippingNotificationItemId)
                .HasMaxLength(255)
                .HasColumnName("OutboundShippingNotification.ItemId");
            entity.Property(e => e.OutboundShippingNotificationNumber)
                .HasMaxLength(255)
                .HasColumnName("OutboundShippingNotification.Number");
            entity.Property(e => e.QuantityAnnounced)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("Quantity.Announced");
            entity.Property(e => e.QuantityBlocked)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("Quantity.Blocked");
            entity.Property(e => e.QuantityBookedAnnounced)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("QuantityBooked.Announced");
            entity.Property(e => e.QuantityBookedBlocked)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("QuantityBooked.Blocked");
            entity.Property(e => e.QuantityBookedReserved)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("QuantityBooked.Reserved");
            entity.Property(e => e.QuantityBookedShippable)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("QuantityBooked.Shippable");
            entity.Property(e => e.QuantityReserved)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("Quantity.Reserved");
            entity.Property(e => e.QuantityShippable)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("Quantity.Shippable");
            entity.Property(e => e.StockChangeIdJfsku)
                .HasMaxLength(255)
                .HasColumnName("StockChangeId.Jfsku");
            entity.Property(e => e.StockChangeIdStockVersion).HasColumnName("StockChangeId.StockVersion");
            entity.Property(e => e.StockChangeIdWarehouseId)
                .HasMaxLength(255)
                .HasColumnName("StockChangeId.WarehouseId");
            entity.Property(e => e.WawiInboundBestellPosKey).HasColumnName("WawiInbound.BestellPosKey");
            entity.Property(e => e.WawiInboundLieferantenBestellungKey).HasColumnName("WawiInbound.LieferantenBestellungKey");
            entity.Property(e => e.WawiInboundStreckenlagerWarenlagerPlatzKey).HasColumnName("WawiInbound.StreckenlagerWarenlagerPlatzKey");
            entity.Property(e => e.WawiInboundUmlagerungKey).HasColumnName("WawiInbound.UmlagerungKey");
            entity.Property(e => e.WawiProductArtikelKey).HasColumnName("WawiProduct.ArtikelKey");
            entity.Property(e => e.WawiProductIsBatch).HasColumnName("WawiProduct.IsBatch");
            entity.Property(e => e.WawiProductIsBestBefore).HasColumnName("WawiProduct.IsBestBefore");
            entity.Property(e => e.WawiProductIsBillOfMaterials).HasColumnName("WawiProduct.IsBillOfMaterials");
            entity.Property(e => e.WawiProductIsDivisible).HasColumnName("WawiProduct.IsDivisible");
            entity.Property(e => e.WawiProductIsSerialNumber).HasColumnName("WawiProduct.IsSerialNumber");
            entity.Property(e => e.WawiProductIsWarehouseActive).HasColumnName("WawiProduct.IsWarehouseActive");
            entity.Property(e => e.WawiProductMerchantSku)
                .HasMaxLength(100)
                .HasColumnName("WawiProduct.MerchantSku");
            entity.Property(e => e.WawiProductNetRetailPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("WawiProduct.NetRetailPrice");
            entity.Property(e => e.WawiReturnRetoureKey).HasColumnName("WawiReturn.RetoureKey");
            entity.Property(e => e.WawiReturnRetourePosKey).HasColumnName("WawiReturn.RetourePosKey");
            entity.Property(e => e.WawiStockLevelStockLevel)
                .HasColumnType("decimal(26, 13)")
                .HasColumnName("WawiStockLevel.StockLevel");
            entity.Property(e => e.WawiStockLevelStockLevelBlocked)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("WawiStockLevel.StockLevelBlocked");
            entity.Property(e => e.WawiStockLevelWarenlagerKey).HasColumnName("WawiStockLevel.WarenlagerKey");
            entity.Property(e => e.WawiStockLevelWarenlagerPlatzBlockedKey).HasColumnName("WawiStockLevel.WarenlagerPlatzBlockedKey");
            entity.Property(e => e.WawiStockLevelWarenlagerPlatzKey).HasColumnName("WawiStockLevel.WarenlagerPlatzKey");
        });

        modelBuilder.Entity<VMerchantProductAttribute>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMerchantProductAttributes", "FulfillmentNetwork");

            entity.Property(e => e.CFeldTyp)
                .HasMaxLength(300)
                .HasColumnName("cFeldTyp");
            entity.Property(e => e.CFfnName)
                .HasMaxLength(255)
                .HasColumnName("cFfnName");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CWertVarchar).HasColumnName("cWertVarchar");
            entity.Property(e => e.DWertDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dWertDateTime");
            entity.Property(e => e.FWertDecimal)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertDecimal");
            entity.Property(e => e.Ffntyp)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("FFNTyp");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KAttribut).HasColumnName("kAttribut");
            entity.Property(e => e.NWertInt).HasColumnName("nWertInt");
        });

        modelBuilder.Entity<VMerchantProductAttributeMappingView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMerchantProductAttributeMappingView", "FulfillmentNetwork");

            entity.Property(e => e.CFeldTyp)
                .HasMaxLength(300)
                .HasColumnName("cFeldTyp");
            entity.Property(e => e.CFfnName)
                .HasMaxLength(255)
                .HasColumnName("cFfnName");
            entity.Property(e => e.CGruppe)
                .HasMaxLength(150)
                .HasColumnName("cGruppe");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KAttribut).HasColumnName("kAttribut");
            entity.Property(e => e.NDatenTyp).HasColumnName("nDatenTyp");
            entity.Property(e => e.NIstEigenesFeld).HasColumnName("nIstEigenesFeld");
        });

        modelBuilder.Entity<VMerchantProductPicture>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMerchantProductPicture", "FulfillmentNetwork");

            entity.Property(e => e.BBild)
                .HasColumnType("image")
                .HasColumnName("bBild");
            entity.Property(e => e.BBildRowVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bBildRowVersion");
            entity.Property(e => e.BProductPictureRefBildRowVersion)
                .HasMaxLength(8)
                .IsFixedLength()
                .HasColumnName("bProductPictureRefBildRowVersion");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KArtikelbildPlattform).HasColumnName("kArtikelbildPlattform");
            entity.Property(e => e.KBild).HasColumnName("kBild");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.NFfnNumber).HasColumnName("nFfnNumber");
            entity.Property(e => e.NNr).HasColumnName("nNr");
        });

        modelBuilder.Entity<VMerchantReturn>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMerchantReturn", "FulfillmentNetwork");

            entity.Property(e => e.Ansprechpartner).HasMaxLength(255);
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.KRmRetoure).HasColumnName("kRmRetoure");
            entity.Property(e => e.KRmretoureAbholAdresse).HasColumnName("kRMRetoureAbholAdresse");
            entity.Property(e => e.RetoureNr).HasMaxLength(255);
            entity.Property(e => e.ReturnId).HasMaxLength(255);
            entity.Property(e => e.WarehouseId).HasMaxLength(50);
        });

        modelBuilder.Entity<VMerchantReturnItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMerchantReturnItem", "FulfillmentNetwork");

            entity.Property(e => e.ApiQuantity).HasColumnType("decimal(28, 14)");
            entity.Property(e => e.Jfsku).HasMaxLength(255);
            entity.Property(e => e.KRmretoure).HasColumnName("kRMRetoure");
            entity.Property(e => e.KRmretourePos).HasColumnName("kRMRetourePos");
            entity.Property(e => e.MerchantSku).HasMaxLength(255);
            entity.Property(e => e.OutboundId).HasMaxLength(255);
            entity.Property(e => e.OutboundItemId)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.WawiQuantity).HasColumnType("decimal(25, 13)");
        });

        modelBuilder.Entity<VMerkmal>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMerkmal", "DbeS");

            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CTyp)
                .HasMaxLength(255)
                .HasColumnName("cTyp");
            entity.Property(e => e.KMerkmal).HasColumnName("kMerkmal");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NGlobal).HasColumnName("nGlobal");
            entity.Property(e => e.NMehrfachauswahl).HasColumnName("nMehrfachauswahl");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<VMerkmalBild>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMerkmalBild", "DbeS");

            entity.Property(e => e.BBild)
                .HasColumnType("image")
                .HasColumnName("bBild");
            entity.Property(e => e.CHash)
                .HasMaxLength(255)
                .HasColumnName("cHash");
            entity.Property(e => e.KBild).HasColumnName("kBild");
            entity.Property(e => e.KMerkmal).HasColumnName("kMerkmal");
            entity.Property(e => e.KMerkmalBildPlattform).HasColumnName("kMerkmalBildPlattform");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NDateigroesse).HasColumnName("nDateigroesse");
            entity.Property(e => e.NInet).HasColumnName("nInet");
        });

        modelBuilder.Entity<VMerkmalSprache>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMerkmalSprache", "DbeS");

            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KMerkmal).HasColumnName("kMerkmal");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
        });

        modelBuilder.Entity<VMerkmalwert>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMerkmalwert", "DbeS");

            entity.Property(e => e.KMerkmal).HasColumnName("kMerkmal");
            entity.Property(e => e.KMerkmalWert).HasColumnName("kMerkmalWert");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<VMerkmalwertBild>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMerkmalwertBild", "DbeS");

            entity.Property(e => e.BBild)
                .HasColumnType("image")
                .HasColumnName("bBild");
            entity.Property(e => e.CHash)
                .HasMaxLength(255)
                .HasColumnName("cHash");
            entity.Property(e => e.KBild).HasColumnName("kBild");
            entity.Property(e => e.KMerkmalwert).HasColumnName("kMerkmalwert");
            entity.Property(e => e.KMerkmalwertBildPlattform).HasColumnName("kMerkmalwertBildPlattform");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NDateigroesse).HasColumnName("nDateigroesse");
            entity.Property(e => e.NInet).HasColumnName("nInet");
        });

        modelBuilder.Entity<VMerkmalwertSprache>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMerkmalwertSprache", "DbeS");

            entity.Property(e => e.CBeschreibung).HasColumnName("cBeschreibung");
            entity.Property(e => e.CMetaDescription).HasColumnName("cMetaDescription");
            entity.Property(e => e.CMetaKeywords)
                .HasMaxLength(255)
                .HasColumnName("cMetaKeywords");
            entity.Property(e => e.CMetaTitle)
                .HasMaxLength(255)
                .HasColumnName("cMetaTitle");
            entity.Property(e => e.CSeo)
                .HasMaxLength(255)
                .HasColumnName("cSeo");
            entity.Property(e => e.CWert)
                .HasMaxLength(255)
                .HasColumnName("cWert");
            entity.Property(e => e.KMerkmalWert).HasColumnName("kMerkmalWert");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
        });

        modelBuilder.Entity<VNachrichtZuEingangskanal>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vNachrichtZuEingangskanal", "Ticketsystem");

            entity.Property(e => e.KEingangskanalEmail).HasColumnName("kEingangskanalEmail");
            entity.Property(e => e.KNachricht).HasColumnName("kNachricht");
        });

        modelBuilder.Entity<VNaechsterZulauf>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vNaechsterZulauf", "Bestand");

            entity.Property(e => e.DLieferdatum)
                .HasColumnType("date")
                .HasColumnName("dLieferdatum");
            entity.Property(e => e.FZulauf)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fZulauf");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
        });

        modelBuilder.Entity<VNaechsterZulaufLagerartikel>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vNaechsterZulaufLagerartikel", "Abgleich");

            entity.Property(e => e.DLieferdatum)
                .HasColumnType("date")
                .HasColumnName("dLieferdatum");
            entity.Property(e => e.FAnzahlFehlbestand)
                .HasColumnType("decimal(26, 13)")
                .HasColumnName("fAnzahlFehlbestand");
            entity.Property(e => e.FAnzahlOffenGesamt)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlOffenGesamt");
            entity.Property(e => e.FAnzahlZulauf)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlZulauf");
            entity.Property(e => e.FMengeNochZuLiefern)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fMengeNochZuLiefern");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.NRowNumber).HasColumnName("nRowNumber");
        });

        modelBuilder.Entity<VObjectBrowserArtikel>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vObjectBrowserArtikel");

            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CAsin)
                .HasMaxLength(255)
                .HasColumnName("cASIN");
            entity.Property(e => e.CBarcode)
                .HasMaxLength(255)
                .HasColumnName("cBarcode");
            entity.Property(e => e.CHan)
                .HasMaxLength(255)
                .HasColumnName("cHAN");
            entity.Property(e => e.CHersteller)
                .HasMaxLength(255)
                .HasColumnName("cHersteller");
            entity.Property(e => e.CIsbn)
                .HasMaxLength(255)
                .HasColumnName("cISBN");
            entity.Property(e => e.CKategorie)
                .HasMaxLength(255)
                .HasColumnName("cKategorie");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CSuchnummer)
                .HasMaxLength(255)
                .HasColumnName("cSuchnummer");
            entity.Property(e => e.CUpc)
                .HasMaxLength(255)
                .HasColumnName("cUPC");
            entity.Property(e => e.CWarengruppe)
                .HasMaxLength(255)
                .HasColumnName("cWarengruppe");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KKategorie).HasColumnName("kKategorie");
            entity.Property(e => e.KKategorieArtikel).HasColumnName("kKategorieArtikel");
            entity.Property(e => e.KWarengruppe).HasColumnName("kWarengruppe");
        });

        modelBuilder.Entity<VOffeneBestellpositionen>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOffeneBestellpositionen", "Abgleich");

            entity.Property(e => e.DLieferdatum)
                .HasColumnType("date")
                .HasColumnName("dLieferdatum");
            entity.Property(e => e.FMengeNochZuLiefern)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fMengeNochZuLiefern");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
        });

        modelBuilder.Entity<VOffenerPostenAuftrag>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOffenerPostenAuftrag", "Zahlungsabgleich");

            entity.Property(e => e.CBestellNr)
                .HasMaxLength(50)
                .HasColumnName("cBestellNr");
            entity.Property(e => e.CEbayBuyerUserId)
                .HasMaxLength(255)
                .HasColumnName("cEbayBuyerUserId");
            entity.Property(e => e.CEbayCheckoutVerwendungszweck)
                .HasMaxLength(1000)
                .HasColumnName("cEbayCheckoutVerwendungszweck");
            entity.Property(e => e.CExterneBestellNr)
                .HasMaxLength(50)
                .HasColumnName("cExterneBestellNr");
            entity.Property(e => e.CItemId)
                .HasMaxLength(255)
                .HasColumnName("cItemID");
            entity.Property(e => e.CKundenNr)
                .HasMaxLength(30)
                .HasColumnName("cKundenNr");
            entity.Property(e => e.CLieferadresseFirma)
                .HasMaxLength(128)
                .HasColumnName("cLieferadresseFirma");
            entity.Property(e => e.CLieferadresseName)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseName");
            entity.Property(e => e.CLieferadresseVorname)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseVorname");
            entity.Property(e => e.CLieferscheinNr)
                .HasMaxLength(50)
                .HasColumnName("cLieferscheinNr");
            entity.Property(e => e.CPaymentBestellNr).HasColumnName("cPaymentBestellNr");
            entity.Property(e => e.CRechnungsadresseFirma)
                .HasMaxLength(128)
                .HasColumnName("cRechnungsadresseFirma");
            entity.Property(e => e.CRechnungsadresseName)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseName");
            entity.Property(e => e.CRechnungsadresseVorname)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseVorname");
            entity.Property(e => e.CTrackingId)
                .HasMaxLength(255)
                .HasColumnName("cTrackingID");
            entity.Property(e => e.CTransactionId)
                .HasMaxLength(255)
                .HasColumnName("cTransactionID");
            entity.Property(e => e.CWaehrungIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWaehrungIso");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.FMahngebuehr)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fMahngebuehr");
            entity.Property(e => e.FSkontoBetrag)
                .HasColumnType("numeric(38, 12)")
                .HasColumnName("fSkontoBetrag");
            entity.Property(e => e.FWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWert");
            entity.Property(e => e.FWertOffen)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertOffen");
            entity.Property(e => e.FZahlung)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZahlung");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.NPaketnummer).HasColumnName("nPaketnummer");
            entity.Property(e => e.NStorno).HasColumnName("nStorno");
        });

        modelBuilder.Entity<VOffenerPostenAuftragZahlung>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOffenerPostenAuftragZahlung", "Zahlungsabgleich");

            entity.Property(e => e.CBestellNr)
                .HasMaxLength(50)
                .HasColumnName("cBestellNr");
            entity.Property(e => e.CEbayCheckoutVerwendungszweck)
                .HasMaxLength(1000)
                .HasColumnName("cEbayCheckoutVerwendungszweck");
            entity.Property(e => e.CEbayItemId)
                .HasMaxLength(255)
                .HasColumnName("cEbayItemID");
            entity.Property(e => e.CEbayUserId)
                .HasMaxLength(255)
                .HasColumnName("cEbayUserId");
            entity.Property(e => e.CExterneBestellNr)
                .HasMaxLength(50)
                .HasColumnName("cExterneBestellNr");
            entity.Property(e => e.CKundenNr)
                .HasMaxLength(30)
                .HasColumnName("cKundenNr");
            entity.Property(e => e.CLieferadresseFirma)
                .HasMaxLength(128)
                .HasColumnName("cLieferadresseFirma");
            entity.Property(e => e.CLieferadresseName)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseName");
            entity.Property(e => e.CLieferadresseVorname)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseVorname");
            entity.Property(e => e.CLieferscheinNr)
                .HasMaxLength(50)
                .HasColumnName("cLieferscheinNr");
            entity.Property(e => e.CRechnungsadresseFirma)
                .HasMaxLength(128)
                .HasColumnName("cRechnungsadresseFirma");
            entity.Property(e => e.CRechnungsadresseName)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseName");
            entity.Property(e => e.CRechnungsadresseVorname)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseVorname");
            entity.Property(e => e.CTrackingId)
                .HasMaxLength(255)
                .HasColumnName("cTrackingID");
            entity.Property(e => e.CTransactionId)
                .HasMaxLength(255)
                .HasColumnName("cTransactionId");
            entity.Property(e => e.CWaehrungIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWaehrungIso");
            entity.Property(e => e.DDatum)
                .HasColumnType("datetime")
                .HasColumnName("dDatum");
            entity.Property(e => e.FBetrag)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBetrag");
            entity.Property(e => e.FBetragOffen)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBetragOffen");
            entity.Property(e => e.FBetragSkonto)
                .HasColumnType("numeric(38, 12)")
                .HasColumnName("fBetragSkonto");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KZahlung).HasColumnName("kZahlung");
            entity.Property(e => e.NMatchingOptionen).HasColumnName("nMatchingOptionen");
            entity.Property(e => e.NPaketnummer).HasColumnName("nPaketnummer");
        });

        modelBuilder.Entity<VOffenerPostenEbay>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOffenerPostenEbay", "Zahlungsabgleich");

            entity.Property(e => e.CEbayBuyerName)
                .HasMaxLength(255)
                .HasColumnName("cEbayBuyerName");
            entity.Property(e => e.CEbayBuyerUserId)
                .HasMaxLength(255)
                .HasColumnName("cEbayBuyerUserId");
            entity.Property(e => e.CEbayCheckoutVerwendungszweck)
                .HasMaxLength(32)
                .HasColumnName("cEbayCheckoutVerwendungszweck");
            entity.Property(e => e.CEbayShippingAddressName)
                .HasMaxLength(255)
                .HasColumnName("cEbayShippingAddressName");
            entity.Property(e => e.CItemId)
                .HasMaxLength(255)
                .HasColumnName("cItemId");
            entity.Property(e => e.CWaehrungIso)
                .HasMaxLength(255)
                .HasColumnName("cWaehrungIso");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.FWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWert");
            entity.Property(e => e.KEbayCheckout).HasColumnName("kEbayCheckout");
            entity.Property(e => e.KEbayTransaction).HasColumnName("kEbayTransaction");
        });

        modelBuilder.Entity<VOffenerPostenEingangsrechnung>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOffenerPostenEingangsrechnung", "Zahlungsabgleich");

            entity.Property(e => e.CFremdbelegnummer)
                .HasMaxLength(255)
                .HasColumnName("cFremdbelegnummer");
            entity.Property(e => e.CStandardWaehrungIso)
                .HasMaxLength(20)
                .HasColumnName("cStandardWaehrungISO");
            entity.Property(e => e.DBelegdatum)
                .HasColumnType("datetime")
                .HasColumnName("dBelegdatum");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.FWert)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("fWert");
            entity.Property(e => e.FWertOffen)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("fWertOffen");
            entity.Property(e => e.FZahlung)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fZahlung");
            entity.Property(e => e.KEingangsrechnung).HasColumnName("kEingangsrechnung");
            entity.Property(e => e.NDeleted).HasColumnName("nDeleted");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<VOffenerPostenEingangsrechnungZahlung>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOffenerPostenEingangsrechnungZahlung", "Zahlungsabgleich");

            entity.Property(e => e.CFremdbelegnummer)
                .HasMaxLength(255)
                .HasColumnName("cFremdbelegnummer");
            entity.Property(e => e.CStandardWaehrungIso)
                .HasMaxLength(20)
                .HasColumnName("cStandardWaehrungISO");
            entity.Property(e => e.DDatum)
                .HasColumnType("datetime")
                .HasColumnName("dDatum");
            entity.Property(e => e.FBetrag)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBetrag");
            entity.Property(e => e.KEingangsrechnung).HasColumnName("kEingangsrechnung");
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.KZahlung).HasColumnName("kZahlung");
            entity.Property(e => e.NMatchingOptionen).HasColumnName("nMatchingOptionen");
        });

        modelBuilder.Entity<VOffenerPostenRechnung>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOffenerPostenRechnung", "Zahlungsabgleich");

            entity.Property(e => e.CBestellNr)
                .HasMaxLength(50)
                .HasColumnName("cBestellNr");
            entity.Property(e => e.CEbayBuyerUserId)
                .HasMaxLength(255)
                .HasColumnName("cEbayBuyerUserId");
            entity.Property(e => e.CEbayCheckoutVerwendungszweck)
                .HasMaxLength(1000)
                .HasColumnName("cEbayCheckoutVerwendungszweck");
            entity.Property(e => e.CEbayItemId)
                .HasMaxLength(255)
                .HasColumnName("cEbayItemID");
            entity.Property(e => e.CExterneBestellNr)
                .HasMaxLength(50)
                .HasColumnName("cExterneBestellNr");
            entity.Property(e => e.CGutschriftNr)
                .HasMaxLength(50)
                .HasColumnName("cGutschriftNr");
            entity.Property(e => e.CKundenNr)
                .HasMaxLength(30)
                .HasColumnName("cKundenNr");
            entity.Property(e => e.CLieferadresseFirma)
                .HasMaxLength(128)
                .HasColumnName("cLieferadresseFirma");
            entity.Property(e => e.CLieferadresseName)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseName");
            entity.Property(e => e.CLieferadresseVorname)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseVorname");
            entity.Property(e => e.CLieferscheinnummer)
                .HasMaxLength(50)
                .HasColumnName("cLieferscheinnummer");
            entity.Property(e => e.CPaymentBestellNr).HasColumnName("cPaymentBestellNr");
            entity.Property(e => e.CRechnungsadresseFirma)
                .HasMaxLength(128)
                .HasColumnName("cRechnungsadresseFirma");
            entity.Property(e => e.CRechnungsadresseName)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseName");
            entity.Property(e => e.CRechnungsadresseVorname)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseVorname");
            entity.Property(e => e.CRechnungsnr)
                .HasMaxLength(50)
                .HasColumnName("cRechnungsnr");
            entity.Property(e => e.CTrackingId)
                .HasMaxLength(255)
                .HasColumnName("cTrackingID");
            entity.Property(e => e.CWaehrungIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWaehrungIso");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.FMahngebuehr)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMahngebuehr");
            entity.Property(e => e.FSkontoBetrag)
                .HasColumnType("numeric(38, 12)")
                .HasColumnName("fSkontoBetrag");
            entity.Property(e => e.FWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWert");
            entity.Property(e => e.FWertOffen)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWertOffen");
            entity.Property(e => e.FZahlung)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZahlung");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.NStorno).HasColumnName("nStorno");
        });

        modelBuilder.Entity<VOffenerPostenRechnungZahlung>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOffenerPostenRechnungZahlung", "Zahlungsabgleich");

            entity.Property(e => e.CBestellNr)
                .HasMaxLength(50)
                .HasColumnName("cBestellNr");
            entity.Property(e => e.CEbayBuyerUserId)
                .HasMaxLength(255)
                .HasColumnName("cEbayBuyerUserId");
            entity.Property(e => e.CEbayCheckoutVerwendungszweck)
                .HasMaxLength(1000)
                .HasColumnName("cEbayCheckoutVerwendungszweck");
            entity.Property(e => e.CEbayItemId)
                .HasMaxLength(255)
                .HasColumnName("cEbayItemID");
            entity.Property(e => e.CExterneBestellNr)
                .HasMaxLength(50)
                .HasColumnName("cExterneBestellNr");
            entity.Property(e => e.CGutschriftNr)
                .HasMaxLength(50)
                .HasColumnName("cGutschriftNr");
            entity.Property(e => e.CKundenNr)
                .HasMaxLength(30)
                .HasColumnName("cKundenNr");
            entity.Property(e => e.CLieferadresseFirma)
                .HasMaxLength(128)
                .HasColumnName("cLieferadresseFirma");
            entity.Property(e => e.CLieferadresseName)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseName");
            entity.Property(e => e.CLieferadresseVorname)
                .HasMaxLength(255)
                .HasColumnName("cLieferadresseVorname");
            entity.Property(e => e.CLieferscheinnummer)
                .HasMaxLength(50)
                .HasColumnName("cLieferscheinnummer");
            entity.Property(e => e.CRechnungsNr)
                .HasMaxLength(50)
                .HasColumnName("cRechnungsNr");
            entity.Property(e => e.CRechnungsadresseFirma)
                .HasMaxLength(128)
                .HasColumnName("cRechnungsadresseFirma");
            entity.Property(e => e.CRechnungsadresseName)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseName");
            entity.Property(e => e.CRechnungsadresseVorname)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsadresseVorname");
            entity.Property(e => e.CTrackingId)
                .HasMaxLength(255)
                .HasColumnName("cTrackingID");
            entity.Property(e => e.CTransactionId)
                .HasMaxLength(255)
                .HasColumnName("cTransactionId");
            entity.Property(e => e.CWaehrungIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWaehrungIso");
            entity.Property(e => e.DDatum)
                .HasColumnType("datetime")
                .HasColumnName("dDatum");
            entity.Property(e => e.FBetrag)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBetrag");
            entity.Property(e => e.FBetragOffen)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBetragOffen");
            entity.Property(e => e.FBetragSkonto)
                .HasColumnType("numeric(38, 12)")
                .HasColumnName("fBetragSkonto");
            entity.Property(e => e.FMahngebuehr)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMahngebuehr");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.KZahlung).HasColumnName("kZahlung");
            entity.Property(e => e.NMatchingOptionen).HasColumnName("nMatchingOptionen");
        });

        modelBuilder.Entity<VOffenerUmsatz>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOffenerUmsatz", "Zahlungsabgleich");

            entity.Property(e => e.CInternerKommentar)
                .HasMaxLength(1000)
                .HasColumnName("cInternerKommentar");
            entity.Property(e => e.CKonto)
                .HasMaxLength(500)
                .HasColumnName("cKonto");
            entity.Property(e => e.CKontoIdentifikation)
                .HasMaxLength(50)
                .HasColumnName("cKontoIdentifikation");
            entity.Property(e => e.CKontozusatz)
                .HasMaxLength(500)
                .HasColumnName("cKontozusatz");
            entity.Property(e => e.CName)
                .HasMaxLength(500)
                .HasColumnName("cName");
            entity.Property(e => e.CTransaktionId)
                .HasMaxLength(100)
                .HasColumnName("cTransaktionID");
            entity.Property(e => e.CVerwendungszweck)
                .HasMaxLength(1000)
                .HasColumnName("cVerwendungszweck");
            entity.Property(e => e.CWaehrungIso)
                .HasMaxLength(3)
                .HasColumnName("cWaehrungISO");
            entity.Property(e => e.DAbgleichszeitpunkt)
                .HasColumnType("datetime")
                .HasColumnName("dAbgleichszeitpunkt");
            entity.Property(e => e.DBuchungsdatum)
                .HasColumnType("datetime")
                .HasColumnName("dBuchungsdatum");
            entity.Property(e => e.FBetrag)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBetrag");
            entity.Property(e => e.FBetragOffen)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fBetragOffen");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KZahlungsabgleichModul).HasColumnName("kZahlungsabgleichModul");
            entity.Property(e => e.KZahlungsabgleichUmsatz).HasColumnName("kZahlungsabgleichUmsatz");
            entity.Property(e => e.NBuchungstyp).HasColumnName("nBuchungstyp");
            entity.Property(e => e.NSichtbar).HasColumnName("nSichtbar");
        });

        modelBuilder.Entity<VOfferCategoryAttribute>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOfferCategoryAttribute", "SCX");

            entity.Property(e => e.CAttribute)
                .HasMaxLength(512)
                .HasColumnName("cAttribute");
            entity.Property(e => e.CValue).HasColumnName("cValue");
            entity.Property(e => e.KCategory).HasColumnName("kCategory");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KShopScx).HasColumnName("kShopScx");
            entity.Property(e => e.NIsDotLiquidValue).HasColumnName("nIsDotLiquidValue");
            entity.Property(e => e.NReferenzGruppe).HasColumnName("nReferenzGruppe");
        });

        modelBuilder.Entity<VOfferChannelAttribute>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOfferChannelAttribute", "SCX");

            entity.Property(e => e.CAttribute)
                .HasMaxLength(512)
                .HasColumnName("cAttribute");
            entity.Property(e => e.CValue).HasColumnName("cValue");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KShopScx).HasColumnName("kShopScx");
            entity.Property(e => e.NIsDotLiquidValue).HasColumnName("nIsDotLiquidValue");
            entity.Property(e => e.NReferenzGruppe).HasColumnName("nReferenzGruppe");
        });

        modelBuilder.Entity<VOfferPicture>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOfferPicture", "SCX");

            entity.Property(e => e.BPicture)
                .HasColumnType("image")
                .HasColumnName("bPicture");
            entity.Property(e => e.CHash)
                .HasMaxLength(255)
                .HasColumnName("cHash");
            entity.Property(e => e.CScxHash)
                .HasMaxLength(200)
                .HasColumnName("cScxHash");
            entity.Property(e => e.KPicture).HasColumnName("kPicture");
            entity.Property(e => e.KProduct).HasColumnName("kProduct");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NSorting).HasColumnName("nSorting");
        });

        modelBuilder.Entity<VOfferPriceUpdate>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOfferPriceUpdate", "SCX");

            entity.Property(e => e.CChannel)
                .HasMaxLength(15)
                .HasColumnName("cChannel");
            entity.Property(e => e.CChannelOfferId)
                .HasMaxLength(50)
                .HasColumnName("cChannelOfferId");
            entity.Property(e => e.CSellerId)
                .HasMaxLength(50)
                .HasColumnName("cSellerId");
            entity.Property(e => e.KChannel).HasColumnName("kChannel");
            entity.Property(e => e.KOffer).HasColumnName("kOffer");
            entity.Property(e => e.KProduct).HasColumnName("kProduct");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NType).HasColumnName("nType");
        });

        modelBuilder.Entity<VOfferProductAttribute>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOfferProductAttribute", "SCX");

            entity.Property(e => e.CAttribute)
                .HasMaxLength(512)
                .HasColumnName("cAttribute");
            entity.Property(e => e.CValue).HasColumnName("cValue");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KShopScx).HasColumnName("kShopScx");
            entity.Property(e => e.NIsDotLiquidValue).HasColumnName("nIsDotLiquidValue");
            entity.Property(e => e.NReferenzGruppe).HasColumnName("nReferenzGruppe");
        });

        modelBuilder.Entity<VOfferStockUpdate>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOfferStockUpdate", "SCX");

            entity.Property(e => e.CChannel)
                .HasMaxLength(15)
                .HasColumnName("cChannel");
            entity.Property(e => e.CChannelOfferId)
                .HasMaxLength(50)
                .HasColumnName("cChannelOfferId");
            entity.Property(e => e.CSellerId)
                .HasMaxLength(50)
                .HasColumnName("cSellerId");
            entity.Property(e => e.DChannelQuantityUpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("dChannelQuantityUpdatedAt");
            entity.Property(e => e.DQuantityUpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("dQuantityUpdatedAt");
            entity.Property(e => e.FChannelQuantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fChannelQuantity");
            entity.Property(e => e.FLastUpdatedQuantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLastUpdatedQuantity");
            entity.Property(e => e.FQuantity)
                .HasColumnType("decimal(26, 13)")
                .HasColumnName("fQuantity");
            entity.Property(e => e.KChannel).HasColumnName("kChannel");
            entity.Property(e => e.KOffer).HasColumnName("kOffer");
            entity.Property(e => e.KProduct).HasColumnName("kProduct");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NMaximalerBestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nMaximalerBestand");
            entity.Property(e => e.NMindestbestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nMindestbestand");
            entity.Property(e => e.NType).HasColumnName("nType");
        });

        modelBuilder.Entity<VOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOrder", "Pos");

            entity.Property(e => e.CBillingAddressCompany)
                .HasMaxLength(128)
                .HasColumnName("cBillingAddressCompany");
            entity.Property(e => e.CBillingAddressName)
                .HasMaxLength(255)
                .HasColumnName("cBillingAddressName");
            entity.Property(e => e.CComment).HasColumnName("cComment");
            entity.Property(e => e.CCurrencyIso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cCurrencyIso");
            entity.Property(e => e.CCustomerNumber)
                .HasMaxLength(30)
                .HasColumnName("cCustomerNumber");
            entity.Property(e => e.CExternalOrderNumber)
                .HasMaxLength(50)
                .HasColumnName("cExternalOrderNumber");
            entity.Property(e => e.CInvoiceNumber)
                .HasMaxLength(50)
                .HasColumnName("cInvoiceNumber");
            entity.Property(e => e.CLanguageIso)
                .HasMaxLength(10)
                .HasColumnName("cLanguageIso");
            entity.Property(e => e.CNote).HasColumnName("cNote");
            entity.Property(e => e.COrderNumber)
                .HasMaxLength(50)
                .HasColumnName("cOrderNumber");
            entity.Property(e => e.CPaymentMethodName)
                .HasMaxLength(255)
                .HasColumnName("cPaymentMethodName");
            entity.Property(e => e.CShippingAddressCompany)
                .HasMaxLength(128)
                .HasColumnName("cShippingAddressCompany");
            entity.Property(e => e.CShippingAddressName)
                .HasMaxLength(255)
                .HasColumnName("cShippingAddressName");
            entity.Property(e => e.CShippingName)
                .HasMaxLength(255)
                .HasColumnName("cShippingName");
            entity.Property(e => e.CTaxId)
                .HasMaxLength(20)
                .HasColumnName("cTaxId");
            entity.Property(e => e.DCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("dCreationDate");
            entity.Property(e => e.DShippingDate)
                .HasColumnType("datetime")
                .HasColumnName("dShippingDate");
            entity.Property(e => e.KOrder).HasColumnName("kOrder");
            entity.Property(e => e.NChangeable).HasColumnName("nChangeable");
            entity.Property(e => e.NDescriptionType).HasColumnName("nDescriptionType");
        });

        modelBuilder.Entity<VOrder1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOrder", "SCX");

            entity.Property(e => e.CChannel)
                .HasMaxLength(15)
                .HasColumnName("cChannel");
            entity.Property(e => e.COrderId)
                .HasMaxLength(50)
                .HasColumnName("cOrderId");
            entity.Property(e => e.CSellerId)
                .HasMaxLength(50)
                .HasColumnName("cSellerId");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
        });

        modelBuilder.Entity<VOrderBillingAddress>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOrderBillingAddress", "Pos");

            entity.Property(e => e.CAddressAddition)
                .HasMaxLength(60)
                .HasColumnName("cAddressAddition");
            entity.Property(e => e.CCity)
                .HasMaxLength(255)
                .HasColumnName("cCity");
            entity.Property(e => e.CCompany)
                .HasMaxLength(128)
                .HasColumnName("cCompany");
            entity.Property(e => e.CDateOfBirth)
                .HasMaxLength(10)
                .HasColumnName("cDateOfBirth");
            entity.Property(e => e.CExtraAddressLine)
                .HasMaxLength(255)
                .HasColumnName("cExtraAddressLine");
            entity.Property(e => e.CFax)
                .HasMaxLength(30)
                .HasColumnName("cFax");
            entity.Property(e => e.CFirstName)
                .HasMaxLength(255)
                .HasColumnName("cFirstName");
            entity.Property(e => e.CIso)
                .HasMaxLength(5)
                .HasColumnName("cISO");
            entity.Property(e => e.CLastName)
                .HasMaxLength(255)
                .HasColumnName("cLastName");
            entity.Property(e => e.CMail)
                .HasMaxLength(255)
                .HasColumnName("cMail");
            entity.Property(e => e.CMobile)
                .HasMaxLength(30)
                .HasColumnName("cMobile");
            entity.Property(e => e.CPhone)
                .HasMaxLength(30)
                .HasColumnName("cPhone");
            entity.Property(e => e.CSalutation)
                .HasMaxLength(30)
                .HasColumnName("cSalutation");
            entity.Property(e => e.CState)
                .HasMaxLength(255)
                .HasColumnName("cState");
            entity.Property(e => e.CStreet)
                .HasMaxLength(255)
                .HasColumnName("cStreet");
            entity.Property(e => e.CTitle)
                .HasMaxLength(64)
                .HasColumnName("cTitle");
            entity.Property(e => e.CZip)
                .HasMaxLength(24)
                .HasColumnName("cZip");
            entity.Property(e => e.FDiscount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fDiscount");
            entity.Property(e => e.KCustomerGroupId).HasColumnName("kCustomerGroupId");
            entity.Property(e => e.KOrder).HasColumnName("kOrder");
        });

        modelBuilder.Entity<VOrderCancellation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOrderCancellation", "SCX");

            entity.Property(e => e.CCancelReason)
                .HasMaxLength(50)
                .HasColumnName("cCancelReason");
            entity.Property(e => e.CChannel)
                .HasMaxLength(15)
                .HasColumnName("cChannel");
            entity.Property(e => e.CExternalOrderId)
                .HasMaxLength(50)
                .HasColumnName("cExternalOrderId");
            entity.Property(e => e.CSellerId)
                .HasMaxLength(50)
                .HasColumnName("cSellerId");
            entity.Property(e => e.KOrder).HasColumnName("kOrder");
        });

        modelBuilder.Entity<VOrderCancellationItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOrderCancellationItem", "SCX");

            entity.Property(e => e.COrderItemId)
                .HasMaxLength(50)
                .HasColumnName("cOrderItemId");
            entity.Property(e => e.FQuantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fQuantity");
            entity.Property(e => e.KOrder).HasColumnName("kOrder");
        });

        modelBuilder.Entity<VOrderItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOrderItem", "Pos");

            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CNote)
                .HasMaxLength(2000)
                .HasColumnName("cNote");
            entity.Property(e => e.CSku)
                .HasMaxLength(100)
                .HasColumnName("cSku");
            entity.Property(e => e.CUnit)
                .HasMaxLength(255)
                .HasColumnName("cUnit");
            entity.Property(e => e.CUsageId)
                .HasMaxLength(255)
                .HasColumnName("cUsageId");
            entity.Property(e => e.CVoucherId)
                .HasMaxLength(255)
                .HasColumnName("cVoucherId");
            entity.Property(e => e.FDiscount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fDiscount");
            entity.Property(e => e.FPriceNet)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPriceNet");
            entity.Property(e => e.FPurchasePriceNet)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPurchasePriceNet");
            entity.Property(e => e.FVat)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVat");
            entity.Property(e => e.KConfigurationParent).HasColumnName("kConfigurationParent");
            entity.Property(e => e.KConfigurationitem).HasColumnName("kConfigurationitem");
            entity.Property(e => e.KOrder).HasColumnName("kOrder");
            entity.Property(e => e.KOrderPos).HasColumnName("kOrderPos");
            entity.Property(e => e.KProduct).HasColumnName("kProduct");
            entity.Property(e => e.NQuantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nQuantity");
            entity.Property(e => e.NType).HasColumnName("nType");
        });

        modelBuilder.Entity<VOrderLotNumberBestBeforeDate>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOrderLotNumberBestBeforeDate", "Pos");

            entity.Property(e => e.CLotNumber)
                .HasMaxLength(255)
                .HasColumnName("cLotNumber");
            entity.Property(e => e.DBestBeforeDate)
                .HasColumnType("datetime")
                .HasColumnName("dBestBeforeDate");
            entity.Property(e => e.FQuantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fQuantity");
            entity.Property(e => e.KOrder).HasColumnName("kOrder");
            entity.Property(e => e.KOrderPos).HasColumnName("kOrderPos");
        });

        modelBuilder.Entity<VOrderPayment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOrderPayment", "Pos");

            entity.Property(e => e.CExternalTransactionId)
                .HasMaxLength(255)
                .HasColumnName("cExternalTransactionId");
            entity.Property(e => e.CNote)
                .HasMaxLength(2000)
                .HasColumnName("cNote");
            entity.Property(e => e.CPaymentMethodName)
                .HasMaxLength(255)
                .HasColumnName("cPaymentMethodName");
            entity.Property(e => e.FAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAmount");
            entity.Property(e => e.KOrder).HasColumnName("kOrder");
            entity.Property(e => e.KPayment).HasColumnName("kPayment");
            entity.Property(e => e.NType).HasColumnName("nType");
        });

        modelBuilder.Entity<VOrderPayment1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOrderPayment", "SCX");

            entity.Property(e => e.CChannelId)
                .HasMaxLength(15)
                .HasColumnName("cChannelId");
            entity.Property(e => e.COrderIdExternal)
                .HasMaxLength(50)
                .HasColumnName("cOrderIdExternal");
            entity.Property(e => e.CSellerId)
                .HasMaxLength(50)
                .HasColumnName("cSellerId");
            entity.Property(e => e.DPaymentDate)
                .HasColumnType("datetime")
                .HasColumnName("dPaymentDate");
            entity.Property(e => e.KOrder).HasColumnName("kOrder");
            entity.Property(e => e.NPaymentComplete).HasColumnName("nPaymentComplete");
        });

        modelBuilder.Entity<VOrderReturn>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOrderReturn", "SCX");

            entity.Property(e => e.CChannel)
                .HasMaxLength(15)
                .HasColumnName("cChannel");
            entity.Property(e => e.CChannelReturnId)
                .HasMaxLength(255)
                .HasColumnName("cChannelReturnId");
            entity.Property(e => e.COrderId)
                .HasMaxLength(50)
                .HasColumnName("cOrderId");
            entity.Property(e => e.CSellerId)
                .HasMaxLength(50)
                .HasColumnName("cSellerId");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KSellerReturnId).HasColumnName("kSellerReturnId");
        });

        modelBuilder.Entity<VOrderReturnItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOrderReturnItem", "SCX");

            entity.Property(e => e.CCondition)
                .HasMaxLength(255)
                .HasColumnName("cCondition");
            entity.Property(e => e.CNote).HasColumnName("cNote");
            entity.Property(e => e.COrderItemId)
                .HasMaxLength(50)
                .HasColumnName("cOrderItemId");
            entity.Property(e => e.CReturnReason)
                .HasMaxLength(255)
                .HasColumnName("cReturnReason");
            entity.Property(e => e.FQuantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fQuantity");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.NAcceptReturn).HasColumnName("nAcceptReturn");
            entity.Property(e => e.NRequireReturnShipping).HasColumnName("nRequireReturnShipping");
        });

        modelBuilder.Entity<VOrderSerialNumber>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOrderSerialNumber", "Pos");

            entity.Property(e => e.CSerialNumber)
                .HasMaxLength(128)
                .HasColumnName("cSerialNumber");
            entity.Property(e => e.KOrder).HasColumnName("kOrder");
            entity.Property(e => e.KOrderPos).HasColumnName("kOrderPos");
        });

        modelBuilder.Entity<VOrderShipping>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOrderShipping", "SCX");

            entity.Property(e => e.CChannelId)
                .HasMaxLength(15)
                .HasColumnName("cChannelId");
            entity.Property(e => e.COrderIdExternal)
                .HasMaxLength(50)
                .HasColumnName("cOrderIdExternal");
            entity.Property(e => e.CSellerId)
                .HasMaxLength(50)
                .HasColumnName("cSellerId");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KDeliveryNote).HasColumnName("kDeliveryNote");
            entity.Property(e => e.KOrder).HasColumnName("kOrder");
            entity.Property(e => e.KOrderShipping).HasColumnName("kOrderShipping");
            entity.Property(e => e.NShippingComplete).HasColumnName("nShippingComplete");
        });

        modelBuilder.Entity<VOrderShippingAddress>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOrderShippingAddress", "Pos");

            entity.Property(e => e.CCity)
                .HasMaxLength(255)
                .HasColumnName("cCity");
            entity.Property(e => e.CCompany)
                .HasMaxLength(128)
                .HasColumnName("cCompany");
            entity.Property(e => e.CCountryIso)
                .HasMaxLength(5)
                .HasColumnName("cCountryIso");
            entity.Property(e => e.CDeliveryInstruction)
                .HasMaxLength(60)
                .HasColumnName("cDeliveryInstruction");
            entity.Property(e => e.CExtraAddressLine)
                .HasMaxLength(255)
                .HasColumnName("cExtraAddressLine");
            entity.Property(e => e.CFax)
                .HasMaxLength(30)
                .HasColumnName("cFax");
            entity.Property(e => e.CFirstName)
                .HasMaxLength(255)
                .HasColumnName("cFirstName");
            entity.Property(e => e.CLastName)
                .HasMaxLength(255)
                .HasColumnName("cLastName");
            entity.Property(e => e.CMail)
                .HasMaxLength(255)
                .HasColumnName("cMail");
            entity.Property(e => e.CMobile)
                .HasMaxLength(30)
                .HasColumnName("cMobile");
            entity.Property(e => e.CPhone)
                .HasMaxLength(30)
                .HasColumnName("cPhone");
            entity.Property(e => e.CSalutation)
                .HasMaxLength(30)
                .HasColumnName("cSalutation");
            entity.Property(e => e.CState)
                .HasMaxLength(255)
                .HasColumnName("cState");
            entity.Property(e => e.CStreet)
                .HasMaxLength(255)
                .HasColumnName("cStreet");
            entity.Property(e => e.CTitle)
                .HasMaxLength(64)
                .HasColumnName("cTitle");
            entity.Property(e => e.CZip)
                .HasMaxLength(24)
                .HasColumnName("cZip");
            entity.Property(e => e.KOrder).HasColumnName("kOrder");
        });

        modelBuilder.Entity<VOrderShippingItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOrderShippingItem", "SCX");

            entity.Property(e => e.CCarrier)
                .HasMaxLength(100)
                .HasColumnName("cCarrier");
            entity.Property(e => e.CReturnCarrier)
                .HasMaxLength(100)
                .HasColumnName("cReturnCarrier");
            entity.Property(e => e.CReturnTrackingNumber)
                .HasMaxLength(255)
                .HasColumnName("cReturnTrackingNumber");
            entity.Property(e => e.CTrackingNumber)
                .HasMaxLength(255)
                .HasColumnName("cTrackingNumber");
            entity.Property(e => e.DShippedAt)
                .HasColumnType("datetime")
                .HasColumnName("dShippedAt");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KDeliveryNote).HasColumnName("kDeliveryNote");
        });

        modelBuilder.Entity<VOrderShippingItemIdList>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOrderShippingItemIdList", "SCX");

            entity.Property(e => e.COrderItemIdExternal)
                .HasMaxLength(50)
                .HasColumnName("cOrderItemIdExternal");
            entity.Property(e => e.FQuantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fQuantity");
            entity.Property(e => e.KAuftragPosition).HasColumnName("kAuftragPosition");
            entity.Property(e => e.KDeliveryNote).HasColumnName("kDeliveryNote");
            entity.Property(e => e.KOrder).HasColumnName("kOrder");
            entity.Property(e => e.KOrderItem).HasColumnName("kOrderItem");
        });

        modelBuilder.Entity<VOrderShippingShippedFrom>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOrderShippingShippedFrom", "SCX");

            entity.Property(e => e.CCity)
                .HasMaxLength(255)
                .HasColumnName("cCity");
            entity.Property(e => e.CCountryIso)
                .HasMaxLength(5)
                .HasColumnName("cCountryIso");
            entity.Property(e => e.CPostcode)
                .HasMaxLength(255)
                .HasColumnName("cPostcode");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
        });

        modelBuilder.Entity<VPendingStock>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vPendingStocks", "FulfillmentNetwork");

            entity.Property(e => e.Batch).HasMaxLength(255);
            entity.Property(e => e.BestBeforeDay).HasColumnName("BestBefore.Day");
            entity.Property(e => e.BestBeforeMonth).HasColumnName("BestBefore.Month");
            entity.Property(e => e.BestBeforeYear).HasColumnName("BestBefore.Year");
            entity.Property(e => e.CInboundId)
                .HasMaxLength(255)
                .HasColumnName("cInboundId");
            entity.Property(e => e.CLieferscheinNr)
                .HasMaxLength(255)
                .HasColumnName("cLieferscheinNr");
            entity.Property(e => e.COwnerId)
                .HasMaxLength(10)
                .HasColumnName("cOwnerId");
            entity.Property(e => e.DUpdatedAt).HasColumnName("dUpdatedAt");
            entity.Property(e => e.Jfsku).HasMaxLength(255);
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBuchungsart).HasColumnName("kBuchungsart");
            entity.Property(e => e.KLieferantenBestellungPos).HasColumnName("kLieferantenBestellungPos");
            entity.Property(e => e.KRmretourePos).HasColumnName("kRMRetourePos");
            entity.Property(e => e.KSessionId).HasColumnName("kSessionId");
            entity.Property(e => e.KWarenLagerEingang).HasColumnName("kWarenLagerEingang");
            entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.NBlocked).HasColumnName("nBlocked");
            entity.Property(e => e.NChangeState).HasColumnName("nChangeState");
            entity.Property(e => e.NCondition).HasColumnName("nCondition");
            entity.Property(e => e.Note).HasMaxLength(255);
            entity.Property(e => e.Quantity).HasColumnType("decimal(27, 13)");
            entity.Property(e => e.QuantityBlocked).HasColumnType("decimal(27, 13)");
            entity.Property(e => e.WarehouseId).HasMaxLength(50);
        });

        modelBuilder.Entity<VPictureShopMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vPictureShopMapping", "SCX");

            entity.Property(e => e.CComputedHash)
                .HasMaxLength(45)
                .HasColumnName("cComputedHash");
            entity.Property(e => e.CHash)
                .HasMaxLength(200)
                .HasColumnName("cHash");
            entity.Property(e => e.KPicture).HasColumnName("kPicture");
            entity.Property(e => e.KShop).HasColumnName("kShop");
        });

        modelBuilder.Entity<VPositionstyp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vPositionstyp", "Steuern");

            entity.Property(e => e.NPositionstyp).HasColumnName("nPositionstyp");
            entity.Property(e => e.Name)
                .HasMaxLength(27)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VPositionstypSteuerschluessel>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vPositionstypSteuerschluessel", "Steuern");

            entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");
            entity.Property(e => e.KSteuersatz).HasColumnName("kSteuersatz");
            entity.Property(e => e.KSteuerschluessel).HasColumnName("kSteuerschluessel");
            entity.Property(e => e.KSteuerschluesselIgl).HasColumnName("kSteuerschluesselIGL");
            entity.Property(e => e.KSteuerschluesselReverseCharge).HasColumnName("kSteuerschluesselReverseCharge");
            entity.Property(e => e.KSteuerschluesselUstIgl).HasColumnName("kSteuerschluesselUstIGL");
            entity.Property(e => e.KSteuerzone).HasColumnName("kSteuerzone");
            entity.Property(e => e.NPositionstyp).HasColumnName("nPositionstyp");
        });

        modelBuilder.Entity<VPreislisteNetto>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vPreislisteNetto", "Preisliste");

            entity.Property(e => e.FNettoPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fNettoPreis");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NAnzahlAb).HasColumnName("nAnzahlAb");
        });

        modelBuilder.Entity<VProduct>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vProduct", "B2BNetzwerk");

            entity.Property(e => e.CAnmerkung).HasColumnName("cAnmerkung");
            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CAsin)
                .HasMaxLength(255)
                .HasColumnName("cASIN");
            entity.Property(e => e.CBarcode)
                .HasMaxLength(255)
                .HasColumnName("cBarcode");
            entity.Property(e => e.CEpid)
                .HasMaxLength(255)
                .HasColumnName("cEPID");
            entity.Property(e => e.CGefahrnr)
                .HasMaxLength(255)
                .HasColumnName("cGefahrnr");
            entity.Property(e => e.CGrundpreisCode)
                .HasMaxLength(10)
                .HasColumnName("cGrundpreisCode");
            entity.Property(e => e.CGrundpreisDisplayCode)
                .HasMaxLength(255)
                .HasColumnName("cGrundpreisDisplayCode");
            entity.Property(e => e.CHan)
                .HasMaxLength(255)
                .HasColumnName("cHAN");
            entity.Property(e => e.CHerkunftsland)
                .HasMaxLength(64)
                .HasColumnName("cHerkunftsland");
            entity.Property(e => e.CIsbn)
                .HasMaxLength(255)
                .HasColumnName("cISBN");
            entity.Property(e => e.CJpid)
                .HasMaxLength(10)
                .HasColumnName("cJpid");
            entity.Property(e => e.CLagerAktiv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLagerAktiv");
            entity.Property(e => e.CLagerArtikel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLagerArtikel");
            entity.Property(e => e.CLagerKleinerNull)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLagerKleinerNull");
            entity.Property(e => e.CLagerVariation)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLagerVariation");
            entity.Property(e => e.CMassEinheitCode)
                .HasMaxLength(10)
                .HasColumnName("cMassEinheitCode");
            entity.Property(e => e.CSuchbegriffe)
                .HasMaxLength(255)
                .HasColumnName("cSuchbegriffe");
            entity.Property(e => e.CTaric)
                .HasMaxLength(20)
                .HasColumnName("cTaric");
            entity.Property(e => e.CTeilbar)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cTeilbar");
            entity.Property(e => e.CTopArtikel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cTopArtikel");
            entity.Property(e => e.CUnnummer)
                .HasMaxLength(255)
                .HasColumnName("cUNNummer");
            entity.Property(e => e.CUpc)
                .HasMaxLength(255)
                .HasColumnName("cUPC");
            entity.Property(e => e.DErscheinungsdatum)
                .HasColumnType("datetime")
                .HasColumnName("dErscheinungsdatum");
            entity.Property(e => e.DErstelldatum)
                .HasColumnType("datetime")
                .HasColumnName("dErstelldatum");
            entity.Property(e => e.DMod)
                .HasColumnType("datetime")
                .HasColumnName("dMod");
            entity.Property(e => e.DZulaufVerfuegbarAm)
                .HasColumnType("datetime")
                .HasColumnName("dZulaufVerfuegbarAm");
            entity.Property(e => e.FAbnahmeintervall)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAbnahmeintervall");
            entity.Property(e => e.FArtGewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fArtGewicht");
            entity.Property(e => e.FBreite)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBreite");
            entity.Property(e => e.FGewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGewicht");
            entity.Property(e => e.FGrundpreisMenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGrundpreisMenge");
            entity.Property(e => e.FHoehe)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fHoehe");
            entity.Property(e => e.FLaenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLaenge");
            entity.Property(e => e.FMassMenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMassMenge");
            entity.Property(e => e.FUvp)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fUVP");
            entity.Property(e => e.FVknetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVKNetto");
            entity.Property(e => e.FVpewert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVPEWert");
            entity.Property(e => e.HerstellerName).HasMaxLength(255);
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KGrundPreisEinheit).HasColumnName("kGrundPreisEinheit");
            entity.Property(e => e.KHersteller).HasColumnName("kHersteller");
            entity.Property(e => e.KMassEinheit).HasColumnName("kMassEinheit");
            entity.Property(e => e.KVaterArtikel).HasColumnName("kVaterArtikel");
            entity.Property(e => e.KVerkaufsEinheit).HasColumnName("kVerkaufsEinheit");
            entity.Property(e => e.KVersandklasse).HasColumnName("kVersandklasse");
            entity.Property(e => e.KWarengruppe).HasColumnName("kWarengruppe");
            entity.Property(e => e.NAktion).HasColumnName("nAktion");
            entity.Property(e => e.NCharge).HasColumnName("nCharge");
            entity.Property(e => e.NIstVater).HasColumnName("nIstVater");
            entity.Property(e => e.NMhd).HasColumnName("nMHD");
            entity.Property(e => e.NMidestbestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nMidestbestand");
            entity.Property(e => e.NMindestbestellmaenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nMindestbestellmaenge");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NVpe).HasColumnName("nVPE");
            entity.Property(e => e.NZulaufVerfuegbarMenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nZulaufVerfuegbarMenge");
        });

        modelBuilder.Entity<VProduct1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vProduct", "FulfillmentNetwork");

            entity.Property(e => e.DimensionsHeight)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("Dimensions.Height");
            entity.Property(e => e.DimensionsLength)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("Dimensions.Length");
            entity.Property(e => e.DimensionsWidth)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("Dimensions.Width");
            entity.Property(e => e.IdentifierAsin)
                .HasMaxLength(30)
                .HasColumnName("Identifier.Asin");
            entity.Property(e => e.IdentifierEan)
                .HasMaxLength(255)
                .HasColumnName("Identifier.Ean");
            entity.Property(e => e.IdentifierIsbn)
                .HasMaxLength(255)
                .HasColumnName("Identifier.Isbn");
            entity.Property(e => e.IdentifierMpnManufacturer)
                .HasMaxLength(255)
                .HasColumnName("Identifier.Mpn.Manufacturer");
            entity.Property(e => e.IdentifierMpnPartNumber)
                .HasMaxLength(255)
                .HasColumnName("Identifier.Mpn.PartNumber");
            entity.Property(e => e.IdentifierUpc)
                .HasMaxLength(255)
                .HasColumnName("Identifier.Upc");
            entity.Property(e => e.Jfsku).HasMaxLength(255);
            entity.Property(e => e.Manufacturer).HasMaxLength(255);
            entity.Property(e => e.MerchantSku).HasMaxLength(255);
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.NetRetailPriceAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("NetRetailPrice.Amount");
            entity.Property(e => e.NetRetailPriceCurrency)
                .HasMaxLength(20)
                .HasColumnName("NetRetailPrice.Currency");
            entity.Property(e => e.NetWeight).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.OriginCountry).HasMaxLength(64);
            entity.Property(e => e.ProductGroup).HasMaxLength(255);
            entity.Property(e => e.SpecificationsFnsku)
                .HasMaxLength(50)
                .HasColumnName("Specifications.Fnsku");
            entity.Property(e => e.SpecificationsHazardIdentifier)
                .HasMaxLength(255)
                .HasColumnName("Specifications.HazardIdentifier");
            entity.Property(e => e.SpecificationsIsBatch).HasColumnName("Specifications.IsBatch");
            entity.Property(e => e.SpecificationsIsBestBefore).HasColumnName("Specifications.IsBestBefore");
            entity.Property(e => e.SpecificationsIsBillOfMaterials).HasColumnName("Specifications.IsBillOfMaterials");
            entity.Property(e => e.SpecificationsIsConfiguration).HasColumnName("Specifications.IsConfiguration");
            entity.Property(e => e.SpecificationsIsDivisible).HasColumnName("Specifications.IsDivisible");
            entity.Property(e => e.SpecificationsIsSerialNumber).HasColumnName("Specifications.IsSerialNumber");
            entity.Property(e => e.SpecificationsIsVariationCombination).HasColumnName("Specifications.IsVariationCombination");
            entity.Property(e => e.SpecificationsTaric)
                .HasMaxLength(20)
                .HasColumnName("Specifications.Taric");
            entity.Property(e => e.SpecificationsUnNumber)
                .HasMaxLength(255)
                .HasColumnName("Specifications.UnNumber");
            entity.Property(e => e.WawiProductNumber).HasMaxLength(100);
            entity.Property(e => e.Weight).HasColumnType("decimal(25, 13)");
        });

        modelBuilder.Entity<VProduct2>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vProduct", "Pos");

            entity.Property(e => e.BLastChanged)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bLastChanged");
            entity.Property(e => e.CAnnotation).HasColumnName("cAnnotation");
            entity.Property(e => e.CBarcode)
                .HasMaxLength(255)
                .HasColumnName("cBarcode");
            entity.Property(e => e.CHan)
                .HasMaxLength(255)
                .HasColumnName("cHAN");
            entity.Property(e => e.CHasSerialNumber)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cHasSerialNumber");
            entity.Property(e => e.CImageHash)
                .HasMaxLength(255)
                .HasColumnName("cImageHash");
            entity.Property(e => e.CImageSource)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("cImageSource");
            entity.Property(e => e.CIsQuantityDivisible)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cIsQuantityDivisible");
            entity.Property(e => e.CIsbn)
                .HasMaxLength(255)
                .HasColumnName("cIsbn");
            entity.Property(e => e.CKurzBeschreibung).HasColumnName("cKurzBeschreibung");
            entity.Property(e => e.CManufacturerName)
                .HasMaxLength(255)
                .HasColumnName("cManufacturerName");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CSku)
                .HasMaxLength(100)
                .HasColumnName("cSKU");
            entity.Property(e => e.CUnit)
                .HasMaxLength(255)
                .HasColumnName("cUnit");
            entity.Property(e => e.CUpc)
                .HasMaxLength(255)
                .HasColumnName("cUPC");
            entity.Property(e => e.CUseStock)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cUseStock");
            entity.Property(e => e.CVoucherCampaign)
                .HasMaxLength(255)
                .HasColumnName("cVoucherCampaign");
            entity.Property(e => e.CVoucherCurrency)
                .HasMaxLength(5)
                .HasColumnName("cVoucherCurrency");
            entity.Property(e => e.DActive)
                .HasColumnType("datetime")
                .HasColumnName("dActive");
            entity.Property(e => e.DCreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("dCreatedAt");
            entity.Property(e => e.DInactive)
                .HasColumnType("datetime")
                .HasColumnName("dInactive");
            entity.Property(e => e.DLastModified)
                .HasColumnType("datetime")
                .HasColumnName("dLastModified");
            entity.Property(e => e.DUpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("dUpdatedAt");
            entity.Property(e => e.Discount)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.FPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPrice");
            entity.Property(e => e.FPurchasingPrice)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPurchasingPrice");
            entity.Property(e => e.FQuantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fQuantity");
            entity.Property(e => e.FReservedQuantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fReservedQuantity");
            entity.Property(e => e.KCompany).HasColumnName("kCompany");
            entity.Property(e => e.KParentId).HasColumnName("kParentId");
            entity.Property(e => e.KProduct).HasColumnName("kProduct");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");
            entity.Property(e => e.NFixedAmount).HasColumnName("nFixedAmount");
            entity.Property(e => e.NHasBestBeforeDate).HasColumnName("nHasBestBeforeDate");
            entity.Property(e => e.NHasLotNumber).HasColumnName("nHasLotNumber");
            entity.Property(e => e.NIsCompositeProduct).HasColumnName("nIsCompositeProduct");
            entity.Property(e => e.NIsParent).HasColumnName("nIsParent");
            entity.Property(e => e.NProductType).HasColumnName("nProductType");
            entity.Property(e => e.NPurposeType).HasColumnName("nPurposeType");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
            entity.Property(e => e.NVoucherAmount)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("nVoucherAmount");
            entity.Property(e => e.NVoucherType).HasColumnName("nVoucherType");
            entity.Property(e => e.Tags).HasMaxLength(4000);
            entity.Property(e => e.TaxRate)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.TaxRate2)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Variants)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VProduct3>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vProduct", "SCX");

            entity.Property(e => e.CBrand)
                .HasMaxLength(255)
                .HasColumnName("cBrand");
            entity.Property(e => e.CDescription).HasColumnName("cDescription");
            entity.Property(e => e.CGtin)
                .HasMaxLength(255)
                .HasColumnName("cGTIN");
            entity.Property(e => e.CIsbn)
                .HasMaxLength(255)
                .HasColumnName("cISBN");
            entity.Property(e => e.CMpn)
                .HasMaxLength(255)
                .HasColumnName("cMPN");
            entity.Property(e => e.CScxCategoryId)
                .HasMaxLength(512)
                .HasColumnName("cScxCategoryId");
            entity.Property(e => e.CShopDescription).HasColumnName("cShopDescription");
            entity.Property(e => e.CShopSubTitle).HasColumnName("cShopSubTitle");
            entity.Property(e => e.CShopTitle)
                .HasMaxLength(255)
                .HasColumnName("cShopTitle");
            entity.Property(e => e.CSku)
                .HasMaxLength(100)
                .HasColumnName("cSKU");
            entity.Property(e => e.CSrpCurrency)
                .HasMaxLength(20)
                .HasColumnName("cSrpCurrency");
            entity.Property(e => e.CSubTitle).HasColumnName("cSubTitle");
            entity.Property(e => e.CTitle)
                .HasMaxLength(255)
                .HasColumnName("cTitle");
            entity.Property(e => e.FChannelQuantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fChannelQuantity");
            entity.Property(e => e.FQuantity)
                .HasColumnType("decimal(26, 13)")
                .HasColumnName("fQuantity");
            entity.Property(e => e.FSrpAmount)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fSrpAmount");
            entity.Property(e => e.KCategory).HasColumnName("kCategory");
            entity.Property(e => e.KParent).HasColumnName("kParent");
            entity.Property(e => e.KProduct).HasColumnName("kProduct");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");
            entity.Property(e => e.NAktion).HasColumnName("nAktion");
            entity.Property(e => e.NIsParent).HasColumnName("nIsParent");
            entity.Property(e => e.NMaximalerBestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nMaximalerBestand");
            entity.Property(e => e.NMindestbestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nMindestbestand");
            entity.Property(e => e.NVariationsSupported).HasColumnName("nVariationsSupported");
        });

        modelBuilder.Entity<VProductAttrAndValue>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vProductAttrAndValues", "B2BNetzwerk");

            entity.Property(e => e.CIso)
                .HasMaxLength(10)
                .HasColumnName("cISO");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CValue).HasColumnName("cValue");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KAttribut).HasColumnName("kAttribut");
            entity.Property(e => e.NIstFreifeld).HasColumnName("nIstFreifeld");
            entity.Property(e => e.NIstMehrsprachig).HasColumnName("nIstMehrsprachig");
        });

        modelBuilder.Entity<VProductAttribute>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vProductAttribute", "Pos");

            entity.Property(e => e.CGroup)
                .HasMaxLength(150)
                .HasColumnName("cGroup");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.FPrice)
                .HasColumnType("numeric(1, 1)")
                .HasColumnName("fPrice");
            entity.Property(e => e.KProduct).HasColumnName("kProduct");
            entity.Property(e => e.KType).HasColumnName("kType");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<VProductBundle>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vProductBundles", "FulfillmentNetwork");

            entity.Property(e => e.Ean).HasMaxLength(255);
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.Quantity).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Upc).HasMaxLength(255);
        });

        modelBuilder.Entity<VProductCompliance>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vProductCompliance", "Ebay");

            entity.Property(e => e.CProfileDesc)
                .HasMaxLength(255)
                .HasColumnName("cProfileDesc");
            entity.Property(e => e.CProfileId)
                .HasMaxLength(255)
                .HasColumnName("cProfileId");
            entity.Property(e => e.CProfileName)
                .HasMaxLength(255)
                .HasColumnName("cProfileName");
            entity.Property(e => e.CProfileType)
                .HasMaxLength(50)
                .HasColumnName("cProfileType");
            entity.Property(e => e.KEbayuser).HasColumnName("kEbayuser");
            entity.Property(e => e.NSiteId).HasColumnName("nSiteId");
        });

        modelBuilder.Entity<VProductComposite>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vProductComposite", "Pos");

            entity.Property(e => e.BLastChanged)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bLastChanged");
            entity.Property(e => e.DActive)
                .HasColumnType("datetime")
                .HasColumnName("dActive");
            entity.Property(e => e.DInactive)
                .HasColumnType("datetime")
                .HasColumnName("dInactive");
            entity.Property(e => e.DLastModified)
                .HasColumnType("datetime")
                .HasColumnName("dLastModified");
            entity.Property(e => e.FQuantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fQuantity");
            entity.Property(e => e.KProduct).HasColumnName("kProduct");
            entity.Property(e => e.KProductIdComponent).HasColumnName("kProductIdComponent");
            entity.Property(e => e.KShop).HasColumnName("kShop");
        });

        modelBuilder.Entity<VProductOption>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vProductOption", "Pos");

            entity.Property(e => e.COptionName)
                .HasMaxLength(255)
                .HasColumnName("cOptionName");
            entity.Property(e => e.COptionValue)
                .HasMaxLength(255)
                .HasColumnName("cOptionValue");
            entity.Property(e => e.KProduct).HasColumnName("kProduct");
        });

        modelBuilder.Entity<VProductPosAttribute>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vProductPosAttribute", "Pos");

            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CValue).HasColumnName("cValue");
            entity.Property(e => e.FValueDecimal)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fValueDecimal");
            entity.Property(e => e.KProduct).HasColumnName("kProduct");
        });

        modelBuilder.Entity<VProductTakeBack>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vProductTakeBack", "Ebay");

            entity.Property(e => e.CProfileDesc)
                .HasMaxLength(255)
                .HasColumnName("cProfileDesc");
            entity.Property(e => e.CProfileId)
                .HasMaxLength(255)
                .HasColumnName("cProfileId");
            entity.Property(e => e.CProfileName)
                .HasMaxLength(255)
                .HasColumnName("cProfileName");
            entity.Property(e => e.CProfileType)
                .HasMaxLength(50)
                .HasColumnName("cProfileType");
            entity.Property(e => e.KEbayuser).HasColumnName("kEbayuser");
            entity.Property(e => e.NSiteId).HasColumnName("nSiteId");
        });

        modelBuilder.Entity<VProductVariant>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vProductVariant", "Pos");

            entity.Property(e => e.CVariantName)
                .HasMaxLength(255)
                .HasColumnName("cVariantName");
            entity.Property(e => e.KProduct).HasColumnName("kProduct");
        });

        modelBuilder.Entity<VProzentGeliefert>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vProzentGeliefert", "Auftrag");

            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.ProzAufLieferschein).HasColumnType("numeric(38, 6)");
            entity.Property(e => e.ProzGeliefert).HasColumnType("numeric(38, 6)");
        });

        modelBuilder.Entity<VQuickSyncBestandQueue>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vQuickSyncBestandQueue", "DbeS");

            entity.Property(e => e.CDelInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cDelInet");
            entity.Property(e => e.CInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cInet");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NAktion).HasColumnName("nAktion");
            entity.Property(e => e.NInBearbeitung).HasColumnName("nInBearbeitung");
        });

        modelBuilder.Entity<VQuickSyncPreisQueue>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vQuickSyncPreisQueue", "DbeS");

            entity.Property(e => e.CDelInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cDelInet");
            entity.Property(e => e.CInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cInet");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NAktion).HasColumnName("nAktion");
            entity.Property(e => e.NInBearbeitung).HasColumnName("nInBearbeitung");
        });

        modelBuilder.Entity<VQuickSyncQueue>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vQuickSyncQueue", "DbeS");

            entity.Property(e => e.CDelInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cDelInet");
            entity.Property(e => e.CInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cInet");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NAktion).HasColumnName("nAktion");
            entity.Property(e => e.NInBearbeitung).HasColumnName("nInBearbeitung");
        });

        modelBuilder.Entity<VRechnung>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRechnung", "DEPRECATED");

            entity.Property(e => e.CBezahlt)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("cBezahlt");
            entity.Property(e => e.CErloeskonto)
                .HasMaxLength(10)
                .HasColumnName("cErloeskonto");
            entity.Property(e => e.CRechnungsNr)
                .HasMaxLength(50)
                .HasColumnName("cRechnungsNr");
            entity.Property(e => e.CStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("cStatus");
            entity.Property(e => e.DDruckdatum)
                .HasColumnType("datetime")
                .HasColumnName("dDruckdatum");
            entity.Property(e => e.DEmailversandt)
                .HasColumnType("datetime")
                .HasColumnName("dEmailversandt");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.NInkassoStatus).HasColumnName("nInkassoStatus");
            entity.Property(e => e.NMahnstop).HasColumnName("nMahnstop");
            entity.Property(e => e.NZahlungsziel).HasColumnName("nZahlungsziel");
            entity.Property(e => e.TBenutzerKBenutzer).HasColumnName("tBenutzer_kBenutzer");
            entity.Property(e => e.TBestellungKBestellung).HasColumnName("tBestellung_kBestellung");
            entity.Property(e => e.TKundeKKunde).HasColumnName("tKunde_kKunde");
        });

        modelBuilder.Entity<VRechnung1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRechnung", "Rechnung");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CEbayUsername)
                .HasMaxLength(255)
                .HasColumnName("cEbayUsername");
            entity.Property(e => e.CExterneAuftragsnummer)
                .HasMaxLength(50)
                .HasColumnName("cExterneAuftragsnummer");
            entity.Property(e => e.CFirma)
                .HasMaxLength(255)
                .HasColumnName("cFirma");
            entity.Property(e => e.CKundeUstId)
                .HasMaxLength(20)
                .HasColumnName("cKundeUstId");
            entity.Property(e => e.CKundengruppe)
                .HasMaxLength(255)
                .HasColumnName("cKundengruppe");
            entity.Property(e => e.CKundennr)
                .HasMaxLength(30)
                .HasColumnName("cKundennr");
            entity.Property(e => e.CRechnungsnr)
                .HasMaxLength(50)
                .HasColumnName("cRechnungsnr");
            entity.Property(e => e.CUstId)
                .HasMaxLength(25)
                .HasColumnName("cUstId");
            entity.Property(e => e.CVersandart)
                .HasMaxLength(255)
                .HasColumnName("cVersandart");
            entity.Property(e => e.CVersandlandBundeslandkuerzel)
                .HasMaxLength(5)
                .HasColumnName("cVersandlandBundeslandkuerzel");
            entity.Property(e => e.CVersandlandIso)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cVersandlandISO");
            entity.Property(e => e.CVersandlandWaehrung)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cVersandlandWaehrung");
            entity.Property(e => e.CWaehrung)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWaehrung");
            entity.Property(e => e.CZahlungsart)
                .HasMaxLength(255)
                .HasColumnName("cZahlungsart");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DLeistungsdatum)
                .HasColumnType("datetime")
                .HasColumnName("dLeistungsdatum");
            entity.Property(e => e.DValutadatum)
                .HasColumnType("datetime")
                .HasColumnName("dValutadatum");
            entity.Property(e => e.FSkonto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fSkonto");
            entity.Property(e => e.FVersandlandWaehrungsfaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVersandlandWaehrungsfaktor");
            entity.Property(e => e.FWaehrungsfaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWaehrungsfaktor");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KFarbe).HasColumnName("kFarbe");
            entity.Property(e => e.KFirmaHistory).HasColumnName("kFirmaHistory");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KKundengruppe).HasColumnName("kKundengruppe");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KRechnung)
                .ValueGeneratedOnAdd()
                .HasColumnName("kRechnung");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.KVersandArt).HasColumnName("kVersandArt");
            entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");
            entity.Property(e => e.NArchiv).HasColumnName("nArchiv");
            entity.Property(e => e.NDebitorennr).HasColumnName("nDebitorennr");
            entity.Property(e => e.NExistierendeRechnungDrucken).HasColumnName("nExistierendeRechnungDrucken");
            entity.Property(e => e.NIstEntwurf).HasColumnName("nIstEntwurf");
            entity.Property(e => e.NIstExterneRechnung).HasColumnName("nIstExterneRechnung");
            entity.Property(e => e.NMahnstop).HasColumnName("nMahnstop");
            entity.Property(e => e.NRechnungStatus).HasColumnName("nRechnungStatus");
            entity.Property(e => e.NSkontoInTage).HasColumnName("nSkontoInTage");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
            entity.Property(e => e.NSteuereinstellung).HasColumnName("nSteuereinstellung");
            entity.Property(e => e.NStorno).HasColumnName("nStorno");
            entity.Property(e => e.NZahlungszielTage).HasColumnName("nZahlungszielTage");
        });

        modelBuilder.Entity<VRechnung2>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRechnung", "Statistik");

            entity.Property(e => e.CRechnungsnr)
                .HasMaxLength(50)
                .HasColumnName("cRechnungsnr");
            entity.Property(e => e.CVersandlandIso)
                .HasMaxLength(5)
                .HasColumnName("cVersandlandISO");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.FFaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fFaktor");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KFarbe).HasColumnName("kFarbe");
            entity.Property(e => e.KFirmaHistory).HasColumnName("kFirmaHistory");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.KVersandArt).HasColumnName("kVersandArt");
            entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");
            entity.Property(e => e.NIstEntwurf).HasColumnName("nIstEntwurf");
            entity.Property(e => e.NIstExterneRechnung).HasColumnName("nIstExterneRechnung");
            entity.Property(e => e.NKorrigiert).HasColumnName("nKorrigiert");
            entity.Property(e => e.NStorno).HasColumnName("nStorno");
        });

        modelBuilder.Entity<VRechnungAdresse>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRechnungAdresse", "Rechnung");

            entity.Property(e => e.CAdressZusatz)
                .HasMaxLength(255)
                .HasColumnName("cAdressZusatz");
            entity.Property(e => e.CAnrede)
                .HasMaxLength(30)
                .HasColumnName("cAnrede");
            entity.Property(e => e.CBundesland)
                .HasMaxLength(255)
                .HasColumnName("cBundesland");
            entity.Property(e => e.CFax)
                .HasMaxLength(30)
                .HasColumnName("cFax");
            entity.Property(e => e.CFirma)
                .HasMaxLength(128)
                .HasColumnName("cFirma");
            entity.Property(e => e.CIso)
                .HasMaxLength(5)
                .HasColumnName("cISO");
            entity.Property(e => e.CKundeUstId)
                .HasMaxLength(20)
                .HasColumnName("cKundeUstId");
            entity.Property(e => e.CLand)
                .HasMaxLength(255)
                .HasColumnName("cLand");
            entity.Property(e => e.CMail)
                .HasMaxLength(255)
                .HasColumnName("cMail");
            entity.Property(e => e.CMobil)
                .HasMaxLength(30)
                .HasColumnName("cMobil");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPlz)
                .HasMaxLength(24)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CPostId)
                .HasMaxLength(255)
                .HasColumnName("cPostID");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTel)
                .HasMaxLength(30)
                .HasColumnName("cTel");
            entity.Property(e => e.CTitel)
                .HasMaxLength(64)
                .HasColumnName("cTitel");
            entity.Property(e => e.CVorname)
                .HasMaxLength(255)
                .HasColumnName("cVorname");
            entity.Property(e => e.CZusatz)
                .HasMaxLength(60)
                .HasColumnName("cZusatz");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<VRechnungAttribut>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRechnungAttribut", "Rechnung");

            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CValue).HasColumnName("cValue");
            entity.Property(e => e.KAttribut).HasColumnName("kAttribut");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
        });

        modelBuilder.Entity<VRechnungAusgabeDateien>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRechnungAusgabeDateien", "Rechnung");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CFehlermeldung)
                .HasMaxLength(2000)
                .HasColumnName("cFehlermeldung");
            entity.Property(e => e.DAusgabedatum)
                .HasColumnType("datetime")
                .HasColumnName("dAusgabedatum");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.KVorlage).HasColumnName("kVorlage");
            entity.Property(e => e.NAusgabeart).HasColumnName("nAusgabeart");
        });

        modelBuilder.Entity<VRechnungEckdaten>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRechnungEckdaten", "Rechnung");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAuftragsnummern)
                .HasMaxLength(200)
                .HasColumnName("cAuftragsnummern");
            entity.Property(e => e.DBezahlt)
                .HasColumnType("datetime")
                .HasColumnName("dBezahlt");
            entity.Property(e => e.DDruckdatum)
                .HasColumnType("datetime")
                .HasColumnName("dDruckdatum");
            entity.Property(e => e.DMahndatum)
                .HasColumnType("datetime")
                .HasColumnName("dMahndatum");
            entity.Property(e => e.DMaildatum)
                .HasColumnType("datetime")
                .HasColumnName("dMaildatum");
            entity.Property(e => e.DZahlungsMail)
                .HasColumnType("datetime")
                .HasColumnName("dZahlungsMail");
            entity.Property(e => e.DZahlungsziel)
                .HasColumnType("datetime")
                .HasColumnName("dZahlungsziel");
            entity.Property(e => e.FGutschrift)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGutschrift");
            entity.Property(e => e.FOffenerWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fOffenerWert");
            entity.Property(e => e.FVkBruttoGesamt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVkBruttoGesamt");
            entity.Property(e => e.FVkNettoGesamt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVkNettoGesamt");
            entity.Property(e => e.FZahlung)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZahlung");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.NHasRechnungskorrektur).HasColumnName("nHasRechnungskorrektur");
            entity.Property(e => e.NIstAngemahnt).HasColumnName("nIstAngemahnt");
            entity.Property(e => e.NKorrigiert).HasColumnName("nKorrigiert");
            entity.Property(e => e.NMahnstufe).HasColumnName("nMahnstufe");
            entity.Property(e => e.NRechnungTyp).HasColumnName("nRechnungTyp");
            entity.Property(e => e.NZahlungStatus).HasColumnName("nZahlungStatus");
        });

        modelBuilder.Entity<VRechnungFile>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRechnungFile", "Rechnung");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CFilename)
                .HasMaxLength(255)
                .HasColumnName("cFilename");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KFile).HasColumnName("kFile");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.KRechnungFile)
                .ValueGeneratedOnAdd()
                .HasColumnName("kRechnungFile");
            entity.Property(e => e.NDokumentTyp).HasColumnName("nDokumentTyp");
        });

        modelBuilder.Entity<VRechnungLieferadresse>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRechnungLieferadresse", "Rechnung");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAdressZusatz)
                .HasMaxLength(255)
                .HasColumnName("cAdressZusatz");
            entity.Property(e => e.CAnrede)
                .HasMaxLength(30)
                .HasColumnName("cAnrede");
            entity.Property(e => e.CBundesland)
                .HasMaxLength(255)
                .HasColumnName("cBundesland");
            entity.Property(e => e.CFax)
                .HasMaxLength(30)
                .HasColumnName("cFax");
            entity.Property(e => e.CFirma)
                .HasMaxLength(128)
                .HasColumnName("cFirma");
            entity.Property(e => e.CIso)
                .HasMaxLength(5)
                .HasColumnName("cISO");
            entity.Property(e => e.CKundeUstId)
                .HasMaxLength(20)
                .HasColumnName("cKundeUstId");
            entity.Property(e => e.CLand)
                .HasMaxLength(255)
                .HasColumnName("cLand");
            entity.Property(e => e.CMail)
                .HasMaxLength(255)
                .HasColumnName("cMail");
            entity.Property(e => e.CMobil)
                .HasMaxLength(30)
                .HasColumnName("cMobil");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPlz)
                .HasMaxLength(24)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CPostId)
                .HasMaxLength(255)
                .HasColumnName("cPostID");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTel)
                .HasMaxLength(30)
                .HasColumnName("cTel");
            entity.Property(e => e.CTitel)
                .HasMaxLength(64)
                .HasColumnName("cTitel");
            entity.Property(e => e.CVorname)
                .HasMaxLength(255)
                .HasColumnName("cVorname");
            entity.Property(e => e.CZusatz)
                .HasMaxLength(60)
                .HasColumnName("cZusatz");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
            entity.Property(e => e.NZolldokumenteErforderlich).HasColumnName("nZolldokumenteErforderlich");
        });

        modelBuilder.Entity<VRechnungLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRechnungLog", "Logging");

            entity.Property(e => e.BLastRowVersion)
                .HasMaxLength(8)
                .IsFixedLength()
                .HasColumnName("bLastRowVersion");
            entity.Property(e => e.BRowVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowVersion");
            entity.Property(e => e.BXml).HasColumnName("bXML");
            entity.Property(e => e.CAppName)
                .HasMaxLength(128)
                .HasColumnName("cAppName");
            entity.Property(e => e.CLogTyp)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("cLogTyp");
            entity.Property(e => e.CPrüfStatus)
                .HasMaxLength(75)
                .HasColumnName("cPrüfStatus");
            entity.Property(e => e.CRechnungsNr)
                .HasMaxLength(50)
                .HasColumnName("cRechnungsNr");
            entity.Property(e => e.CXml)
                .HasColumnType("xml")
                .HasColumnName("cXML");
            entity.Property(e => e.DErstelltUtc).HasColumnName("dErstelltUtc");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.KRechnungLog)
                .ValueGeneratedOnAdd()
                .HasColumnName("kRechnungLog");
            entity.Property(e => e.NLogAbstand).HasColumnName("nLogAbstand");
            entity.Property(e => e.NLogTyp).HasColumnName("nLogTyp");
        });

        modelBuilder.Entity<VRechnungPosition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRechnungPosition", "Rechnung");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CEinheit)
                .HasMaxLength(255)
                .HasColumnName("cEinheit");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.FEkNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEkNetto");
            entity.Property(e => e.FGewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGewicht");
            entity.Property(e => e.FMwSt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwSt");
            entity.Property(e => e.FRabatt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabatt");
            entity.Property(e => e.FVersandgewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVersandgewicht");
            entity.Property(e => e.FVkNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVkNetto");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KAuftragPosition).HasColumnName("kAuftragPosition");
            entity.Property(e => e.KKonfigVaterRechnungPos).HasColumnName("kKonfigVaterRechnungPos");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.KRechnungPosition)
                .ValueGeneratedOnAdd()
                .HasColumnName("kRechnungPosition");
            entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");
            entity.Property(e => e.KSteuerschluessel).HasColumnName("kSteuerschluessel");
            entity.Property(e => e.KStuecklisteRechnungPos).HasColumnName("kStuecklisteRechnungPos");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NType).HasColumnName("nType");
        });

        modelBuilder.Entity<VRechnungPosition1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRechnungPosition", "Statistik");

            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.FEkNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEkNetto");
            entity.Property(e => e.FMwst)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwst");
            entity.Property(e => e.FRabatt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRabatt");
            entity.Property(e => e.FVkBrutto)
                .HasColumnType("decimal(38, 11)")
                .HasColumnName("fVkBrutto");
            entity.Property(e => e.FVkBruttoGesamt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVkBruttoGesamt");
            entity.Property(e => e.FVkNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVkNetto");
            entity.Property(e => e.FVkNettoGesamt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVkNettoGesamt");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KAuftragPosition).HasColumnName("kAuftragPosition");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.KRechnungPosition).HasColumnName("kRechnungPosition");
            entity.Property(e => e.NType).HasColumnName("nType");
        });

        modelBuilder.Entity<VRechnungPositionText>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRechnungPositionText", "Rechnung");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CHinweis).HasColumnName("cHinweis");
            entity.Property(e => e.KRechnungPosition).HasColumnName("kRechnungPosition");
        });

        modelBuilder.Entity<VRechnungRechnungsadresse>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRechnungRechnungsadresse", "Rechnung");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAdressZusatz)
                .HasMaxLength(255)
                .HasColumnName("cAdressZusatz");
            entity.Property(e => e.CAnrede)
                .HasMaxLength(30)
                .HasColumnName("cAnrede");
            entity.Property(e => e.CBundesland)
                .HasMaxLength(255)
                .HasColumnName("cBundesland");
            entity.Property(e => e.CFax)
                .HasMaxLength(30)
                .HasColumnName("cFax");
            entity.Property(e => e.CFirma)
                .HasMaxLength(128)
                .HasColumnName("cFirma");
            entity.Property(e => e.CIso)
                .HasMaxLength(5)
                .HasColumnName("cISO");
            entity.Property(e => e.CKundeUstId)
                .HasMaxLength(20)
                .HasColumnName("cKundeUstId");
            entity.Property(e => e.CLand)
                .HasMaxLength(255)
                .HasColumnName("cLand");
            entity.Property(e => e.CMail)
                .HasMaxLength(255)
                .HasColumnName("cMail");
            entity.Property(e => e.CMobil)
                .HasMaxLength(30)
                .HasColumnName("cMobil");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPlz)
                .HasMaxLength(24)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CPostId)
                .HasMaxLength(255)
                .HasColumnName("cPostID");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTel)
                .HasMaxLength(30)
                .HasColumnName("cTel");
            entity.Property(e => e.CTitel)
                .HasMaxLength(64)
                .HasColumnName("cTitel");
            entity.Property(e => e.CVorname)
                .HasMaxLength(255)
                .HasColumnName("cVorname");
            entity.Property(e => e.CZusatz)
                .HasMaxLength(60)
                .HasColumnName("cZusatz");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
            entity.Property(e => e.NZolldokumenteErforderlich).HasColumnName("nZolldokumenteErforderlich");
        });

        modelBuilder.Entity<VRechnungStornierbar>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRechnungStornierbar", "Rechnung");

            entity.Property(e => e.CRechnungsnr)
                .HasMaxLength(50)
                .HasColumnName("cRechnungsnr");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.NError).HasColumnName("nError");
        });

        modelBuilder.Entity<VRechnungText>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRechnungText", "Rechnung");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAnmerkung).HasColumnName("cAnmerkung");
            entity.Property(e => e.CHinweis).HasColumnName("cHinweis");
            entity.Property(e => e.CRechnungstext).HasColumnName("cRechnungstext");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
        });

        modelBuilder.Entity<VRechnungZahlungsinfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRechnungZahlungsinfo", "Rechnung");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CBankname)
                .HasMaxLength(255)
                .HasColumnName("cBankname");
            entity.Property(e => e.CBic)
                .HasMaxLength(32)
                .HasColumnName("cBIC");
            entity.Property(e => e.CEndToEndId)
                .HasMaxLength(35)
                .HasColumnName("cEndToEndID");
            entity.Property(e => e.CGlaeubigerId)
                .HasMaxLength(35)
                .HasColumnName("cGlaeubigerID");
            entity.Property(e => e.CIban)
                .HasMaxLength(34)
                .HasColumnName("cIBAN");
            entity.Property(e => e.CKontoInhaber)
                .HasMaxLength(255)
                .HasColumnName("cKontoInhaber");
            entity.Property(e => e.CMandatsReferenz)
                .HasMaxLength(100)
                .HasColumnName("cMandatsReferenz");
            entity.Property(e => e.CPuiZahlungsinfo).HasColumnName("cPuiZahlungsinfo");
            entity.Property(e => e.CReferenzEmail)
                .HasMaxLength(255)
                .HasColumnName("cReferenzEmail");
            entity.Property(e => e.CVerwendungszweck)
                .HasMaxLength(1000)
                .HasColumnName("cVerwendungszweck");
            entity.Property(e => e.DFaelligkeitsdatum)
                .HasColumnType("datetime")
                .HasColumnName("dFaelligkeitsdatum");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<VRechnungsadresse>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRechnungsadresse", "DEPRECATED");

            entity.Property(e => e.CAdressZusatz)
                .HasMaxLength(255)
                .HasColumnName("cAdressZusatz");
            entity.Property(e => e.CAnrede)
                .HasMaxLength(30)
                .HasColumnName("cAnrede");
            entity.Property(e => e.CBundesland)
                .HasMaxLength(255)
                .HasColumnName("cBundesland");
            entity.Property(e => e.CFax)
                .HasMaxLength(30)
                .HasColumnName("cFax");
            entity.Property(e => e.CFirma)
                .HasMaxLength(128)
                .HasColumnName("cFirma");
            entity.Property(e => e.CIso)
                .HasMaxLength(5)
                .HasColumnName("cISO");
            entity.Property(e => e.CKundenNr)
                .HasMaxLength(30)
                .HasColumnName("cKundenNr");
            entity.Property(e => e.CLand)
                .HasMaxLength(255)
                .HasColumnName("cLand");
            entity.Property(e => e.CMail)
                .HasMaxLength(255)
                .HasColumnName("cMail");
            entity.Property(e => e.CMobil)
                .HasMaxLength(30)
                .HasColumnName("cMobil");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPlz)
                .HasMaxLength(24)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CPostId)
                .HasMaxLength(255)
                .HasColumnName("cPostID");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CTel)
                .HasMaxLength(30)
                .HasColumnName("cTel");
            entity.Property(e => e.CTitel)
                .HasMaxLength(64)
                .HasColumnName("cTitel");
            entity.Property(e => e.CVorname)
                .HasMaxLength(255)
                .HasColumnName("cVorname");
            entity.Property(e => e.CZhaenden).HasColumnName("cZHaenden");
            entity.Property(e => e.CZusatz)
                .HasMaxLength(60)
                .HasColumnName("cZusatz");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KRechnungsadresse).HasColumnName("kRechnungsadresse");
        });

        modelBuilder.Entity<VRefund>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRefund", "SCX");

            entity.Property(e => e.CChannel)
                .HasMaxLength(15)
                .HasColumnName("cChannel");
            entity.Property(e => e.COrderId)
                .HasMaxLength(50)
                .HasColumnName("cOrderId");
            entity.Property(e => e.COrderItemId)
                .HasMaxLength(50)
                .HasColumnName("cOrderItemId");
            entity.Property(e => e.CReason)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("cReason");
            entity.Property(e => e.CRefundCurrency)
                .HasMaxLength(20)
                .HasColumnName("cRefundCurrency");
            entity.Property(e => e.CSellerId)
                .HasMaxLength(50)
                .HasColumnName("cSellerId");
            entity.Property(e => e.FRefund)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fRefund");
            entity.Property(e => e.KOrderItemId).HasColumnName("kOrderItemId");
            entity.Property(e => e.KRefund).HasColumnName("kRefund");
            entity.Property(e => e.NQuantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nQuantity");
            entity.Property(e => e.NRefundUpload).HasColumnName("nRefundUpload");
        });

        modelBuilder.Entity<VRetoureBestellung>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRetoureBestellung", "RM");

            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KRmretoure).HasColumnName("kRMRetoure");
        });

        modelBuilder.Entity<VRetoureEtikett>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRetoureEtikett", "FulfillmentNetwork");

            entity.Property(e => e.CIdentCode)
                .HasMaxLength(255)
                .HasColumnName("cIdentCode");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.KRmretoure).HasColumnName("kRMRetoure");
            entity.Property(e => e.KRmretourenEtikett)
                .ValueGeneratedOnAdd()
                .HasColumnName("kRMRetourenEtikett");
        });

        modelBuilder.Entity<VRetourePositionenExportDatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRetourePositionenExportData", "RM");

            entity.Property(e => e.Anzahl).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Beschreibung).HasMaxLength(255);
            entity.Property(e => e.GewichtGesamt).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.KRmretoure).HasColumnName("kRMRetoure");
            entity.Property(e => e.PreisGesamt).HasColumnType("decimal(38, 13)");
        });

        modelBuilder.Entity<VRetouren>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRetouren", "Amazon");

            entity.Property(e => e.CArtikelname)
                .HasMaxLength(255)
                .HasColumnName("cArtikelname");
            entity.Property(e => e.CArtikelzustand)
                .HasMaxLength(50)
                .HasColumnName("cArtikelzustand");
            entity.Property(e => e.CAsin)
                .HasMaxLength(30)
                .HasColumnName("cASIN");
            entity.Property(e => e.CBestellNr)
                .HasMaxLength(50)
                .HasColumnName("cBestellNr");
            entity.Property(e => e.CFehler)
                .HasMaxLength(4000)
                .HasColumnName("cFehler");
            entity.Property(e => e.CFremdSku)
                .HasMaxLength(100)
                .HasColumnName("cFremdSKU");
            entity.Property(e => e.CFulfillmentCenter)
                .HasMaxLength(30)
                .HasColumnName("cFulfillmentCenter");
            entity.Property(e => e.CFulfillmentId)
                .HasMaxLength(20)
                .HasColumnName("cFulfillmentId");
            entity.Property(e => e.CLicencePlateNumber)
                .HasMaxLength(50)
                .HasColumnName("cLicencePlateNumber");
            entity.Property(e => e.COrderId)
                .HasMaxLength(30)
                .HasColumnName("cOrderId");
            entity.Property(e => e.COrderItemCode)
                .HasMaxLength(30)
                .HasColumnName("cOrderItemCode");
            entity.Property(e => e.CRueckgabegrund)
                .HasMaxLength(50)
                .HasColumnName("cRueckgabegrund");
            entity.Property(e => e.CSellerSku)
                .HasMaxLength(100)
                .HasColumnName("cSellerSKU");
            entity.Property(e => e.CShipCountry)
                .HasMaxLength(5)
                .HasColumnName("cShipCountry");
            entity.Property(e => e.DEingelesen)
                .HasColumnType("datetime")
                .HasColumnName("dEingelesen");
            entity.Property(e => e.DRetourzeit)
                .HasColumnType("datetime")
                .HasColumnName("dRetourzeit");
            entity.Property(e => e.DVersandt)
                .HasColumnType("datetime")
                .HasColumnName("dVersandt");
            entity.Property(e => e.FAmountPerItem)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAmountPerItem");
            entity.Property(e => e.FAuftragsWertBrutto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAuftragsWertBrutto");
            entity.Property(e => e.FGutschrift)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fGutschrift");
            entity.Property(e => e.KAmazonBestellung).HasColumnName("kAmazonBestellung");
            entity.Property(e => e.KAmazonRetourPos).HasColumnName("kAmazonRetourPos");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.KundenName).HasMaxLength(255);
            entity.Property(e => e.MarkteplaceName).HasMaxLength(30);
            entity.Property(e => e.NGutschriftStatus).HasColumnName("nGutschriftStatus");
            entity.Property(e => e.NHasRechnung).HasColumnName("nHasRechnung");
            entity.Property(e => e.NIsAmazonInvoice).HasColumnName("nIsAmazonInvoice");
            entity.Property(e => e.NIsVcs).HasColumnName("nIsVcs");
            entity.Property(e => e.NMenge).HasColumnName("nMenge");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<VRetourenposition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRetourenposition", "Amazon");

            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.COrderId)
                .HasMaxLength(30)
                .HasColumnName("cOrderId");
            entity.Property(e => e.CSellerSku)
                .HasMaxLength(100)
                .HasColumnName("cSellerSKU");
            entity.Property(e => e.FAmountPerItem)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAmountPerItem");
            entity.Property(e => e.FMwSt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwSt");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.NAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nAnzahl");
            entity.Property(e => e.NMaxRetoureMenge).HasColumnName("nMaxRetoureMenge");
            entity.Property(e => e.NMenge).HasColumnName("nMenge");
            entity.Property(e => e.NMengeGutgeschrieben)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nMengeGutgeschrieben");
            entity.Property(e => e.NOffeneMenge).HasColumnName("nOffeneMenge");
            entity.Property(e => e.NPlatform).HasColumnName("nPlatform");
            entity.Property(e => e.NRetourMenge).HasColumnName("nRetourMenge");
        });

        modelBuilder.Entity<VReturnInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vReturnInfo", "FulfillmentNetwork");

            entity.Property(e => e.CFfnWarehouseId)
                .HasMaxLength(50)
                .HasColumnName("cFfnWarehouseId");
            entity.Property(e => e.CMerchantId)
                .HasMaxLength(64)
                .HasColumnName("cMerchantId");
            entity.Property(e => e.CReturnId)
                .HasMaxLength(255)
                .HasColumnName("cReturnId");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KRmretoure).HasColumnName("kRMRetoure");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.NStatusTyp).HasColumnName("nStatusTyp");
        });

        modelBuilder.Entity<VReturnItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vReturnItem", "FulfillmentNetwork");

            entity.Property(e => e.ApiQuantity).HasColumnType("decimal(28, 14)");
            entity.Property(e => e.ArtikelNummer).HasMaxLength(100);
            entity.Property(e => e.Artikelname).HasMaxLength(255);
            entity.Property(e => e.Jfsku).HasMaxLength(255);
            entity.Property(e => e.KRmretoure).HasColumnName("kRMRetoure");
            entity.Property(e => e.KRmretourePos).HasColumnName("kRMRetourePos");
            entity.Property(e => e.OutboundId).HasMaxLength(255);
            entity.Property(e => e.OutboundItemId)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ReturnId).HasMaxLength(255);
            entity.Property(e => e.ReturnItemId).HasMaxLength(255);
            entity.Property(e => e.WawiQuantity).HasColumnType("decimal(25, 13)");
        });

        modelBuilder.Entity<VReturnItemInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vReturnItemInfo", "FulfillmentNetwork");

            entity.Property(e => e.ArtikelNummer).HasMaxLength(100);
            entity.Property(e => e.Artikelname).HasMaxLength(255);
            entity.Property(e => e.COutboundId)
                .HasMaxLength(255)
                .HasColumnName("cOutboundId");
            entity.Property(e => e.COutboundItemId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("cOutboundItemId");
            entity.Property(e => e.FQuantity)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fQuantity");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KAuftragPosition).HasColumnName("kAuftragPosition");
            entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");
            entity.Property(e => e.KOutboundItemRef).HasColumnName("kOutboundItemRef");
        });

        modelBuilder.Entity<VReturnOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vReturnOrder", "SCX");

            entity.Property(e => e.CChannel)
                .HasMaxLength(15)
                .HasColumnName("cChannel");
            entity.Property(e => e.COrderId)
                .HasMaxLength(50)
                .HasColumnName("cOrderId");
            entity.Property(e => e.CSellerId)
                .HasMaxLength(50)
                .HasColumnName("cSellerId");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KWarehouseReturn).HasColumnName("kWarehouseReturn");
        });

        modelBuilder.Entity<VReturnOrderItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vReturnOrderItem", "SCX");

            entity.Property(e => e.CChannel)
                .HasMaxLength(15)
                .HasColumnName("cChannel");
            entity.Property(e => e.COrderItemId)
                .HasMaxLength(50)
                .HasColumnName("cOrderItemId");
            entity.Property(e => e.CSellerId)
                .HasMaxLength(50)
                .HasColumnName("cSellerId");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KAuftragPosition).HasColumnName("kAuftragPosition");
            entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");
            entity.Property(e => e.ProductName).HasMaxLength(255);
            entity.Property(e => e.ProductNumber).HasMaxLength(100);
        });

        modelBuilder.Entity<VReturnPickupAddress>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vReturnPickupAddress", "FulfillmentNetwork");

            entity.Property(e => e.AdressZusatz).HasMaxLength(255);
            entity.Property(e => e.Anrede).HasMaxLength(30);
            entity.Property(e => e.Bundesland).HasMaxLength(255);
            entity.Property(e => e.Fax).HasMaxLength(30);
            entity.Property(e => e.Firma).HasMaxLength(128);
            entity.Property(e => e.Iso).HasMaxLength(5);
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KRmretoureAbholAdresse)
                .ValueGeneratedOnAdd()
                .HasColumnName("kRMRetoureAbholAdresse");
            entity.Property(e => e.Land).HasMaxLength(255);
            entity.Property(e => e.Mobil).HasMaxLength(30);
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.Ort).HasMaxLength(255);
            entity.Property(e => e.Plz)
                .HasMaxLength(24)
                .HasColumnName("PLZ");
            entity.Property(e => e.PostId).HasMaxLength(255);
            entity.Property(e => e.Strasse).HasMaxLength(255);
            entity.Property(e => e.Titel).HasMaxLength(64);
            entity.Property(e => e.Vorname).HasMaxLength(255);
            entity.Property(e => e.Zusatz).HasMaxLength(60);
        });

        modelBuilder.Entity<VReturnReason>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vReturnReason", "SCX");

            entity.Property(e => e.CReturnReason)
                .HasMaxLength(255)
                .HasColumnName("cReturnReason");
            entity.Property(e => e.KReturnReason).HasColumnName("kReturnReason");
            entity.Property(e => e.KRmgrund).HasColumnName("kRMGrund");
        });

        modelBuilder.Entity<VSalesChannelOffer>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vSalesChannelOffer", "SCX");

            entity.Property(e => e.CCategory)
                .HasMaxLength(512)
                .HasColumnName("cCategory");
            entity.Property(e => e.CChannel)
                .HasMaxLength(15)
                .HasColumnName("cChannel");
            entity.Property(e => e.CChannelOfferId)
                .HasMaxLength(50)
                .HasColumnName("cChannelOfferId");
            entity.Property(e => e.CGtin)
                .HasMaxLength(255)
                .HasColumnName("cGTIN");
            entity.Property(e => e.CHash)
                .HasMaxLength(40)
                .HasColumnName("cHash");
            entity.Property(e => e.CSellerId)
                .HasMaxLength(50)
                .HasColumnName("cSellerId");
            entity.Property(e => e.DChannelQuantityUpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("dChannelQuantityUpdatedAt");
            entity.Property(e => e.DQuantityUpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("dQuantityUpdatedAt");
            entity.Property(e => e.FChannelQuantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fChannelQuantity");
            entity.Property(e => e.FLastUpdatedQuantity)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLastUpdatedQuantity");
            entity.Property(e => e.FQuantity)
                .HasColumnType("decimal(26, 13)")
                .HasColumnName("fQuantity");
            entity.Property(e => e.KCategory).HasColumnName("kCategory");
            entity.Property(e => e.KChannel).HasColumnName("kChannel");
            entity.Property(e => e.KOffer).HasColumnName("kOffer");
            entity.Property(e => e.KParentOffer).HasColumnName("kParentOffer");
            entity.Property(e => e.KProduct).HasColumnName("kProduct");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NIsListed).HasColumnName("nIsListed");
            entity.Property(e => e.NMaximalerBestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nMaximalerBestand");
            entity.Property(e => e.NMindestbestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nMindestbestand");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        modelBuilder.Entity<VShop>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vShop", "SCX");

            entity.Property(e => e.CChannel)
                .HasMaxLength(15)
                .HasColumnName("cChannel");
            entity.Property(e => e.CChannelCurrency)
                .HasMaxLength(3)
                .HasColumnName("cChannelCurrency");
            entity.Property(e => e.CChannelDisplayName)
                .HasMaxLength(255)
                .HasColumnName("cChannelDisplayName");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CReason)
                .HasMaxLength(250)
                .HasColumnName("cReason");
            entity.Property(e => e.CSellerId)
                .HasMaxLength(50)
                .HasColumnName("cSellerId");
            entity.Property(e => e.DChannelAttributeAktualisierungUtc).HasColumnName("dChannelAttributeAktualisierungUtc");
            entity.Property(e => e.DCreated)
                .HasColumnType("datetime")
                .HasColumnName("dCreated");
            entity.Property(e => e.DKategorieAktualisierungUtc).HasColumnName("dKategorieAktualisierungUtc");
            entity.Property(e => e.DSellerAttributeAktualisierungUtc).HasColumnName("dSellerAttributeAktualisierungUtc");
            entity.Property(e => e.DUpdated)
                .HasColumnType("datetime")
                .HasColumnName("dUpdated");
            entity.Property(e => e.KChannel).HasColumnName("kChannel");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KShopScx).HasColumnName("kShopScx");
            entity.Property(e => e.KVersandart).HasColumnName("kVersandart");
            entity.Property(e => e.NAktiv).HasColumnName("nAktiv");
            entity.Property(e => e.NGesperrt).HasColumnName("nGesperrt");
            entity.Property(e => e.NInvoiceDocumentTransfer).HasColumnName("nInvoiceDocumentTransfer");
            entity.Property(e => e.NQuantityPriceSupported).HasColumnName("nQuantityPriceSupported");
            entity.Property(e => e.NRemainingQuantitySupported).HasColumnName("nRemainingQuantitySupported");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
            entity.Property(e => e.NVariationsSupported).HasColumnName("nVariationsSupported");
        });

        modelBuilder.Entity<VShopKundengruppe>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vShopKundengruppe", "DbeS");

            entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NStandard).HasColumnName("nStandard");
        });

        modelBuilder.Entity<VSprache>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vSprache", "DbeS");

            entity.Property(e => e.CIso)
                .HasMaxLength(10)
                .HasColumnName("cISO");
            entity.Property(e => e.CNameDeutsch)
                .HasMaxLength(255)
                .HasColumnName("cNameDeutsch");
            entity.Property(e => e.CNameEnglisch)
                .HasMaxLength(255)
                .HasColumnName("cNameEnglisch");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.NShopStandard).HasColumnName("nShopStandard");
            entity.Property(e => e.NStandard).HasColumnName("nStandard");
            entity.Property(e => e.NWawiStandard).HasColumnName("nWawiStandard");
        });

        modelBuilder.Entity<VStandardArtikel>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vStandardArtikel");

            entity.Property(e => e.CAktiv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAktiv");
            entity.Property(e => e.CAmazonFnsku)
                .HasMaxLength(50)
                .HasColumnName("cAmazonFNSKU");
            entity.Property(e => e.CAnmerkung).HasColumnName("cAnmerkung");
            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CAsin)
                .HasMaxLength(255)
                .HasColumnName("cASIN");
            entity.Property(e => e.CBarcode)
                .HasMaxLength(255)
                .HasColumnName("cBarcode");
            entity.Property(e => e.CBeschreibung).HasColumnName("cBeschreibung");
            entity.Property(e => e.CDelInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cDelInet");
            entity.Property(e => e.CEinheit)
                .HasMaxLength(255)
                .HasColumnName("cEinheit");
            entity.Property(e => e.CEpid)
                .HasMaxLength(255)
                .HasColumnName("cEPID");
            entity.Property(e => e.CErloeskonto)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("cErloeskonto");
            entity.Property(e => e.CGefahrnr)
                .HasMaxLength(255)
                .HasColumnName("cGefahrnr");
            entity.Property(e => e.CHan)
                .HasMaxLength(255)
                .HasColumnName("cHAN");
            entity.Property(e => e.CHerkunftsland)
                .HasMaxLength(64)
                .HasColumnName("cHerkunftsland");
            entity.Property(e => e.CHersteller)
                .HasMaxLength(255)
                .HasColumnName("cHersteller");
            entity.Property(e => e.CInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cInet");
            entity.Property(e => e.CIsbn)
                .HasMaxLength(255)
                .HasColumnName("cISBN");
            entity.Property(e => e.CJfsku)
                .HasMaxLength(255)
                .HasColumnName("cJfsku");
            entity.Property(e => e.CKurzBeschreibung).HasColumnName("cKurzBeschreibung");
            entity.Property(e => e.CLagerAktiv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLagerAktiv");
            entity.Property(e => e.CLagerArtikel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLagerArtikel");
            entity.Property(e => e.CLagerKleinerNull)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLagerKleinerNull");
            entity.Property(e => e.CLagerVariation)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLagerVariation");
            entity.Property(e => e.CLieferstatus)
                .HasMaxLength(255)
                .HasColumnName("cLieferstatus");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CNeu)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cNeu");
            entity.Property(e => e.CPreisliste)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cPreisliste");
            entity.Property(e => e.CSeo)
                .HasMaxLength(255)
                .HasColumnName("cSeo");
            entity.Property(e => e.CSerie)
                .HasMaxLength(255)
                .HasColumnName("cSerie");
            entity.Property(e => e.CSuchbegriffe)
                .HasMaxLength(255)
                .HasColumnName("cSuchbegriffe");
            entity.Property(e => e.CTaric)
                .HasMaxLength(20)
                .HasColumnName("cTaric");
            entity.Property(e => e.CTeilbar)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cTeilbar");
            entity.Property(e => e.CTopArtikel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cTopArtikel");
            entity.Property(e => e.CUnnummer)
                .HasMaxLength(255)
                .HasColumnName("cUNNummer");
            entity.Property(e => e.CUpc)
                .HasMaxLength(255)
                .HasColumnName("cUPC");
            entity.Property(e => e.CVpeeinheit)
                .HasMaxLength(255)
                .HasColumnName("cVPEEinheit");
            entity.Property(e => e.DErscheinungsdatum)
                .HasColumnType("datetime")
                .HasColumnName("dErscheinungsdatum");
            entity.Property(e => e.DErstelldatum)
                .HasColumnType("datetime")
                .HasColumnName("dErstelldatum");
            entity.Property(e => e.DMod)
                .HasColumnType("datetime")
                .HasColumnName("dMod");
            entity.Property(e => e.DNeuImSortiment)
                .HasColumnType("datetime")
                .HasColumnName("dNeuImSortiment");
            entity.Property(e => e.DZulaufVerfuegbarAm)
                .HasColumnType("datetime")
                .HasColumnName("dZulaufVerfuegbarAm");
            entity.Property(e => e.FAbnahmeintervall)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAbnahmeintervall");
            entity.Property(e => e.FAmazonVk)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAmazonVK");
            entity.Property(e => e.FArtGewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fArtGewicht");
            entity.Property(e => e.FBreite)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBreite");
            entity.Property(e => e.FEbayPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEbayPreis");
            entity.Property(e => e.FEknetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEKNetto");
            entity.Property(e => e.FGewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGewicht");
            entity.Property(e => e.FGrundpreisMenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGrundpreisMenge");
            entity.Property(e => e.FHoehe)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fHoehe");
            entity.Property(e => e.FLaenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLaenge");
            entity.Property(e => e.FMassMenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMassMenge");
            entity.Property(e => e.FMwSt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwSt");
            entity.Property(e => e.FPackeinheit)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPackeinheit");
            entity.Property(e => e.FUvp)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fUVP");
            entity.Property(e => e.FVkbrutto)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fVKbrutto");
            entity.Property(e => e.FVkhaendlerBrutto).HasColumnName("fVKHaendlerBrutto");
            entity.Property(e => e.FVkhaendlerNetto).HasColumnName("fVKHaendlerNetto");
            entity.Property(e => e.FVknetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVKNetto");
            entity.Property(e => e.FVpewert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVPEWert");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KEigenschaftKombi).HasColumnName("kEigenschaftKombi");
            entity.Property(e => e.KGrundPreisEinheit).HasColumnName("kGrundPreisEinheit");
            entity.Property(e => e.KHersteller).HasColumnName("kHersteller");
            entity.Property(e => e.KLieferStatus).HasColumnName("kLieferStatus");
            entity.Property(e => e.KMassEinheit).HasColumnName("kMassEinheit");
            entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");
            entity.Property(e => e.KStueckliste).HasColumnName("kStueckliste");
            entity.Property(e => e.KVaterArtikel).HasColumnName("kVaterArtikel");
            entity.Property(e => e.KVerkaufsEinheit).HasColumnName("kVerkaufsEinheit");
            entity.Property(e => e.KVersandklasse).HasColumnName("kVersandklasse");
            entity.Property(e => e.KVpeeinheit).HasColumnName("kVPEEinheit");
            entity.Property(e => e.KWarengruppe).HasColumnName("kWarengruppe");
            entity.Property(e => e.NAutomatischeLiefertageberechnung).HasColumnName("nAutomatischeLiefertageberechnung");
            entity.Property(e => e.NBearbeitungszeit).HasColumnName("nBearbeitungszeit");
            entity.Property(e => e.NCharge).HasColumnName("nCharge");
            entity.Property(e => e.NDelete).HasColumnName("nDelete");
            entity.Property(e => e.NIstMindestbestand).HasColumnName("nIstMindestbestand");
            entity.Property(e => e.NIstTeilmengenArtikel).HasColumnName("nIstTeilmengenArtikel");
            entity.Property(e => e.NIstVater).HasColumnName("nIstVater");
            entity.Property(e => e.NLagerbestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nLagerbestand");
            entity.Property(e => e.NLiefertageWennAusverkauft).HasColumnName("nLiefertageWennAusverkauft");
            entity.Property(e => e.NMhd).HasColumnName("nMHD");
            entity.Property(e => e.NMidestbestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nMidestbestand");
            entity.Property(e => e.NMindestbestellmaenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nMindestbestellmaenge");
            entity.Property(e => e.NNichtBestellbar).HasColumnName("nNichtBestellbar");
            entity.Property(e => e.NProzentualePreisStaffelAktiv).HasColumnName("nProzentualePreisStaffelAktiv");
            entity.Property(e => e.NPuffer).HasColumnName("nPuffer");
            entity.Property(e => e.NPufferTyp).HasColumnName("nPufferTyp");
            entity.Property(e => e.NSeriennummernVerfolgung).HasColumnName("nSeriennummernVerfolgung");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NVpe).HasColumnName("nVPE");
        });

        modelBuilder.Entity<VStandardAuftrag>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vStandardAuftrag", "Verkauf");

            entity.Property(e => e.CAuftragsnummer)
                .HasMaxLength(50)
                .HasColumnName("cAuftragsnummer");
            entity.Property(e => e.CExterneAuftragsnummer)
                .HasMaxLength(50)
                .HasColumnName("cExterneAuftragsnummer");
            entity.Property(e => e.CKundenNr)
                .HasMaxLength(30)
                .HasColumnName("cKundenNr");
            entity.Property(e => e.CRechnungsnummern)
                .HasMaxLength(200)
                .HasColumnName("cRechnungsnummern");
            entity.Property(e => e.CVersandlandIso)
                .HasMaxLength(5)
                .HasColumnName("cVersandlandISO");
            entity.Property(e => e.CVersandlandWaehrung)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cVersandlandWaehrung");
            entity.Property(e => e.CWaehrung)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWaehrung");
            entity.Property(e => e.CZahlungsmodulId)
                .HasMaxLength(64)
                .HasColumnName("cZahlungsmodulID");
            entity.Property(e => e.CeBayBenutzername)
                .HasMaxLength(64)
                .HasColumnName("ceBayBenutzername");
            entity.Property(e => e.DBezahlt)
                .HasColumnType("datetime")
                .HasColumnName("dBezahlt");
            entity.Property(e => e.DDruckdatum)
                .HasColumnType("datetime")
                .HasColumnName("dDruckdatum");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DLetzterVersand)
                .HasColumnType("datetime")
                .HasColumnName("dLetzterVersand");
            entity.Property(e => e.DMaildatum)
                .HasColumnType("datetime")
                .HasColumnName("dMaildatum");
            entity.Property(e => e.DVoraussichtlichesLieferdatum)
                .HasColumnType("datetime")
                .HasColumnName("dVoraussichtlichesLieferdatum");
            entity.Property(e => e.DZahlungsmaildatum)
                .HasColumnType("datetime")
                .HasColumnName("dZahlungsmaildatum");
            entity.Property(e => e.FAuftragswertBrutto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAuftragswertBrutto");
            entity.Property(e => e.FAuftragswertNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAuftragswertNetto");
            entity.Property(e => e.FAuftragswertVersandland)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("fAuftragswertVersandland");
            entity.Property(e => e.FBereitsgezahltWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBereitsgezahltWert");
            entity.Property(e => e.FGutgeschriebenerWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGutgeschriebenerWert");
            entity.Property(e => e.FGutschrift)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGutschrift");
            entity.Property(e => e.FOffenerWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fOffenerWert");
            entity.Property(e => e.FVersandlandWaehrungFaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVersandlandWaehrungFaktor");
            entity.Property(e => e.FWaehrungsfaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWaehrungsfaktor");
            entity.Property(e => e.FZusatzgewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZusatzgewicht");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBestellhinweis).HasColumnName("kBestellhinweis");
            entity.Property(e => e.KFarbe).HasColumnName("kFarbe");
            entity.Property(e => e.KFirmaHistory).HasColumnName("kFirmaHistory");
            entity.Property(e => e.KInetBestellung).HasColumnName("kInetBestellung");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KKundengruppe).HasColumnName("kKundengruppe");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KRueckhalteGrund).HasColumnName("kRueckhalteGrund");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.KVersandart).HasColumnName("kVersandart");
            entity.Property(e => e.KVorgangsstatus).HasColumnName("kVorgangsstatus");
            entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");
            entity.Property(e => e.NAnzahlPakete).HasColumnName("nAnzahlPakete");
            entity.Property(e => e.NAnzahlVersendetePakete).HasColumnName("nAnzahlVersendetePakete");
            entity.Property(e => e.NAuftragStatus).HasColumnName("nAuftragStatus");
            entity.Property(e => e.NBeschreibung).HasColumnName("nBeschreibung");
            entity.Property(e => e.NDebitorennr).HasColumnName("nDebitorennr");
            entity.Property(e => e.NInet).HasColumnName("nInet");
            entity.Property(e => e.NInnergemeinschaftlicheLieferung).HasColumnName("nInnergemeinschaftlicheLieferung");
            entity.Property(e => e.NIstExterneRechnung).HasColumnName("nIstExterneRechnung");
            entity.Property(e => e.NIstReadOnly).HasColumnName("nIstReadOnly");
            entity.Property(e => e.NKomplettAusgeliefert).HasColumnName("nKomplettAusgeliefert");
            entity.Property(e => e.NLieferprioritaet).HasColumnName("nLieferprioritaet");
            entity.Property(e => e.NPending).HasColumnName("nPending");
            entity.Property(e => e.NPlattformTyp).HasColumnName("nPlattformTyp");
            entity.Property(e => e.NRechnungStatus).HasColumnName("nRechnungStatus");
            entity.Property(e => e.NSteuereinstellung).HasColumnName("nSteuereinstellung");
            entity.Property(e => e.NStorniert).HasColumnName("nStorniert");
            entity.Property(e => e.NUmsatzsteuerfrei).HasColumnName("nUmsatzsteuerfrei");
            entity.Property(e => e.NZahlungStatus).HasColumnName("nZahlungStatus");
            entity.Property(e => e.NZahlungszielTage).HasColumnName("nZahlungszielTage");
        });

        modelBuilder.Entity<VStandardAuftragCache>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vStandardAuftragCache", "Verkauf");

            entity.Property(e => e.CAuftragsnummer)
                .HasMaxLength(50)
                .HasColumnName("cAuftragsnummer");
            entity.Property(e => e.CExterneAuftragsnummer)
                .HasMaxLength(50)
                .HasColumnName("cExterneAuftragsnummer");
            entity.Property(e => e.CKundenNr)
                .HasMaxLength(30)
                .HasColumnName("cKundenNr");
            entity.Property(e => e.CRechnungsnummern)
                .HasMaxLength(200)
                .HasColumnName("cRechnungsnummern");
            entity.Property(e => e.CVersandlandIso)
                .HasMaxLength(5)
                .HasColumnName("cVersandlandISO");
            entity.Property(e => e.CVersandlandWaehrung)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cVersandlandWaehrung");
            entity.Property(e => e.CWaehrung)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWaehrung");
            entity.Property(e => e.CZahlungsmodulId)
                .HasMaxLength(64)
                .HasColumnName("cZahlungsmodulID");
            entity.Property(e => e.CeBayBenutzername)
                .HasMaxLength(64)
                .HasColumnName("ceBayBenutzername");
            entity.Property(e => e.DBezahlt)
                .HasColumnType("datetime")
                .HasColumnName("dBezahlt");
            entity.Property(e => e.DDruckdatum)
                .HasColumnType("datetime")
                .HasColumnName("dDruckdatum");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DLetzterVersand)
                .HasColumnType("datetime")
                .HasColumnName("dLetzterVersand");
            entity.Property(e => e.DMaildatum)
                .HasColumnType("datetime")
                .HasColumnName("dMaildatum");
            entity.Property(e => e.DVoraussichtlichesLieferdatum)
                .HasColumnType("datetime")
                .HasColumnName("dVoraussichtlichesLieferdatum");
            entity.Property(e => e.DZahlungsmaildatum)
                .HasColumnType("datetime")
                .HasColumnName("dZahlungsmaildatum");
            entity.Property(e => e.FAuftragswertBrutto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAuftragswertBrutto");
            entity.Property(e => e.FAuftragswertNetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAuftragswertNetto");
            entity.Property(e => e.FAuftragswertVersandland)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("fAuftragswertVersandland");
            entity.Property(e => e.FBereitsgezahltWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBereitsgezahltWert");
            entity.Property(e => e.FGutgeschriebenerWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGutgeschriebenerWert");
            entity.Property(e => e.FGutschrift)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGutschrift");
            entity.Property(e => e.FOffenerWert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fOffenerWert");
            entity.Property(e => e.FVersandlandWaehrungFaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVersandlandWaehrungFaktor");
            entity.Property(e => e.FWaehrungsfaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fWaehrungsfaktor");
            entity.Property(e => e.FZusatzgewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fZusatzgewicht");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            entity.Property(e => e.KBestellhinweis).HasColumnName("kBestellhinweis");
            entity.Property(e => e.KFarbe).HasColumnName("kFarbe");
            entity.Property(e => e.KFirmaHistory).HasColumnName("kFirmaHistory");
            entity.Property(e => e.KInetBestellung).HasColumnName("kInetBestellung");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KKundengruppe).HasColumnName("kKundengruppe");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KRueckhalteGrund).HasColumnName("kRueckhalteGrund");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.KVersandart).HasColumnName("kVersandart");
            entity.Property(e => e.KVorgangsstatus).HasColumnName("kVorgangsstatus");
            entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");
            entity.Property(e => e.NAnzahlPakete).HasColumnName("nAnzahlPakete");
            entity.Property(e => e.NAnzahlVersendetePakete).HasColumnName("nAnzahlVersendetePakete");
            entity.Property(e => e.NAuftragStatus).HasColumnName("nAuftragStatus");
            entity.Property(e => e.NBeschreibung).HasColumnName("nBeschreibung");
            entity.Property(e => e.NDebitorennr).HasColumnName("nDebitorennr");
            entity.Property(e => e.NInet).HasColumnName("nInet");
            entity.Property(e => e.NInnergemeinschaftlicheLieferung).HasColumnName("nInnergemeinschaftlicheLieferung");
            entity.Property(e => e.NIstExterneRechnung).HasColumnName("nIstExterneRechnung");
            entity.Property(e => e.NIstReadOnly).HasColumnName("nIstReadOnly");
            entity.Property(e => e.NKomplettAusgeliefert).HasColumnName("nKomplettAusgeliefert");
            entity.Property(e => e.NLieferprioritaet).HasColumnName("nLieferprioritaet");
            entity.Property(e => e.NPending).HasColumnName("nPending");
            entity.Property(e => e.NPlattformTyp).HasColumnName("nPlattformTyp");
            entity.Property(e => e.NRechnungStatus).HasColumnName("nRechnungStatus");
            entity.Property(e => e.NSteuereinstellung).HasColumnName("nSteuereinstellung");
            entity.Property(e => e.NStorniert).HasColumnName("nStorniert");
            entity.Property(e => e.NUmsatzsteuerfrei).HasColumnName("nUmsatzsteuerfrei");
            entity.Property(e => e.NZahlungStatus).HasColumnName("nZahlungStatus");
            entity.Property(e => e.NZahlungszielTage).HasColumnName("nZahlungszielTage");
        });

        modelBuilder.Entity<VStandardKategorie>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vStandardKategorie");

            entity.Property(e => e.CAktiv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAktiv");
            entity.Property(e => e.CBeschreibung).HasColumnName("cBeschreibung");
            entity.Property(e => e.CDelInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cDelInet");
            entity.Property(e => e.CInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cInet");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CSeo)
                .HasMaxLength(255)
                .HasColumnName("cSeo");
            entity.Property(e => e.KKategorie).HasColumnName("kKategorie");
            entity.Property(e => e.KOberKategorie).HasColumnName("kOberKategorie");
            entity.Property(e => e.NSort).HasColumnName("nSort");
        });

        modelBuilder.Entity<VStandardKunde>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vStandardKunde", "Verkauf");

            entity.Property(e => e.CKundeAdresszusatz)
                .HasMaxLength(30)
                .HasColumnName("cKundeAdresszusatz");
            entity.Property(e => e.CKundeAnrede)
                .HasMaxLength(20)
                .HasColumnName("cKundeAnrede");
            entity.Property(e => e.CKundeBundesland)
                .HasMaxLength(64)
                .HasColumnName("cKundeBundesland");
            entity.Property(e => e.CKundeEbayName)
                .HasMaxLength(64)
                .HasColumnName("cKundeEbayName");
            entity.Property(e => e.CKundeFax)
                .HasMaxLength(20)
                .HasColumnName("cKundeFax");
            entity.Property(e => e.CKundeFirma)
                .HasMaxLength(64)
                .HasColumnName("cKundeFirma");
            entity.Property(e => e.CKundeIso)
                .HasMaxLength(5)
                .HasColumnName("cKundeISO");
            entity.Property(e => e.CKundeLand)
                .HasMaxLength(30)
                .HasColumnName("cKundeLand");
            entity.Property(e => e.CKundeMail)
                .HasMaxLength(50)
                .HasColumnName("cKundeMail");
            entity.Property(e => e.CKundeMobil)
                .HasMaxLength(20)
                .HasColumnName("cKundeMobil");
            entity.Property(e => e.CKundeNachname)
                .HasMaxLength(64)
                .HasColumnName("cKundeNachname");
            entity.Property(e => e.CKundeOrt)
                .HasMaxLength(64)
                .HasColumnName("cKundeOrt");
            entity.Property(e => e.CKundePlz)
                .HasMaxLength(15)
                .HasColumnName("cKundePlz");
            entity.Property(e => e.CKundePostId)
                .HasMaxLength(50)
                .HasColumnName("cKundePostId");
            entity.Property(e => e.CKundeStrasse)
                .HasMaxLength(64)
                .HasColumnName("cKundeStrasse");
            entity.Property(e => e.CKundeTelefon)
                .HasMaxLength(20)
                .HasColumnName("cKundeTelefon");
            entity.Property(e => e.CKundeTitel)
                .HasMaxLength(20)
                .HasColumnName("cKundeTitel");
            entity.Property(e => e.CKundeUstid)
                .HasMaxLength(20)
                .HasColumnName("cKundeUSTID");
            entity.Property(e => e.CKundeVorname)
                .HasMaxLength(64)
                .HasColumnName("cKundeVorname");
            entity.Property(e => e.CKundeZusatz)
                .HasMaxLength(30)
                .HasColumnName("cKundeZusatz");
            entity.Property(e => e.CKundenNr)
                .HasMaxLength(30)
                .HasColumnName("cKundenNr");
            entity.Property(e => e.CKundengruppe)
                .HasMaxLength(255)
                .HasColumnName("cKundengruppe");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.NKundeDebitorennummer).HasColumnName("nKundeDebitorennummer");
        });

        modelBuilder.Entity<VStandardLieferadresse>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vStandardLieferadresse", "Verkauf");

            entity.Property(e => e.CLieferadresseAdresszusatz)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseAdresszusatz");
            entity.Property(e => e.CLieferadresseAnrede)
                .HasMaxLength(20)
                .HasColumnName("cLieferadresseAnrede");
            entity.Property(e => e.CLieferadresseBundesland)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseBundesland");
            entity.Property(e => e.CLieferadresseFax)
                .HasMaxLength(20)
                .HasColumnName("cLieferadresseFax");
            entity.Property(e => e.CLieferadresseFirma)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseFirma");
            entity.Property(e => e.CLieferadresseLand)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseLand");
            entity.Property(e => e.CLieferadresseLandIso)
                .HasMaxLength(5)
                .HasColumnName("cLieferadresseLandIso");
            entity.Property(e => e.CLieferadresseMail)
                .HasMaxLength(50)
                .HasColumnName("cLieferadresseMail");
            entity.Property(e => e.CLieferadresseMobilTelefon)
                .HasMaxLength(20)
                .HasColumnName("cLieferadresseMobilTelefon");
            entity.Property(e => e.CLieferadresseNachname)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseNachname");
            entity.Property(e => e.CLieferadresseOrt)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseOrt");
            entity.Property(e => e.CLieferadressePlz)
                .HasMaxLength(15)
                .HasColumnName("cLieferadressePlz");
            entity.Property(e => e.CLieferadressePostId)
                .HasMaxLength(64)
                .HasColumnName("cLieferadressePostId");
            entity.Property(e => e.CLieferadresseStrasse)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseStrasse");
            entity.Property(e => e.CLieferadresseTelefon)
                .HasMaxLength(20)
                .HasColumnName("cLieferadresseTelefon");
            entity.Property(e => e.CLieferadresseTitel)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseTitel");
            entity.Property(e => e.CLieferadresseVorname)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseVorname");
            entity.Property(e => e.CLieferadresseZusatz)
                .HasMaxLength(60)
                .HasColumnName("cLieferadresseZusatz");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KLieferadresseKunde).HasColumnName("kLieferadresseKunde");
        });

        modelBuilder.Entity<VStandardLieferadresseCache>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vStandardLieferadresseCache", "Verkauf");

            entity.Property(e => e.CLieferadresseAdresszusatz)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseAdresszusatz");
            entity.Property(e => e.CLieferadresseAnrede)
                .HasMaxLength(20)
                .HasColumnName("cLieferadresseAnrede");
            entity.Property(e => e.CLieferadresseBundesland)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseBundesland");
            entity.Property(e => e.CLieferadresseFax)
                .HasMaxLength(20)
                .HasColumnName("cLieferadresseFax");
            entity.Property(e => e.CLieferadresseFirma)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseFirma");
            entity.Property(e => e.CLieferadresseLand)
                .HasMaxLength(30)
                .HasColumnName("cLieferadresseLand");
            entity.Property(e => e.CLieferadresseLandIso)
                .HasMaxLength(5)
                .HasColumnName("cLieferadresseLandIso");
            entity.Property(e => e.CLieferadresseMail)
                .HasMaxLength(50)
                .HasColumnName("cLieferadresseMail");
            entity.Property(e => e.CLieferadresseMobilTelefon)
                .HasMaxLength(20)
                .HasColumnName("cLieferadresseMobilTelefon");
            entity.Property(e => e.CLieferadresseNachname)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseNachname");
            entity.Property(e => e.CLieferadresseOrt)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseOrt");
            entity.Property(e => e.CLieferadressePlz)
                .HasMaxLength(15)
                .HasColumnName("cLieferadressePlz");
            entity.Property(e => e.CLieferadressePostId)
                .HasMaxLength(64)
                .HasColumnName("cLieferadressePostId");
            entity.Property(e => e.CLieferadresseStrasse)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseStrasse");
            entity.Property(e => e.CLieferadresseTelefon)
                .HasMaxLength(20)
                .HasColumnName("cLieferadresseTelefon");
            entity.Property(e => e.CLieferadresseTitel)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseTitel");
            entity.Property(e => e.CLieferadresseVorname)
                .HasMaxLength(64)
                .HasColumnName("cLieferadresseVorname");
            entity.Property(e => e.CLieferadresseZusatz)
                .HasMaxLength(60)
                .HasColumnName("cLieferadresseZusatz");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KLieferadresseKunde).HasColumnName("kLieferadresseKunde");
        });

        modelBuilder.Entity<VStandardMerkmal>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vStandardMerkmal");

            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CTyp)
                .HasMaxLength(255)
                .HasColumnName("cTyp");
            entity.Property(e => e.KMerkmal).HasColumnName("kMerkmal");
            entity.Property(e => e.NGlobal).HasColumnName("nGlobal");
            entity.Property(e => e.NMehrfachauswahl).HasColumnName("nMehrfachauswahl");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NVerwendungszweck).HasColumnName("nVerwendungszweck");
        });

        modelBuilder.Entity<VStandardRechnungsadresse>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vStandardRechnungsadresse", "Verkauf");

            entity.Property(e => e.CRechnungsadresseAdresszusatz)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseAdresszusatz");
            entity.Property(e => e.CRechnungsadresseAnrede)
                .HasMaxLength(20)
                .HasColumnName("cRechnungsadresseAnrede");
            entity.Property(e => e.CRechnungsadresseBundesland)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseBundesland");
            entity.Property(e => e.CRechnungsadresseFax)
                .HasMaxLength(20)
                .HasColumnName("cRechnungsadresseFax");
            entity.Property(e => e.CRechnungsadresseFirma)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseFirma");
            entity.Property(e => e.CRechnungsadresseLand)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseLand");
            entity.Property(e => e.CRechnungsadresseLandIso)
                .HasMaxLength(5)
                .HasColumnName("cRechnungsadresseLandIso");
            entity.Property(e => e.CRechnungsadresseMail)
                .HasMaxLength(50)
                .HasColumnName("cRechnungsadresseMail");
            entity.Property(e => e.CRechnungsadresseMobilTelefon)
                .HasMaxLength(20)
                .HasColumnName("cRechnungsadresseMobilTelefon");
            entity.Property(e => e.CRechnungsadresseNachname)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseNachname");
            entity.Property(e => e.CRechnungsadresseOrt)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseOrt");
            entity.Property(e => e.CRechnungsadressePlz)
                .HasMaxLength(15)
                .HasColumnName("cRechnungsadressePlz");
            entity.Property(e => e.CRechnungsadressePostId)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadressePostId");
            entity.Property(e => e.CRechnungsadresseStrasse)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseStrasse");
            entity.Property(e => e.CRechnungsadresseTelefon)
                .HasMaxLength(20)
                .HasColumnName("cRechnungsadresseTelefon");
            entity.Property(e => e.CRechnungsadresseTitel)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseTitel");
            entity.Property(e => e.CRechnungsadresseVorname)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseVorname");
            entity.Property(e => e.CRechnungsadresseZusatz)
                .HasMaxLength(60)
                .HasColumnName("cRechnungsadresseZusatz");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KRechnungsadresseKunde).HasColumnName("kRechnungsadresseKunde");
        });

        modelBuilder.Entity<VStandardRechnungsadresseCache>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vStandardRechnungsadresseCache", "Verkauf");

            entity.Property(e => e.CRechnungsadresseAdresszusatz)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseAdresszusatz");
            entity.Property(e => e.CRechnungsadresseAnrede)
                .HasMaxLength(20)
                .HasColumnName("cRechnungsadresseAnrede");
            entity.Property(e => e.CRechnungsadresseBundesland)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseBundesland");
            entity.Property(e => e.CRechnungsadresseFax)
                .HasMaxLength(20)
                .HasColumnName("cRechnungsadresseFax");
            entity.Property(e => e.CRechnungsadresseFirma)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseFirma");
            entity.Property(e => e.CRechnungsadresseLand)
                .HasMaxLength(30)
                .HasColumnName("cRechnungsadresseLand");
            entity.Property(e => e.CRechnungsadresseLandIso)
                .HasMaxLength(5)
                .HasColumnName("cRechnungsadresseLandIso");
            entity.Property(e => e.CRechnungsadresseMail)
                .HasMaxLength(50)
                .HasColumnName("cRechnungsadresseMail");
            entity.Property(e => e.CRechnungsadresseMobilTelefon)
                .HasMaxLength(20)
                .HasColumnName("cRechnungsadresseMobilTelefon");
            entity.Property(e => e.CRechnungsadresseNachname)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseNachname");
            entity.Property(e => e.CRechnungsadresseOrt)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseOrt");
            entity.Property(e => e.CRechnungsadressePlz)
                .HasMaxLength(15)
                .HasColumnName("cRechnungsadressePlz");
            entity.Property(e => e.CRechnungsadressePostId)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadressePostId");
            entity.Property(e => e.CRechnungsadresseStrasse)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseStrasse");
            entity.Property(e => e.CRechnungsadresseTelefon)
                .HasMaxLength(20)
                .HasColumnName("cRechnungsadresseTelefon");
            entity.Property(e => e.CRechnungsadresseTitel)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseTitel");
            entity.Property(e => e.CRechnungsadresseVorname)
                .HasMaxLength(64)
                .HasColumnName("cRechnungsadresseVorname");
            entity.Property(e => e.CRechnungsadresseZusatz)
                .HasMaxLength(60)
                .HasColumnName("cRechnungsadresseZusatz");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KRechnungsadresseKunde).HasColumnName("kRechnungsadresseKunde");
        });

        modelBuilder.Entity<VSteuercache>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vSteuercache");

            entity.Property(e => e.FSteuersatz)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fSteuersatz");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KSteuerKlasse).HasColumnName("kSteuerKlasse");
            entity.Property(e => e.KSteuerZone).HasColumnName("kSteuerZone");
        });

        modelBuilder.Entity<VSteuerdaten>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vSteuerdaten", "Steuern");

            entity.Property(e => e.CFirmaName)
                .HasMaxLength(255)
                .HasColumnName("cFirmaName");
            entity.Property(e => e.CVersandlandIso)
                .HasMaxLength(5)
                .HasColumnName("cVersandlandIso");
            entity.Property(e => e.CZielbundesland)
                .HasMaxLength(5)
                .HasColumnName("cZielbundesland");
            entity.Property(e => e.CZiellandIso)
                .HasMaxLength(5)
                .HasColumnName("cZiellandIso");
            entity.Property(e => e.FSteuersatz)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fSteuersatz");
            entity.Property(e => e.FSteuersatzErmittelt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fSteuersatzErmittelt");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");
            entity.Property(e => e.KSteuerzone).HasColumnName("kSteuerzone");
            entity.Property(e => e.NIstSpezifisch).HasColumnName("nIstSpezifisch");
            entity.Property(e => e.NSteuertyp).HasColumnName("nSteuertyp");
        });

        modelBuilder.Entity<VSteuerdatenIntern>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vSteuerdatenIntern", "Steuern");

            entity.Property(e => e.CVersandlandIso)
                .HasMaxLength(5)
                .HasColumnName("cVersandlandIso");
            entity.Property(e => e.CZielbundesland)
                .HasMaxLength(5)
                .HasColumnName("cZielbundesland");
            entity.Property(e => e.CZiellandIso)
                .HasMaxLength(5)
                .HasColumnName("cZiellandIso");
            entity.Property(e => e.FSteuersatz)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fSteuersatz");
            entity.Property(e => e.FSteuersatzErmittelt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fSteuersatzErmittelt");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");
            entity.Property(e => e.KSteuerzone).HasColumnName("kSteuerzone");
            entity.Property(e => e.NFirmaPrio).HasColumnName("nFirmaPrio");
            entity.Property(e => e.NIstSpezifisch).HasColumnName("nIstSpezifisch");
            entity.Property(e => e.NSteuertyp).HasColumnName("nSteuertyp");
        });

        modelBuilder.Entity<VSteuerklasse>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vSteuerklasse", "DbeS");

            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KSteuerklasse)
                .ValueGeneratedOnAdd()
                .HasColumnName("kSteuerklasse");
            entity.Property(e => e.NStandard).HasColumnName("nStandard");
        });

        modelBuilder.Entity<VSteuersatz>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vSteuersatz", "DbeS");

            entity.Property(e => e.FSteuersatz)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fSteuersatz");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");
            entity.Property(e => e.KSteuersatz).HasColumnName("kSteuersatz");
            entity.Property(e => e.KSteuerzone).HasColumnName("kSteuerzone");
            entity.Property(e => e.NPrio).HasColumnName("nPrio");
        });

        modelBuilder.Entity<VSteuerschluessel>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vSteuerschluessel", "Steuern");

            entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");
            entity.Property(e => e.KSteuersatz).HasColumnName("kSteuersatz");
            entity.Property(e => e.KSteuerschluessel).HasColumnName("kSteuerschluessel");
            entity.Property(e => e.KSteuerschluesselIgl).HasColumnName("kSteuerschluesselIGL");
            entity.Property(e => e.KSteuerschluesselReverseCharge).HasColumnName("kSteuerschluesselReverseCharge");
            entity.Property(e => e.KSteuerschluesselUstIgl).HasColumnName("kSteuerschluesselUstIGL");
            entity.Property(e => e.KSteuerzone).HasColumnName("kSteuerzone");
            entity.Property(e => e.KVersandArt).HasColumnName("kVersandArt");
            entity.Property(e => e.KWarengruppe).HasColumnName("kWarengruppe");
            entity.Property(e => e.NPositionstyp).HasColumnName("nPositionstyp");
        });

        modelBuilder.Entity<VSteuerschluesselDaten>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vSteuerschluesselDaten", "Steuern");

            entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");
            entity.Property(e => e.KSteuersatz).HasColumnName("kSteuersatz");
            entity.Property(e => e.KSteuerschluessel).HasColumnName("kSteuerschluessel");
            entity.Property(e => e.KSteuerzone).HasColumnName("kSteuerzone");
            entity.Property(e => e.KVersandArt).HasColumnName("kVersandArt");
            entity.Property(e => e.KWarengruppe).HasColumnName("kWarengruppe");
            entity.Property(e => e.NPositionstyp).HasColumnName("nPositionstyp");
            entity.Property(e => e.NSteuertyp).HasColumnName("nSteuertyp");
        });

        modelBuilder.Entity<VSteuerschluesselIntern>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vSteuerschluesselIntern", "Steuern");

            entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");
            entity.Property(e => e.KSteuersatz).HasColumnName("kSteuersatz");
            entity.Property(e => e.KSteuerschluessel).HasColumnName("kSteuerschluessel");
            entity.Property(e => e.KSteuerschluesselIgl).HasColumnName("kSteuerschluesselIGL");
            entity.Property(e => e.KSteuerschluesselReverseCharge).HasColumnName("kSteuerschluesselReverseCharge");
            entity.Property(e => e.KSteuerschluesselUstIgl).HasColumnName("kSteuerschluesselUstIGL");
            entity.Property(e => e.KSteuerzone).HasColumnName("kSteuerzone");
            entity.Property(e => e.KVersandArt).HasColumnName("kVersandArt");
            entity.Property(e => e.KWarengruppe).HasColumnName("kWarengruppe");
            entity.Property(e => e.NPositionstyp).HasColumnName("nPositionstyp");
            entity.Property(e => e.NPrio).HasColumnName("nPrio");
        });

        modelBuilder.Entity<VSteuertyp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vSteuertyp", "Steuern");

            entity.Property(e => e.NSteuertyp).HasColumnName("nSteuertyp");
            entity.Property(e => e.Name)
                .HasMaxLength(38)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VSteuerzone>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vSteuerzone", "DbeS");

            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KSteuerzone).HasColumnName("kSteuerzone");
        });

        modelBuilder.Entity<VSteuerzoneLand>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vSteuerzoneLand", "DbeS");

            entity.Property(e => e.CIso)
                .HasMaxLength(5)
                .HasColumnName("cISO");
            entity.Property(e => e.KSteuerzone).HasColumnName("kSteuerzone");
        });

        modelBuilder.Entity<VSteuerzonenBlacklistIntern>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vSteuerzonenBlacklistIntern", "Steuern");

            entity.Property(e => e.KFirma).HasColumnName("kFirma");
            entity.Property(e => e.KSteuerzone).HasColumnName("kSteuerzone");
        });

        modelBuilder.Entity<VStuecklisteBestand>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vStuecklisteBestand");

            entity.Property(e => e.DLieferdatum)
                .HasColumnType("datetime")
                .HasColumnName("dLieferdatum");
            entity.Property(e => e.FAufEinkaufsliste)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fAufEinkaufsliste");
            entity.Property(e => e.FAuslieferungGesperrt)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fAuslieferungGesperrt");
            entity.Property(e => e.FLagerbestand)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fLagerbestand");
            entity.Property(e => e.FLagerbestandEigen)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fLagerbestandEigen");
            entity.Property(e => e.FVerfuegbar)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fVerfuegbar");
            entity.Property(e => e.FVerfuegbarGesperrt)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fVerfuegbarGesperrt");
            entity.Property(e => e.FZulauf)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("fZulauf");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KStueckliste).HasColumnName("kStueckliste");
        });

        modelBuilder.Entity<VStuecklisteGutschriftPo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vStuecklisteGutschriftPos");

            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KGutschriftPos).HasColumnName("kGutschriftPos");
        });

        modelBuilder.Entity<VStuecklisteInBestellung>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vStuecklisteInBestellung");

            entity.Property(e => e.MengeInBestellung).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.TArtikelKArtikel).HasColumnName("tArtikel_kArtikel");
        });

        modelBuilder.Entity<VStuecklisten>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vStuecklisten", "Maintenance");

            entity.Property(e => e.Artikelgewicht)
                .HasMaxLength(21)
                .IsUnicode(false);
            entity.Property(e => e.Bearbeitungszeit)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.Einkaufspreis)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.Lagerführung)
                .HasMaxLength(19)
                .IsUnicode(false);
            entity.Property(e => e.Lieferzeitberechnung)
                .HasMaxLength(27)
                .IsUnicode(false);
            entity.Property(e => e.Teilbarkeit)
                .HasMaxLength(18)
                .IsUnicode(false);
            entity.Property(e => e.Versandgewicht)
                .HasMaxLength(21)
                .IsUnicode(false);
            entity.Property(e => e.Überverkäufe)
                .HasMaxLength(19)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VTicketDsgvoDaten>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vTicketDsgvoDaten", "Ticketsystem");

            entity.Property(e => e.CEindeutigeId)
                .HasMaxLength(255)
                .HasColumnName("cEindeutigeId");
            entity.Property(e => e.CTitelErsteNachricht)
                .HasMaxLength(998)
                .HasColumnName("cTitelErsteNachricht");
            entity.Property(e => e.DErstellung)
                .HasColumnType("datetime")
                .HasColumnName("dErstellung");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.KTicket).HasColumnName("kTicket");
        });

        modelBuilder.Entity<VTicketLabel>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vTicketLabels", "Ticketsystem");

            entity.Property(e => e.ColorCode).HasMaxLength(7);
            entity.Property(e => e.Displayname).HasMaxLength(255);
        });

        modelBuilder.Entity<VTicketliste>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vTicketliste", "Ticketsystem");

            entity.Property(e => e.AssigneeFullName).HasMaxLength(255);
            entity.Property(e => e.CreationDate).HasColumnType("datetime");
            entity.Property(e => e.CustomerName).HasMaxLength(642);
            entity.Property(e => e.DatumNeuesteNachricht).HasColumnType("datetime");
            entity.Property(e => e.Kundennummer).HasMaxLength(30);
            entity.Property(e => e.LieferantName).HasMaxLength(511);
            entity.Property(e => e.Lieferantennummer).HasMaxLength(64);
            entity.Property(e => e.ReminderDate).HasColumnType("datetime");
            entity.Property(e => e.TargetDate).HasColumnType("datetime");
            entity.Property(e => e.TicketId).HasMaxLength(255);
            entity.Property(e => e.TicketStatusName).HasMaxLength(255);
            entity.Property(e => e.Title).HasMaxLength(100);
        });

        modelBuilder.Entity<VTrackAndTraceConfiguration>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vTrackAndTraceConfigurations", "Shipping");

            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KVersandArt).HasColumnName("kVersandArt");
            entity.Property(e => e.NIsEnabled).HasColumnName("nIsEnabled");
            entity.Property(e => e.NTrackAndTraceProviderType).HasColumnName("nTrackAndTraceProviderType");
        });

        modelBuilder.Entity<VUnkownConditionProduct>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vUnkownConditionProducts", "FulfillmentNetwork");

            entity.Property(e => e.ArtNr)
                .HasMaxLength(100)
                .HasColumnName("artNr");
            entity.Property(e => e.ChildFfnCondition).HasColumnName("childFfnCondition");
            entity.Property(e => e.ChildProduct).HasColumnName("childProduct");
            entity.Property(e => e.ParentCondition).HasColumnName("parentCondition");
            entity.Property(e => e.ParentJfsku)
                .HasMaxLength(255)
                .HasColumnName("parentJfsku");
        });

        modelBuilder.Entity<VUploadMetaDatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vUploadMetaData", "SCX");

            entity.Property(e => e.CChannel)
                .HasMaxLength(15)
                .HasColumnName("cChannel");
            entity.Property(e => e.CExterneAuftragsnummer)
                .HasMaxLength(50)
                .HasColumnName("cExterneAuftragsnummer");
            entity.Property(e => e.CRechnungsnr)
                .HasMaxLength(50)
                .HasColumnName("cRechnungsnr");
            entity.Property(e => e.CSellerId)
                .HasMaxLength(50)
                .HasColumnName("cSellerId");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KOrder).HasColumnName("kOrder");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.KUploadData).HasColumnName("kUploadData");
            entity.Property(e => e.NType).HasColumnName("nType");
        });

        modelBuilder.Entity<VUstIdKorrektur>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vUstIdKorrektur", "Steuern");

            entity.Property(e => e.CAuftragsnummer)
                .HasMaxLength(50)
                .HasColumnName("cAuftragsnummer");
            entity.Property(e => e.CIstUmsatzsteueridentnummer)
                .HasMaxLength(25)
                .HasColumnName("cIstUmsatzsteueridentnummer");
            entity.Property(e => e.CKundeUstId)
                .HasMaxLength(20)
                .HasColumnName("cKundeUstId");
            entity.Property(e => e.CLieferland)
                .HasMaxLength(255)
                .HasColumnName("cLieferland");
            entity.Property(e => e.CLieferlandIso)
                .HasMaxLength(5)
                .HasColumnName("cLieferlandIso");
            entity.Property(e => e.CRechnungsland)
                .HasMaxLength(255)
                .HasColumnName("cRechnungsland");
            entity.Property(e => e.CRechnungslandIso)
                .HasMaxLength(5)
                .HasColumnName("cRechnungslandIso");
            entity.Property(e => e.CSollUmsatzsteueridentnummer)
                .HasMaxLength(25)
                .HasColumnName("cSollUmsatzsteueridentnummer");
            entity.Property(e => e.CVersandland)
                .HasMaxLength(255)
                .HasColumnName("cVersandland");
            entity.Property(e => e.CVersandlandIso)
                .HasMaxLength(5)
                .HasColumnName("cVersandlandIso");
            entity.Property(e => e.DAuftragsdatum)
                .HasColumnType("datetime")
                .HasColumnName("dAuftragsdatum");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.NRechnungVorhanden).HasColumnName("nRechnungVorhanden");
            entity.Property(e => e.NRechnungskorrekturVorhanden).HasColumnName("nRechnungskorrekturVorhanden");
        });

        modelBuilder.Entity<VVariationMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vVariationMapping", "SCX");

            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KChannel).HasColumnName("kChannel");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.VariationName).HasMaxLength(255);
            entity.Property(e => e.VariationNameMapping).HasMaxLength(128);
            entity.Property(e => e.VariationwertName).HasMaxLength(255);
            entity.Property(e => e.VariationwertNameMapping).HasMaxLength(128);
        });

        modelBuilder.Entity<VVariationsBild>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vVariationsBild", "DbeS");

            entity.Property(e => e.BBild)
                .HasColumnType("image")
                .HasColumnName("bBild");
            entity.Property(e => e.CHash)
                .HasMaxLength(255)
                .HasColumnName("cHash");
            entity.Property(e => e.KBild).HasColumnName("kBild");
            entity.Property(e => e.KEigenschaftWert).HasColumnName("kEigenschaftWert");
            entity.Property(e => e.KEigenschaftWertPict).HasColumnName("kEigenschaftWertPict");
            entity.Property(e => e.KPlattform).HasColumnName("kPlattform");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.NDateigroesse).HasColumnName("nDateigroesse");
            entity.Property(e => e.NInet).HasColumnName("nInet");
        });

        modelBuilder.Entity<VVarkombiBestand>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vVarkombiBestand");

            entity.Property(e => e.DLieferdatum)
                .HasColumnType("datetime")
                .HasColumnName("dLieferdatum");
            entity.Property(e => e.FAufEinkaufsliste)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAufEinkaufsliste");
            entity.Property(e => e.FAuslieferungGesperrt)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAuslieferungGesperrt");
            entity.Property(e => e.FInAuftraegen)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fInAuftraegen");
            entity.Property(e => e.FLagerbestand)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fLagerbestand");
            entity.Property(e => e.FLagerbestandEigen)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fLagerbestandEigen");
            entity.Property(e => e.FVerfuegbar)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fVerfuegbar");
            entity.Property(e => e.FVerfuegbarGesperrt)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fVerfuegbarGesperrt");
            entity.Property(e => e.FZulauf)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fZulauf");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
        });

        modelBuilder.Entity<VVcsBestelldatumLand>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vVcsBestelldatumLand", "Amazon");

            entity.Property(e => e.CShipFromCountry)
                .HasMaxLength(5)
                .HasColumnName("cShipFromCountry");
            entity.Property(e => e.DBestellDatum)
                .HasColumnType("datetime")
                .HasColumnName("dBestellDatum");
            entity.Property(e => e.DVcsDatum)
                .HasColumnType("datetime")
                .HasColumnName("dVcsDatum");
            entity.Property(e => e.KBestelldatumLand)
                .ValueGeneratedOnAdd()
                .HasColumnName("kBestelldatumLand");
            entity.Property(e => e.KUser).HasColumnName("kUser");
        });

        modelBuilder.Entity<VVcsLiteGutschrift>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vVcsLiteGutschrift", "Amazon");

            entity.Property(e => e.Asin)
                .HasMaxLength(10)
                .HasColumnName("ASIN");
            entity.Property(e => e.BillAddress1).HasMaxLength(255);
            entity.Property(e => e.BillAddress2).HasMaxLength(255);
            entity.Property(e => e.BillAddress3).HasMaxLength(255);
            entity.Property(e => e.BillCity).HasMaxLength(100);
            entity.Property(e => e.BillCountry).HasMaxLength(5);
            entity.Property(e => e.BillPostalCode).HasMaxLength(20);
            entity.Property(e => e.BillState).HasMaxLength(100);
            entity.Property(e => e.BillingName).HasMaxLength(255);
            entity.Property(e => e.BillingPhoneNumber).HasMaxLength(100);
            entity.Property(e => e.BuyerCompanyName).HasMaxLength(255);
            entity.Property(e => e.BuyerEinvoiceAccountId)
                .HasMaxLength(30)
                .HasColumnName("buyerEInvoiceAccountId");
            entity.Property(e => e.BuyerName).HasMaxLength(255);
            entity.Property(e => e.BuyerTaxRegistrationType)
                .HasMaxLength(30)
                .HasColumnName("buyerTaxRegistrationType");
            entity.Property(e => e.BuyerVatNumber).HasMaxLength(30);
            entity.Property(e => e.CArtikelnummer)
                .HasMaxLength(100)
                .HasColumnName("cArtikelnummer");
            entity.Property(e => e.CEinheit)
                .HasMaxLength(255)
                .HasColumnName("cEinheit");
            entity.Property(e => e.CWawiRechnungskorrekturnummer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cWawiRechnungskorrekturnummer");
            entity.Property(e => e.CWawiRechnungsnummer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cWawiRechnungsnummer");
            entity.Property(e => e.CitationDe).HasColumnName("citationDe");
            entity.Property(e => e.CitationEn).HasColumnName("citationEn");
            entity.Property(e => e.CitationEs).HasColumnName("citationEs");
            entity.Property(e => e.CitationFr).HasColumnName("citationFr");
            entity.Property(e => e.CitationIt).HasColumnName("citationIt");
            entity.Property(e => e.CreationDate).HasColumnType("datetime");
            entity.Property(e => e.Currency).HasMaxLength(10);
            entity.Property(e => e.ExportOutsideEu).HasColumnName("exportOutsideEu");
            entity.Property(e => e.FArtGewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fArtGewicht");
            entity.Property(e => e.FEknetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEKNetto");
            entity.Property(e => e.FGewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGewicht");
            entity.Property(e => e.FulfilledBy).HasMaxLength(30);
            entity.Property(e => e.GiftPromoVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftPromoVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftPromoVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftPromoVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftPromotionId)
                .HasMaxLength(50)
                .HasColumnName("GiftPromotionID");
            entity.Property(e => e.GiftWrapVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftWrapVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftWrapVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftWrapVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.InvoiceCorrectionDetails).HasColumnName("invoiceCorrectionDetails");
            entity.Property(e => e.InvoiceNumber).HasMaxLength(100);
            entity.Property(e => e.InvoiceStatus).HasMaxLength(100);
            entity.Property(e => e.InvoiceStatusDescription).HasMaxLength(255);
            entity.Property(e => e.IsBusinessOrder).HasMaxLength(5);
            entity.Property(e => e.IsBuyerPhysicallyPresent).HasColumnName("isBuyerPhysicallyPresent");
            entity.Property(e => e.IsInvoiceCorrected).HasColumnName("isInvoiceCorrected");
            entity.Property(e => e.IsSellerPhysicallyPresent).HasColumnName("isSellerPhysicallyPresent");
            entity.Property(e => e.ItemPromoVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemPromoVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemPromoVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemPromoVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemPromotionId)
                .HasMaxLength(50)
                .HasColumnName("ItemPromotionID");
            entity.Property(e => e.ItemVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");
            entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");
            entity.Property(e => e.KGutschriftPos).HasColumnName("kGutschriftPos");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.KVcsRechnung).HasColumnName("kVcsRechnung");
            entity.Property(e => e.KVcsdata).HasColumnName("kVCSData");
            entity.Property(e => e.LegacyCustomerOrderItemId).HasMaxLength(255);
            entity.Property(e => e.MarketplaceId)
                .HasMaxLength(20)
                .HasColumnName("MarketplaceID");
            entity.Property(e => e.NInProgress).HasColumnName("nInProgress");
            entity.Property(e => e.NProcessed).HasColumnName("nProcessed");
            entity.Property(e => e.NUploadVersuche).HasColumnName("nUploadVersuche");
            entity.Property(e => e.NVcsHerkunftsTyp).HasColumnName("nVcsHerkunftsTyp");
            entity.Property(e => e.NVcsRechnungsherkunftsTyp).HasColumnName("nVcsRechnungsherkunftsTyp");
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.OrderId)
                .HasMaxLength(50)
                .HasColumnName("OrderID");
            entity.Property(e => e.OrderItemId)
                .HasMaxLength(50)
                .HasColumnName("OrderItemID");
            entity.Property(e => e.OriginalVatinvoiceNumber)
                .HasMaxLength(100)
                .HasColumnName("originalVATInvoiceNumber");
            entity.Property(e => e.PriceDesignation).HasMaxLength(5);
            entity.Property(e => e.ProductName).HasMaxLength(255);
            entity.Property(e => e.PurchaseOrderNumber).HasMaxLength(255);
            entity.Property(e => e.QuantityPurchased).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.RecipientName).HasMaxLength(255);
            entity.Property(e => e.RecommendedInvoiceFormat).HasMaxLength(50);
            entity.Property(e => e.SellerVatNumber).HasMaxLength(30);
            entity.Property(e => e.ShipAddress1).HasMaxLength(255);
            entity.Property(e => e.ShipAddress2).HasMaxLength(255);
            entity.Property(e => e.ShipAddress3).HasMaxLength(255);
            entity.Property(e => e.ShipCity).HasMaxLength(100);
            entity.Property(e => e.ShipCountry).HasMaxLength(5);
            entity.Property(e => e.ShipFromCity).HasMaxLength(100);
            entity.Property(e => e.ShipFromCountry).HasMaxLength(5);
            entity.Property(e => e.ShipFromPostalCode).HasMaxLength(20);
            entity.Property(e => e.ShipFromState).HasMaxLength(100);
            entity.Property(e => e.ShipPhoneNumber).HasMaxLength(100);
            entity.Property(e => e.ShipPostalCode).HasMaxLength(20);
            entity.Property(e => e.ShipPromotionId)
                .HasMaxLength(50)
                .HasColumnName("ShipPromotionID");
            entity.Property(e => e.ShipServiceLevel).HasMaxLength(30);
            entity.Property(e => e.ShipState).HasMaxLength(100);
            entity.Property(e => e.ShippingDate).HasColumnType("datetime");
            entity.Property(e => e.ShippingId)
                .HasMaxLength(50)
                .HasColumnName("ShippingID");
            entity.Property(e => e.ShippingPromoVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingPromoVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingPromoVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingPromoVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Sku)
                .HasMaxLength(100)
                .HasColumnName("SKU");
            entity.Property(e => e.TransactionId)
                .HasMaxLength(50)
                .HasColumnName("TransactionID");
            entity.Property(e => e.TransactionType).HasMaxLength(10);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<VVcsLiteGutschriftErneuterUpload>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vVcsLiteGutschriftErneuterUpload", "Amazon");

            entity.Property(e => e.DAktualisiertUtc).HasColumnName("dAktualisiertUtc");
            entity.Property(e => e.DVerarbeitetUtc).HasColumnName("dVerarbeitetUtc");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.TransactionId)
                .HasMaxLength(50)
                .HasColumnName("TransactionID");
        });

        modelBuilder.Entity<VVcsLiteGutschriftInvoiceByAmazonOffenerBeleg>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vVcsLiteGutschriftInvoiceByAmazonOffenerBeleg", "Amazon");

            entity.Property(e => e.DAktualisiertUtc).HasColumnName("dAktualisiertUtc");
            entity.Property(e => e.DVerarbeitetUtc).HasColumnName("dVerarbeitetUtc");
            entity.Property(e => e.InvoiceNumber).HasMaxLength(100);
            entity.Property(e => e.KUser).HasColumnName("kUser");
        });

        modelBuilder.Entity<VVcsLiteGutschriftOffenerBeleg>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vVcsLiteGutschriftOffenerBeleg", "Amazon");

            entity.Property(e => e.DAktualisiertUtc).HasColumnName("dAktualisiertUtc");
            entity.Property(e => e.DVerarbeitetUtc).HasColumnName("dVerarbeitetUtc");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.TransactionId)
                .HasMaxLength(50)
                .HasColumnName("TransactionID");
        });

        modelBuilder.Entity<VVcsLiteRechnung>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vVcsLiteRechnung", "Amazon");

            entity.Property(e => e.Asin)
                .HasMaxLength(10)
                .HasColumnName("ASIN");
            entity.Property(e => e.BillAddress1).HasMaxLength(255);
            entity.Property(e => e.BillAddress2).HasMaxLength(255);
            entity.Property(e => e.BillAddress3).HasMaxLength(255);
            entity.Property(e => e.BillCity).HasMaxLength(100);
            entity.Property(e => e.BillCountry).HasMaxLength(5);
            entity.Property(e => e.BillPostalCode).HasMaxLength(20);
            entity.Property(e => e.BillState).HasMaxLength(100);
            entity.Property(e => e.BillingName).HasMaxLength(255);
            entity.Property(e => e.BillingPhoneNumber).HasMaxLength(100);
            entity.Property(e => e.BuyerCompanyName).HasMaxLength(255);
            entity.Property(e => e.BuyerEinvoiceAccountId)
                .HasMaxLength(30)
                .HasColumnName("buyerEInvoiceAccountId");
            entity.Property(e => e.BuyerName).HasMaxLength(255);
            entity.Property(e => e.BuyerTaxRegistrationType)
                .HasMaxLength(30)
                .HasColumnName("buyerTaxRegistrationType");
            entity.Property(e => e.BuyerVatNumber).HasMaxLength(30);
            entity.Property(e => e.CArtikelnummer)
                .HasMaxLength(100)
                .HasColumnName("cArtikelnummer");
            entity.Property(e => e.CEinheit)
                .HasMaxLength(255)
                .HasColumnName("cEinheit");
            entity.Property(e => e.CWawiRechnungskorrekturnummer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cWawiRechnungskorrekturnummer");
            entity.Property(e => e.CWawiRechnungsnummer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cWawiRechnungsnummer");
            entity.Property(e => e.CitationDe).HasColumnName("citationDe");
            entity.Property(e => e.CitationEn).HasColumnName("citationEn");
            entity.Property(e => e.CitationEs).HasColumnName("citationEs");
            entity.Property(e => e.CitationFr).HasColumnName("citationFr");
            entity.Property(e => e.CitationIt).HasColumnName("citationIt");
            entity.Property(e => e.CreationDate).HasColumnType("datetime");
            entity.Property(e => e.Currency).HasMaxLength(10);
            entity.Property(e => e.ExportOutsideEu).HasColumnName("exportOutsideEu");
            entity.Property(e => e.FArtGewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fArtGewicht");
            entity.Property(e => e.FEknetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEKNetto");
            entity.Property(e => e.FGewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGewicht");
            entity.Property(e => e.FulfilledBy).HasMaxLength(30);
            entity.Property(e => e.GiftPromoVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftPromoVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftPromoVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftPromoVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftPromotionId)
                .HasMaxLength(50)
                .HasColumnName("GiftPromotionID");
            entity.Property(e => e.GiftWrapVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftWrapVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftWrapVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.GiftWrapVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.InvoiceCorrectionDetails).HasColumnName("invoiceCorrectionDetails");
            entity.Property(e => e.InvoiceNumber).HasMaxLength(100);
            entity.Property(e => e.InvoiceStatus).HasMaxLength(100);
            entity.Property(e => e.InvoiceStatusDescription).HasMaxLength(255);
            entity.Property(e => e.IsBusinessOrder).HasMaxLength(5);
            entity.Property(e => e.IsBuyerPhysicallyPresent).HasColumnName("isBuyerPhysicallyPresent");
            entity.Property(e => e.IsInvoiceCorrected).HasColumnName("isInvoiceCorrected");
            entity.Property(e => e.IsSellerPhysicallyPresent).HasColumnName("isSellerPhysicallyPresent");
            entity.Property(e => e.ItemPromoVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemPromoVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemPromoVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemPromoVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemPromotionId)
                .HasMaxLength(50)
                .HasColumnName("ItemPromotionID");
            entity.Property(e => e.ItemVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ItemVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");
            entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");
            entity.Property(e => e.KGutschriftPos).HasColumnName("kGutschriftPos");
            entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.KVcsdata).HasColumnName("kVCSData");
            entity.Property(e => e.LegacyCustomerOrderItemId).HasMaxLength(255);
            entity.Property(e => e.MarketplaceId)
                .HasMaxLength(20)
                .HasColumnName("MarketplaceID");
            entity.Property(e => e.NBestellungUebernommen).HasColumnName("nBestellungUebernommen");
            entity.Property(e => e.NInProgress).HasColumnName("nInProgress");
            entity.Property(e => e.NProcessed).HasColumnName("nProcessed");
            entity.Property(e => e.NUploadVersuche).HasColumnName("nUploadVersuche");
            entity.Property(e => e.NVcsHerkunftsTyp).HasColumnName("nVcsHerkunftsTyp");
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.OrderId)
                .HasMaxLength(50)
                .HasColumnName("OrderID");
            entity.Property(e => e.OrderItemId)
                .HasMaxLength(50)
                .HasColumnName("OrderItemID");
            entity.Property(e => e.OriginalVatinvoiceNumber)
                .HasMaxLength(100)
                .HasColumnName("originalVATInvoiceNumber");
            entity.Property(e => e.PriceDesignation).HasMaxLength(5);
            entity.Property(e => e.ProductName).HasMaxLength(255);
            entity.Property(e => e.PurchaseOrderNumber).HasMaxLength(255);
            entity.Property(e => e.QuantityPurchased).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.RecipientName).HasMaxLength(255);
            entity.Property(e => e.RecommendedInvoiceFormat).HasMaxLength(50);
            entity.Property(e => e.SellerVatNumber).HasMaxLength(30);
            entity.Property(e => e.ShipAddress1).HasMaxLength(255);
            entity.Property(e => e.ShipAddress2).HasMaxLength(255);
            entity.Property(e => e.ShipAddress3).HasMaxLength(255);
            entity.Property(e => e.ShipCity).HasMaxLength(100);
            entity.Property(e => e.ShipCountry).HasMaxLength(5);
            entity.Property(e => e.ShipFromCity).HasMaxLength(100);
            entity.Property(e => e.ShipFromCountry).HasMaxLength(5);
            entity.Property(e => e.ShipFromPostalCode).HasMaxLength(20);
            entity.Property(e => e.ShipFromState).HasMaxLength(100);
            entity.Property(e => e.ShipPhoneNumber).HasMaxLength(100);
            entity.Property(e => e.ShipPostalCode).HasMaxLength(20);
            entity.Property(e => e.ShipPromotionId)
                .HasMaxLength(50)
                .HasColumnName("ShipPromotionID");
            entity.Property(e => e.ShipServiceLevel).HasMaxLength(30);
            entity.Property(e => e.ShipState).HasMaxLength(100);
            entity.Property(e => e.ShippingDate).HasColumnType("datetime");
            entity.Property(e => e.ShippingId)
                .HasMaxLength(50)
                .HasColumnName("ShippingID");
            entity.Property(e => e.ShippingPromoVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingPromoVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingPromoVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingPromoVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingVatAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingVatExclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingVatInclAmount).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.ShippingVatRate).HasColumnType("decimal(25, 13)");
            entity.Property(e => e.Sku)
                .HasMaxLength(100)
                .HasColumnName("SKU");
            entity.Property(e => e.TransactionId)
                .HasMaxLength(50)
                .HasColumnName("TransactionID");
            entity.Property(e => e.TransactionType).HasMaxLength(10);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<VVcsLiteRechnungErneuterUpload>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vVcsLiteRechnungErneuterUpload", "Amazon");

            entity.Property(e => e.DAktualisiertUtc).HasColumnName("dAktualisiertUtc");
            entity.Property(e => e.DVerarbeitetUtc).HasColumnName("dVerarbeitetUtc");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.TransactionId)
                .HasMaxLength(50)
                .HasColumnName("TransactionID");
        });

        modelBuilder.Entity<VVcsLiteRechnungInvoiceByAmazonOffenerBeleg>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vVcsLiteRechnungInvoiceByAmazonOffenerBeleg", "Amazon");

            entity.Property(e => e.DAktualisiertUtc).HasColumnName("dAktualisiertUtc");
            entity.Property(e => e.DVerarbeitetUtc).HasColumnName("dVerarbeitetUtc");
            entity.Property(e => e.InvoiceNumber).HasMaxLength(100);
            entity.Property(e => e.KUser).HasColumnName("kUser");
        });

        modelBuilder.Entity<VVcsLiteRechnungOffenerBeleg>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vVcsLiteRechnungOffenerBeleg", "Amazon");

            entity.Property(e => e.DAktualisiertUtc).HasColumnName("dAktualisiertUtc");
            entity.Property(e => e.DVerarbeitetUtc).HasColumnName("dVerarbeitetUtc");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.TransactionId)
                .HasMaxLength(50)
                .HasColumnName("TransactionID");
        });

        modelBuilder.Entity<VVcsLiteUpload>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vVcsLiteUpload", "Amazon");

            entity.Property(e => e.BData).HasColumnName("bData");
            entity.Property(e => e.CBelegnummer)
                .HasMaxLength(50)
                .HasColumnName("cBelegnummer");
            entity.Property(e => e.CBezugsbelegnummer)
                .HasMaxLength(50)
                .HasColumnName("cBezugsbelegnummer");
            entity.Property(e => e.CFileName)
                .HasMaxLength(250)
                .HasColumnName("cFileName");
            entity.Property(e => e.COrderId)
                .HasMaxLength(30)
                .HasColumnName("cOrderId");
            entity.Property(e => e.CShippingId)
                .HasMaxLength(50)
                .HasColumnName("cShippingID");
            entity.Property(e => e.CTransactionId)
                .HasMaxLength(50)
                .HasColumnName("cTransactionId");
            entity.Property(e => e.DFileErstelltUtc).HasColumnName("dFileErstelltUtc");
            entity.Property(e => e.KExternerBeleg).HasColumnName("kExternerBeleg");
            entity.Property(e => e.KFile).HasColumnName("kFile");
            entity.Property(e => e.KUser).HasColumnName("kUser");
            entity.Property(e => e.KVcsLiteUploadQueue).HasColumnName("kVcsLiteUploadQueue");
            entity.Property(e => e.NBelegtyp).HasColumnName("nBelegtyp");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
            entity.Property(e => e.NUploadVersuche).HasColumnName("nUploadVersuche");
        });

        modelBuilder.Entity<VVersandartSteuerschluessel>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vVersandartSteuerschluessel", "Steuern");

            entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");
            entity.Property(e => e.KSteuersatz).HasColumnName("kSteuersatz");
            entity.Property(e => e.KSteuerschluessel).HasColumnName("kSteuerschluessel");
            entity.Property(e => e.KSteuerschluesselIgl).HasColumnName("kSteuerschluesselIGL");
            entity.Property(e => e.KSteuerschluesselReverseCharge).HasColumnName("kSteuerschluesselReverseCharge");
            entity.Property(e => e.KSteuerschluesselUstIgl).HasColumnName("kSteuerschluesselUstIGL");
            entity.Property(e => e.KSteuerzone).HasColumnName("kSteuerzone");
            entity.Property(e => e.KVersandArt).HasColumnName("kVersandArt");
        });

        modelBuilder.Entity<VVersandklasse>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vVersandklasse", "DbeS");

            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KVersandklasse)
                .ValueGeneratedOnAdd()
                .HasColumnName("kVersandklasse");
        });

        modelBuilder.Entity<VVersandlager>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vVersandlager", "VersandIntern");

            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.NTyp).HasColumnName("nTyp");
        });

        modelBuilder.Entity<VVorgang>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vVorgang", "FulfillmentNetwork");

            entity.Property(e => e.CComment)
                .IsUnicode(false)
                .HasColumnName("cComment");
            entity.Property(e => e.CFfnKey)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("cFfnKey");
            entity.Property(e => e.CScopeId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("cScopeId");
            entity.Property(e => e.CUserId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("cUserId");
            entity.Property(e => e.CVorgangTypeId)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("cVorgangTypeId");
            entity.Property(e => e.CWawiNumber)
                .HasMaxLength(128)
                .HasColumnName("cWawiNumber");
            entity.Property(e => e.DErrorSince).HasColumnName("dErrorSince");
            entity.Property(e => e.DUpdatedAt).HasColumnName("dUpdatedAt");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KArtikelHistory).HasColumnName("kArtikelHistory");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
            entity.Property(e => e.KFulfillmentAuftrag).HasColumnName("kFulfillmentAuftrag");
            entity.Property(e => e.KKunde).HasColumnName("kKunde");
            entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");
            entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");
            entity.Property(e => e.KScopeType).HasColumnName("kScopeType");
            entity.Property(e => e.KUserType).HasColumnName("kUserType");
            entity.Property(e => e.KVorgang).HasColumnName("kVorgang");
            entity.Property(e => e.KVorgangType).HasColumnName("kVorgangType");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.KWawiKey).HasColumnName("kWawiKey");
            entity.Property(e => e.NErrorCount).HasColumnName("nErrorCount");
        });

        modelBuilder.Entity<VVorgangsstatus>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vVorgangsstatus", "Verkauf");

            entity.Property(e => e.CStatus)
                .HasMaxLength(255)
                .HasColumnName("cStatus");
            entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");
        });

        modelBuilder.Entity<VWaehrung>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vWaehrung", "DbeS");

            entity.Property(e => e.CIso)
                .HasMaxLength(20)
                .HasColumnName("cISO");
            entity.Property(e => e.CName)
                .HasMaxLength(20)
                .HasColumnName("cName");
            entity.Property(e => e.CNameHtml)
                .HasMaxLength(255)
                .HasColumnName("cNameHTML");
            entity.Property(e => e.CTrennzeichenCent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cTrennzeichenCent");
            entity.Property(e => e.CTrennzeichenTausend)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cTrennzeichenTausend");
            entity.Property(e => e.FFaktor)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fFaktor");
            entity.Property(e => e.KShop).HasColumnName("kShop");
            entity.Property(e => e.KWaehrung).HasColumnName("kWaehrung");
            entity.Property(e => e.NStandard).HasColumnName("nStandard");
            entity.Property(e => e.NVorBetrag).HasColumnName("nVorBetrag");
        });

        modelBuilder.Entity<VWarehouse>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vWarehouse", "FulfillmentNetwork");

            entity.Property(e => e.AddressCity)
                .HasMaxLength(255)
                .HasColumnName("Address.City");
            entity.Property(e => e.AddressCompany)
                .HasMaxLength(255)
                .HasColumnName("Address.Company");
            entity.Property(e => e.AddressCountry)
                .HasMaxLength(255)
                .HasColumnName("Address.Country");
            entity.Property(e => e.AddressEmail)
                .HasMaxLength(255)
                .HasColumnName("Address.Email");
            entity.Property(e => e.AddressFax)
                .HasMaxLength(255)
                .HasColumnName("Address.Fax");
            entity.Property(e => e.AddressFirstname)
                .HasMaxLength(255)
                .HasColumnName("Address.Firstname");
            entity.Property(e => e.AddressLastname)
                .HasMaxLength(255)
                .HasColumnName("Address.Lastname");
            entity.Property(e => e.AddressPhone)
                .HasMaxLength(255)
                .HasColumnName("Address.Phone");
            entity.Property(e => e.AddressSalutation)
                .HasMaxLength(255)
                .HasColumnName("Address.Salutation");
            entity.Property(e => e.AddressState)
                .HasMaxLength(100)
                .HasColumnName("Address.State");
            entity.Property(e => e.AddressStreet)
                .HasMaxLength(255)
                .HasColumnName("Address.Street");
            entity.Property(e => e.AddressZip)
                .HasMaxLength(255)
                .HasColumnName("Address.Zip");
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.WarehouseId).HasMaxLength(50);
        });

        modelBuilder.Entity<VWarehouseMerchant>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vWarehouseMerchant", "FulfillmentNetwork");

            entity.Property(e => e.MerchantId).HasMaxLength(64);
        });

        modelBuilder.Entity<VWareneingangsarchiv>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vWareneingangsarchiv");

            entity.Property(e => e.CArtikelname)
                .HasMaxLength(255)
                .HasColumnName("cArtikelname");
            entity.Property(e => e.CArtikelnummer)
                .HasMaxLength(100)
                .HasColumnName("cArtikelnummer");
            entity.Property(e => e.CBenutzername)
                .HasMaxLength(255)
                .HasColumnName("cBenutzername");
            entity.Property(e => e.CBestellkommentar).HasColumnName("cBestellkommentar");
            entity.Property(e => e.CChargenNr)
                .HasMaxLength(255)
                .HasColumnName("cChargenNr");
            entity.Property(e => e.CEigeneBestellnummer)
                .HasMaxLength(255)
                .HasColumnName("cEigeneBestellnummer");
            entity.Property(e => e.CFremdbelegnummer)
                .HasMaxLength(255)
                .HasColumnName("cFremdbelegnummer");
            entity.Property(e => e.CLiefArtNr)
                .HasMaxLength(255)
                .HasColumnName("cLiefArtNr");
            entity.Property(e => e.CLieferantFirma)
                .HasMaxLength(255)
                .HasColumnName("cLieferantFirma");
            entity.Property(e => e.CLieferscheinNr)
                .HasMaxLength(255)
                .HasColumnName("cLieferscheinNr");
            entity.Property(e => e.CWarenLager)
                .HasMaxLength(255)
                .HasColumnName("cWarenLager");
            entity.Property(e => e.CWarenLagerPlatz)
                .HasMaxLength(50)
                .HasColumnName("cWarenLagerPlatz");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.DGeliefertAm)
                .HasColumnType("datetime")
                .HasColumnName("dGeliefertAm");
            entity.Property(e => e.DMhd)
                .HasColumnType("datetime")
                .HasColumnName("dMHD");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.FEkeinzel)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEKEinzel");
            entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");
            entity.Property(e => e.KWarenLagerEingang).HasColumnName("kWarenLagerEingang");
            entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");
        });

        modelBuilder.Entity<VWarengruppe>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vWarengruppe", "DbeS");

            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KWarengruppe).HasColumnName("kWarengruppe");
        });

        modelBuilder.Entity<VWarengruppenSteuerschluessel>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vWarengruppenSteuerschluessel", "Steuern");

            entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");
            entity.Property(e => e.KSteuersatz).HasColumnName("kSteuersatz");
            entity.Property(e => e.KSteuerschluessel).HasColumnName("kSteuerschluessel");
            entity.Property(e => e.KSteuerschluesselIgl).HasColumnName("kSteuerschluesselIGL");
            entity.Property(e => e.KSteuerschluesselReverseCharge).HasColumnName("kSteuerschluesselReverseCharge");
            entity.Property(e => e.KSteuerschluesselUstIgl).HasColumnName("kSteuerschluesselUstIGL");
            entity.Property(e => e.KSteuerzone).HasColumnName("kSteuerzone");
            entity.Property(e => e.KWarengruppe).HasColumnName("kWarengruppe");
        });

        modelBuilder.Entity<VWarenlager>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vWarenlager", "Bestand");

            entity.Property(e => e.KWarenLager)
                .ValueGeneratedOnAdd()
                .HasColumnName("kWarenLager");
        });

        modelBuilder.Entity<VWarenlager1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vWarenlager", "DbeS");

            entity.Property(e => e.CBeschreibung)
                .HasMaxLength(1024)
                .HasColumnName("cBeschreibung");
            entity.Property(e => e.CKuerzel)
                .HasMaxLength(255)
                .HasColumnName("cKuerzel");
            entity.Property(e => e.CLagerTyp)
                .HasMaxLength(255)
                .HasColumnName("cLagerTyp");
            entity.Property(e => e.CLand)
                .HasMaxLength(255)
                .HasColumnName("cLand");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPlz)
                .HasMaxLength(255)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.KWarenLager)
                .ValueGeneratedOnAdd()
                .HasColumnName("kWarenLager");
            entity.Property(e => e.NFulfillment).HasColumnName("nFulfillment");
        });

        modelBuilder.Entity<VWarenlagerEingang>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vWarenlagerEingang", "Auslieferung");

            entity.Property(e => e.CChargenNr)
                .HasMaxLength(255)
                .HasColumnName("cChargenNr");
            entity.Property(e => e.DMhd)
                .HasColumnType("datetime")
                .HasColumnName("dMHD");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");
            entity.Property(e => e.KSessionId).HasColumnName("kSessionId");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            entity.Property(e => e.KWarenlagerEingang).HasColumnName("kWarenlagerEingang");
        });

        modelBuilder.Entity<VWarenlagerPlatzArtikel>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vWarenlagerPlatzArtikel");

            entity.Property(e => e.CKommentar1)
                .HasMaxLength(255)
                .HasColumnName("cKommentar_1");
            entity.Property(e => e.CKommentar2)
                .HasMaxLength(255)
                .HasColumnName("cKommentar_2");
            entity.Property(e => e.FAnzahl)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahl");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");
        });

        modelBuilder.Entity<VWmsartikel>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vWMSArtikel");

            entity.Property(e => e.CAktiv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAktiv");
            entity.Property(e => e.CAnmerkung).HasColumnName("cAnmerkung");
            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CAsin)
                .HasMaxLength(255)
                .HasColumnName("cASIN");
            entity.Property(e => e.CBarcode)
                .HasMaxLength(255)
                .HasColumnName("cBarcode");
            entity.Property(e => e.CBeschreibung).HasColumnName("cBeschreibung");
            entity.Property(e => e.CDelInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cDelInet");
            entity.Property(e => e.CEinheit)
                .HasMaxLength(255)
                .HasColumnName("cEinheit");
            entity.Property(e => e.CEpid)
                .HasMaxLength(255)
                .HasColumnName("cEPID");
            entity.Property(e => e.CErloeskonto)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("cErloeskonto");
            entity.Property(e => e.CGefahrnr)
                .HasMaxLength(255)
                .HasColumnName("cGefahrnr");
            entity.Property(e => e.CHan)
                .HasMaxLength(255)
                .HasColumnName("cHAN");
            entity.Property(e => e.CHerkunftsland)
                .HasMaxLength(64)
                .HasColumnName("cHerkunftsland");
            entity.Property(e => e.CHersteller)
                .HasMaxLength(255)
                .HasColumnName("cHersteller");
            entity.Property(e => e.CInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cInet");
            entity.Property(e => e.CIsbn)
                .HasMaxLength(255)
                .HasColumnName("cISBN");
            entity.Property(e => e.CJfsku)
                .HasMaxLength(255)
                .HasColumnName("cJfsku");
            entity.Property(e => e.CKurzBeschreibung).HasColumnName("cKurzBeschreibung");
            entity.Property(e => e.CLagerAktiv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLagerAktiv");
            entity.Property(e => e.CLagerArtikel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLagerArtikel");
            entity.Property(e => e.CLagerKleinerNull)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLagerKleinerNull");
            entity.Property(e => e.CLagerVariation)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLagerVariation");
            entity.Property(e => e.CLieferstatus)
                .HasMaxLength(255)
                .HasColumnName("cLieferstatus");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CNeu)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cNeu");
            entity.Property(e => e.CPreisliste)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cPreisliste");
            entity.Property(e => e.CSeo)
                .HasMaxLength(255)
                .HasColumnName("cSeo");
            entity.Property(e => e.CSerie)
                .HasMaxLength(255)
                .HasColumnName("cSerie");
            entity.Property(e => e.CSuchbegriffe)
                .HasMaxLength(255)
                .HasColumnName("cSuchbegriffe");
            entity.Property(e => e.CTaric)
                .HasMaxLength(20)
                .HasColumnName("cTaric");
            entity.Property(e => e.CTeilbar)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cTeilbar");
            entity.Property(e => e.CTopArtikel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cTopArtikel");
            entity.Property(e => e.CUnnummer)
                .HasMaxLength(255)
                .HasColumnName("cUNNummer");
            entity.Property(e => e.CUpc)
                .HasMaxLength(255)
                .HasColumnName("cUPC");
            entity.Property(e => e.CVpeeinheit)
                .HasMaxLength(255)
                .HasColumnName("cVPEEinheit");
            entity.Property(e => e.DErscheinungsdatum)
                .HasColumnType("datetime")
                .HasColumnName("dErscheinungsdatum");
            entity.Property(e => e.DErstelldatum)
                .HasColumnType("datetime")
                .HasColumnName("dErstelldatum");
            entity.Property(e => e.DMod)
                .HasColumnType("datetime")
                .HasColumnName("dMod");
            entity.Property(e => e.DletzterEk)
                .HasColumnType("datetime")
                .HasColumnName("dletzterEK");
            entity.Property(e => e.FAbnahmeintervall)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAbnahmeintervall");
            entity.Property(e => e.FAmazonVk)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAmazonVK");
            entity.Property(e => e.FArtGewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fArtGewicht");
            entity.Property(e => e.FBreite)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBreite");
            entity.Property(e => e.FEbayPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEbayPreis");
            entity.Property(e => e.FEknetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEKNetto");
            entity.Property(e => e.FGewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGewicht");
            entity.Property(e => e.FGrundpreisMenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGrundpreisMenge");
            entity.Property(e => e.FHoehe)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fHoehe");
            entity.Property(e => e.FLaenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLaenge");
            entity.Property(e => e.FLetzterEk)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLetzterEK");
            entity.Property(e => e.FMassMenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMassMenge");
            entity.Property(e => e.FMwSt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwSt");
            entity.Property(e => e.FPackeinheit)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPackeinheit");
            entity.Property(e => e.FUvp)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fUVP");
            entity.Property(e => e.FVkbrutto)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fVKbrutto");
            entity.Property(e => e.FVkhaendlerBrutto).HasColumnName("fVKHaendlerBrutto");
            entity.Property(e => e.FVkhaendlerNetto).HasColumnName("fVKHaendlerNetto");
            entity.Property(e => e.FVknetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVKNetto");
            entity.Property(e => e.FVpewert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVPEWert");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KEigenschaftKombi).HasColumnName("kEigenschaftKombi");
            entity.Property(e => e.KGrundPreisEinheit).HasColumnName("kGrundPreisEinheit");
            entity.Property(e => e.KMassEinheit).HasColumnName("kMassEinheit");
            entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");
            entity.Property(e => e.KStueckliste).HasColumnName("kStueckliste");
            entity.Property(e => e.KVaterArtikel).HasColumnName("kVaterArtikel");
            entity.Property(e => e.KVerkaufsEinheit).HasColumnName("kVerkaufsEinheit");
            entity.Property(e => e.KVersandklasse).HasColumnName("kVersandklasse");
            entity.Property(e => e.KVpeeinheit).HasColumnName("kVPEEinheit");
            entity.Property(e => e.KWarengruppe).HasColumnName("kWarengruppe");
            entity.Property(e => e.KZustand).HasColumnName("kZustand");
            entity.Property(e => e.NCharge).HasColumnName("nCharge");
            entity.Property(e => e.NDelete).HasColumnName("nDelete");
            entity.Property(e => e.NIstMindestbestand).HasColumnName("nIstMindestbestand");
            entity.Property(e => e.NIstTeilmengenArtikel).HasColumnName("nIstTeilmengenArtikel");
            entity.Property(e => e.NIstVater).HasColumnName("nIstVater");
            entity.Property(e => e.NLagerbestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nLagerbestand");
            entity.Property(e => e.NLiefertageWennAusverkauft).HasColumnName("nLiefertageWennAusverkauft");
            entity.Property(e => e.NMhd).HasColumnName("nMHD");
            entity.Property(e => e.NMidestbestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nMidestbestand");
            entity.Property(e => e.NMindestbestellmaenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nMindestbestellmaenge");
            entity.Property(e => e.NNichtBestellbar).HasColumnName("nNichtBestellbar");
            entity.Property(e => e.NProzentualePreisStaffelAktiv).HasColumnName("nProzentualePreisStaffelAktiv");
            entity.Property(e => e.NPuffer).HasColumnName("nPuffer");
            entity.Property(e => e.NPufferTyp).HasColumnName("nPufferTyp");
            entity.Property(e => e.NSeriennummernVerfolgung).HasColumnName("nSeriennummernVerfolgung");
            entity.Property(e => e.NSonderTyp).HasColumnName("nSonderTyp");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NVpe).HasColumnName("nVPE");
        });

        modelBuilder.Entity<VWmsartikelSimple>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vWMSArtikel_Simple");

            entity.Property(e => e.CAktiv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAktiv");
            entity.Property(e => e.CAnmerkung).HasColumnName("cAnmerkung");
            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CAsin)
                .HasMaxLength(255)
                .HasColumnName("cASIN");
            entity.Property(e => e.CBarcode)
                .HasMaxLength(255)
                .HasColumnName("cBarcode");
            entity.Property(e => e.CDelInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cDelInet");
            entity.Property(e => e.CEpid)
                .HasMaxLength(255)
                .HasColumnName("cEPID");
            entity.Property(e => e.CGefahrnr)
                .HasMaxLength(255)
                .HasColumnName("cGefahrnr");
            entity.Property(e => e.CHan)
                .HasMaxLength(255)
                .HasColumnName("cHAN");
            entity.Property(e => e.CHerkunftsland)
                .HasMaxLength(64)
                .HasColumnName("cHerkunftsland");
            entity.Property(e => e.CInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cInet");
            entity.Property(e => e.CIsbn)
                .HasMaxLength(255)
                .HasColumnName("cISBN");
            entity.Property(e => e.CLagerAktiv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLagerAktiv");
            entity.Property(e => e.CLagerArtikel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLagerArtikel");
            entity.Property(e => e.CLagerKleinerNull)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLagerKleinerNull");
            entity.Property(e => e.CLagerVariation)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLagerVariation");
            entity.Property(e => e.CNeu)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cNeu");
            entity.Property(e => e.CPreisliste)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cPreisliste");
            entity.Property(e => e.CSerie)
                .HasMaxLength(255)
                .HasColumnName("cSerie");
            entity.Property(e => e.CSuchbegriffe)
                .HasMaxLength(255)
                .HasColumnName("cSuchbegriffe");
            entity.Property(e => e.CTaric)
                .HasMaxLength(20)
                .HasColumnName("cTaric");
            entity.Property(e => e.CTeilbar)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cTeilbar");
            entity.Property(e => e.CTopArtikel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cTopArtikel");
            entity.Property(e => e.CUnnummer)
                .HasMaxLength(255)
                .HasColumnName("cUNNummer");
            entity.Property(e => e.CUpc)
                .HasMaxLength(255)
                .HasColumnName("cUPC");
            entity.Property(e => e.DErscheinungsdatum)
                .HasColumnType("datetime")
                .HasColumnName("dErscheinungsdatum");
            entity.Property(e => e.DErstelldatum)
                .HasColumnType("datetime")
                .HasColumnName("dErstelldatum");
            entity.Property(e => e.DMod)
                .HasColumnType("datetime")
                .HasColumnName("dMod");
            entity.Property(e => e.DletzterEk)
                .HasColumnType("datetime")
                .HasColumnName("dletzterEK");
            entity.Property(e => e.FAbnahmeintervall)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAbnahmeintervall");
            entity.Property(e => e.FAmazonVk)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAmazonVK");
            entity.Property(e => e.FArtGewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fArtGewicht");
            entity.Property(e => e.FBreite)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBreite");
            entity.Property(e => e.FEbayPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEbayPreis");
            entity.Property(e => e.FEknetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEKNetto");
            entity.Property(e => e.FGewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGewicht");
            entity.Property(e => e.FHoehe)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fHoehe");
            entity.Property(e => e.FLaenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLaenge");
            entity.Property(e => e.FLetzterEk)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLetzterEK");
            entity.Property(e => e.FPackeinheit)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPackeinheit");
            entity.Property(e => e.FUvp)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fUVP");
            entity.Property(e => e.FVkhaendlerNetto).HasColumnName("fVKHaendlerNetto");
            entity.Property(e => e.FVknetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVKNetto");
            entity.Property(e => e.FVpewert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVPEWert");
            entity.Property(e => e.KArtikel)
                .ValueGeneratedOnAdd()
                .HasColumnName("kArtikel");
            entity.Property(e => e.KEigenschaftKombi).HasColumnName("kEigenschaftKombi");
            entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");
            entity.Property(e => e.KStueckliste).HasColumnName("kStueckliste");
            entity.Property(e => e.KVaterArtikel).HasColumnName("kVaterArtikel");
            entity.Property(e => e.KVersandklasse).HasColumnName("kVersandklasse");
            entity.Property(e => e.KWarengruppe).HasColumnName("kWarengruppe");
            entity.Property(e => e.KZustand).HasColumnName("kZustand");
            entity.Property(e => e.NCharge).HasColumnName("nCharge");
            entity.Property(e => e.NDelete).HasColumnName("nDelete");
            entity.Property(e => e.NIstMindestbestand).HasColumnName("nIstMindestbestand");
            entity.Property(e => e.NIstTeilmengenArtikel).HasColumnName("nIstTeilmengenArtikel");
            entity.Property(e => e.NIstVater).HasColumnName("nIstVater");
            entity.Property(e => e.NLagerbestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nLagerbestand");
            entity.Property(e => e.NMhd).HasColumnName("nMHD");
            entity.Property(e => e.NMidestbestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nMidestbestand");
            entity.Property(e => e.NMindestbestellmaenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nMindestbestellmaenge");
            entity.Property(e => e.NNichtBestellbar).HasColumnName("nNichtBestellbar");
            entity.Property(e => e.NProzentualePreisStaffelAktiv).HasColumnName("nProzentualePreisStaffelAktiv");
            entity.Property(e => e.NPuffer).HasColumnName("nPuffer");
            entity.Property(e => e.NPufferTyp).HasColumnName("nPufferTyp");
            entity.Property(e => e.NSeriennummernVerfolgung).HasColumnName("nSeriennummernVerfolgung");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NVpe).HasColumnName("nVPE");
        });

        modelBuilder.Entity<VWmsartikelWe>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vWMSArtikelWE");

            entity.Property(e => e.CAktiv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAktiv");
            entity.Property(e => e.CAnmerkung).HasColumnName("cAnmerkung");
            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CAsin)
                .HasMaxLength(255)
                .HasColumnName("cASIN");
            entity.Property(e => e.CBarcode)
                .HasMaxLength(255)
                .HasColumnName("cBarcode");
            entity.Property(e => e.CBeschreibung).HasColumnName("cBeschreibung");
            entity.Property(e => e.CDelInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cDelInet");
            entity.Property(e => e.CEinheit)
                .HasMaxLength(255)
                .HasColumnName("cEinheit");
            entity.Property(e => e.CEpid)
                .HasMaxLength(255)
                .HasColumnName("cEPID");
            entity.Property(e => e.CErloeskonto)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("cErloeskonto");
            entity.Property(e => e.CGefahrnr)
                .HasMaxLength(255)
                .HasColumnName("cGefahrnr");
            entity.Property(e => e.CHan)
                .HasMaxLength(255)
                .HasColumnName("cHAN");
            entity.Property(e => e.CHerkunftsland)
                .HasMaxLength(64)
                .HasColumnName("cHerkunftsland");
            entity.Property(e => e.CHersteller)
                .HasMaxLength(255)
                .HasColumnName("cHersteller");
            entity.Property(e => e.CInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cInet");
            entity.Property(e => e.CIsbn)
                .HasMaxLength(255)
                .HasColumnName("cISBN");
            entity.Property(e => e.CKurzBeschreibung).HasColumnName("cKurzBeschreibung");
            entity.Property(e => e.CLagerAktiv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLagerAktiv");
            entity.Property(e => e.CLagerArtikel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLagerArtikel");
            entity.Property(e => e.CLagerKleinerNull)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLagerKleinerNull");
            entity.Property(e => e.CLagerVariation)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLagerVariation");
            entity.Property(e => e.CLieferstatus)
                .HasMaxLength(255)
                .HasColumnName("cLieferstatus");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.CNeu)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cNeu");
            entity.Property(e => e.CPreisliste)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cPreisliste");
            entity.Property(e => e.CSeo)
                .HasMaxLength(255)
                .HasColumnName("cSeo");
            entity.Property(e => e.CSerie)
                .HasMaxLength(255)
                .HasColumnName("cSerie");
            entity.Property(e => e.CSuchbegriffe)
                .HasMaxLength(255)
                .HasColumnName("cSuchbegriffe");
            entity.Property(e => e.CTaric)
                .HasMaxLength(20)
                .HasColumnName("cTaric");
            entity.Property(e => e.CTeilbar)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cTeilbar");
            entity.Property(e => e.CTopArtikel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cTopArtikel");
            entity.Property(e => e.CUnnummer)
                .HasMaxLength(255)
                .HasColumnName("cUNNummer");
            entity.Property(e => e.CUpc)
                .HasMaxLength(255)
                .HasColumnName("cUPC");
            entity.Property(e => e.CVpeeinheit)
                .HasMaxLength(255)
                .HasColumnName("cVPEEinheit");
            entity.Property(e => e.DErscheinungsdatum)
                .HasColumnType("datetime")
                .HasColumnName("dErscheinungsdatum");
            entity.Property(e => e.DErstelldatum)
                .HasColumnType("datetime")
                .HasColumnName("dErstelldatum");
            entity.Property(e => e.DMod)
                .HasColumnType("datetime")
                .HasColumnName("dMod");
            entity.Property(e => e.DletzterEk)
                .HasColumnType("datetime")
                .HasColumnName("dletzterEK");
            entity.Property(e => e.FAbnahmeintervall)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAbnahmeintervall");
            entity.Property(e => e.FAmazonVk)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAmazonVK");
            entity.Property(e => e.FArtGewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fArtGewicht");
            entity.Property(e => e.FBreite)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBreite");
            entity.Property(e => e.FEbayPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEbayPreis");
            entity.Property(e => e.FEknetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEKNetto");
            entity.Property(e => e.FGewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGewicht");
            entity.Property(e => e.FHoehe)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fHoehe");
            entity.Property(e => e.FLaenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLaenge");
            entity.Property(e => e.FLetzterEk)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLetzterEK");
            entity.Property(e => e.FMwSt)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMwSt");
            entity.Property(e => e.FPackeinheit)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPackeinheit");
            entity.Property(e => e.FUvp)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fUVP");
            entity.Property(e => e.FVkbrutto)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fVKbrutto");
            entity.Property(e => e.FVkhaendlerBrutto).HasColumnName("fVKHaendlerBrutto");
            entity.Property(e => e.FVkhaendlerNetto).HasColumnName("fVKHaendlerNetto");
            entity.Property(e => e.FVknetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVKNetto");
            entity.Property(e => e.FVpewert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVPEWert");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KEigenschaftKombi).HasColumnName("kEigenschaftKombi");
            entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");
            entity.Property(e => e.KStueckliste).HasColumnName("kStueckliste");
            entity.Property(e => e.KVaterArtikel).HasColumnName("kVaterArtikel");
            entity.Property(e => e.KVersandklasse).HasColumnName("kVersandklasse");
            entity.Property(e => e.KWarengruppe).HasColumnName("kWarengruppe");
            entity.Property(e => e.KZustand).HasColumnName("kZustand");
            entity.Property(e => e.NCharge).HasColumnName("nCharge");
            entity.Property(e => e.NDelete).HasColumnName("nDelete");
            entity.Property(e => e.NIsGutschein).HasColumnName("nIsGutschein");
            entity.Property(e => e.NIstMindestbestand).HasColumnName("nIstMindestbestand");
            entity.Property(e => e.NIstTeilmengenArtikel).HasColumnName("nIstTeilmengenArtikel");
            entity.Property(e => e.NIstVater).HasColumnName("nIstVater");
            entity.Property(e => e.NLagerbestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nLagerbestand");
            entity.Property(e => e.NMhd).HasColumnName("nMHD");
            entity.Property(e => e.NMidestbestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nMidestbestand");
            entity.Property(e => e.NMindestbestellmaenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nMindestbestellmaenge");
            entity.Property(e => e.NNichtBestellbar).HasColumnName("nNichtBestellbar");
            entity.Property(e => e.NProzentualePreisStaffelAktiv).HasColumnName("nProzentualePreisStaffelAktiv");
            entity.Property(e => e.NPuffer).HasColumnName("nPuffer");
            entity.Property(e => e.NPufferTyp).HasColumnName("nPufferTyp");
            entity.Property(e => e.NSeriennummernVerfolgung).HasColumnName("nSeriennummernVerfolgung");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NVpe).HasColumnName("nVPE");
        });

        modelBuilder.Entity<VWmsboxArtikel>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vWMSBoxArtikel");

            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CBarcode)
                .HasMaxLength(255)
                .HasColumnName("cBarcode");
            entity.Property(e => e.CBestellNr)
                .HasMaxLength(50)
                .HasColumnName("cBestellNr");
            entity.Property(e => e.CEinheit)
                .HasMaxLength(259)
                .HasColumnName("cEinheit");
            entity.Property(e => e.CLand)
                .HasMaxLength(255)
                .HasColumnName("cLand");
            entity.Property(e => e.CLhmid)
                .HasMaxLength(30)
                .HasColumnName("cLHMID");
            entity.Property(e => e.CLogistikName)
                .HasMaxLength(255)
                .HasColumnName("cLogistikName");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.COrt)
                .HasMaxLength(255)
                .HasColumnName("cOrt");
            entity.Property(e => e.CPlz)
                .HasMaxLength(24)
                .HasColumnName("cPLZ");
            entity.Property(e => e.CStrasse)
                .HasMaxLength(255)
                .HasColumnName("cStrasse");
            entity.Property(e => e.CVersName)
                .HasMaxLength(255)
                .HasColumnName("cVersName");
            entity.Property(e => e.DBezahlt)
                .HasColumnType("datetime")
                .HasColumnName("dBezahlt");
            entity.Property(e => e.DErstellt)
                .HasColumnType("datetime")
                .HasColumnName("dErstellt");
            entity.Property(e => e.FAnzahlAuftrag)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAnzahlAuftrag");
            entity.Property(e => e.FAnzahlGes)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("fAnzahlGes");
            entity.Property(e => e.FAnzahlInBox)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlInBox");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            entity.Property(e => e.KBestellungDerLhm).HasColumnName("kBestellungDerLHM");
            entity.Property(e => e.KLhm).HasColumnName("kLHM");
            entity.Property(e => e.KLhmstatus).HasColumnName("kLHMStatus");
            entity.Property(e => e.KWarenlagerPlatz).HasColumnName("kWarenlagerPlatz");
            entity.Property(e => e.NSperre).HasColumnName("nSperre");
        });

        modelBuilder.Entity<VXsellGruppe>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vXSellGruppe", "DbeS");

            entity.Property(e => e.CBeschreibung)
                .HasMaxLength(255)
                .HasColumnName("cBeschreibung");
            entity.Property(e => e.CName)
                .HasMaxLength(255)
                .HasColumnName("cName");
            entity.Property(e => e.KSprache).HasColumnName("kSprache");
            entity.Property(e => e.KXsellGruppe).HasColumnName("kXSellGruppe");
        });

        modelBuilder.Entity<VZulauf>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vZulauf", "Bestand");

            entity.Property(e => e.DLieferdatum)
                .HasColumnType("datetime")
                .HasColumnName("dLieferdatum");
            entity.Property(e => e.FZulauf)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fZulauf");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
        });

        modelBuilder.Entity<VZulaufLagerartikel>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vZulaufLagerartikel", "Abgleich");

            entity.Property(e => e.DLieferdatum)
                .HasColumnType("date")
                .HasColumnName("dLieferdatum");
            entity.Property(e => e.FAnzahlFehlbestand)
                .HasColumnType("decimal(26, 13)")
                .HasColumnName("fAnzahlFehlbestand");
            entity.Property(e => e.FAnzahlOffenGesamt)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlOffenGesamt");
            entity.Property(e => e.FAnzahlZulauf)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fAnzahlZulauf");
            entity.Property(e => e.FMengeNochZuLiefern)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("fMengeNochZuLiefern");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.NRowNumber).HasColumnName("nRowNumber");
        });

        modelBuilder.Entity<VZustandsartikel>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vZustandsartikel");

            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CAktiv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAktiv");
            entity.Property(e => e.CAmazonFnsku)
                .HasMaxLength(50)
                .HasColumnName("cAmazonFNSKU");
            entity.Property(e => e.CAnmerkung).HasColumnName("cAnmerkung");
            entity.Property(e => e.CArtNr)
                .HasMaxLength(100)
                .HasColumnName("cArtNr");
            entity.Property(e => e.CAsin)
                .HasMaxLength(255)
                .HasColumnName("cASIN");
            entity.Property(e => e.CBarcode)
                .HasMaxLength(255)
                .HasColumnName("cBarcode");
            entity.Property(e => e.CDelInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cDelInet");
            entity.Property(e => e.CEpid)
                .HasMaxLength(255)
                .HasColumnName("cEPID");
            entity.Property(e => e.CGefahrnr)
                .HasMaxLength(255)
                .HasColumnName("cGefahrnr");
            entity.Property(e => e.CHan)
                .HasMaxLength(255)
                .HasColumnName("cHAN");
            entity.Property(e => e.CHerkunftsland)
                .HasMaxLength(64)
                .HasColumnName("cHerkunftsland");
            entity.Property(e => e.CInet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cInet");
            entity.Property(e => e.CIsbn)
                .HasMaxLength(255)
                .HasColumnName("cISBN");
            entity.Property(e => e.CJfsku)
                .HasMaxLength(50)
                .HasColumnName("cJfsku");
            entity.Property(e => e.CLabelNamen).HasColumnName("cLabelNamen");
            entity.Property(e => e.CLagerAktiv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLagerAktiv");
            entity.Property(e => e.CLagerArtikel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLagerArtikel");
            entity.Property(e => e.CLagerKleinerNull)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLagerKleinerNull");
            entity.Property(e => e.CLagerVariation)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLagerVariation");
            entity.Property(e => e.CNeu)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cNeu");
            entity.Property(e => e.CPreisliste)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cPreisliste");
            entity.Property(e => e.CSerie)
                .HasMaxLength(255)
                .HasColumnName("cSerie");
            entity.Property(e => e.CSuchbegriffe)
                .HasMaxLength(255)
                .HasColumnName("cSuchbegriffe");
            entity.Property(e => e.CTaric)
                .HasMaxLength(20)
                .HasColumnName("cTaric");
            entity.Property(e => e.CTeilbar)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cTeilbar");
            entity.Property(e => e.CTopArtikel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cTopArtikel");
            entity.Property(e => e.CUnnummer)
                .HasMaxLength(255)
                .HasColumnName("cUNNummer");
            entity.Property(e => e.CUpc)
                .HasMaxLength(255)
                .HasColumnName("cUPC");
            entity.Property(e => e.DErscheinungsdatum)
                .HasColumnType("datetime")
                .HasColumnName("dErscheinungsdatum");
            entity.Property(e => e.DErstelldatum)
                .HasColumnType("datetime")
                .HasColumnName("dErstelldatum");
            entity.Property(e => e.DLetzterEk)
                .HasColumnType("datetime")
                .HasColumnName("dLetzterEK");
            entity.Property(e => e.DMod)
                .HasColumnType("datetime")
                .HasColumnName("dMod");
            entity.Property(e => e.DNeuImSortiment)
                .HasColumnType("datetime")
                .HasColumnName("dNeuImSortiment");
            entity.Property(e => e.DZulaufVerfuegbarAm)
                .HasColumnType("datetime")
                .HasColumnName("dZulaufVerfuegbarAm");
            entity.Property(e => e.FAbnahmeintervall)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAbnahmeintervall");
            entity.Property(e => e.FAmazonVk)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fAmazonVK");
            entity.Property(e => e.FArtGewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fArtGewicht");
            entity.Property(e => e.FBreite)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fBreite");
            entity.Property(e => e.FEbayPreis)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEbayPreis");
            entity.Property(e => e.FEknetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fEKNetto");
            entity.Property(e => e.FGewicht)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGewicht");
            entity.Property(e => e.FGrundpreisMenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fGrundpreisMenge");
            entity.Property(e => e.FHoehe)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fHoehe");
            entity.Property(e => e.FLaenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLaenge");
            entity.Property(e => e.FLetzterEk)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fLetzterEK");
            entity.Property(e => e.FMassMenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fMassMenge");
            entity.Property(e => e.FPackeinheit)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fPackeinheit");
            entity.Property(e => e.FUvp)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fUVP");
            entity.Property(e => e.FVknetto)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVKNetto");
            entity.Property(e => e.FVpewert)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("fVPEWert");
            entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            entity.Property(e => e.KBenutzerLetzteAenderung).HasColumnName("kBenutzerLetzteAenderung");
            entity.Property(e => e.KDefinition).HasColumnName("kDefinition");
            entity.Property(e => e.KEigenschaftKombi).HasColumnName("kEigenschaftKombi");
            entity.Property(e => e.KGrundPreisEinheit).HasColumnName("kGrundPreisEinheit");
            entity.Property(e => e.KHersteller).HasColumnName("kHersteller");
            entity.Property(e => e.KLieferStatus).HasColumnName("kLieferStatus");
            entity.Property(e => e.KMassEinheit).HasColumnName("kMassEinheit");
            entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");
            entity.Property(e => e.KStueckliste).HasColumnName("kStueckliste");
            entity.Property(e => e.KVaterArtikel).HasColumnName("kVaterArtikel");
            entity.Property(e => e.KVerkaufsEinheit).HasColumnName("kVerkaufsEinheit");
            entity.Property(e => e.KVersandklasse).HasColumnName("kVersandklasse");
            entity.Property(e => e.KVpeeinheit).HasColumnName("kVPEEinheit");
            entity.Property(e => e.KWarengruppe).HasColumnName("kWarengruppe");
            entity.Property(e => e.KZustand).HasColumnName("kZustand");
            entity.Property(e => e.NAutomatischeLiefertageberechnung).HasColumnName("nAutomatischeLiefertageberechnung");
            entity.Property(e => e.NBearbeitungszeit).HasColumnName("nBearbeitungszeit");
            entity.Property(e => e.NCharge).HasColumnName("nCharge");
            entity.Property(e => e.NDelete).HasColumnName("nDelete");
            entity.Property(e => e.NEbayAbgleich).HasColumnName("nEbayAbgleich");
            entity.Property(e => e.NIstMindestbestand).HasColumnName("nIstMindestbestand");
            entity.Property(e => e.NIstTeilmengenArtikel).HasColumnName("nIstTeilmengenArtikel");
            entity.Property(e => e.NIstVater).HasColumnName("nIstVater");
            entity.Property(e => e.NLagerbestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nLagerbestand");
            entity.Property(e => e.NLiefertageWennAusverkauft).HasColumnName("nLiefertageWennAusverkauft");
            entity.Property(e => e.NMhd).HasColumnName("nMHD");
            entity.Property(e => e.NMidestbestand)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nMidestbestand");
            entity.Property(e => e.NMindestbestellmaenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nMindestbestellmaenge");
            entity.Property(e => e.NNichtBestellbar).HasColumnName("nNichtBestellbar");
            entity.Property(e => e.NNichtRabattfaehig).HasColumnName("nNichtRabattfaehig");
            entity.Property(e => e.NProzentualePreisStaffelAktiv).HasColumnName("nProzentualePreisStaffelAktiv");
            entity.Property(e => e.NPuffer).HasColumnName("nPuffer");
            entity.Property(e => e.NPufferTyp).HasColumnName("nPufferTyp");
            entity.Property(e => e.NSeriennummernVerfolgung).HasColumnName("nSeriennummernVerfolgung");
            entity.Property(e => e.NSonderTyp).HasColumnName("nSonderTyp");
            entity.Property(e => e.NSort).HasColumnName("nSort");
            entity.Property(e => e.NVpe).HasColumnName("nVPE");
            entity.Property(e => e.NZulaufVerfuegbarMenge)
                .HasColumnType("decimal(25, 13)")
                .HasColumnName("nZulaufVerfuegbarMenge");
        });

        modelBuilder.Entity<Vatclass>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VATClass", "BI");

            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.VatclassId)
                .ValueGeneratedOnAdd()
                .HasColumnName("VATClassID");
        });

        modelBuilder.Entity<VatclassName>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VATClassName", "BI");

            entity.Property(e => e.LanguageIso)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Name).HasMaxLength(128);
            entity.Property(e => e.VatclassId).HasColumnName("VATClassID");
        });

        modelBuilder.Entity<Voucher>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Voucher", "Report");

            entity.Property(e => e.CompanyInternalId).HasComment("Interne Id der Firma");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasComment("Bezeichnung für den Gutschein");
            entity.Property(e => e.SalesOrderInternalId).HasComment("Interne Id der Bestellung");
            entity.Property(e => e.SalesOrderPositionInternalId).HasComment("Interne ID der Auftragsposition");
            entity.Property(e => e.Sender)
                .HasMaxLength(255)
                .HasComment("Sender (Von) auf dem Gutschein");
            entity.Property(e => e.Text)
                .HasMaxLength(255)
                .HasComment("Grußtext auf dem Gutschein");
        });

        modelBuilder.Entity<Warehouse>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Warehouse", "BI");

            entity.Property(e => e.Code).HasMaxLength(255);
            entity.Property(e => e.CompanyId).HasColumnName("CompanyID");
            entity.Property(e => e.Country).HasMaxLength(255);
            entity.Property(e => e.CountryIso)
                .HasMaxLength(2)
                .HasColumnName("CountryISO");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.WarehouseId).HasColumnName("WarehouseID");
            entity.Property(e => e.WarehouseName).HasMaxLength(255);
            entity.Property(e => e.WarehouseType)
                .HasMaxLength(12)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Warehouse1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Warehouse", "Report");

            entity.Property(e => e.Address)
                .HasMaxLength(255)
                .HasComment("Strasse des Warenlagers");
            entity.Property(e => e.City)
                .HasMaxLength(255)
                .HasComment("Ort des Warenlagers");
            entity.Property(e => e.Code)
                .HasMaxLength(255)
                .HasComment("Kürzel des Warenlagers");
            entity.Property(e => e.ContactDepartment)
                .HasMaxLength(255)
                .HasComment("Abteilung des Ansprechpartners");
            entity.Property(e => e.ContactEmailAddress)
                .HasMaxLength(255)
                .HasComment("E-Mail-Adresse des Ansprechpartners");
            entity.Property(e => e.ContactFax)
                .HasMaxLength(255)
                .HasComment("Faxnummer des Ansprechpartners");
            entity.Property(e => e.ContactFirstName)
                .HasMaxLength(255)
                .HasComment("Vorname des Ansprechpartners");
            entity.Property(e => e.ContactLastName)
                .HasMaxLength(255)
                .HasComment("Nachname des Ansprechpartners");
            entity.Property(e => e.ContactPhoneNumber)
                .HasMaxLength(255)
                .HasComment("Telefonnummer des Ansprechpartners");
            entity.Property(e => e.ContactSalutation)
                .HasMaxLength(255)
                .HasComment("Anrede des Ansprechpartners");
            entity.Property(e => e.Country)
                .HasMaxLength(255)
                .HasComment("Land des Warenlagers");
            entity.Property(e => e.Description)
                .HasMaxLength(1024)
                .HasComment("Beschreibung des Warenlagers");
            entity.Property(e => e.InternalId)
                .ValueGeneratedOnAdd()
                .HasComment("Interne ID des Warenlagers");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasComment("Name des Warenlagers");
            entity.Property(e => e.PostalCode)
                .HasMaxLength(255)
                .HasComment("PLZ des Warenlagers");
            entity.Property(e => e.State)
                .HasMaxLength(100)
                .HasComment("Bundesland des Warenlagers");
            entity.Property(e => e.WarehouseType)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasComment("Typ des Warenlagers (Fulfillment, JTL-Wawi, JTL-WMS usw.)");
        });

        modelBuilder.Entity<WarehouseArea>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("WarehouseArea", "BI");

            entity.Property(e => e.Code).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.WarehouseAreaId)
                .ValueGeneratedOnAdd()
                .HasColumnName("WarehouseAreaID");
            entity.Property(e => e.WarehouseId).HasColumnName("WarehouseID");
        });

        modelBuilder.Entity<WarehouseAreaLocation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("WarehouseAreaLocation", "BI");

            entity.Property(e => e.BinLocationId).HasColumnName("BinLocationID");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.WarehouseAreaId).HasColumnName("WarehouseAreaID");
            entity.Property(e => e.WarehouseAreaLocationId)
                .ValueGeneratedOnAdd()
                .HasColumnName("WarehouseAreaLocationID");
        });

        modelBuilder.Entity<WarenlagerMarktplatzMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("WarenlagerMarktplatzMapping", "Amazon");

            entity.HasIndex(e => new { e.KWarenlager, e.CMarketplaceId }, "UQ_Amazon_WarenlagerMarktplatzMapping_kWarenlager_cMarketplaceID").IsUnique();

            entity.Property(e => e.CMarketplaceId)
                .HasMaxLength(50)
                .HasColumnName("cMarketplaceID");
            entity.Property(e => e.CRegion)
                .HasMaxLength(4)
                .HasColumnName("cRegion");
            entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
        });

        modelBuilder.Entity<Webshop>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Webshop", "BI");

            entity.Property(e => e.CompanyId).HasColumnName("CompanyID");
            entity.Property(e => e.LastChange)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.ShopId).HasColumnName("ShopID");
            entity.Property(e => e.ShopName).HasMaxLength(128);
        });

        modelBuilder.Entity<ZM1Rabattgruppen>(entity =>
        {
            entity.HasKey(e => e.KRabattGruppe).HasName("PK_dbo_z_m1_Rabattgruppen");

            entity.ToTable("z_m1_Rabattgruppen");

            entity.Property(e => e.KRabattGruppe)
                .ValueGeneratedNever()
                .HasColumnName("kRabattGruppe");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CName)
                .HasMaxLength(10)
                .HasColumnName("cName");
            entity.Property(e => e.NR1).HasColumnName("nR1");
            entity.Property(e => e.NR2).HasColumnName("nR2");
            entity.Property(e => e.NR3).HasColumnName("nR3");
            entity.Property(e => e.NS1).HasColumnName("nS1");
            entity.Property(e => e.NS2).HasColumnName("nS2");
            entity.Property(e => e.NS3).HasColumnName("nS3");
        });

        modelBuilder.Entity<ZZmListe>(entity =>
        {
            entity.HasKey(e => e.KListe).HasName("PK_dbo_z_zm_Liste");

            entity.ToTable("z_zm_Liste");

            entity.Property(e => e.KListe)
                .ValueGeneratedNever()
                .HasColumnName("kListe");
            entity.Property(e => e.BRowversion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("bRowversion");
            entity.Property(e => e.CDesc)
                .HasMaxLength(255)
                .HasColumnName("cDesc");
            entity.Property(e => e.CKey)
                .HasMaxLength(255)
                .HasColumnName("cKey");
            entity.Property(e => e.NStatus).HasColumnName("nStatus");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
