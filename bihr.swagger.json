{
    "openapi": "3.0.1",
    "info": {
      "title": "eBihr Web API",
      "description": "## Introduction\r\nThe following API will help you to get catalogs ([Catalog](#operations-tag-Catalog)), check products availability ([Inventory](#operations-tag-Inventory)), and create or get orders ([Order](#operations-tag-Order)).  \r\nThe first step is always to get credentials with the [Authentication](#operations-tag-Authentication) section. Then you can call any API you need with the autentication [bearer](https://tools.ietf.org/html/rfc6750).  \r\n*Note: the Authentication token is only valid during 30 minutes after its creation (see `expires_in` value in Authentication/Token response). Then you will have to ask for a new token to continue using the API.*\r\n\r\nYou can call this REST API:\r\n- directly from this page (fill the green lock below with the token from the [authentication](#operations-Authentication-PostToken) call)\r\n- with a [PHP client](https://www.php.net/manual/en/book.curl.php) (see [example](help/eBihrApi.php.html) to get a catalog and place orders)\r\n- with a [.Net client](https://docs.microsoft.com/en-us/dotnet/csharp/tutorials/console-webapiclient)\r\n- with a [Java client](https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpClient.html)\r\n- with [Postman](https://god.gw.postman.com/run-collection/24333098-c6354588-3454-4fc6-b6a5-3876e41121de?action=collection%2Ffork&collection-url=entityId%3D24333098-c6354588-3454-4fc6-b6a5-3876e41121de%26entityType%3Dcollection%26workspaceId%3Db98cf813-d824-4f36-80d7-97a6e189a6e7#?env%5BeBihr%5D=W3sia2V5IjoiZWJpaHJfdG9rZW4iLCJ2YWx1ZSI6IngiLCJlbmFibGVkIjp0cnVlLCJ0eXBlIjoidGV4dCJ9LHsia2V5IjoiZG93bmxvYWRJZCIsInZhbHVlIjoieCIsImVuYWJsZWQiOnRydWUsInR5cGUiOiJ0ZXh0In0seyJrZXkiOiJ0aWNrZXRJZCIsInZhbHVlIjoieCIsImVuYWJsZWQiOnRydWUsInR5cGUiOiJkZWZhdWx0In1d)\r\n\r\n## Details\r\n### Catalogs\r\nTo get a catalog, the workflow is defined as follow:\r\n- [post a generation request](#operations-Catalog-PostRequest)\r\n  - if the response has a HTTP 200 code, the catalog is in the response\r\n  - if the response has a HTTP 202 code, you got a `ticketId`\r\n- [check the catalog generation status with the ticketId](#operations-Catalog-GetGenerationStatus)\r\n  - if the response contains RequestStatus = WAITING, you have the request position in queue too\r\n  - if the response contains RequestStatus = PROCESSING, the generation has started\r\n  - if the response contains RequestStatus = DONE, the generation is finished and you got a `downloadId`\r\n  - if the response contains RequestStatus = ERROR, the generation failed\r\n- [download the catalog with the downloadId](#operations-Catalog-GetGeneratedFile)\r\n\r\nCatalogs structure details are available in this [document](help/CatalogsContent.pdf). They are available as [CSV](https://en.wikipedia.org/wiki/Comma-separated_values) (open properly CSV files with Excel with [these instructions](help/ExcelCsvImport.pdf)), [JSON](https://en.wikipedia.org/wiki/JSON) or [XML](https://en.wikipedia.org/wiki/XML) files, [UTF-8](https://en.wikipedia.org/wiki/UTF-8) encoded and compressed in [ZIP](https://en.wikipedia.org/wiki/Zip_(file_format)) or [LZMA](https://en.wikipedia.org/wiki/Lempel–Ziv–Markov_chain_algorithm) formats.  \r\n\r\n**Nota: Most of the catalogs are generated automatically every morning because they are common to several customers but the Prices catalogs are specific to each one and generated on demand. This is the reason why the Prices catalogs' generation seems longer than the others.**\r\n\r\n### Inventory\r\nThe stock catalogs are generated once a day so their stock is only accurate when they are generated. To check the current stock during the day. You can use these calls:\r\n- [StockLevel](#operations-Inventory-GetStockLevel) to get a single product stock level (ex: InStock, Short, OutOfStock)\r\n- [StockValue](#operations-Inventory-GetStockValue) to get a single product stock value\r\n- [ProductsInfo](#operations-Inventory-GetProductsInfo) to know if you can order a certain amount of several products (2 of one and 6 of another, for example)\r\n\r\n### Orders\r\nDepending on your preferences, you can **create carts, or orders** directly with eBihr: details are available [here](help/OrderingUserManual.pdf).\r\n\r\n<a href=\"/\">Back to welcome page</a>",
      "contact": {
        "name": "eBihr support",
        "email": "ebihr-support@mybihr.com"
      },
      "version": "2.1"
    },
    "paths": {
      "/api/v2.1/Authentication/Token": {
        "post": {
          "tags": [
            "Authentication"
          ],
          "summary": "Gets a temporary access token.",
          "description": "The following input are required:\r\n- username: your Bihr Customer Code\r\n- password: your MacKey\r\n\r\nOnce the access token is obtained, it must be provided in the Header of all the following Web API with this \"key : value\" pattern:\r\n- Authorization: bearer {access_token}\r\n",
          "operationId": "PostToken",
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "required": [
                    "PassWord",
                    "UserName"
                  ],
                  "type": "object",
                  "properties": {
                    "UserName": {
                      "type": "string",
                      "description": "Your Bihr Customer Code"
                    },
                    "PassWord": {
                      "type": "string",
                      "description": "Your MacKey",
                      "format": "password"
                    }
                  }
                },
                "encoding": {
                  "UserName": {
                    "style": "form"
                  },
                  "PassWord": {
                    "style": "form"
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "if the authentication succeeded",
              "content": {
                "text/plain": {
                  "schema": {
                    "$ref": "#/components/schemas/AuthenticationResponse"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AuthenticationResponse"
                  }
                },
                "text/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AuthenticationResponse"
                  }
                },
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/AuthenticationResponse"
                  }
                },
                "text/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/AuthenticationResponse"
                  }
                }
              }
            },
            "400": {
              "description": "if the authentication failed",
              "content": {
                "text/plain": {
                  "schema": {
                    "$ref": "#/components/schemas/AuthenticationErrorResponse"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AuthenticationErrorResponse"
                  }
                },
                "text/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AuthenticationErrorResponse"
                  }
                },
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/AuthenticationErrorResponse"
                  }
                },
                "text/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/AuthenticationErrorResponse"
                  }
                }
              }
            },
            "429": {
              "description": "if the API call quota exceeded"
            },
            "500": {
              "description": "if the server encountered an error"
            }
          }
        }
      },
      "/api/v2.1/Catalog/EssentialHardPart": {
        "post": {
          "tags": [
            "Catalog"
          ],
          "summary": "Requests a full hard part catalog generation.",
          "description": "The returned catalog is a zipped CSV file.",
          "operationId": "PostEssentialHardPartRequest",
          "responses": {
            "200": {
              "description": "the already generated catalog"
            },
            "202": {
              "description": "the catalog generation ticket ID if the catalog was not generated yet",
              "content": {
                "text/plain": {
                  "schema": {
                    "$ref": "#/components/schemas/CatalogGenerationRequestDataContract"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CatalogGenerationRequestDataContract"
                  }
                },
                "text/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CatalogGenerationRequestDataContract"
                  }
                },
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/CatalogGenerationRequestDataContract"
                  }
                },
                "text/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/CatalogGenerationRequestDataContract"
                  }
                }
              }
            },
            "429": {
              "description": "if the API call quota exceeded"
            },
            "500": {
              "description": "if the server encountered an error"
            },
            "401": {
              "description": "if the Bearer token is invalid or expired"
            },
            "403": {
              "description": "if the caller does not have authorization for the operation requested"
            }
          },
          "security": [
            {
              "Bearer": [ ]
            }
          ]
        }
      },
      "/api/v2.1/Catalog/EssentialRiderGear": {
        "post": {
          "tags": [
            "Catalog"
          ],
          "summary": "Requests a full rider gear catalog generation.",
          "description": "The returned catalog is a zipped CSV file.",
          "operationId": "PostEssentialRiderGearRequest",
          "responses": {
            "200": {
              "description": "the already generated catalog"
            },
            "202": {
              "description": "the catalog generation ticket ID if the catalog was not generated yet",
              "content": {
                "text/plain": {
                  "schema": {
                    "$ref": "#/components/schemas/CatalogGenerationRequestDataContract"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CatalogGenerationRequestDataContract"
                  }
                },
                "text/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CatalogGenerationRequestDataContract"
                  }
                },
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/CatalogGenerationRequestDataContract"
                  }
                },
                "text/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/CatalogGenerationRequestDataContract"
                  }
                }
              }
            },
            "429": {
              "description": "if the API call quota exceeded"
            },
            "500": {
              "description": "if the server encountered an error"
            },
            "401": {
              "description": "if the Bearer token is invalid or expired"
            },
            "403": {
              "description": "if the caller does not have authorization for the operation requested"
            }
          },
          "security": [
            {
              "Bearer": [ ]
            }
          ]
        }
      },
      "/api/v2.1/Catalog/CatalogGenerationHistory": {
        "get": {
          "tags": [
            "Catalog"
          ],
          "summary": "Requests the catalog generation list of the day.",
          "operationId": "GetCatalogGenerationHistory",
          "responses": {
            "200": {
              "description": "the catalog generation list",
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CatalogGenerationDetail"
                    },
                    "xml": {
                      "name": "ArrayOfCatalogGenerationDetail",
                      "wrapped": true
                    }
                  }
                },
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CatalogGenerationDetail"
                    },
                    "xml": {
                      "name": "ArrayOfCatalogGenerationDetail",
                      "wrapped": true
                    }
                  }
                },
                "text/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CatalogGenerationDetail"
                    },
                    "xml": {
                      "name": "ArrayOfCatalogGenerationDetail",
                      "wrapped": true
                    }
                  }
                },
                "application/xml": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CatalogGenerationDetail"
                    },
                    "xml": {
                      "name": "ArrayOfCatalogGenerationDetail",
                      "wrapped": true
                    }
                  }
                },
                "text/xml": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CatalogGenerationDetail"
                    },
                    "xml": {
                      "name": "ArrayOfCatalogGenerationDetail",
                      "wrapped": true
                    }
                  }
                }
              }
            },
            "429": {
              "description": "if the API call quota exceeded"
            },
            "500": {
              "description": "if the server encountered an error"
            },
            "401": {
              "description": "if the Bearer token is invalid or expired"
            },
            "403": {
              "description": "if the caller does not have authorization for the operation requested"
            }
          },
          "security": [
            {
              "Bearer": [ ]
            }
          ]
        }
      },
      "/api/v2.1/Catalog/{compressionType}/{serializationType}/{catalogType}/{catalogCompletion}": {
        "post": {
          "tags": [
            "Catalog"
          ],
          "summary": "Requests a catalog generation.",
          "description": "For the images catalog, the image names must be prefixed by the Product Root URL (provided by the Catalog/ProductsImagesRootUrl API) and suffixed by \".jpg\" to get the full image URL.",
          "operationId": "PostRequest",
          "parameters": [
            {
              "name": "compressionType",
              "in": "path",
              "description": "LZMA for 7z file, ZIP for zip file",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/CompressionType"
              }
            },
            {
              "name": "serializationType",
              "in": "path",
              "description": "CSV for Comma Separated Values, JSON for JavaScript Object Notation, XML for Extensible Markup Language",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/SerializationType"
              }
            },
            {
              "name": "catalogType",
              "in": "path",
              "description": "Attributes, ExtendedReferences (References with more information), HardPart (only), Images, Prices, References, RiderGear (only), Stocks",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/CatalogType"
              }
            },
            {
              "name": "catalogCompletion",
              "in": "path",
              "description": "Differential (products added since the last request during the last 60 days, automatically set to Full otherwise), Full",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/CatalogCompletion"
              }
            }
          ],
          "responses": {
            "202": {
              "description": "the catalog generation ticket ID",
              "content": {
                "text/plain": {
                  "schema": {
                    "$ref": "#/components/schemas/CatalogGenerationRequestDataContract"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CatalogGenerationRequestDataContract"
                  }
                },
                "text/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CatalogGenerationRequestDataContract"
                  }
                },
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/CatalogGenerationRequestDataContract"
                  }
                },
                "text/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/CatalogGenerationRequestDataContract"
                  }
                }
              }
            },
            "501": {
              "description": "if the required configuration cannot be realised"
            },
            "429": {
              "description": "if the API call quota exceeded"
            },
            "500": {
              "description": "if the server encountered an error"
            },
            "401": {
              "description": "if the Bearer token is invalid or expired"
            },
            "403": {
              "description": "if the caller does not have authorization for the operation requested"
            }
          },
          "security": [
            {
              "Bearer": [ ]
            }
          ]
        }
      },
      "/api/v2.1/Catalog/GenerationStatus": {
        "get": {
          "tags": [
            "Catalog"
          ],
          "summary": "Returns the generation status. Maximum 1 call per second.",
          "operationId": "GetGenerationStatus",
          "parameters": [
            {
              "name": "ticketId",
              "in": "query",
              "description": "the generation ticket ID",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "the catalog generation status",
              "content": {
                "text/plain": {
                  "schema": {
                    "$ref": "#/components/schemas/CatalogGenerationResponseDataContract"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CatalogGenerationResponseDataContract"
                  }
                },
                "text/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CatalogGenerationResponseDataContract"
                  }
                },
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/CatalogGenerationResponseDataContract"
                  }
                },
                "text/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/CatalogGenerationResponseDataContract"
                  }
                }
              }
            },
            "429": {
              "description": "if the API call quota exceeded"
            },
            "500": {
              "description": "if the server encountered an error"
            },
            "401": {
              "description": "if the Bearer token is invalid or expired"
            },
            "403": {
              "description": "if the caller does not have authorization for the operation requested"
            }
          },
          "security": [
            {
              "Bearer": [ ]
            }
          ]
        }
      },
      "/api/v2.1/Catalog/ProductsImagesRootUrl": {
        "get": {
          "tags": [
            "Catalog"
          ],
          "summary": "Returns the product pictures root URL.",
          "description": "This root URL is to be concatenated with the product images URL provided in the corresponding catalog if needed.",
          "operationId": "GetProductsImagesRootUrl",
          "responses": {
            "200": {
              "description": "the root URL to concatenate with the product images URL provided in the corresponding catalog",
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "string"
                  }
                },
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                },
                "text/json": {
                  "schema": {
                    "type": "string"
                  }
                },
                "application/xml": {
                  "schema": {
                    "type": "string"
                  }
                },
                "text/xml": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            },
            "429": {
              "description": "if the API call quota exceeded"
            },
            "500": {
              "description": "if the server encountered an error"
            },
            "401": {
              "description": "if the Bearer token is invalid or expired"
            },
            "403": {
              "description": "if the caller does not have authorization for the operation requested"
            }
          },
          "security": [
            {
              "Bearer": [ ]
            }
          ]
        }
      },
      "/api/v2.1/Catalog/BrandImageRootUrl": {
        "get": {
          "tags": [
            "Catalog"
          ],
          "summary": "Returns the brands root URL.",
          "description": "This root URL has to be concatenated with the brand images provided by the Catalog/BrandImageUrl API.",
          "operationId": "GetBrandImageRootUrl",
          "responses": {
            "200": {
              "description": "the root URL to concatenate with the brand images URL provided by the Catalog/BrandImageUrl API.",
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "string"
                  }
                },
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                },
                "text/json": {
                  "schema": {
                    "type": "string"
                  }
                },
                "application/xml": {
                  "schema": {
                    "type": "string"
                  }
                },
                "text/xml": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            },
            "429": {
              "description": "if the API call quota exceeded"
            },
            "500": {
              "description": "if the server encountered an error"
            },
            "401": {
              "description": "if the Bearer token is invalid or expired"
            },
            "403": {
              "description": "if the caller does not have authorization for the operation requested"
            }
          },
          "security": [
            {
              "Bearer": [ ]
            }
          ]
        }
      },
      "/api/v2.1/Catalog/BrandImageUrl": {
        "get": {
          "tags": [
            "Catalog"
          ],
          "summary": "Returns the image URL of the requested brand.",
          "operationId": "GetBrandImageUrl",
          "parameters": [
            {
              "name": "brandId",
              "in": "query",
              "description": "the brand ID",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "the brand image URL",
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "string"
                  }
                },
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                },
                "text/json": {
                  "schema": {
                    "type": "string"
                  }
                },
                "application/xml": {
                  "schema": {
                    "type": "string"
                  }
                },
                "text/xml": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            },
            "429": {
              "description": "if the API call quota exceeded"
            },
            "500": {
              "description": "if the server encountered an error"
            },
            "401": {
              "description": "if the Bearer token is invalid or expired"
            },
            "403": {
              "description": "if the caller does not have authorization for the operation requested"
            }
          },
          "security": [
            {
              "Bearer": [ ]
            }
          ]
        }
      },
      "/api/v2.1/Catalog/GeneratedFile": {
        "get": {
          "tags": [
            "Catalog"
          ],
          "summary": "Downloads the file containing the catalog.",
          "operationId": "GetGeneratedFile",
          "parameters": [
            {
              "name": "downloadId",
              "in": "query",
              "description": "the download ID given by the status request",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "the generated catalog file"
            },
            "429": {
              "description": "if the API call quota exceeded"
            },
            "500": {
              "description": "if the server encountered an error"
            },
            "401": {
              "description": "if the Bearer token is invalid or expired"
            },
            "403": {
              "description": "if the caller does not have authorization for the operation requested"
            }
          },
          "security": [
            {
              "Bearer": [ ]
            }
          ]
        }
      },
      "/api/v2.1/Inventory/StockLevel": {
        "get": {
          "tags": [
            "Inventory"
          ],
          "summary": "Checks the availability of a given product.",
          "description": "The value is given at the query time.",
          "operationId": "GetStockLevel",
          "parameters": [
            {
              "name": "productCode",
              "in": "query",
              "description": "the Bihr part number",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "a string indicating the availability of the product (InStock, Short, OutOfStock)",
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "string"
                  }
                },
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                },
                "text/json": {
                  "schema": {
                    "type": "string"
                  }
                },
                "application/xml": {
                  "schema": {
                    "type": "string"
                  }
                },
                "text/xml": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            },
            "404": {
              "description": "if the part number is not found",
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "string"
                  }
                },
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                },
                "text/json": {
                  "schema": {
                    "type": "string"
                  }
                },
                "application/xml": {
                  "schema": {
                    "type": "string"
                  }
                },
                "text/xml": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            },
            "429": {
              "description": "if the API call quota exceeded"
            },
            "500": {
              "description": "if the server encountered an error"
            },
            "401": {
              "description": "if the Bearer token is invalid or expired"
            },
            "403": {
              "description": "if the caller does not have authorization for the operation requested"
            }
          },
          "security": [
            {
              "Bearer": [ ]
            }
          ]
        }
      },
      "/api/v2.1/Inventory/StockValue": {
        "get": {
          "tags": [
            "Inventory"
          ],
          "summary": "Checks the stock value of a given product.",
          "description": "The value is given at the query time.",
          "operationId": "GetStockValue",
          "parameters": [
            {
              "name": "productCode",
              "in": "query",
              "description": "the Bihr part number",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "the current stock value of the product",
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "integer",
                    "format": "int32"
                  }
                },
                "application/json": {
                  "schema": {
                    "type": "integer",
                    "format": "int32"
                  }
                },
                "text/json": {
                  "schema": {
                    "type": "integer",
                    "format": "int32"
                  }
                },
                "application/xml": {
                  "schema": {
                    "type": "integer",
                    "format": "int32"
                  }
                },
                "text/xml": {
                  "schema": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            },
            "404": {
              "description": "if the part number is not found",
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "string"
                  }
                },
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                },
                "text/json": {
                  "schema": {
                    "type": "string"
                  }
                },
                "application/xml": {
                  "schema": {
                    "type": "string"
                  }
                },
                "text/xml": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            },
            "429": {
              "description": "if the API call quota exceeded"
            },
            "500": {
              "description": "if the server encountered an error"
            },
            "401": {
              "description": "if the Bearer token is invalid or expired"
            },
            "403": {
              "description": "if the caller does not have authorization for the operation requested"
            }
          },
          "security": [
            {
              "Bearer": [ ]
            }
          ]
        }
      },
      "/api/v2.1/Inventory/ProductsInfo": {
        "post": {
          "tags": [
            "Inventory"
          ],
          "summary": "Returns a list of products and their availability.",
          "operationId": "GetProductsInfo",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductInventoryRequest"
                  },
                  "xml": {
                    "name": "ArrayOfProductInventoryRequest",
                    "wrapped": true
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductInventoryRequest"
                  },
                  "xml": {
                    "name": "ArrayOfProductInventoryRequest",
                    "wrapped": true
                  }
                }
              },
              "application/*+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductInventoryRequest"
                  },
                  "xml": {
                    "name": "ArrayOfProductInventoryRequest",
                    "wrapped": true
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductInventoryRequest"
                  },
                  "xml": {
                    "name": "ArrayOfProductInventoryRequest",
                    "wrapped": true
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductInventoryRequest"
                  },
                  "xml": {
                    "name": "ArrayOfProductInventoryRequest",
                    "wrapped": true
                  }
                }
              },
              "application/*+xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductInventoryRequest"
                  },
                  "xml": {
                    "name": "ArrayOfProductInventoryRequest",
                    "wrapped": true
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "the list of requested Bihr part numbers and their availability (true/false)",
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ProductInventoryItem"
                    },
                    "xml": {
                      "name": "ArrayOfProductInventoryItem",
                      "wrapped": true
                    }
                  }
                },
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ProductInventoryItem"
                    },
                    "xml": {
                      "name": "ArrayOfProductInventoryItem",
                      "wrapped": true
                    }
                  }
                },
                "text/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ProductInventoryItem"
                    },
                    "xml": {
                      "name": "ArrayOfProductInventoryItem",
                      "wrapped": true
                    }
                  }
                },
                "application/xml": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ProductInventoryItem"
                    },
                    "xml": {
                      "name": "ArrayOfProductInventoryItem",
                      "wrapped": true
                    }
                  }
                },
                "text/xml": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ProductInventoryItem"
                    },
                    "xml": {
                      "name": "ArrayOfProductInventoryItem",
                      "wrapped": true
                    }
                  }
                }
              }
            },
            "429": {
              "description": "if the API call quota exceeded"
            },
            "500": {
              "description": "if the server encountered an error"
            },
            "401": {
              "description": "if the Bearer token is invalid or expired"
            },
            "403": {
              "description": "if the caller does not have authorization for the operation requested"
            }
          },
          "security": [
            {
              "Bearer": [ ]
            }
          ]
        }
      },
      "/api/v2.1/Order/Request": {
        "post": {
          "tags": [
            "Order"
          ],
          "summary": "Requests an order generation.",
          "operationId": "PostCreationRequest",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCreationRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCreationRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCreationRequest"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCreationRequest"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCreationRequest"
                }
              },
              "application/*+xml": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCreationRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "the order generation ticket ID",
              "content": {
                "text/plain": {
                  "schema": {
                    "$ref": "#/components/schemas/OrderRequestDataContract"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrderRequestDataContract"
                  }
                },
                "text/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrderRequestDataContract"
                  }
                },
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/OrderRequestDataContract"
                  }
                },
                "text/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/OrderRequestDataContract"
                  }
                }
              }
            },
            "400": {
              "description": "if a problem is detected in the given data"
            },
            "429": {
              "description": "if the API call quota exceeded"
            },
            "500": {
              "description": "if the server encountered an error"
            },
            "401": {
              "description": "if the Bearer token is invalid or expired"
            },
            "403": {
              "description": "if the caller does not have authorization for the operation requested"
            }
          },
          "security": [
            {
              "Bearer": [ ]
            }
          ]
        }
      },
      "/api/v2.1/Order/GenerationStatus": {
        "get": {
          "tags": [
            "Order"
          ],
          "summary": "Returns the generation status. Maximum 1 call per second.",
          "operationId": "GetStatus",
          "parameters": [
            {
              "name": "ticketId",
              "in": "query",
              "description": "the order generation ticket ID",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "the order generation status",
              "content": {
                "text/plain": {
                  "schema": {
                    "$ref": "#/components/schemas/OrderResponseDataContract"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrderResponseDataContract"
                  }
                },
                "text/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrderResponseDataContract"
                  }
                },
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/OrderResponseDataContract"
                  }
                },
                "text/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/OrderResponseDataContract"
                  }
                }
              }
            },
            "429": {
              "description": "if the API call quota exceeded"
            },
            "500": {
              "description": "if the server encountered an error"
            },
            "401": {
              "description": "if the Bearer token is invalid or expired"
            },
            "403": {
              "description": "if the caller does not have authorization for the operation requested"
            }
          },
          "security": [
            {
              "Bearer": [ ]
            }
          ]
        }
      },
      "/api/v2.1/Order/Data": {
        "get": {
          "tags": [
            "Order"
          ],
          "summary": "Returns the data of a given order.",
          "operationId": "GetData",
          "parameters": [
            {
              "name": "orderId",
              "in": "query",
              "description": "the order ID",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "the order data",
              "content": {
                "text/plain": {
                  "schema": {
                    "$ref": "#/components/schemas/OrderStatusResult"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrderStatusResult"
                  }
                },
                "text/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrderStatusResult"
                  }
                },
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/OrderStatusResult"
                  }
                },
                "text/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/OrderStatusResult"
                  }
                }
              }
            },
            "429": {
              "description": "if the API call quota exceeded"
            },
            "500": {
              "description": "if the server encountered an error"
            },
            "401": {
              "description": "if the Bearer token is invalid or expired"
            },
            "403": {
              "description": "if the caller does not have authorization for the operation requested"
            }
          },
          "security": [
            {
              "Bearer": [ ]
            }
          ]
        }
      }
    },
    "components": {
      "schemas": {
        "AddressDataContract": {
          "required": [
            "City",
            "Country",
            "Line1",
            "Name",
            "ZipCode"
          ],
          "type": "object",
          "properties": {
            "Name": {
              "minLength": 1,
              "type": "string",
              "description": "The address name",
              "example": "Not used currently"
            },
            "Line1": {
              "minLength": 1,
              "type": "string",
              "description": "The first address line",
              "example": "Not used currently"
            },
            "Line2": {
              "type": "string",
              "description": "The second address line",
              "nullable": true,
              "example": "Not used currently"
            },
            "ZipCode": {
              "minLength": 1,
              "type": "string",
              "description": "The ZIP code",
              "example": "Not used currently"
            },
            "City": {
              "minLength": 1,
              "type": "string",
              "description": "The city",
              "example": "Not used currently"
            },
            "Country": {
              "minLength": 1,
              "type": "string",
              "description": "The ISO 3166 country code",
              "example": "Not used currently"
            }
          },
          "additionalProperties": false,
          "xml": {
            "name": "AddressDataContract"
          }
        },
        "AuthenticationErrorResponse": {
          "type": "object",
          "properties": {
            "error": {
              "type": "string",
              "description": "The error type",
              "nullable": true,
              "example": "invalid_grant"
            },
            "error_description": {
              "type": "string",
              "description": "The error description",
              "nullable": true,
              "example": "The user name or password is incorrect"
            }
          },
          "additionalProperties": false,
          "xml": {
            "name": "AuthenticationErrorResponse"
          }
        },
        "AuthenticationResponse": {
          "type": "object",
          "properties": {
            "access_token": {
              "type": "string",
              "description": "The token to reuse",
              "nullable": true,
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6IkJSTSIsInN1YiI6IkJSTSIsInJvbGUiOlsiTWFuYWdlciIsIlN1cGVydmlzb3IiXSwiaXNzIjoiaHR0cHM6Ly9hcGl0ZXN0LmJpaHIubmV0OjgwNDYvIiwiYXVkIjoiODI3NGQ2MzAxMDI3NDU1N2I0ZDEzYWQxNGY1NGZmM2YiLCJleHAiOjE1NjI1OTM5MjgsIm5iZiI6MTU2MjU5MjEyOH0.I0LDvuNwUT637wm-v2XfQi6sVkNfbN33pxvKHVCwqCY"
            },
            "token_type": {
              "type": "string",
              "description": "The type of token",
              "nullable": true,
              "example": "bearer"
            },
            "expires_in": {
              "type": "string",
              "description": "The duration before expiration in seconds",
              "nullable": true,
              "example": "1799"
            }
          },
          "additionalProperties": false,
          "xml": {
            "name": "AuthenticationResponse"
          }
        },
        "CatalogCompletion": {
          "enum": [
            "Differential",
            "Full"
          ],
          "type": "string"
        },
        "CatalogGenerationDetail": {
          "type": "object",
          "properties": {
            "CreationDateTime": {
              "type": "string",
              "nullable": true
            },
            "CatalogCompletion": {
              "type": "string",
              "nullable": true
            },
            "CatalogType": {
              "type": "string",
              "nullable": true
            },
            "SerializationType": {
              "type": "string",
              "nullable": true
            },
            "CompressionType": {
              "type": "string",
              "nullable": true
            },
            "GenerationStatus": {
              "type": "string",
              "nullable": true
            },
            "TicketId": {
              "type": "string",
              "nullable": true
            },
            "DownloadId": {
              "type": "string",
              "nullable": true
            }
          },
          "additionalProperties": false,
          "xml": {
            "name": "CatalogGenerationDetail"
          }
        },
        "CatalogGenerationRequestDataContract": {
          "type": "object",
          "properties": {
            "TicketId": {
              "type": "string",
              "description": "The generation ticket Id.",
              "nullable": true,
              "example": "7f62d70ed12d4178a893bd1795a532d8"
            },
            "ResultCode": {
              "type": "string",
              "description": "The generation result code.",
              "nullable": true,
              "example": "OK"
            }
          },
          "additionalProperties": false,
          "xml": {
            "name": "CatalogGenerationRequestDataContract"
          }
        },
        "CatalogGenerationResponseDataContract": {
          "type": "object",
          "properties": {
            "PositionInQueue": {
              "type": "integer",
              "description": "The generation position in queue.",
              "format": "int32",
              "nullable": true,
              "example": 0
            },
            "RequestStatus": {
              "type": "string",
              "description": "The request status.",
              "nullable": true,
              "example": "DONE"
            },
            "DownloadId": {
              "type": "string",
              "description": "The download Id.",
              "nullable": true,
              "example": "bd502cb7f5914ab954b108d6fe05ea9b"
            }
          },
          "additionalProperties": false,
          "xml": {
            "name": "CatalogGenerationResponseDataContract"
          }
        },
        "CatalogType": {
          "enum": [
            "Attributes",
            "ExtendedReferences",
            "HardPart",
            "Images",
            "Prices",
            "References",
            "RiderGear",
            "Stocks"
          ],
          "type": "string"
        },
        "CompressionType": {
          "enum": [
            "LZMA",
            "ZIP"
          ],
          "type": "string"
        },
        "DeliveryOrder": {
          "type": "object",
          "properties": {
            "Packages": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Package"
              },
              "description": "The packages",
              "nullable": true,
              "xml": {
                "name": "Packages",
                "wrapped": true
              }
            },
            "DeliveryOrderLines": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DeliveryOrderLine"
              },
              "description": "The delivery order lines",
              "nullable": true,
              "xml": {
                "name": "DeliveryOrderLines",
                "wrapped": true
              }
            },
            "ShippingAddress": {
              "$ref": "#/components/schemas/AddressDataContract"
            },
            "Weight": {
              "type": "number",
              "description": "The weight in g",
              "format": "double",
              "nullable": true,
              "example": 4060
            },
            "Volume": {
              "type": "number",
              "description": "The volume in dm³ (1 dm³ = 1L)",
              "format": "double",
              "nullable": true,
              "example": 39451
            },
            "ExclVatPrice": {
              "type": "number",
              "description": "The excluded VAT price",
              "format": "float",
              "nullable": true,
              "example": 100
            },
            "InclVatPrice": {
              "type": "number",
              "description": "The included VAT price",
              "format": "float",
              "nullable": true,
              "example": 120
            },
            "CreationDate": {
              "type": "string",
              "description": "The creation date",
              "format": "date-time",
              "nullable": true,
              "example": "2019-02-18T16:31:21"
            },
            "DispatchDate": {
              "type": "string",
              "description": "The dispatch date",
              "format": "date-time",
              "nullable": true,
              "example": "2019-02-18T00:00:00"
            },
            "TransporterId": {
              "type": "string",
              "description": "The transporter ID",
              "nullable": true,
              "example": "CRNPT12"
            },
            "Status": {
              "type": "integer",
              "description": "The status",
              "format": "int32",
              "nullable": true,
              "example": 10
            }
          },
          "additionalProperties": false,
          "xml": {
            "name": "DeliveryOrder"
          }
        },
        "DeliveryOrderLine": {
          "type": "object",
          "properties": {
            "OrderedQuantity": {
              "type": "integer",
              "description": "The ordered quantity",
              "format": "int32",
              "nullable": true,
              "example": 45
            },
            "DisplayedQuantity": {
              "type": "integer",
              "description": "The displayed quantity",
              "format": "int32",
              "nullable": true,
              "example": 18
            },
            "DispatchedQuantity": {
              "type": "integer",
              "description": "The dispatched quantity",
              "format": "int32",
              "nullable": true,
              "example": 23
            },
            "ExclVatPrice": {
              "type": "number",
              "description": "The excluded VAT price",
              "format": "float",
              "nullable": true,
              "example": 100
            },
            "InclVatPrice": {
              "type": "number",
              "description": "The included VAT price",
              "format": "float",
              "nullable": true,
              "example": 120
            },
            "CustomerReference": {
              "type": "string",
              "description": "The customer reference",
              "nullable": true,
              "example": "CustomerReference"
            },
            "ProductId": {
              "type": "string",
              "description": "The part number",
              "nullable": true,
              "example": "511632"
            },
            "ProductName": {
              "type": "string",
              "description": "The product name",
              "nullable": true,
              "example": "ProductName"
            },
            "Id": {
              "type": "string",
              "description": "The ID",
              "nullable": true,
              "example": "Id"
            },
            "BihrOrderId": {
              "type": "string",
              "description": "The Bihr order ID",
              "nullable": true,
              "example": "BihrOrderId"
            }
          },
          "additionalProperties": false,
          "xml": {
            "name": "DeliveryOrderLine"
          }
        },
        "OrderCreationRequest": {
          "required": [
            "Order"
          ],
          "type": "object",
          "properties": {
            "Order": {
              "$ref": "#/components/schemas/OrderDataContract"
            },
            "ShippingAddress": {
              "$ref": "#/components/schemas/AddressDataContract"
            },
            "BackorderManagement": {
              "type": "string",
              "description": "The backOrder management",
              "nullable": true,
              "example": "Not used anymore"
            }
          },
          "additionalProperties": false,
          "xml": {
            "name": "OrderCreationRequest"
          }
        },
        "OrderDataContract": {
          "required": [
            "Lines"
          ],
          "type": "object",
          "properties": {
            "Version": {
              "type": "string",
              "description": "The version of the order",
              "nullable": true,
              "example": "Not used anymore"
            },
            "CustomerId": {
              "type": "string",
              "description": "The customer ID",
              "nullable": true,
              "example": "Not used anymore"
            },
            "CustomerReference": {
              "type": "string",
              "description": "The customer reference",
              "nullable": true,
              "example": "Order for John Doe's motorbike"
            },
            "VendorOrderId": {
              "type": "string",
              "description": "The vendor order ID",
              "nullable": true,
              "example": "Not used anymore"
            },
            "VendorKey": {
              "type": "string",
              "description": "The vendor key",
              "nullable": true,
              "example": "Not used anymore"
            },
            "Lines": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/OrderLineDataContract"
              },
              "description": "The order lines",
              "xml": {
                "name": "Lines",
                "wrapped": true
              }
            },
            "MacKey": {
              "type": "string",
              "description": "The mac key",
              "nullable": true,
              "example": "Not used anymore"
            },
            "HashKey": {
              "type": "string",
              "description": "The hash key used if HashKeyBase64 is empty",
              "format": "byte",
              "nullable": true,
              "example": "Not used anymore"
            },
            "HashKeyBase64": {
              "type": "string",
              "description": "The hash key in Base64 produced from SHA256(CustomerId;VendorOrderId[;line.ProductId;line.Quantity];MacKey)",
              "nullable": true,
              "example": "Not used anymore"
            },
            "IsAutomaticCheckoutActivated": {
              "type": "boolean",
              "description": "Boolean field to specify whether the cart must be transformed into order automatically",
              "nullable": true,
              "example": true
            }
          },
          "additionalProperties": false,
          "xml": {
            "name": "OrderDataContract"
          }
        },
        "OrderLineDataContract": {
          "required": [
            "ProductId",
            "Quantity"
          ],
          "type": "object",
          "properties": {
            "ProductId": {
              "minLength": 1,
              "type": "string",
              "description": "The part number of the product",
              "example": "TPCI07495"
            },
            "Quantity": {
              "type": "integer",
              "description": "The quantity",
              "format": "int32",
              "example": 14
            },
            "ReferenceType": {
              "type": "string",
              "description": "The reference type",
              "nullable": true,
              "example": "Not used anymore"
            },
            "CustomerReference": {
              "type": "string",
              "description": "The customer reference",
              "nullable": true,
              "example": "Brakes for John Doe's motorbike"
            },
            "ReservedQuantity": {
              "type": "integer",
              "description": "The reserved quantity",
              "format": "int32",
              "nullable": true
            }
          },
          "additionalProperties": false,
          "xml": {
            "name": "OrderLineDataContract"
          }
        },
        "OrderRequestDataContract": {
          "type": "object",
          "properties": {
            "ResultCode": {
              "type": "string",
              "description": "The result code",
              "nullable": true
            },
            "TicketId": {
              "type": "string",
              "description": "The ticket ID",
              "nullable": true,
              "example": "0"
            }
          },
          "additionalProperties": false,
          "xml": {
            "name": "OrderRequestDataContract"
          }
        },
        "OrderResponseDataContract": {
          "type": "object",
          "properties": {
            "OrderUrl": {
              "type": "string",
              "description": "The order URL",
              "nullable": true,
              "example": "https://www.mybihr.com/fr/fr/my-account/order/1234567"
            },
            "OrderQueuePosition": {
              "type": "integer",
              "description": "The queue position",
              "format": "int32",
              "nullable": true,
              "example": 2
            },
            "RequestStatus": {
              "type": "string",
              "description": "The status",
              "nullable": true,
              "example": "Cart"
            }
          },
          "additionalProperties": false,
          "xml": {
            "name": "OrderResponseDataContract"
          }
        },
        "OrderStatusResult": {
          "type": "object",
          "properties": {
            "ResultCode": {
              "type": "string",
              "description": "The result code",
              "nullable": true,
              "example": "OK"
            },
            "DeliveryOrders": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DeliveryOrder"
              },
              "description": "The delivery orders",
              "nullable": true,
              "xml": {
                "name": "DeliveryOrders",
                "wrapped": true
              }
            },
            "OrderLines": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/OrderLineDataContract"
              },
              "description": "The order lines",
              "nullable": true,
              "xml": {
                "name": "OrderLines",
                "wrapped": true
              }
            },
            "InternalCustomerId": {
              "type": "string",
              "description": "The internal customer ID",
              "nullable": true,
              "example": "InternalCustomerId"
            },
            "CustomerId": {
              "type": "string",
              "description": "The customer ID",
              "nullable": true,
              "example": "{YourBihrCustomerCode}"
            }
          },
          "additionalProperties": false,
          "xml": {
            "name": "OrderStatusResult"
          }
        },
        "Package": {
          "type": "object",
          "properties": {
            "Waybill": {
              "$ref": "#/components/schemas/Waybill"
            },
            "PackageLines": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PackageLine"
              },
              "description": "The package lines",
              "nullable": true,
              "xml": {
                "name": "PackageLines",
                "wrapped": true
              }
            },
            "ParentPackage": {
              "$ref": "#/components/schemas/Package"
            },
            "Weight": {
              "type": "number",
              "description": "The weight in g",
              "format": "double",
              "nullable": true,
              "example": 4060
            },
            "Volume": {
              "type": "number",
              "description": "The volume in dm³ (1 dm³ = 1L)",
              "format": "double",
              "nullable": true,
              "example": 39451
            },
            "ShippingDate": {
              "type": "string",
              "description": "The shipping date",
              "format": "date-time",
              "nullable": true,
              "example": "2019-02-19T13:02:56"
            }
          },
          "additionalProperties": false,
          "xml": {
            "name": "Package"
          }
        },
        "PackageLine": {
          "type": "object",
          "properties": {
            "ProductId": {
              "type": "string",
              "description": "The part number",
              "nullable": true,
              "example": "48010122"
            },
            "Quantity": {
              "type": "integer",
              "description": "The quantity",
              "format": "int32",
              "nullable": true,
              "example": 15
            },
            "SetId": {
              "type": "string",
              "description": "The set ID",
              "nullable": true,
              "example": "1"
            },
            "UseBeforeDate": {
              "type": "string",
              "description": "The use before date",
              "format": "date-time",
              "nullable": true,
              "example": "0001-01-01T00:00:00"
            },
            "LogisticProductId": {
              "type": "string",
              "description": "The logistic product ID",
              "nullable": true,
              "example": "47000687"
            },
            "DeliveryOrderLineId": {
              "type": "string",
              "description": "The delivery order line ID",
              "nullable": true,
              "example": "24440381"
            }
          },
          "additionalProperties": false,
          "xml": {
            "name": "PackageLine"
          }
        },
        "ProductInventoryItem": {
          "required": [
            "IsAvailable",
            "ProductId"
          ],
          "type": "object",
          "properties": {
            "ProductId": {
              "minLength": 1,
              "type": "string",
              "description": "The part number of the product",
              "example": "TPCI07495"
            },
            "IsAvailable": {
              "type": "boolean",
              "description": "The product availability",
              "example": true
            }
          },
          "additionalProperties": false,
          "xml": {
            "name": "ProductInventoryItem"
          }
        },
        "ProductInventoryRequest": {
          "required": [
            "ProductId",
            "Quantity"
          ],
          "type": "object",
          "properties": {
            "ProductId": {
              "minLength": 1,
              "type": "string",
              "description": "The part number of the product",
              "example": "48010122"
            },
            "Quantity": {
              "type": "integer",
              "description": "The product available quantity",
              "format": "int32",
              "example": 2
            }
          },
          "additionalProperties": false,
          "xml": {
            "name": "ProductInventoryRequest"
          }
        },
        "SerializationType": {
          "enum": [
            "CSV",
            "JSON",
            "XML"
          ],
          "type": "string"
        },
        "Waybill": {
          "type": "object",
          "properties": {
            "Id": {
              "type": "string",
              "description": "The ID",
              "nullable": true,
              "example": "0069690BA208049274248898250G"
            },
            "ReceiverName": {
              "type": "string",
              "description": "The receiver name",
              "nullable": true,
              "example": "ReceiverName"
            },
            "Weight": {
              "type": "number",
              "description": "The weight in g",
              "format": "double",
              "nullable": true,
              "example": 15
            },
            "ShippingDate": {
              "type": "string",
              "description": "The shipping date",
              "format": "date-time",
              "nullable": true,
              "example": "2019-02-18T18:31:28"
            },
            "Timestamp": {
              "type": "string",
              "description": "The timestamp",
              "format": "date-time",
              "nullable": true,
              "example": "2019-04-08T12:40:24"
            },
            "LastTransporterUpdate": {
              "type": "string",
              "description": "The last transport update",
              "format": "date-time",
              "nullable": true,
              "example": "0001-01-01T00:00:00"
            },
            "TransporterInstructions": {
              "type": "string",
              "description": "The transporter instructions",
              "nullable": true,
              "example": "*9H-12H*14H-18H*"
            },
            "TransporterComments": {
              "type": "string",
              "description": "The transporter comments",
              "nullable": true,
              "example": ""
            },
            "TrackingUrl": {
              "type": "string",
              "description": "The tracking URL",
              "nullable": true,
              "example": "http://www.chronopost.fr/expedier/inputLTNumbersNoJahia.do?lang=en_GB&listeNumeros=BA208049274FR"
            },
            "PackNumber": {
              "type": "string",
              "description": "The pack number",
              "nullable": true,
              "example": "27800993"
            },
            "TransporterId": {
              "type": "string",
              "description": "The transporter ID",
              "nullable": true,
              "example": "CRNPT12"
            },
            "Status": {
              "type": "integer",
              "description": "The status",
              "format": "int32",
              "nullable": true,
              "example": 4
            },
            "CustomRef1": {
              "type": "string",
              "description": "The custom Reference 1",
              "nullable": true,
              "example": "BA208049274FR"
            }
          },
          "additionalProperties": false,
          "xml": {
            "name": "Waybill"
          }
        }
      },
      "securitySchemes": {
        "Bearer": {
          "type": "apiKey",
          "description": "JWT Authorization header using the Bearer scheme. Example of value: \"bearer {token}\"",
          "name": "Authorization",
          "in": "header"
        }
      }
    },
    "tags": [
      {
        "name": "Authentication",
        "description": "To get the authorization bearer token."
      },
      {
        "name": "Catalog",
        "description": "To generate and download catalogs, and get images about brands and products. Maximum 10 calls per minute."
      },
      {
        "name": "Inventory",
        "description": "To check product stocks. Maximum 30 calls per minute."
      },
      {
        "name": "Order",
        "description": "To request an order creation, check the creation status, and then get the order data. Maximum 30 calls per minute."
      }
    ]
  }